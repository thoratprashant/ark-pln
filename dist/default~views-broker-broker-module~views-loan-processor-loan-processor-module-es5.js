function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

(window["webpackJsonp"] = window["webpackJsonp"] || []).push([["default~views-broker-broker-module~views-loan-processor-loan-processor-module"], {
  /***/
  "./node_modules/@swimlane/ngx-datatable/__ivy_ngcc__/fesm2015/swimlane-ngx-datatable.js": function node_modulesSwimlaneNgxDatatable__ivy_ngcc__Fesm2015SwimlaneNgxDatatableJs(module, __webpack_exports__, __webpack_require__) {
    "use strict";

    __webpack_require__.r(__webpack_exports__);
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "ClickType", function () {
      return ClickType;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "ColumnChangesService", function () {
      return ColumnChangesService;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "ColumnMode", function () {
      return ColumnMode;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "ContextmenuType", function () {
      return ContextmenuType;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "DataTableBodyCellComponent", function () {
      return DataTableBodyCellComponent;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "DataTableBodyComponent", function () {
      return DataTableBodyComponent;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "DataTableBodyRowComponent", function () {
      return DataTableBodyRowComponent;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "DataTableColumnCellDirective", function () {
      return DataTableColumnCellDirective;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "DataTableColumnCellTreeToggle", function () {
      return DataTableColumnCellTreeToggle;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "DataTableColumnDirective", function () {
      return DataTableColumnDirective;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "DataTableColumnHeaderDirective", function () {
      return DataTableColumnHeaderDirective;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "DataTableFooterComponent", function () {
      return DataTableFooterComponent;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "DataTableFooterTemplateDirective", function () {
      return DataTableFooterTemplateDirective;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "DataTableHeaderCellComponent", function () {
      return DataTableHeaderCellComponent;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "DataTableHeaderComponent", function () {
      return DataTableHeaderComponent;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "DataTablePagerComponent", function () {
      return DataTablePagerComponent;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "DataTableRowWrapperComponent", function () {
      return DataTableRowWrapperComponent;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "DataTableSelectionComponent", function () {
      return DataTableSelectionComponent;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "DataTableSummaryRowComponent", function () {
      return DataTableSummaryRowComponent;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "DatatableComponent", function () {
      return DatatableComponent;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "DatatableFooterDirective", function () {
      return DatatableFooterDirective;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "DatatableGroupHeaderDirective", function () {
      return DatatableGroupHeaderDirective;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "DatatableGroupHeaderTemplateDirective", function () {
      return DatatableGroupHeaderTemplateDirective;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "DatatableRowDetailDirective", function () {
      return DatatableRowDetailDirective;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "DatatableRowDetailTemplateDirective", function () {
      return DatatableRowDetailTemplateDirective;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "DimensionsHelper", function () {
      return DimensionsHelper;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "DraggableDirective", function () {
      return DraggableDirective;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "Keys", function () {
      return Keys;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "LongPressDirective", function () {
      return LongPressDirective;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "NgxDatatableModule", function () {
      return NgxDatatableModule;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "OrderableDirective", function () {
      return OrderableDirective;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "ProgressBarComponent", function () {
      return ProgressBarComponent;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "ResizeableDirective", function () {
      return ResizeableDirective;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "RowHeightCache", function () {
      return RowHeightCache;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "ScrollbarHelper", function () {
      return ScrollbarHelper;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "ScrollerComponent", function () {
      return ScrollerComponent;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "SelectionType", function () {
      return SelectionType;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "SortDirection", function () {
      return SortDirection;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "SortType", function () {
      return SortType;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "VisibilityDirective", function () {
      return VisibilityDirective;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "adjustColumnWidths", function () {
      return adjustColumnWidths;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "camelCase", function () {
      return camelCase;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "columnGroupWidths", function () {
      return columnGroupWidths;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "columnTotalWidth", function () {
      return columnTotalWidth;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "columnsByPin", function () {
      return columnsByPin;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "columnsByPinArr", function () {
      return columnsByPinArr;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "columnsTotalWidth", function () {
      return columnsTotalWidth;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "deCamelCase", function () {
      return deCamelCase;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "deepValueGetter", function () {
      return deepValueGetter;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "elementsFromPoint", function () {
      return elementsFromPoint;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "emptyStringGetter", function () {
      return emptyStringGetter;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "forceFillColumnWidths", function () {
      return forceFillColumnWidths;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "getTotalFlexGrow", function () {
      return getTotalFlexGrow;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "getVendorPrefixedName", function () {
      return getVendorPrefixedName;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "getterForProp", function () {
      return getterForProp;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "groupRowsByParents", function () {
      return groupRowsByParents;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "id", function () {
      return id;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "isNullOrUndefined", function () {
      return isNullOrUndefined;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "nextSortDir", function () {
      return nextSortDir;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "numericIndexGetter", function () {
      return numericIndexGetter;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "optionalGetterForProp", function () {
      return optionalGetterForProp;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "orderByComparator", function () {
      return orderByComparator;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "selectRows", function () {
      return selectRows;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "selectRowsBetween", function () {
      return selectRowsBetween;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "setColumnDefaults", function () {
      return setColumnDefaults;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "shallowValueGetter", function () {
      return shallowValueGetter;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "sortRows", function () {
      return sortRows;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "throttle", function () {
      return throttle;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "throttleable", function () {
      return throttleable;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "translateTemplates", function () {
      return translateTemplates;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "translateXY", function () {
      return translateXY;
    });
    /* harmony import */


    var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
    /*! @angular/core */
    "./node_modules/@angular/core/__ivy_ngcc__/fesm2015/core.js");
    /* harmony import */


    var _angular_common__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
    /*! @angular/common */
    "./node_modules/@angular/common/__ivy_ngcc__/fesm2015/common.js");
    /* harmony import */


    var rxjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
    /*! rxjs */
    "./node_modules/rxjs/_esm2015/index.js");
    /* harmony import */


    var rxjs_operators__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(
    /*! rxjs/operators */
    "./node_modules/rxjs/_esm2015/operators/index.js");
    /* harmony import */


    var tslib__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(
    /*! tslib */
    "./node_modules/tslib/tslib.es6.js");
    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    /**
     * Gets the width of the scrollbar.  Nesc for windows
     * http://stackoverflow.com/a/13382873/888165
     */


    var _c0 = ["*"];

    function DataTableBodyComponent_datatable_progress_2_Template(rf, ctx) {
      if (rf & 1) {
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelement"](0, "datatable-progress");
      }
    }

    function DataTableBodyComponent_datatable_scroller_3_datatable_summary_row_1_Template(rf, ctx) {
      if (rf & 1) {
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelement"](0, "datatable-summary-row", 9);
      }

      if (rf & 2) {
        var ctx_r4 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"](2);

        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("rowHeight", ctx_r4.summaryHeight)("offsetX", ctx_r4.offsetX)("innerWidth", ctx_r4.innerWidth)("rows", ctx_r4.rows)("columns", ctx_r4.columns);
      }
    }

    function DataTableBodyComponent_datatable_scroller_3_datatable_row_wrapper_2_datatable_body_row_1_Template(rf, ctx) {
      if (rf & 1) {
        var _r14 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵgetCurrentView"]();

        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](0, "datatable-body-row", 13);

        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵlistener"]("treeAction", function DataTableBodyComponent_datatable_scroller_3_datatable_row_wrapper_2_datatable_body_row_1_Template_datatable_body_row_treeAction_0_listener() {
          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵrestoreView"](_r14);

          var group_r7 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"]().$implicit;

          var ctx_r12 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"](2);

          return ctx_r12.onTreeAction(group_r7);
        })("activate", function DataTableBodyComponent_datatable_scroller_3_datatable_row_wrapper_2_datatable_body_row_1_Template_datatable_body_row_activate_0_listener($event) {
          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵrestoreView"](_r14);

          var i_r8 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"]().index;

          var ctx_r15 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"](2);

          var _r0 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵreference"](1);

          return _r0.onActivate($event, ctx_r15.indexes.first + i_r8);
        });

        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
      }

      if (rf & 2) {
        var group_r7 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"]().$implicit;

        var ctx_r9 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"](2);

        var _r0 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵreference"](1);

        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("isSelected", _r0.getRowSelected(group_r7))("innerWidth", ctx_r9.innerWidth)("offsetX", ctx_r9.offsetX)("columns", ctx_r9.columns)("rowHeight", ctx_r9.getRowHeight(group_r7))("row", group_r7)("rowIndex", ctx_r9.getRowIndex(group_r7))("expanded", ctx_r9.getRowExpanded(group_r7))("rowClass", ctx_r9.rowClass)("displayCheck", ctx_r9.displayCheck)("treeStatus", group_r7.treeStatus);
      }
    }

    function DataTableBodyComponent_datatable_scroller_3_datatable_row_wrapper_2_ng_template_2_datatable_body_row_0_Template(rf, ctx) {
      if (rf & 1) {
        var _r22 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵgetCurrentView"]();

        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](0, "datatable-body-row", 15);

        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵlistener"]("activate", function DataTableBodyComponent_datatable_scroller_3_datatable_row_wrapper_2_ng_template_2_datatable_body_row_0_Template_datatable_body_row_activate_0_listener($event) {
          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵrestoreView"](_r22);

          var i_r20 = ctx.index;

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"](4);

          var _r0 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵreference"](1);

          return _r0.onActivate($event, i_r20);
        });

        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
      }

      if (rf & 2) {
        var row_r19 = ctx.$implicit;

        var group_r7 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"](2).$implicit;

        var ctx_r18 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"](2);

        var _r0 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵreference"](1);

        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("isSelected", _r0.getRowSelected(row_r19))("innerWidth", ctx_r18.innerWidth)("offsetX", ctx_r18.offsetX)("columns", ctx_r18.columns)("rowHeight", ctx_r18.getRowHeight(row_r19))("row", row_r19)("group", group_r7.value)("rowIndex", ctx_r18.getRowIndex(row_r19))("expanded", ctx_r18.getRowExpanded(row_r19))("rowClass", ctx_r18.rowClass);
      }
    }

    function DataTableBodyComponent_datatable_scroller_3_datatable_row_wrapper_2_ng_template_2_Template(rf, ctx) {
      if (rf & 1) {
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](0, DataTableBodyComponent_datatable_scroller_3_datatable_row_wrapper_2_ng_template_2_datatable_body_row_0_Template, 1, 10, "datatable-body-row", 14);
      }

      if (rf & 2) {
        var group_r7 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"]().$implicit;

        var ctx_r11 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"](2);

        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngForOf", group_r7.value)("ngForTrackBy", ctx_r11.rowTrackingFn);
      }
    }

    function DataTableBodyComponent_datatable_scroller_3_datatable_row_wrapper_2_Template(rf, ctx) {
      if (rf & 1) {
        var _r26 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵgetCurrentView"]();

        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](0, "datatable-row-wrapper", 10);

        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵlistener"]("rowContextmenu", function DataTableBodyComponent_datatable_scroller_3_datatable_row_wrapper_2_Template_datatable_row_wrapper_rowContextmenu_0_listener($event) {
          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵrestoreView"](_r26);

          var ctx_r25 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"](2);

          return ctx_r25.rowContextmenu.emit($event);
        });

        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](1, DataTableBodyComponent_datatable_scroller_3_datatable_row_wrapper_2_datatable_body_row_1_Template, 1, 11, "datatable-body-row", 11);

        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](2, DataTableBodyComponent_datatable_scroller_3_datatable_row_wrapper_2_ng_template_2_Template, 1, 2, "ng-template", null, 12, _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplateRefExtractor"]);

        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
      }

      if (rf & 2) {
        var group_r7 = ctx.$implicit;
        var i_r8 = ctx.index;

        var _r10 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵreference"](3);

        var ctx_r5 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"](2);

        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("groupedRows", ctx_r5.groupedRows)("innerWidth", ctx_r5.innerWidth)("ngStyle", ctx_r5.getRowsStyles(group_r7))("rowDetail", ctx_r5.rowDetail)("groupHeader", ctx_r5.groupHeader)("offsetX", ctx_r5.offsetX)("detailRowHeight", ctx_r5.getDetailRowHeight(group_r7[i_r8], i_r8))("row", group_r7)("expanded", ctx_r5.getRowExpanded(group_r7))("rowIndex", ctx_r5.getRowIndex(group_r7[i_r8]));

        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);

        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngIf", !ctx_r5.groupedRows)("ngIfElse", _r10);
      }
    }

    function DataTableBodyComponent_datatable_scroller_3_datatable_summary_row_3_Template(rf, ctx) {
      if (rf & 1) {
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelement"](0, "datatable-summary-row", 16);
      }

      if (rf & 2) {
        var ctx_r6 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"](2);

        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngStyle", ctx_r6.getBottomSummaryRowStyles())("rowHeight", ctx_r6.summaryHeight)("offsetX", ctx_r6.offsetX)("innerWidth", ctx_r6.innerWidth)("rows", ctx_r6.rows)("columns", ctx_r6.columns);
      }
    }

    function DataTableBodyComponent_datatable_scroller_3_Template(rf, ctx) {
      if (rf & 1) {
        var _r28 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵgetCurrentView"]();

        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](0, "datatable-scroller", 5);

        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵlistener"]("scroll", function DataTableBodyComponent_datatable_scroller_3_Template_datatable_scroller_scroll_0_listener($event) {
          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵrestoreView"](_r28);

          var ctx_r27 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"]();

          return ctx_r27.onBodyScroll($event);
        });

        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](1, DataTableBodyComponent_datatable_scroller_3_datatable_summary_row_1_Template, 1, 5, "datatable-summary-row", 6);

        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](2, DataTableBodyComponent_datatable_scroller_3_datatable_row_wrapper_2_Template, 4, 12, "datatable-row-wrapper", 7);

        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](3, DataTableBodyComponent_datatable_scroller_3_datatable_summary_row_3_Template, 1, 6, "datatable-summary-row", 8);

        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
      }

      if (rf & 2) {
        var ctx_r2 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"]();

        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("scrollbarV", ctx_r2.scrollbarV)("scrollbarH", ctx_r2.scrollbarH)("scrollHeight", ctx_r2.scrollHeight)("scrollWidth", ctx_r2.columnGroupWidths == null ? null : ctx_r2.columnGroupWidths.total);

        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);

        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngIf", ctx_r2.summaryRow && ctx_r2.summaryPosition === "top");

        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);

        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngForOf", ctx_r2.temp)("ngForTrackBy", ctx_r2.rowTrackingFn);

        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);

        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngIf", ctx_r2.summaryRow && ctx_r2.summaryPosition === "bottom");
      }
    }

    function DataTableBodyComponent_div_4_Template(rf, ctx) {
      if (rf & 1) {
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelement"](0, "div", 17);
      }

      if (rf & 2) {
        var ctx_r3 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"]();

        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("innerHTML", ctx_r3.emptyMessage, _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵsanitizeHtml"]);
      }
    }

    function DataTableHeaderComponent_div_1_datatable_header_cell_1_Template(rf, ctx) {
      if (rf & 1) {
        var _r5 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵgetCurrentView"]();

        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](0, "datatable-header-cell", 4);

        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵlistener"]("resize", function DataTableHeaderComponent_div_1_datatable_header_cell_1_Template_datatable_header_cell_resize_0_listener($event) {
          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵrestoreView"](_r5);

          var column_r3 = ctx.$implicit;

          var ctx_r4 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"](2);

          return ctx_r4.onColumnResized($event, column_r3);
        })("longPressStart", function DataTableHeaderComponent_div_1_datatable_header_cell_1_Template_datatable_header_cell_longPressStart_0_listener($event) {
          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵrestoreView"](_r5);

          var ctx_r6 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"](2);

          return ctx_r6.onLongPressStart($event);
        })("longPressEnd", function DataTableHeaderComponent_div_1_datatable_header_cell_1_Template_datatable_header_cell_longPressEnd_0_listener($event) {
          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵrestoreView"](_r5);

          var ctx_r7 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"](2);

          return ctx_r7.onLongPressEnd($event);
        })("sort", function DataTableHeaderComponent_div_1_datatable_header_cell_1_Template_datatable_header_cell_sort_0_listener($event) {
          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵrestoreView"](_r5);

          var ctx_r8 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"](2);

          return ctx_r8.onSort($event);
        })("select", function DataTableHeaderComponent_div_1_datatable_header_cell_1_Template_datatable_header_cell_select_0_listener($event) {
          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵrestoreView"](_r5);

          var ctx_r9 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"](2);

          return ctx_r9.select.emit($event);
        })("columnContextmenu", function DataTableHeaderComponent_div_1_datatable_header_cell_1_Template_datatable_header_cell_columnContextmenu_0_listener($event) {
          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵrestoreView"](_r5);

          var ctx_r10 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"](2);

          return ctx_r10.columnContextmenu.emit($event);
        });

        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
      }

      if (rf & 2) {
        var column_r3 = ctx.$implicit;

        var ctx_r2 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"](2);

        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("resizeEnabled", column_r3.resizeable)("pressModel", column_r3)("pressEnabled", ctx_r2.reorderable && column_r3.draggable)("dragX", ctx_r2.reorderable && column_r3.draggable && column_r3.dragging)("dragY", false)("dragModel", column_r3)("dragEventTarget", ctx_r2.dragEventTarget)("headerHeight", ctx_r2.headerHeight)("isTarget", column_r3.isTarget)("targetMarkerTemplate", ctx_r2.targetMarkerTemplate)("targetMarkerContext", column_r3.targetMarkerContext)("column", column_r3)("sortType", ctx_r2.sortType)("sorts", ctx_r2.sorts)("selectionType", ctx_r2.selectionType)("sortAscendingIcon", ctx_r2.sortAscendingIcon)("sortDescendingIcon", ctx_r2.sortDescendingIcon)("allRowsSelected", ctx_r2.allRowsSelected);
      }
    }

    function DataTableHeaderComponent_div_1_Template(rf, ctx) {
      if (rf & 1) {
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](0, "div", 2);

        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](1, DataTableHeaderComponent_div_1_datatable_header_cell_1_Template, 1, 18, "datatable-header-cell", 3);

        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
      }

      if (rf & 2) {
        var colGroup_r1 = ctx.$implicit;

        var ctx_r0 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"]();

        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵclassMap"]("datatable-row-" + colGroup_r1.type);

        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngStyle", ctx_r0._styleByGroup[colGroup_r1.type]);

        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);

        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngForOf", colGroup_r1.columns)("ngForTrackBy", ctx_r0.columnTrackingFn);
      }
    }

    function DatatableComponent_datatable_header_1_Template(rf, ctx) {
      if (rf & 1) {
        var _r3 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵgetCurrentView"]();

        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](0, "datatable-header", 4);

        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵlistener"]("sort", function DatatableComponent_datatable_header_1_Template_datatable_header_sort_0_listener($event) {
          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵrestoreView"](_r3);

          var ctx_r2 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"]();

          return ctx_r2.onColumnSort($event);
        })("resize", function DatatableComponent_datatable_header_1_Template_datatable_header_resize_0_listener($event) {
          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵrestoreView"](_r3);

          var ctx_r4 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"]();

          return ctx_r4.onColumnResize($event);
        })("reorder", function DatatableComponent_datatable_header_1_Template_datatable_header_reorder_0_listener($event) {
          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵrestoreView"](_r3);

          var ctx_r5 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"]();

          return ctx_r5.onColumnReorder($event);
        })("select", function DatatableComponent_datatable_header_1_Template_datatable_header_select_0_listener($event) {
          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵrestoreView"](_r3);

          var ctx_r6 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"]();

          return ctx_r6.onHeaderSelect($event);
        })("columnContextmenu", function DatatableComponent_datatable_header_1_Template_datatable_header_columnContextmenu_0_listener($event) {
          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵrestoreView"](_r3);

          var ctx_r7 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"]();

          return ctx_r7.onColumnContextmenu($event);
        });

        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵpipe"](1, "async");

        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
      }

      if (rf & 2) {
        var ctx_r0 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"]();

        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("sorts", ctx_r0.sorts)("sortType", ctx_r0.sortType)("scrollbarH", ctx_r0.scrollbarH)("innerWidth", ctx_r0._innerWidth)("offsetX", _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵpipeBind1"](1, 14, ctx_r0._offsetX))("dealsWithGroup", ctx_r0.groupedRows !== undefined)("columns", ctx_r0._internalColumns)("headerHeight", ctx_r0.headerHeight)("reorderable", ctx_r0.reorderable)("targetMarkerTemplate", ctx_r0.targetMarkerTemplate)("sortAscendingIcon", ctx_r0.cssClasses.sortAscending)("sortDescendingIcon", ctx_r0.cssClasses.sortDescending)("allRowsSelected", ctx_r0.allRowsSelected)("selectionType", ctx_r0.selectionType);
      }
    }

    function DatatableComponent_datatable_footer_4_Template(rf, ctx) {
      if (rf & 1) {
        var _r9 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵgetCurrentView"]();

        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](0, "datatable-footer", 5);

        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵlistener"]("page", function DatatableComponent_datatable_footer_4_Template_datatable_footer_page_0_listener($event) {
          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵrestoreView"](_r9);

          var ctx_r8 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"]();

          return ctx_r8.onFooterPage($event);
        });

        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
      }

      if (rf & 2) {
        var ctx_r1 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"]();

        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("rowCount", ctx_r1.rowCount)("pageSize", ctx_r1.pageSize)("offset", ctx_r1.offset)("footerHeight", ctx_r1.footerHeight)("footerTemplate", ctx_r1.footer)("totalMessage", ctx_r1.messages.totalMessage)("pagerLeftArrowIcon", ctx_r1.cssClasses.pagerLeftArrow)("pagerRightArrowIcon", ctx_r1.cssClasses.pagerRightArrow)("pagerPreviousIcon", ctx_r1.cssClasses.pagerPrevious)("selectedCount", ctx_r1.selected.length)("selectedMessage", !!ctx_r1.selectionType && ctx_r1.messages.selectedMessage)("pagerNextIcon", ctx_r1.cssClasses.pagerNext);
      }
    }

    function DataTableHeaderCellComponent_1_ng_template_0_Template(rf, ctx) {}

    function DataTableHeaderCellComponent_1_Template(rf, ctx) {
      if (rf & 1) {
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](0, DataTableHeaderCellComponent_1_ng_template_0_Template, 0, 0, "ng-template", 5);
      }

      if (rf & 2) {
        var ctx_r0 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"]();

        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngTemplateOutlet", ctx_r0.targetMarkerTemplate)("ngTemplateOutletContext", ctx_r0.targetMarkerContext);
      }
    }

    function DataTableHeaderCellComponent_label_2_Template(rf, ctx) {
      if (rf & 1) {
        var _r6 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵgetCurrentView"]();

        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](0, "label", 6);

        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](1, "input", 7);

        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵlistener"]("change", function DataTableHeaderCellComponent_label_2_Template_input_change_1_listener() {
          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵrestoreView"](_r6);

          var ctx_r5 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"]();

          return ctx_r5.select.emit(!ctx_r5.allRowsSelected);
        });

        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
      }

      if (rf & 2) {
        var ctx_r1 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"]();

        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);

        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("checked", ctx_r1.allRowsSelected);
      }
    }

    function DataTableHeaderCellComponent_span_3_Template(rf, ctx) {
      if (rf & 1) {
        var _r8 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵgetCurrentView"]();

        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](0, "span", 8);

        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](1, "span", 9);

        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵlistener"]("click", function DataTableHeaderCellComponent_span_3_Template_span_click_1_listener() {
          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵrestoreView"](_r8);

          var ctx_r7 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"]();

          return ctx_r7.onSort();
        });

        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
      }

      if (rf & 2) {
        var ctx_r2 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"]();

        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);

        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("innerHTML", ctx_r2.name, _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵsanitizeHtml"]);
      }
    }

    function DataTableHeaderCellComponent_4_ng_template_0_Template(rf, ctx) {}

    function DataTableHeaderCellComponent_4_Template(rf, ctx) {
      if (rf & 1) {
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](0, DataTableHeaderCellComponent_4_ng_template_0_Template, 0, 0, "ng-template", 5);
      }

      if (rf & 2) {
        var ctx_r3 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"]();

        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngTemplateOutlet", ctx_r3.column.headerTemplate)("ngTemplateOutletContext", ctx_r3.cellContext);
      }
    }

    function DataTableFooterComponent_1_ng_template_0_Template(rf, ctx) {}

    var _c1 = function _c1(a0, a1, a2, a3, a4) {
      return {
        rowCount: a0,
        pageSize: a1,
        selectedCount: a2,
        curPage: a3,
        offset: a4
      };
    };

    function DataTableFooterComponent_1_Template(rf, ctx) {
      if (rf & 1) {
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](0, DataTableFooterComponent_1_ng_template_0_Template, 0, 0, "ng-template", 4);
      }

      if (rf & 2) {
        var ctx_r0 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"]();

        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngTemplateOutlet", ctx_r0.footerTemplate.template)("ngTemplateOutletContext", _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵpureFunction5"](2, _c1, ctx_r0.rowCount, ctx_r0.pageSize, ctx_r0.selectedCount, ctx_r0.curPage, ctx_r0.offset));
      }
    }

    function DataTableFooterComponent_div_2_span_1_Template(rf, ctx) {
      if (rf & 1) {
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](0, "span");

        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](1);

        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
      }

      if (rf & 2) {
        var ctx_r4 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"](2);

        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);

        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtextInterpolate2"](" ", ctx_r4.selectedCount == null ? null : ctx_r4.selectedCount.toLocaleString(), " ", ctx_r4.selectedMessage, " / ");
      }
    }

    function DataTableFooterComponent_div_2_Template(rf, ctx) {
      if (rf & 1) {
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](0, "div", 5);

        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](1, DataTableFooterComponent_div_2_span_1_Template, 2, 2, "span", 1);

        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](2);

        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
      }

      if (rf & 2) {
        var ctx_r1 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"]();

        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);

        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngIf", ctx_r1.selectedMessage);

        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);

        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtextInterpolate2"](" ", ctx_r1.rowCount == null ? null : ctx_r1.rowCount.toLocaleString(), " ", ctx_r1.totalMessage, " ");
      }
    }

    function DataTableFooterComponent_datatable_pager_3_Template(rf, ctx) {
      if (rf & 1) {
        var _r6 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵgetCurrentView"]();

        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](0, "datatable-pager", 6);

        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵlistener"]("change", function DataTableFooterComponent_datatable_pager_3_Template_datatable_pager_change_0_listener($event) {
          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵrestoreView"](_r6);

          var ctx_r5 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"]();

          return ctx_r5.page.emit($event);
        });

        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
      }

      if (rf & 2) {
        var ctx_r2 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"]();

        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("pagerLeftArrowIcon", ctx_r2.pagerLeftArrowIcon)("pagerRightArrowIcon", ctx_r2.pagerRightArrowIcon)("pagerPreviousIcon", ctx_r2.pagerPreviousIcon)("pagerNextIcon", ctx_r2.pagerNextIcon)("page", ctx_r2.curPage)("size", ctx_r2.pageSize)("count", ctx_r2.rowCount)("hidden", !ctx_r2.isVisible);
      }
    }

    var _c2 = function _c2(a0) {
      return {
        "selected-count": a0
      };
    };

    function DataTablePagerComponent_li_7_Template(rf, ctx) {
      if (rf & 1) {
        var _r3 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵgetCurrentView"]();

        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](0, "li", 6);

        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](1, "a", 7);

        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵlistener"]("click", function DataTablePagerComponent_li_7_Template_a_click_1_listener() {
          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵrestoreView"](_r3);

          var pg_r1 = ctx.$implicit;

          var ctx_r2 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"]();

          return ctx_r2.selectPage(pg_r1.number);
        });

        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](2);

        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
      }

      if (rf & 2) {
        var pg_r1 = ctx.$implicit;

        var ctx_r0 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"]();

        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵclassProp"]("active", pg_r1.number === ctx_r0.page);

        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵattribute"]("aria-label", "page " + pg_r1.number);

        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](2);

        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtextInterpolate1"](" ", pg_r1.text, " ");
      }
    }

    function DataTableBodyRowComponent_div_0_datatable_body_cell_1_Template(rf, ctx) {
      if (rf & 1) {
        var _r7 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵgetCurrentView"]();

        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](0, "datatable-body-cell", 3);

        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵlistener"]("activate", function DataTableBodyRowComponent_div_0_datatable_body_cell_1_Template_datatable_body_cell_activate_0_listener($event) {
          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵrestoreView"](_r7);

          var ii_r5 = ctx.index;

          var ctx_r6 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"](2);

          return ctx_r6.onActivate($event, ii_r5);
        })("treeAction", function DataTableBodyRowComponent_div_0_datatable_body_cell_1_Template_datatable_body_cell_treeAction_0_listener() {
          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵrestoreView"](_r7);

          var ctx_r8 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"](2);

          return ctx_r8.onTreeAction();
        });

        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
      }

      if (rf & 2) {
        var column_r4 = ctx.$implicit;

        var ctx_r3 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"](2);

        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("row", ctx_r3.row)("group", ctx_r3.group)("expanded", ctx_r3.expanded)("isSelected", ctx_r3.isSelected)("rowIndex", ctx_r3.rowIndex)("column", column_r4)("rowHeight", ctx_r3.rowHeight)("displayCheck", ctx_r3.displayCheck)("treeStatus", ctx_r3.treeStatus);
      }
    }

    function DataTableBodyRowComponent_div_0_Template(rf, ctx) {
      if (rf & 1) {
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](0, "div", 1);

        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](1, DataTableBodyRowComponent_div_0_datatable_body_cell_1_Template, 1, 9, "datatable-body-cell", 2);

        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
      }

      if (rf & 2) {
        var colGroup_r1 = ctx.$implicit;

        var ctx_r0 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"]();

        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵclassMapInterpolate1"]("datatable-row-", colGroup_r1.type, " datatable-row-group");

        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngStyle", ctx_r0._groupStyles[colGroup_r1.type]);

        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);

        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngForOf", colGroup_r1.columns)("ngForTrackBy", ctx_r0.columnTrackingFn);
      }
    }

    function DataTableRowWrapperComponent_div_0_1_ng_template_0_Template(rf, ctx) {}

    function DataTableRowWrapperComponent_div_0_1_Template(rf, ctx) {
      if (rf & 1) {
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](0, DataTableRowWrapperComponent_div_0_1_ng_template_0_Template, 0, 0, "ng-template", 4);
      }

      if (rf & 2) {
        var ctx_r3 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"](2);

        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngTemplateOutlet", ctx_r3.groupHeader.template)("ngTemplateOutletContext", ctx_r3.groupContext);
      }
    }

    function DataTableRowWrapperComponent_div_0_Template(rf, ctx) {
      if (rf & 1) {
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](0, "div", 3);

        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](1, DataTableRowWrapperComponent_div_0_1_Template, 1, 2, undefined, 1);

        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
      }

      if (rf & 2) {
        var ctx_r0 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"]();

        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngStyle", ctx_r0.getGroupHeaderStyle());

        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);

        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngIf", ctx_r0.groupHeader && ctx_r0.groupHeader.template);
      }
    }

    function DataTableRowWrapperComponent_1_Template(rf, ctx) {
      if (rf & 1) {
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵprojection"](0, 0, ["*ngIf", "(groupHeader && groupHeader.template && expanded) || (!groupHeader || !groupHeader.template)"]);
      }
    }

    function DataTableRowWrapperComponent_div_2_1_ng_template_0_Template(rf, ctx) {}

    function DataTableRowWrapperComponent_div_2_1_Template(rf, ctx) {
      if (rf & 1) {
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](0, DataTableRowWrapperComponent_div_2_1_ng_template_0_Template, 0, 0, "ng-template", 4);
      }

      if (rf & 2) {
        var ctx_r5 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"](2);

        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngTemplateOutlet", ctx_r5.rowDetail.template)("ngTemplateOutletContext", ctx_r5.rowContext);
      }
    }

    function DataTableRowWrapperComponent_div_2_Template(rf, ctx) {
      if (rf & 1) {
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](0, "div", 5);

        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](1, DataTableRowWrapperComponent_div_2_1_Template, 1, 2, undefined, 1);

        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
      }

      if (rf & 2) {
        var ctx_r2 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"]();

        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵstyleProp"]("height", ctx_r2.detailRowHeight, "px");

        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);

        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngIf", ctx_r2.rowDetail && ctx_r2.rowDetail.template);
      }
    }

    var _c3 = ["cellTemplate"];

    function DataTableBodyCellComponent_label_1_Template(rf, ctx) {
      if (rf & 1) {
        var _r5 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵgetCurrentView"]();

        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](0, "label", 4);

        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](1, "input", 5);

        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵlistener"]("click", function DataTableBodyCellComponent_label_1_Template_input_click_1_listener($event) {
          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵrestoreView"](_r5);

          var ctx_r4 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"]();

          return ctx_r4.onCheckboxChange($event);
        });

        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
      }

      if (rf & 2) {
        var ctx_r0 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"]();

        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);

        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("checked", ctx_r0.isSelected);
      }
    }

    function DataTableBodyCellComponent_ng_container_2_button_1_i_2_Template(rf, ctx) {
      if (rf & 1) {
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelement"](0, "i", 11);
      }
    }

    function DataTableBodyCellComponent_ng_container_2_button_1_i_3_Template(rf, ctx) {
      if (rf & 1) {
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelement"](0, "i", 12);
      }
    }

    function DataTableBodyCellComponent_ng_container_2_button_1_i_4_Template(rf, ctx) {
      if (rf & 1) {
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelement"](0, "i", 13);
      }
    }

    function DataTableBodyCellComponent_ng_container_2_button_1_Template(rf, ctx) {
      if (rf & 1) {
        var _r12 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵgetCurrentView"]();

        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](0, "button", 7);

        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵlistener"]("click", function DataTableBodyCellComponent_ng_container_2_button_1_Template_button_click_0_listener() {
          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵrestoreView"](_r12);

          var ctx_r11 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"](2);

          return ctx_r11.onTreeAction();
        });

        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](1, "span");

        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](2, DataTableBodyCellComponent_ng_container_2_button_1_i_2_Template, 1, 0, "i", 8);

        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](3, DataTableBodyCellComponent_ng_container_2_button_1_i_3_Template, 1, 0, "i", 9);

        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](4, DataTableBodyCellComponent_ng_container_2_button_1_i_4_Template, 1, 0, "i", 10);

        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
      }

      if (rf & 2) {
        var ctx_r6 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"](2);

        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("disabled", ctx_r6.treeStatus === "disabled");

        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](2);

        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngIf", ctx_r6.treeStatus === "loading");

        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);

        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngIf", ctx_r6.treeStatus === "collapsed");

        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);

        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngIf", ctx_r6.treeStatus === "expanded" || ctx_r6.treeStatus === "disabled");
      }
    }

    function DataTableBodyCellComponent_ng_container_2_2_ng_template_0_Template(rf, ctx) {}

    var _c4 = function _c4(a0) {
      return {
        cellContext: a0
      };
    };

    function DataTableBodyCellComponent_ng_container_2_2_Template(rf, ctx) {
      if (rf & 1) {
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](0, DataTableBodyCellComponent_ng_container_2_2_ng_template_0_Template, 0, 0, "ng-template", 14);
      }

      if (rf & 2) {
        var ctx_r7 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"](2);

        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngTemplateOutlet", ctx_r7.column.treeToggleTemplate)("ngTemplateOutletContext", _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵpureFunction1"](2, _c4, ctx_r7.cellContext));
      }
    }

    function DataTableBodyCellComponent_ng_container_2_Template(rf, ctx) {
      if (rf & 1) {
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementContainerStart"](0);

        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](1, DataTableBodyCellComponent_ng_container_2_button_1_Template, 5, 4, "button", 6);

        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](2, DataTableBodyCellComponent_ng_container_2_2_Template, 1, 4, undefined, 2);

        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementContainerEnd"]();
      }

      if (rf & 2) {
        var ctx_r1 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"]();

        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);

        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngIf", !ctx_r1.column.treeToggleTemplate);

        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);

        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngIf", ctx_r1.column.treeToggleTemplate);
      }
    }

    function DataTableBodyCellComponent_span_3_Template(rf, ctx) {
      if (rf & 1) {
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelement"](0, "span", 15);
      }

      if (rf & 2) {
        var ctx_r2 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"]();

        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("title", ctx_r2.sanitizedValue)("innerHTML", ctx_r2.value, _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵsanitizeHtml"]);
      }
    }

    function DataTableBodyCellComponent_4_ng_template_0_Template(rf, ctx) {}

    function DataTableBodyCellComponent_4_Template(rf, ctx) {
      if (rf & 1) {
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](0, DataTableBodyCellComponent_4_ng_template_0_Template, 0, 0, "ng-template", 14, 16, _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplateRefExtractor"]);
      }

      if (rf & 2) {
        var ctx_r3 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"]();

        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngTemplateOutlet", ctx_r3.column.cellTemplate)("ngTemplateOutletContext", ctx_r3.cellContext);
      }
    }

    function DataTableSummaryRowComponent_datatable_body_row_0_Template(rf, ctx) {
      if (rf & 1) {
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelement"](0, "datatable-body-row", 1);
      }

      if (rf & 2) {
        var ctx_r0 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"]();

        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("innerWidth", ctx_r0.innerWidth)("offsetX", ctx_r0.offsetX)("columns", ctx_r0._internalColumns)("rowHeight", ctx_r0.rowHeight)("row", ctx_r0.summaryRow)("rowIndex", 0 - 1);
      }
    }

    var ScrollbarHelper = /*#__PURE__*/function () {
      /**
       * @param {?} document
       */
      function ScrollbarHelper(document) {
        _classCallCheck(this, ScrollbarHelper);

        this.document = document;
        this.width = this.getWidth();
      }
      /**
       * @return {?}
       */


      _createClass(ScrollbarHelper, [{
        key: "getWidth",
        value: function getWidth() {
          /** @type {?} */
          var outer = this.document.createElement('div');
          outer.style.visibility = 'hidden';
          outer.style.width = '100px';
          outer.style.msOverflowStyle = 'scrollbar';
          this.document.body.appendChild(outer);
          /** @type {?} */

          var widthNoScroll = outer.offsetWidth;
          outer.style.overflow = 'scroll';
          /** @type {?} */

          var inner = this.document.createElement('div');
          inner.style.width = '100%';
          outer.appendChild(inner);
          /** @type {?} */

          var widthWithScroll = inner.offsetWidth;
          outer.parentNode.removeChild(outer);
          return widthNoScroll - widthWithScroll;
        }
      }]);

      return ScrollbarHelper;
    }();

    ScrollbarHelper.ɵfac = function ScrollbarHelper_Factory(t) {
      return new (t || ScrollbarHelper)(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵinject"](_angular_common__WEBPACK_IMPORTED_MODULE_1__["DOCUMENT"]));
    };

    ScrollbarHelper.ɵprov = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineInjectable"]({
      token: ScrollbarHelper,
      factory: ScrollbarHelper.ɵfac
    });
    /** @nocollapse */

    ScrollbarHelper.ctorParameters = function () {
      return [{
        type: undefined,
        decorators: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Inject"],
          args: [_angular_common__WEBPACK_IMPORTED_MODULE_1__["DOCUMENT"]]
        }]
      }];
    };

    if (false) {}
    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    /**
     * Gets the width of the scrollbar.  Nesc for windows
     * http://stackoverflow.com/a/13382873/888165
     */


    var DimensionsHelper = /*#__PURE__*/function () {
      function DimensionsHelper() {
        _classCallCheck(this, DimensionsHelper);
      }

      _createClass(DimensionsHelper, [{
        key: "getDimensions",
        value:
        /**
         * @param {?} element
         * @return {?}
         */
        function getDimensions(element) {
          return element.getBoundingClientRect();
        }
      }]);

      return DimensionsHelper;
    }();

    DimensionsHelper.ɵfac = function DimensionsHelper_Factory(t) {
      return new (t || DimensionsHelper)();
    };

    DimensionsHelper.ɵprov = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineInjectable"]({
      token: DimensionsHelper,
      factory: DimensionsHelper.ɵfac
    });
    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    /**
     * service to make DatatableComponent aware of changes to
     * input bindings of DataTableColumnDirective
     */

    var ColumnChangesService = /*#__PURE__*/function () {
      function ColumnChangesService() {
        _classCallCheck(this, ColumnChangesService);

        this.columnInputChanges = new rxjs__WEBPACK_IMPORTED_MODULE_2__["Subject"]();
      }
      /**
       * @return {?}
       */


      _createClass(ColumnChangesService, [{
        key: "columnInputChanges$",
        get: function get() {
          return this.columnInputChanges.asObservable();
        }
        /**
         * @return {?}
         */

      }, {
        key: "onInputChange",
        value: function onInputChange() {
          this.columnInputChanges.next();
        }
      }]);

      return ColumnChangesService;
    }();

    ColumnChangesService.ɵfac = function ColumnChangesService_Factory(t) {
      return new (t || ColumnChangesService)();
    };

    ColumnChangesService.ɵprov = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineInjectable"]({
      token: ColumnChangesService,
      factory: ColumnChangesService.ɵfac
    });

    if (false) {}
    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */


    var DataTableFooterTemplateDirective =
    /**
     * @param {?} template
     */
    function DataTableFooterTemplateDirective(template) {
      _classCallCheck(this, DataTableFooterTemplateDirective);

      this.template = template;
    };

    DataTableFooterTemplateDirective.ɵfac = function DataTableFooterTemplateDirective_Factory(t) {
      return new (t || DataTableFooterTemplateDirective)(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__["TemplateRef"]));
    };

    DataTableFooterTemplateDirective.ɵdir = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineDirective"]({
      type: DataTableFooterTemplateDirective,
      selectors: [["", "ngx-datatable-footer-template", ""]]
    });
    /** @nocollapse */

    DataTableFooterTemplateDirective.ctorParameters = function () {
      return [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["TemplateRef"]
      }];
    };

    if (false) {}
    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    /**
     * Visibility Observer Directive
     *
     * Usage:
     *
     * 		<div
     * 			visibilityObserver
     * 			(visible)="onVisible($event)">
     * 		</div>
     *
     */


    var VisibilityDirective = /*#__PURE__*/function () {
      /**
       * @param {?} element
       * @param {?} zone
       */
      function VisibilityDirective(element, zone) {
        _classCallCheck(this, VisibilityDirective);

        this.element = element;
        this.zone = zone;
        this.isVisible = false;
        this.visible = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
      }
      /**
       * @return {?}
       */


      _createClass(VisibilityDirective, [{
        key: "ngOnInit",
        value: function ngOnInit() {
          this.runCheck();
        }
        /**
         * @return {?}
         */

      }, {
        key: "ngOnDestroy",
        value: function ngOnDestroy() {
          clearTimeout(this.timeout);
        }
        /**
         * @return {?}
         */

      }, {
        key: "onVisibilityChange",
        value: function onVisibilityChange() {
          var _this = this;

          // trigger zone recalc for columns
          this.zone.run(
          /**
          * @return {?}
          */
          function () {
            _this.isVisible = true;

            _this.visible.emit(true);
          });
        }
        /**
         * @return {?}
         */

      }, {
        key: "runCheck",
        value: function runCheck() {
          var _this2 = this;

          /** @type {?} */
          var check =
          /**
          * @return {?}
          */
          function check() {
            // https://davidwalsh.name/offsetheight-visibility
            var _this2$element$native = _this2.element.nativeElement,
                offsetHeight = _this2$element$native.offsetHeight,
                offsetWidth = _this2$element$native.offsetWidth;

            if (offsetHeight && offsetWidth) {
              clearTimeout(_this2.timeout);

              _this2.onVisibilityChange();
            } else {
              clearTimeout(_this2.timeout);

              _this2.zone.runOutsideAngular(
              /**
              * @return {?}
              */
              function () {
                _this2.timeout = setTimeout(
                /**
                * @return {?}
                */
                function () {
                  return check();
                }, 50);
              });
            }
          };

          this.timeout = setTimeout(
          /**
          * @return {?}
          */
          function () {
            return check();
          });
        }
      }]);

      return VisibilityDirective;
    }();

    VisibilityDirective.ɵfac = function VisibilityDirective_Factory(t) {
      return new (t || VisibilityDirective)(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__["ElementRef"]), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__["NgZone"]));
    };

    VisibilityDirective.ɵdir = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineDirective"]({
      type: VisibilityDirective,
      selectors: [["", "visibilityObserver", ""]],
      hostVars: 2,
      hostBindings: function VisibilityDirective_HostBindings(rf, ctx) {
        if (rf & 2) {
          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵclassProp"]("visible", ctx.isVisible);
        }
      },
      outputs: {
        visible: "visible"
      }
    });
    /** @nocollapse */

    VisibilityDirective.ctorParameters = function () {
      return [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ElementRef"]
      }, {
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["NgZone"]
      }];
    };

    VisibilityDirective.propDecorators = {
      isVisible: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["HostBinding"],
        args: ['class.visible']
      }],
      visible: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"]
      }]
    };

    if (false) {}
    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    /**
     * Draggable Directive for Angular2
     *
     * Inspiration:
     *   https://github.com/AngularClass/angular2-examples/blob/master/rx-draggable/directives/draggable.ts
     *   http://stackoverflow.com/questions/35662530/how-to-implement-drag-and-drop-in-angular2
     *
     */


    var DraggableDirective = /*#__PURE__*/function () {
      /**
       * @param {?} element
       */
      function DraggableDirective(element) {
        _classCallCheck(this, DraggableDirective);

        this.dragX = true;
        this.dragY = true;
        this.dragStart = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
        this.dragging = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
        this.dragEnd = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
        this.isDragging = false;
        this.element = element.nativeElement;
      }
      /**
       * @param {?} changes
       * @return {?}
       */


      _createClass(DraggableDirective, [{
        key: "ngOnChanges",
        value: function ngOnChanges(changes) {
          if (changes['dragEventTarget'] && changes['dragEventTarget'].currentValue && this.dragModel.dragging) {
            this.onMousedown(changes['dragEventTarget'].currentValue);
          }
        }
        /**
         * @return {?}
         */

      }, {
        key: "ngOnDestroy",
        value: function ngOnDestroy() {
          this._destroySubscription();
        }
        /**
         * @param {?} event
         * @return {?}
         */

      }, {
        key: "onMouseup",
        value: function onMouseup(event) {
          if (!this.isDragging) return;
          this.isDragging = false;
          this.element.classList.remove('dragging');

          if (this.subscription) {
            this._destroySubscription();

            this.dragEnd.emit({
              event: event,
              element: this.element,
              model: this.dragModel
            });
          }
        }
        /**
         * @param {?} event
         * @return {?}
         */

      }, {
        key: "onMousedown",
        value: function onMousedown(event) {
          var _this3 = this;

          // we only want to drag the inner header text

          /** @type {?} */
          var isDragElm = event.target.classList.contains('draggable');

          if (isDragElm && (this.dragX || this.dragY)) {
            event.preventDefault();
            this.isDragging = true;
            /** @type {?} */

            var mouseDownPos = {
              x: event.clientX,
              y: event.clientY
            };
            /** @type {?} */

            var mouseup = Object(rxjs__WEBPACK_IMPORTED_MODULE_2__["fromEvent"])(document, 'mouseup');
            this.subscription = mouseup.subscribe(
            /**
            * @param {?} ev
            * @return {?}
            */
            function (ev) {
              return _this3.onMouseup(ev);
            });
            /** @type {?} */

            var mouseMoveSub = Object(rxjs__WEBPACK_IMPORTED_MODULE_2__["fromEvent"])(document, 'mousemove').pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_3__["takeUntil"])(mouseup)).subscribe(
            /**
            * @param {?} ev
            * @return {?}
            */
            function (ev) {
              return _this3.move(ev, mouseDownPos);
            });
            this.subscription.add(mouseMoveSub);
            this.dragStart.emit({
              event: event,
              element: this.element,
              model: this.dragModel
            });
          }
        }
        /**
         * @param {?} event
         * @param {?} mouseDownPos
         * @return {?}
         */

      }, {
        key: "move",
        value: function move(event, mouseDownPos) {
          if (!this.isDragging) return;
          /** @type {?} */

          var x = event.clientX - mouseDownPos.x;
          /** @type {?} */

          var y = event.clientY - mouseDownPos.y;
          if (this.dragX) this.element.style.left = "".concat(x, "px");
          if (this.dragY) this.element.style.top = "".concat(y, "px");
          this.element.classList.add('dragging');
          this.dragging.emit({
            event: event,
            element: this.element,
            model: this.dragModel
          });
        }
        /**
         * @private
         * @return {?}
         */

      }, {
        key: "_destroySubscription",
        value: function _destroySubscription() {
          if (this.subscription) {
            this.subscription.unsubscribe();
            this.subscription = undefined;
          }
        }
      }]);

      return DraggableDirective;
    }();

    DraggableDirective.ɵfac = function DraggableDirective_Factory(t) {
      return new (t || DraggableDirective)(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__["ElementRef"]));
    };

    DraggableDirective.ɵdir = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineDirective"]({
      type: DraggableDirective,
      selectors: [["", "draggable", ""]],
      inputs: {
        dragX: "dragX",
        dragY: "dragY",
        dragEventTarget: "dragEventTarget",
        dragModel: "dragModel"
      },
      outputs: {
        dragStart: "dragStart",
        dragging: "dragging",
        dragEnd: "dragEnd"
      },
      features: [_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵNgOnChangesFeature"]]
    });
    /** @nocollapse */

    DraggableDirective.ctorParameters = function () {
      return [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ElementRef"]
      }];
    };

    DraggableDirective.propDecorators = {
      dragEventTarget: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
      }],
      dragModel: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
      }],
      dragX: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
      }],
      dragY: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
      }],
      dragStart: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"]
      }],
      dragging: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"]
      }],
      dragEnd: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"]
      }]
    };

    if (false) {}
    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    /* tslint:disable */

    /** @type {?} */


    var MouseEvent = (typeof window !== 'undefined' && window || global).MouseEvent;
    /** @type {?} */

    var KeyboardEvent = (typeof window !== 'undefined' && window || global).KeyboardEvent;
    /** @type {?} */

    var Event = (typeof window !== 'undefined' && window || global).Event;
    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    var ResizeableDirective = /*#__PURE__*/function () {
      /**
       * @param {?} element
       * @param {?} renderer
       */
      function ResizeableDirective(element, renderer) {
        _classCallCheck(this, ResizeableDirective);

        this.renderer = renderer;
        this.resizeEnabled = true;
        this.resize = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
        this.resizing = false;
        this.element = element.nativeElement;
      }
      /**
       * @return {?}
       */


      _createClass(ResizeableDirective, [{
        key: "ngAfterViewInit",
        value: function ngAfterViewInit() {
          /** @type {?} */
          var renderer2 = this.renderer;
          /** @type {?} */

          var node = renderer2.createElement('span');

          if (this.resizeEnabled) {
            renderer2.addClass(node, 'resize-handle');
          } else {
            renderer2.addClass(node, 'resize-handle--not-resizable');
          }

          renderer2.appendChild(this.element, node);
        }
        /**
         * @return {?}
         */

      }, {
        key: "ngOnDestroy",
        value: function ngOnDestroy() {
          this._destroySubscription();
        }
        /**
         * @return {?}
         */

      }, {
        key: "onMouseup",
        value: function onMouseup() {
          this.resizing = false;

          if (this.subscription && !this.subscription.closed) {
            this._destroySubscription();

            this.resize.emit(this.element.clientWidth);
          }
        }
        /**
         * @param {?} event
         * @return {?}
         */

      }, {
        key: "onMousedown",
        value: function onMousedown(event) {
          var _this4 = this;

          /** @type {?} */
          var isHandle = event.target.classList.contains('resize-handle');
          /** @type {?} */

          var initialWidth = this.element.clientWidth;
          /** @type {?} */

          var mouseDownScreenX = event.screenX;

          if (isHandle) {
            event.stopPropagation();
            this.resizing = true;
            /** @type {?} */

            var mouseup = Object(rxjs__WEBPACK_IMPORTED_MODULE_2__["fromEvent"])(document, 'mouseup');
            this.subscription = mouseup.subscribe(
            /**
            * @param {?} ev
            * @return {?}
            */
            function (ev) {
              return _this4.onMouseup();
            });
            /** @type {?} */

            var mouseMoveSub = Object(rxjs__WEBPACK_IMPORTED_MODULE_2__["fromEvent"])(document, 'mousemove').pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_3__["takeUntil"])(mouseup)).subscribe(
            /**
            * @param {?} e
            * @return {?}
            */
            function (e) {
              return _this4.move(e, initialWidth, mouseDownScreenX);
            });
            this.subscription.add(mouseMoveSub);
          }
        }
        /**
         * @param {?} event
         * @param {?} initialWidth
         * @param {?} mouseDownScreenX
         * @return {?}
         */

      }, {
        key: "move",
        value: function move(event, initialWidth, mouseDownScreenX) {
          /** @type {?} */
          var movementX = event.screenX - mouseDownScreenX;
          /** @type {?} */

          var newWidth = initialWidth + movementX;
          /** @type {?} */

          var overMinWidth = !this.minWidth || newWidth >= this.minWidth;
          /** @type {?} */

          var underMaxWidth = !this.maxWidth || newWidth <= this.maxWidth;

          if (overMinWidth && underMaxWidth) {
            this.element.style.width = "".concat(newWidth, "px");
          }
        }
        /**
         * @private
         * @return {?}
         */

      }, {
        key: "_destroySubscription",
        value: function _destroySubscription() {
          if (this.subscription) {
            this.subscription.unsubscribe();
            this.subscription = undefined;
          }
        }
      }]);

      return ResizeableDirective;
    }();

    ResizeableDirective.ɵfac = function ResizeableDirective_Factory(t) {
      return new (t || ResizeableDirective)(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__["ElementRef"]), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__["Renderer2"]));
    };

    ResizeableDirective.ɵdir = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineDirective"]({
      type: ResizeableDirective,
      selectors: [["", "resizeable", ""]],
      hostVars: 2,
      hostBindings: function ResizeableDirective_HostBindings(rf, ctx) {
        if (rf & 1) {
          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵlistener"]("mousedown", function ResizeableDirective_mousedown_HostBindingHandler($event) {
            return ctx.onMousedown($event);
          });
        }

        if (rf & 2) {
          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵclassProp"]("resizeable", ctx.resizeEnabled);
        }
      },
      inputs: {
        resizeEnabled: "resizeEnabled",
        minWidth: "minWidth",
        maxWidth: "maxWidth"
      },
      outputs: {
        resize: "resize"
      }
    });
    /** @nocollapse */

    ResizeableDirective.ctorParameters = function () {
      return [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ElementRef"]
      }, {
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Renderer2"]
      }];
    };

    ResizeableDirective.propDecorators = {
      resizeEnabled: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
      }],
      minWidth: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
      }],
      maxWidth: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
      }],
      resize: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"]
      }],
      onMousedown: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["HostListener"],
        args: ['mousedown', ['$event']]
      }]
    };

    if (false) {}
    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */


    var OrderableDirective = /*#__PURE__*/function () {
      /**
       * @param {?} differs
       * @param {?} document
       */
      function OrderableDirective(differs, document) {
        _classCallCheck(this, OrderableDirective);

        this.document = document;
        this.reorder = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
        this.targetChanged = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
        this.differ = differs.find({}).create();
      }
      /**
       * @return {?}
       */


      _createClass(OrderableDirective, [{
        key: "ngAfterContentInit",
        value: function ngAfterContentInit() {
          // HACK: Investigate Better Way
          this.updateSubscriptions();
          this.draggables.changes.subscribe(this.updateSubscriptions.bind(this));
        }
        /**
         * @return {?}
         */

      }, {
        key: "ngOnDestroy",
        value: function ngOnDestroy() {
          this.draggables.forEach(
          /**
          * @param {?} d
          * @return {?}
          */
          function (d) {
            d.dragStart.unsubscribe();
            d.dragging.unsubscribe();
            d.dragEnd.unsubscribe();
          });
        }
        /**
         * @return {?}
         */

      }, {
        key: "updateSubscriptions",
        value: function updateSubscriptions() {
          var _this5 = this;

          /** @type {?} */
          var diffs = this.differ.diff(this.createMapDiffs());

          if (diffs) {
            /** @type {?} */
            var subscribe =
            /**
            * @param {?} __0
            * @return {?}
            */
            function subscribe(_ref) {
              var currentValue = _ref.currentValue,
                  previousValue = _ref.previousValue;
              unsubscribe({
                previousValue: previousValue
              });

              if (currentValue) {
                currentValue.dragStart.subscribe(_this5.onDragStart.bind(_this5));
                currentValue.dragging.subscribe(_this5.onDragging.bind(_this5));
                currentValue.dragEnd.subscribe(_this5.onDragEnd.bind(_this5));
              }
            };
            /** @type {?} */


            var unsubscribe =
            /**
            * @param {?} __0
            * @return {?}
            */
            function unsubscribe(_ref2) {
              var previousValue = _ref2.previousValue;

              if (previousValue) {
                previousValue.dragStart.unsubscribe();
                previousValue.dragging.unsubscribe();
                previousValue.dragEnd.unsubscribe();
              }
            };

            diffs.forEachAddedItem(subscribe); // diffs.forEachChangedItem(subscribe.bind(this));

            diffs.forEachRemovedItem(unsubscribe);
          }
        }
        /**
         * @return {?}
         */

      }, {
        key: "onDragStart",
        value: function onDragStart() {
          this.positions = {};
          /** @type {?} */

          var i = 0;

          var _iterator = _createForOfIteratorHelper(this.draggables.toArray()),
              _step;

          try {
            for (_iterator.s(); !(_step = _iterator.n()).done;) {
              var dragger = _step.value;

              /** @type {?} */
              var elm = dragger.element;
              /** @type {?} */

              var left = parseInt(elm.offsetLeft.toString(), 0);
              this.positions[dragger.dragModel.prop] = {
                left: left,
                right: left + parseInt(elm.offsetWidth.toString(), 0),
                index: i++,
                element: elm
              };
            }
          } catch (err) {
            _iterator.e(err);
          } finally {
            _iterator.f();
          }
        }
        /**
         * @param {?} __0
         * @return {?}
         */

      }, {
        key: "onDragging",
        value: function onDragging(_ref3) {
          var element = _ref3.element,
              model = _ref3.model,
              event = _ref3.event;

          /** @type {?} */
          var prevPos = this.positions[model.prop];
          /** @type {?} */

          var target = this.isTarget(model, event);

          if (target) {
            if (this.lastDraggingIndex !== target.i) {
              this.targetChanged.emit({
                prevIndex: this.lastDraggingIndex,
                newIndex: target.i,
                initialIndex: prevPos.index
              });
              this.lastDraggingIndex = target.i;
            }
          } else if (this.lastDraggingIndex !== prevPos.index) {
            this.targetChanged.emit({
              prevIndex: this.lastDraggingIndex,
              initialIndex: prevPos.index
            });
            this.lastDraggingIndex = prevPos.index;
          }
        }
        /**
         * @param {?} __0
         * @return {?}
         */

      }, {
        key: "onDragEnd",
        value: function onDragEnd(_ref4) {
          var element = _ref4.element,
              model = _ref4.model,
              event = _ref4.event;

          /** @type {?} */
          var prevPos = this.positions[model.prop];
          /** @type {?} */

          var target = this.isTarget(model, event);

          if (target) {
            this.reorder.emit({
              prevIndex: prevPos.index,
              newIndex: target.i,
              model: model
            });
          }

          this.lastDraggingIndex = undefined;
          element.style.left = 'auto';
        }
        /**
         * @param {?} model
         * @param {?} event
         * @return {?}
         */

      }, {
        key: "isTarget",
        value: function isTarget(model, event) {
          var _this6 = this;

          /** @type {?} */
          var i = 0;
          /** @type {?} */

          var x = event.x || event.clientX;
          /** @type {?} */

          var y = event.y || event.clientY;
          /** @type {?} */

          var targets = this.document.elementsFromPoint(x, y);

          var _loop = function _loop(prop) {
            // current column position which throws event.

            /** @type {?} */
            var pos = _this6.positions[prop]; // since we drag the inner span, we need to find it in the elements at the cursor

            if (model.prop !== prop && targets.find(
            /**
            * @param {?} el
            * @return {?}
            */
            function (el) {
              return el === pos.element;
            })) {
              return {
                v: {
                  pos: pos,
                  i: i
                }
              };
            }

            i++;
          };

          for (var prop in this.positions) {
            var _ret = _loop(prop);

            if (typeof _ret === "object") return _ret.v;
          }
        }
        /**
         * @private
         * @return {?}
         */

      }, {
        key: "createMapDiffs",
        value: function createMapDiffs() {
          return this.draggables.toArray().reduce(
          /**
          * @param {?} acc
          * @param {?} curr
          * @return {?}
          */
          function (acc, curr) {
            acc[curr.dragModel.$$id] = curr;
            return acc;
          }, {});
        }
      }]);

      return OrderableDirective;
    }();

    OrderableDirective.ɵfac = function OrderableDirective_Factory(t) {
      return new (t || OrderableDirective)(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__["KeyValueDiffers"]), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_common__WEBPACK_IMPORTED_MODULE_1__["DOCUMENT"]));
    };

    OrderableDirective.ɵdir = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineDirective"]({
      type: OrderableDirective,
      selectors: [["", "orderable", ""]],
      contentQueries: function OrderableDirective_ContentQueries(rf, ctx, dirIndex) {
        if (rf & 1) {
          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵcontentQuery"](dirIndex, DraggableDirective, true);
        }

        if (rf & 2) {
          var _t;

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵqueryRefresh"](_t = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵloadQuery"]()) && (ctx.draggables = _t);
        }
      },
      outputs: {
        reorder: "reorder",
        targetChanged: "targetChanged"
      }
    });
    /** @nocollapse */

    OrderableDirective.ctorParameters = function () {
      return [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["KeyValueDiffers"]
      }, {
        type: undefined,
        decorators: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Inject"],
          args: [_angular_common__WEBPACK_IMPORTED_MODULE_1__["DOCUMENT"]]
        }]
      }];
    };

    OrderableDirective.propDecorators = {
      reorder: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"]
      }],
      targetChanged: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"]
      }],
      draggables: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ContentChildren"],
        args: [DraggableDirective, {
          descendants: true
        }]
      }]
    };

    if (false) {}
    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */


    var LongPressDirective = /*#__PURE__*/function () {
      function LongPressDirective() {
        _classCallCheck(this, LongPressDirective);

        this.pressEnabled = true;
        this.duration = 500;
        this.longPressStart = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
        this.longPressing = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
        this.longPressEnd = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
        this.mouseX = 0;
        this.mouseY = 0;
      }
      /**
       * @return {?}
       */


      _createClass(LongPressDirective, [{
        key: "press",
        get: function get() {
          return this.pressing;
        }
        /**
         * @return {?}
         */

      }, {
        key: "isLongPress",
        get: function get() {
          return this.isLongPressing;
        }
        /**
         * @param {?} event
         * @return {?}
         */

      }, {
        key: "onMouseDown",
        value: function onMouseDown(event) {
          var _this7 = this;

          // don't do right/middle clicks
          if (event.which !== 1 || !this.pressEnabled) return; // don't start drag if its on resize handle

          /** @type {?} */

          var target = event.target;
          if (target.classList.contains('resize-handle')) return;
          this.mouseX = event.clientX;
          this.mouseY = event.clientY;
          this.pressing = true;
          this.isLongPressing = false;
          /** @type {?} */

          var mouseup = Object(rxjs__WEBPACK_IMPORTED_MODULE_2__["fromEvent"])(document, 'mouseup');
          this.subscription = mouseup.subscribe(
          /**
          * @param {?} ev
          * @return {?}
          */
          function (ev) {
            return _this7.onMouseup();
          });
          this.timeout = setTimeout(
          /**
          * @return {?}
          */
          function () {
            _this7.isLongPressing = true;

            _this7.longPressStart.emit({
              event: event,
              model: _this7.pressModel
            });

            _this7.subscription.add(Object(rxjs__WEBPACK_IMPORTED_MODULE_2__["fromEvent"])(document, 'mousemove').pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_3__["takeUntil"])(mouseup)).subscribe(
            /**
            * @param {?} mouseEvent
            * @return {?}
            */
            function (mouseEvent) {
              return _this7.onMouseMove(mouseEvent);
            }));

            _this7.loop(event);
          }, this.duration);
          this.loop(event);
        }
        /**
         * @param {?} event
         * @return {?}
         */

      }, {
        key: "onMouseMove",
        value: function onMouseMove(event) {
          if (this.pressing && !this.isLongPressing) {
            /** @type {?} */
            var xThres = Math.abs(event.clientX - this.mouseX) > 10;
            /** @type {?} */

            var yThres = Math.abs(event.clientY - this.mouseY) > 10;

            if (xThres || yThres) {
              this.endPress();
            }
          }
        }
        /**
         * @param {?} event
         * @return {?}
         */

      }, {
        key: "loop",
        value: function loop(event) {
          var _this8 = this;

          if (this.isLongPressing) {
            this.timeout = setTimeout(
            /**
            * @return {?}
            */
            function () {
              _this8.longPressing.emit({
                event: event,
                model: _this8.pressModel
              });

              _this8.loop(event);
            }, 50);
          }
        }
        /**
         * @return {?}
         */

      }, {
        key: "endPress",
        value: function endPress() {
          clearTimeout(this.timeout);
          this.isLongPressing = false;
          this.pressing = false;

          this._destroySubscription();

          this.longPressEnd.emit({
            model: this.pressModel
          });
        }
        /**
         * @return {?}
         */

      }, {
        key: "onMouseup",
        value: function onMouseup() {
          this.endPress();
        }
        /**
         * @return {?}
         */

      }, {
        key: "ngOnDestroy",
        value: function ngOnDestroy() {
          this._destroySubscription();
        }
        /**
         * @private
         * @return {?}
         */

      }, {
        key: "_destroySubscription",
        value: function _destroySubscription() {
          if (this.subscription) {
            this.subscription.unsubscribe();
            this.subscription = undefined;
          }
        }
      }]);

      return LongPressDirective;
    }();

    LongPressDirective.ɵfac = function LongPressDirective_Factory(t) {
      return new (t || LongPressDirective)();
    };

    LongPressDirective.ɵdir = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineDirective"]({
      type: LongPressDirective,
      selectors: [["", "long-press", ""]],
      hostVars: 4,
      hostBindings: function LongPressDirective_HostBindings(rf, ctx) {
        if (rf & 1) {
          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵlistener"]("mousedown", function LongPressDirective_mousedown_HostBindingHandler($event) {
            return ctx.onMouseDown($event);
          });
        }

        if (rf & 2) {
          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵclassProp"]("press", ctx.press)("longpress", ctx.isLongPress);
        }
      },
      inputs: {
        pressEnabled: "pressEnabled",
        duration: "duration",
        pressModel: "pressModel"
      },
      outputs: {
        longPressStart: "longPressStart",
        longPressing: "longPressing",
        longPressEnd: "longPressEnd"
      }
    });
    LongPressDirective.propDecorators = {
      pressEnabled: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
      }],
      pressModel: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
      }],
      duration: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
      }],
      longPressStart: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"]
      }],
      longPressing: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"]
      }],
      longPressEnd: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"]
      }],
      press: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["HostBinding"],
        args: ['class.press']
      }],
      isLongPress: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["HostBinding"],
        args: ['class.longpress']
      }],
      onMouseDown: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["HostListener"],
        args: ['mousedown', ['$event']]
      }]
    };

    if (false) {}
    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */


    var ScrollerComponent = /*#__PURE__*/function () {
      /**
       * @param {?} ngZone
       * @param {?} element
       * @param {?} renderer
       */
      function ScrollerComponent(ngZone, element, renderer) {
        _classCallCheck(this, ScrollerComponent);

        this.ngZone = ngZone;
        this.renderer = renderer;
        this.scrollbarV = false;
        this.scrollbarH = false;
        this.scroll = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
        this.scrollYPos = 0;
        this.scrollXPos = 0;
        this.prevScrollYPos = 0;
        this.prevScrollXPos = 0;
        this._scrollEventListener = null;
        this.element = element.nativeElement;
      }
      /**
       * @return {?}
       */


      _createClass(ScrollerComponent, [{
        key: "ngOnInit",
        value: function ngOnInit() {
          // manual bind so we don't always listen
          if (this.scrollbarV || this.scrollbarH) {
            /** @type {?} */
            var renderer = this.renderer;
            this.parentElement = renderer.parentNode(renderer.parentNode(this.element));
            this._scrollEventListener = this.onScrolled.bind(this);
            this.parentElement.addEventListener('scroll', this._scrollEventListener);
          }
        }
        /**
         * @return {?}
         */

      }, {
        key: "ngOnDestroy",
        value: function ngOnDestroy() {
          if (this._scrollEventListener) {
            this.parentElement.removeEventListener('scroll', this._scrollEventListener);
            this._scrollEventListener = null;
          }
        }
        /**
         * @param {?} offsetY
         * @return {?}
         */

      }, {
        key: "setOffset",
        value: function setOffset(offsetY) {
          if (this.parentElement) {
            this.parentElement.scrollTop = offsetY;
          }
        }
        /**
         * @param {?} event
         * @return {?}
         */

      }, {
        key: "onScrolled",
        value: function onScrolled(event) {
          var _this9 = this;

          /** @type {?} */
          var dom = event.currentTarget;
          requestAnimationFrame(
          /**
          * @return {?}
          */
          function () {
            _this9.scrollYPos = dom.scrollTop;
            _this9.scrollXPos = dom.scrollLeft;

            _this9.updateOffset();
          });
        }
        /**
         * @return {?}
         */

      }, {
        key: "updateOffset",
        value: function updateOffset() {
          /** @type {?} */
          var direction;

          if (this.scrollYPos < this.prevScrollYPos) {
            direction = 'down';
          } else if (this.scrollYPos > this.prevScrollYPos) {
            direction = 'up';
          }

          this.scroll.emit({
            direction: direction,
            scrollYPos: this.scrollYPos,
            scrollXPos: this.scrollXPos
          });
          this.prevScrollYPos = this.scrollYPos;
          this.prevScrollXPos = this.scrollXPos;
        }
      }]);

      return ScrollerComponent;
    }();

    ScrollerComponent.ɵfac = function ScrollerComponent_Factory(t) {
      return new (t || ScrollerComponent)(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__["NgZone"]), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__["ElementRef"]), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__["Renderer2"]));
    };

    ScrollerComponent.ɵcmp = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineComponent"]({
      type: ScrollerComponent,
      selectors: [["datatable-scroller"]],
      hostAttrs: [1, "datatable-scroll"],
      hostVars: 4,
      hostBindings: function ScrollerComponent_HostBindings(rf, ctx) {
        if (rf & 2) {
          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵstyleProp"]("height", ctx.scrollHeight, "px")("width", ctx.scrollWidth, "px");
        }
      },
      inputs: {
        scrollbarV: "scrollbarV",
        scrollbarH: "scrollbarH",
        scrollHeight: "scrollHeight",
        scrollWidth: "scrollWidth"
      },
      outputs: {
        scroll: "scroll"
      },
      ngContentSelectors: _c0,
      decls: 1,
      vars: 0,
      template: function ScrollerComponent_Template(rf, ctx) {
        if (rf & 1) {
          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵprojectionDef"]();

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵprojection"](0);
        }
      },
      encapsulation: 2,
      changeDetection: 0
    });
    /** @nocollapse */

    ScrollerComponent.ctorParameters = function () {
      return [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["NgZone"]
      }, {
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ElementRef"]
      }, {
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Renderer2"]
      }];
    };

    ScrollerComponent.propDecorators = {
      scrollbarV: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
      }],
      scrollbarH: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
      }],
      scrollHeight: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["HostBinding"],
        args: ['style.height.px']
      }, {
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
      }],
      scrollWidth: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["HostBinding"],
        args: ['style.width.px']
      }, {
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
      }],
      scroll: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"]
      }]
    };

    if (false) {}
    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */


    var DatatableGroupHeaderTemplateDirective =
    /**
     * @param {?} template
     */
    function DatatableGroupHeaderTemplateDirective(template) {
      _classCallCheck(this, DatatableGroupHeaderTemplateDirective);

      this.template = template;
    };

    DatatableGroupHeaderTemplateDirective.ɵfac = function DatatableGroupHeaderTemplateDirective_Factory(t) {
      return new (t || DatatableGroupHeaderTemplateDirective)(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__["TemplateRef"]));
    };

    DatatableGroupHeaderTemplateDirective.ɵdir = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineDirective"]({
      type: DatatableGroupHeaderTemplateDirective,
      selectors: [["", "ngx-datatable-group-header-template", ""]]
    });
    /** @nocollapse */

    DatatableGroupHeaderTemplateDirective.ctorParameters = function () {
      return [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["TemplateRef"]
      }];
    };

    if (false) {}
    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */


    var DatatableGroupHeaderDirective = /*#__PURE__*/function () {
      function DatatableGroupHeaderDirective() {
        _classCallCheck(this, DatatableGroupHeaderDirective);

        /**
         * Row height is required when virtual scroll is enabled.
         */
        this.rowHeight = 0;
        /**
         * Track toggling of group visibility
         */

        this.toggle = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
      }
      /**
       * @return {?}
       */


      _createClass(DatatableGroupHeaderDirective, [{
        key: "template",
        get: function get() {
          return this._templateInput || this._templateQuery;
        }
        /**
         * Toggle the expansion of a group
         * @param {?} group
         * @return {?}
         */

      }, {
        key: "toggleExpandGroup",
        value: function toggleExpandGroup(group) {
          this.toggle.emit({
            type: 'group',
            value: group
          });
        }
        /**
         * Expand all groups
         * @return {?}
         */

      }, {
        key: "expandAllGroups",
        value: function expandAllGroups() {
          this.toggle.emit({
            type: 'all',
            value: true
          });
        }
        /**
         * Collapse all groups
         * @return {?}
         */

      }, {
        key: "collapseAllGroups",
        value: function collapseAllGroups() {
          this.toggle.emit({
            type: 'all',
            value: false
          });
        }
      }]);

      return DatatableGroupHeaderDirective;
    }();

    DatatableGroupHeaderDirective.ɵfac = function DatatableGroupHeaderDirective_Factory(t) {
      return new (t || DatatableGroupHeaderDirective)();
    };

    DatatableGroupHeaderDirective.ɵdir = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineDirective"]({
      type: DatatableGroupHeaderDirective,
      selectors: [["ngx-datatable-group-header"]],
      contentQueries: function DatatableGroupHeaderDirective_ContentQueries(rf, ctx, dirIndex) {
        if (rf & 1) {
          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵstaticContentQuery"](dirIndex, DatatableGroupHeaderTemplateDirective, true, _angular_core__WEBPACK_IMPORTED_MODULE_0__["TemplateRef"]);
        }

        if (rf & 2) {
          var _t;

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵqueryRefresh"](_t = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵloadQuery"]()) && (ctx._templateQuery = _t.first);
        }
      },
      inputs: {
        rowHeight: "rowHeight",
        _templateInput: ["template", "_templateInput"]
      },
      outputs: {
        toggle: "toggle"
      }
    });
    DatatableGroupHeaderDirective.propDecorators = {
      rowHeight: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
      }],
      _templateInput: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"],
        args: ['template']
      }],
      _templateQuery: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ContentChild"],
        args: [DatatableGroupHeaderTemplateDirective, {
          read: _angular_core__WEBPACK_IMPORTED_MODULE_0__["TemplateRef"],
          "static": true
        }]
      }],
      toggle: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"]
      }]
    };

    if (false) {}
    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    /**
     * Always returns the empty string ''
     * @return {?}
     */


    function emptyStringGetter() {
      return '';
    }
    /**
     * Returns the appropriate getter function for this kind of prop.
     * If prop == null, returns the emptyStringGetter.
     * @param {?} prop
     * @return {?}
     */


    function getterForProp(prop) {
      if (prop == null) {
        return emptyStringGetter;
      }

      if (typeof prop === 'number') {
        return numericIndexGetter;
      } else {
        // deep or simple
        if (prop.indexOf('.') !== -1) {
          return deepValueGetter;
        } else {
          return shallowValueGetter;
        }
      }
    }
    /**
     * Returns the value at this numeric index.
     * @param {?} row array of values
     * @param {?} index numeric index
     * @return {?} any or '' if invalid index
     */


    function numericIndexGetter(row, index) {
      if (row == null) {
        return '';
      } // mimic behavior of deepValueGetter


      if (!row || index == null) {
        return row;
      }
      /** @type {?} */


      var value = row[index];

      if (value == null) {
        return '';
      }

      return value;
    }
    /**
     * Returns the value of a field.
     * (more efficient than deepValueGetter)
     * @param {?} obj object containing the field
     * @param {?} fieldName field name string
     * @return {?}
     */


    function shallowValueGetter(obj, fieldName) {
      if (obj == null) {
        return '';
      }

      if (!obj || !fieldName) {
        return obj;
      }
      /** @type {?} */


      var value = obj[fieldName];

      if (value == null) {
        return '';
      }

      return value;
    }
    /**
     * Returns a deep object given a string. zoo['animal.type']
     * @param {?} obj
     * @param {?} path
     * @return {?}
     */


    function deepValueGetter(obj, path) {
      if (obj == null) {
        return '';
      }

      if (!obj || !path) {
        return obj;
      } // check if path matches a root-level field
      // { "a.b.c": 123 }

      /** @type {?} */


      var current = obj[path];

      if (current !== undefined) {
        return current;
      }

      current = obj;
      /** @type {?} */

      var split = path.split('.');

      if (split.length) {
        for (var i = 0; i < split.length; i++) {
          current = current[split[i]]; // if found undefined, return empty string

          if (current === undefined || current === null) {
            return '';
          }
        }
      }

      return current;
    }
    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    /**
     * @param {?} prop
     * @return {?}
     */


    function optionalGetterForProp(prop) {
      return prop &&
      /**
      * @param {?} row
      * @return {?}
      */
      function (row) {
        return getterForProp(prop)(row, prop);
      };
    }
    /**
     * This functions rearrange items by their parents
     * Also sets the level value to each of the items
     *
     * Note: Expecting each item has a property called parentId
     * Note: This algorithm will fail if a list has two or more items with same ID
     * NOTE: This algorithm will fail if there is a deadlock of relationship
     *
     * For example,
     *
     * Input
     *
     * id -> parent
     * 1  -> 0
     * 2  -> 0
     * 3  -> 1
     * 4  -> 1
     * 5  -> 2
     * 7  -> 8
     * 6  -> 3
     *
     *
     * Output
     * id -> level
     * 1      -> 0
     * --3    -> 1
     * ----6  -> 2
     * --4    -> 1
     * 2      -> 0
     * --5    -> 1
     * 7     -> 8
     *
     *
     * @param {?} rows
     *
     * @param {?=} from
     * @param {?=} to
     * @return {?}
     */


    function groupRowsByParents(rows, from, to) {
      if (from && to) {
        /** @type {?} */
        var nodeById = {};
        /** @type {?} */

        var l = rows.length;
        /** @type {?} */

        var node = null;
        nodeById[0] = new TreeNode(); // that's the root node
        // that's the root node

        /** @type {?} */

        var uniqIDs = rows.reduce(
        /**
        * @param {?} arr
        * @param {?} item
        * @return {?}
        */
        function (arr, item) {
          /** @type {?} */
          var toValue = to(item);

          if (arr.indexOf(toValue) === -1) {
            arr.push(toValue);
          }

          return arr;
        }, []);

        for (var i = 0; i < l; i++) {
          // make TreeNode objects for each item
          nodeById[to(rows[i])] = new TreeNode(rows[i]);
        }

        for (var _i = 0; _i < l; _i++) {
          // link all TreeNode objects
          node = nodeById[to(rows[_i])];
          /** @type {?} */

          var parent = 0;
          /** @type {?} */

          var fromValue = from(node.row);

          if (!!fromValue && uniqIDs.indexOf(fromValue) > -1) {
            parent = fromValue;
          }

          node.parent = nodeById[parent];
          node.row['level'] = node.parent.row['level'] + 1;
          node.parent.children.push(node);
        }
        /** @type {?} */


        var resolvedRows = [];
        nodeById[0].flatten(
        /**
        * @return {?}
        */
        function () {
          resolvedRows = [].concat(_toConsumableArray(resolvedRows), [this.row]);
        }, true);
        return resolvedRows;
      } else {
        return rows;
      }
    }

    var TreeNode = /*#__PURE__*/function () {
      /**
       * @param {?=} row
       */
      function TreeNode() {
        var row = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;

        _classCallCheck(this, TreeNode);

        if (!row) {
          row = {
            level: -1,
            treeStatus: 'expanded'
          };
        }

        this.row = row;
        this.parent = null;
        this.children = [];
      }
      /**
       * @param {?} f
       * @param {?} recursive
       * @return {?}
       */


      _createClass(TreeNode, [{
        key: "flatten",
        value: function flatten(f, recursive) {
          if (this.row['treeStatus'] === 'expanded') {
            for (var i = 0, l = this.children.length; i < l; i++) {
              /** @type {?} */
              var child = this.children[i];
              f.apply(child, Array.prototype.slice.call(arguments, 2));
              if (recursive) child.flatten.apply(child, arguments);
            }
          }
        }
      }]);

      return TreeNode;
    }();

    if (false) {}
    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    /**
     * Converts strings from something to camel case
     * http://stackoverflow.com/questions/10425287/convert-dash-separated-string-to-camelcase
     * @param {?} str
     * @return {?}
     */


    function camelCase(str) {
      // Replace special characters with a space
      str = str.replace(/[^a-zA-Z0-9 ]/g, ' '); // put a space before an uppercase letter

      str = str.replace(/([a-z](?=[A-Z]))/g, '$1 '); // Lower case first character and some other stuff

      str = str.replace(/([^a-zA-Z0-9 ])|^[0-9]+/g, '').trim().toLowerCase(); // uppercase characters preceded by a space or number

      str = str.replace(/([ 0-9]+)([a-zA-Z])/g,
      /**
      * @param {?} a
      * @param {?} b
      * @param {?} c
      * @return {?}
      */
      function (a, b, c) {
        return b.trim() + c.toUpperCase();
      });
      return str;
    }
    /**
     * Converts strings from camel case to words
     * http://stackoverflow.com/questions/7225407/convert-camelcasetext-to-camel-case-text
     * @param {?} str
     * @return {?}
     */


    function deCamelCase(str) {
      return str.replace(/([A-Z])/g,
      /**
      * @param {?} match
      * @return {?}
      */
      function (match) {
        return " ".concat(match);
      }).replace(/^./,
      /**
      * @param {?} match
      * @return {?}
      */
      function (match) {
        return match.toUpperCase();
      });
    }
    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    /**
     * Creates a unique object id.
     * http://stackoverflow.com/questions/6248666/how-to-generate-short-uid-like-ax4j9z-in-js
     * @return {?}
     */


    function id() {
      return ('0000' + (Math.random() * Math.pow(36, 4) << 0).toString(36)).slice(-4);
    }
    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    /**
     * Sets the column defaults
     * @param {?} columns
     * @return {?}
     */


    function setColumnDefaults(columns) {
      if (!columns) return; // Only one column should hold the tree view
      // Thus if multiple columns are provided with
      // isTreeColumn as true we take only the first one

      /** @type {?} */

      var treeColumnFound = false;

      var _iterator2 = _createForOfIteratorHelper(columns),
          _step2;

      try {
        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
          var column = _step2.value;

          if (!column.$$id) {
            column.$$id = id();
          } // prop can be numeric; zero is valid not a missing prop
          // translate name => prop


          if (isNullOrUndefined(column.prop) && column.name) {
            column.prop = camelCase(column.name);
          }

          if (!column.$$valueGetter) {
            column.$$valueGetter = getterForProp(column.prop);
          } // format props if no name passed


          if (!isNullOrUndefined(column.prop) && isNullOrUndefined(column.name)) {
            column.name = deCamelCase(String(column.prop));
          }

          if (isNullOrUndefined(column.prop) && isNullOrUndefined(column.name)) {
            column.name = ''; // Fixes IE and Edge displaying `null`
          }

          if (!column.hasOwnProperty('resizeable')) {
            column.resizeable = true;
          }

          if (!column.hasOwnProperty('sortable')) {
            column.sortable = true;
          }

          if (!column.hasOwnProperty('draggable')) {
            column.draggable = true;
          }

          if (!column.hasOwnProperty('canAutoResize')) {
            column.canAutoResize = true;
          }

          if (!column.hasOwnProperty('width')) {
            column.width = 150;
          }

          if (!column.hasOwnProperty('isTreeColumn')) {
            column.isTreeColumn = false;
          } else {
            if (column.isTreeColumn && !treeColumnFound) {
              // If the first column with isTreeColumn is true found
              // we mark that treeCoulmn is found
              treeColumnFound = true;
            } else {
              // After that isTreeColumn property for any other column
              // will be set as false
              column.isTreeColumn = false;
            }
          }
        }
      } catch (err) {
        _iterator2.e(err);
      } finally {
        _iterator2.f();
      }
    }
    /**
     * @template T
     * @param {?} value
     * @return {?}
     */


    function isNullOrUndefined(value) {
      return value === null || value === undefined;
    }
    /**
     * Translates templates definitions to objects
     * @param {?} templates
     * @return {?}
     */


    function translateTemplates(templates) {
      /** @type {?} */
      var result = [];

      var _iterator3 = _createForOfIteratorHelper(templates),
          _step3;

      try {
        for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
          var temp = _step3.value;

          /** @type {?} */
          var col = {};
          /** @type {?} */

          var props = Object.getOwnPropertyNames(temp);

          var _iterator4 = _createForOfIteratorHelper(props),
              _step4;

          try {
            for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {
              var prop = _step4.value;
              col[prop] = temp[prop];
            }
          } catch (err) {
            _iterator4.e(err);
          } finally {
            _iterator4.f();
          }

          if (temp.headerTemplate) {
            col.headerTemplate = temp.headerTemplate;
          }

          if (temp.cellTemplate) {
            col.cellTemplate = temp.cellTemplate;
          }

          if (temp.summaryFunc) {
            col.summaryFunc = temp.summaryFunc;
          }

          if (temp.summaryTemplate) {
            col.summaryTemplate = temp.summaryTemplate;
          }

          result.push(col);
        }
      } catch (err) {
        _iterator3.e(err);
      } finally {
        _iterator3.f();
      }

      return result;
    }
    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    /** @enum {string} */


    var ColumnMode = {
      standard: 'standard',
      flex: 'flex',
      force: 'force'
    };
    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    /** @enum {string} */

    var SelectionType = {
      single: 'single',
      multi: 'multi',
      multiClick: 'multiClick',
      cell: 'cell',
      checkbox: 'checkbox'
    };
    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    /** @enum {string} */

    var SortType = {
      single: 'single',
      multi: 'multi'
    };
    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    /** @enum {string} */

    var ContextmenuType = {
      header: 'header',
      body: 'body'
    };
    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    var DataTableColumnHeaderDirective =
    /**
     * @param {?} template
     */
    function DataTableColumnHeaderDirective(template) {
      _classCallCheck(this, DataTableColumnHeaderDirective);

      this.template = template;
    };

    DataTableColumnHeaderDirective.ɵfac = function DataTableColumnHeaderDirective_Factory(t) {
      return new (t || DataTableColumnHeaderDirective)(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__["TemplateRef"]));
    };

    DataTableColumnHeaderDirective.ɵdir = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineDirective"]({
      type: DataTableColumnHeaderDirective,
      selectors: [["", "ngx-datatable-header-template", ""]]
    });
    /** @nocollapse */

    DataTableColumnHeaderDirective.ctorParameters = function () {
      return [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["TemplateRef"]
      }];
    };

    if (false) {}
    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */


    var DataTableColumnCellDirective =
    /**
     * @param {?} template
     */
    function DataTableColumnCellDirective(template) {
      _classCallCheck(this, DataTableColumnCellDirective);

      this.template = template;
    };

    DataTableColumnCellDirective.ɵfac = function DataTableColumnCellDirective_Factory(t) {
      return new (t || DataTableColumnCellDirective)(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__["TemplateRef"]));
    };

    DataTableColumnCellDirective.ɵdir = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineDirective"]({
      type: DataTableColumnCellDirective,
      selectors: [["", "ngx-datatable-cell-template", ""]]
    });
    /** @nocollapse */

    DataTableColumnCellDirective.ctorParameters = function () {
      return [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["TemplateRef"]
      }];
    };

    if (false) {}
    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */


    var DataTableColumnCellTreeToggle =
    /**
     * @param {?} template
     */
    function DataTableColumnCellTreeToggle(template) {
      _classCallCheck(this, DataTableColumnCellTreeToggle);

      this.template = template;
    };

    DataTableColumnCellTreeToggle.ɵfac = function DataTableColumnCellTreeToggle_Factory(t) {
      return new (t || DataTableColumnCellTreeToggle)(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__["TemplateRef"]));
    };

    DataTableColumnCellTreeToggle.ɵdir = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineDirective"]({
      type: DataTableColumnCellTreeToggle,
      selectors: [["", "ngx-datatable-tree-toggle", ""]]
    });
    /** @nocollapse */

    DataTableColumnCellTreeToggle.ctorParameters = function () {
      return [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["TemplateRef"]
      }];
    };

    if (false) {}
    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */


    var DataTableColumnDirective = /*#__PURE__*/function () {
      /**
       * @param {?} columnChangesService
       */
      function DataTableColumnDirective(columnChangesService) {
        _classCallCheck(this, DataTableColumnDirective);

        this.columnChangesService = columnChangesService;
        this.isFirstChange = true;
      }
      /**
       * @return {?}
       */


      _createClass(DataTableColumnDirective, [{
        key: "cellTemplate",
        get: function get() {
          return this._cellTemplateInput || this._cellTemplateQuery;
        }
        /**
         * @return {?}
         */

      }, {
        key: "headerTemplate",
        get: function get() {
          return this._headerTemplateInput || this._headerTemplateQuery;
        }
        /**
         * @return {?}
         */

      }, {
        key: "treeToggleTemplate",
        get: function get() {
          return this._treeToggleTemplateInput || this._treeToggleTemplateQuery;
        }
        /**
         * @return {?}
         */

      }, {
        key: "ngOnChanges",
        value: function ngOnChanges() {
          if (this.isFirstChange) {
            this.isFirstChange = false;
          } else {
            this.columnChangesService.onInputChange();
          }
        }
      }]);

      return DataTableColumnDirective;
    }();

    DataTableColumnDirective.ɵfac = function DataTableColumnDirective_Factory(t) {
      return new (t || DataTableColumnDirective)(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](ColumnChangesService));
    };

    DataTableColumnDirective.ɵdir = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineDirective"]({
      type: DataTableColumnDirective,
      selectors: [["ngx-datatable-column"]],
      contentQueries: function DataTableColumnDirective_ContentQueries(rf, ctx, dirIndex) {
        if (rf & 1) {
          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵstaticContentQuery"](dirIndex, DataTableColumnCellDirective, true, _angular_core__WEBPACK_IMPORTED_MODULE_0__["TemplateRef"]);

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵstaticContentQuery"](dirIndex, DataTableColumnHeaderDirective, true, _angular_core__WEBPACK_IMPORTED_MODULE_0__["TemplateRef"]);

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵstaticContentQuery"](dirIndex, DataTableColumnCellTreeToggle, true, _angular_core__WEBPACK_IMPORTED_MODULE_0__["TemplateRef"]);
        }

        if (rf & 2) {
          var _t;

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵqueryRefresh"](_t = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵloadQuery"]()) && (ctx._cellTemplateQuery = _t.first);
          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵqueryRefresh"](_t = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵloadQuery"]()) && (ctx._headerTemplateQuery = _t.first);
          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵqueryRefresh"](_t = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵloadQuery"]()) && (ctx._treeToggleTemplateQuery = _t.first);
        }
      },
      inputs: {
        name: "name",
        prop: "prop",
        frozenLeft: "frozenLeft",
        frozenRight: "frozenRight",
        flexGrow: "flexGrow",
        resizeable: "resizeable",
        comparator: "comparator",
        pipe: "pipe",
        sortable: "sortable",
        draggable: "draggable",
        canAutoResize: "canAutoResize",
        minWidth: "minWidth",
        width: "width",
        maxWidth: "maxWidth",
        checkboxable: "checkboxable",
        headerCheckboxable: "headerCheckboxable",
        headerClass: "headerClass",
        cellClass: "cellClass",
        isTreeColumn: "isTreeColumn",
        treeLevelIndent: "treeLevelIndent",
        summaryFunc: "summaryFunc",
        summaryTemplate: "summaryTemplate",
        _cellTemplateInput: ["cellTemplate", "_cellTemplateInput"],
        _headerTemplateInput: ["headerTemplate", "_headerTemplateInput"],
        _treeToggleTemplateInput: ["treeToggleTemplate", "_treeToggleTemplateInput"]
      },
      features: [_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵNgOnChangesFeature"]]
    });
    /** @nocollapse */

    DataTableColumnDirective.ctorParameters = function () {
      return [{
        type: ColumnChangesService
      }];
    };

    DataTableColumnDirective.propDecorators = {
      name: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
      }],
      prop: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
      }],
      frozenLeft: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
      }],
      frozenRight: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
      }],
      flexGrow: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
      }],
      resizeable: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
      }],
      comparator: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
      }],
      pipe: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
      }],
      sortable: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
      }],
      draggable: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
      }],
      canAutoResize: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
      }],
      minWidth: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
      }],
      width: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
      }],
      maxWidth: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
      }],
      checkboxable: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
      }],
      headerCheckboxable: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
      }],
      headerClass: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
      }],
      cellClass: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
      }],
      isTreeColumn: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
      }],
      treeLevelIndent: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
      }],
      summaryFunc: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
      }],
      summaryTemplate: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
      }],
      _cellTemplateInput: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"],
        args: ['cellTemplate']
      }],
      _cellTemplateQuery: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ContentChild"],
        args: [DataTableColumnCellDirective, {
          read: _angular_core__WEBPACK_IMPORTED_MODULE_0__["TemplateRef"],
          "static": true
        }]
      }],
      _headerTemplateInput: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"],
        args: ['headerTemplate']
      }],
      _headerTemplateQuery: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ContentChild"],
        args: [DataTableColumnHeaderDirective, {
          read: _angular_core__WEBPACK_IMPORTED_MODULE_0__["TemplateRef"],
          "static": true
        }]
      }],
      _treeToggleTemplateInput: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"],
        args: ['treeToggleTemplate']
      }],
      _treeToggleTemplateQuery: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ContentChild"],
        args: [DataTableColumnCellTreeToggle, {
          read: _angular_core__WEBPACK_IMPORTED_MODULE_0__["TemplateRef"],
          "static": true
        }]
      }]
    };

    if (false) {}
    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */


    var DatatableRowDetailTemplateDirective =
    /**
     * @param {?} template
     */
    function DatatableRowDetailTemplateDirective(template) {
      _classCallCheck(this, DatatableRowDetailTemplateDirective);

      this.template = template;
    };

    DatatableRowDetailTemplateDirective.ɵfac = function DatatableRowDetailTemplateDirective_Factory(t) {
      return new (t || DatatableRowDetailTemplateDirective)(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__["TemplateRef"]));
    };

    DatatableRowDetailTemplateDirective.ɵdir = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineDirective"]({
      type: DatatableRowDetailTemplateDirective,
      selectors: [["", "ngx-datatable-row-detail-template", ""]]
    });
    /** @nocollapse */

    DatatableRowDetailTemplateDirective.ctorParameters = function () {
      return [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["TemplateRef"]
      }];
    };

    if (false) {}
    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */


    var DatatableRowDetailDirective = /*#__PURE__*/function () {
      function DatatableRowDetailDirective() {
        _classCallCheck(this, DatatableRowDetailDirective);

        /**
         * The detail row height is required especially
         * when virtual scroll is enabled.
         */
        this.rowHeight = 0;
        /**
         * Row detail row visbility was toggled.
         */

        this.toggle = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
      }
      /**
       * @return {?}
       */


      _createClass(DatatableRowDetailDirective, [{
        key: "template",
        get: function get() {
          return this._templateInput || this._templateQuery;
        }
        /**
         * Toggle the expansion of the row
         * @param {?} row
         * @return {?}
         */

      }, {
        key: "toggleExpandRow",
        value: function toggleExpandRow(row) {
          this.toggle.emit({
            type: 'row',
            value: row
          });
        }
        /**
         * API method to expand all the rows.
         * @return {?}
         */

      }, {
        key: "expandAllRows",
        value: function expandAllRows() {
          this.toggle.emit({
            type: 'all',
            value: true
          });
        }
        /**
         * API method to collapse all the rows.
         * @return {?}
         */

      }, {
        key: "collapseAllRows",
        value: function collapseAllRows() {
          this.toggle.emit({
            type: 'all',
            value: false
          });
        }
      }]);

      return DatatableRowDetailDirective;
    }();

    DatatableRowDetailDirective.ɵfac = function DatatableRowDetailDirective_Factory(t) {
      return new (t || DatatableRowDetailDirective)();
    };

    DatatableRowDetailDirective.ɵdir = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineDirective"]({
      type: DatatableRowDetailDirective,
      selectors: [["ngx-datatable-row-detail"]],
      contentQueries: function DatatableRowDetailDirective_ContentQueries(rf, ctx, dirIndex) {
        if (rf & 1) {
          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵstaticContentQuery"](dirIndex, DatatableRowDetailTemplateDirective, true, _angular_core__WEBPACK_IMPORTED_MODULE_0__["TemplateRef"]);
        }

        if (rf & 2) {
          var _t;

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵqueryRefresh"](_t = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵloadQuery"]()) && (ctx._templateQuery = _t.first);
        }
      },
      inputs: {
        rowHeight: "rowHeight",
        _templateInput: ["template", "_templateInput"]
      },
      outputs: {
        toggle: "toggle"
      }
    });
    DatatableRowDetailDirective.propDecorators = {
      rowHeight: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
      }],
      _templateInput: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"],
        args: ['template']
      }],
      _templateQuery: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ContentChild"],
        args: [DatatableRowDetailTemplateDirective, {
          read: _angular_core__WEBPACK_IMPORTED_MODULE_0__["TemplateRef"],
          "static": true
        }]
      }],
      toggle: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"]
      }]
    };

    if (false) {}
    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */


    var DatatableFooterDirective = /*#__PURE__*/function () {
      function DatatableFooterDirective() {
        _classCallCheck(this, DatatableFooterDirective);
      }

      _createClass(DatatableFooterDirective, [{
        key: "template",
        get:
        /**
         * @return {?}
         */
        function get() {
          return this._templateInput || this._templateQuery;
        }
      }]);

      return DatatableFooterDirective;
    }();

    DatatableFooterDirective.ɵfac = function DatatableFooterDirective_Factory(t) {
      return new (t || DatatableFooterDirective)();
    };

    DatatableFooterDirective.ɵdir = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineDirective"]({
      type: DatatableFooterDirective,
      selectors: [["ngx-datatable-footer"]],
      contentQueries: function DatatableFooterDirective_ContentQueries(rf, ctx, dirIndex) {
        if (rf & 1) {
          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵcontentQuery"](dirIndex, DataTableFooterTemplateDirective, true, _angular_core__WEBPACK_IMPORTED_MODULE_0__["TemplateRef"]);
        }

        if (rf & 2) {
          var _t;

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵqueryRefresh"](_t = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵloadQuery"]()) && (ctx._templateQuery = _t.first);
        }
      },
      inputs: {
        footerHeight: "footerHeight",
        totalMessage: "totalMessage",
        selectedMessage: "selectedMessage",
        pagerLeftArrowIcon: "pagerLeftArrowIcon",
        pagerRightArrowIcon: "pagerRightArrowIcon",
        pagerPreviousIcon: "pagerPreviousIcon",
        pagerNextIcon: "pagerNextIcon",
        _templateInput: ["template", "_templateInput"]
      }
    });
    DatatableFooterDirective.propDecorators = {
      footerHeight: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
      }],
      totalMessage: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
      }],
      selectedMessage: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
      }],
      pagerLeftArrowIcon: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
      }],
      pagerRightArrowIcon: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
      }],
      pagerPreviousIcon: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
      }],
      pagerNextIcon: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
      }],
      _templateInput: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"],
        args: ['template']
      }],
      _templateQuery: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ContentChild"],
        args: [DataTableFooterTemplateDirective, {
          read: _angular_core__WEBPACK_IMPORTED_MODULE_0__["TemplateRef"],
          "static": false
        }]
      }]
    };

    if (false) {}
    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    /**
     * Returns the columns by pin.
     * @param {?} cols
     * @return {?}
     */


    function columnsByPin(cols) {
      /** @type {?} */
      var ret = {
        left: [],
        center: [],
        right: []
      };

      if (cols) {
        var _iterator5 = _createForOfIteratorHelper(cols),
            _step5;

        try {
          for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {
            var col = _step5.value;

            if (col.frozenLeft) {
              ret.left.push(col);
            } else if (col.frozenRight) {
              ret.right.push(col);
            } else {
              ret.center.push(col);
            }
          }
        } catch (err) {
          _iterator5.e(err);
        } finally {
          _iterator5.f();
        }
      }

      return ret;
    }
    /**
     * Returns the widths of all group sets of a column
     * @param {?} groups
     * @param {?} all
     * @return {?}
     */


    function columnGroupWidths(groups, all) {
      return {
        left: columnTotalWidth(groups.left),
        center: columnTotalWidth(groups.center),
        right: columnTotalWidth(groups.right),
        total: Math.floor(columnTotalWidth(all))
      };
    }
    /**
     * Calculates the total width of all columns and their groups
     * @param {?} columns
     * @param {?=} prop
     * @return {?}
     */


    function columnTotalWidth(columns, prop) {
      /** @type {?} */
      var totalWidth = 0;

      if (columns) {
        var _iterator6 = _createForOfIteratorHelper(columns),
            _step6;

        try {
          for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {
            var c = _step6.value;

            /** @type {?} */
            var has = prop && c[prop];
            /** @type {?} */

            var width = has ? c[prop] : c.width;
            totalWidth = totalWidth + parseFloat(width);
          }
        } catch (err) {
          _iterator6.e(err);
        } finally {
          _iterator6.f();
        }
      }

      return totalWidth;
    }
    /**
     * Calculates the total width of all columns and their groups
     * @param {?} columns
     * @param {?=} prop
     * @return {?}
     */


    function columnsTotalWidth(columns, prop) {
      /** @type {?} */
      var totalWidth = 0;

      var _iterator7 = _createForOfIteratorHelper(columns),
          _step7;

      try {
        for (_iterator7.s(); !(_step7 = _iterator7.n()).done;) {
          var column = _step7.value;

          /** @type {?} */
          var has = prop && column[prop];
          totalWidth = totalWidth + (has ? column[prop] : column.width);
        }
      } catch (err) {
        _iterator7.e(err);
      } finally {
        _iterator7.f();
      }

      return totalWidth;
    }
    /**
     * @param {?} val
     * @return {?}
     */


    function columnsByPinArr(val) {
      /** @type {?} */
      var colsByPinArr = [];
      /** @type {?} */

      var colsByPin = columnsByPin(val);
      colsByPinArr.push({
        type: 'left',
        columns: colsByPin['left']
      });
      colsByPinArr.push({
        type: 'center',
        columns: colsByPin['center']
      });
      colsByPinArr.push({
        type: 'right',
        columns: colsByPin['right']
      });
      return colsByPinArr;
    }
    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    /**
     * This object contains the cache of the various row heights that are present inside
     * the data table.   Its based on Fenwick tree data structure that helps with
     * querying sums that have time complexity of log n.
     *
     * Fenwick Tree Credits: http://petr-mitrichev.blogspot.com/2013/05/fenwick-tree-range-updates.html
     * https://github.com/mikolalysenko/fenwick-tree
     *
     */


    var RowHeightCache = /*#__PURE__*/function () {
      function RowHeightCache() {
        _classCallCheck(this, RowHeightCache);

        /**
         * Tree Array stores the cumulative information of the row heights to perform efficient
         * range queries and updates.  Currently the tree is initialized to the base row
         * height instead of the detail row height.
         */
        this.treeArray = [];
      }
      /**
       * Clear the Tree array.
       * @return {?}
       */


      _createClass(RowHeightCache, [{
        key: "clearCache",
        value: function clearCache() {
          this.treeArray = [];
        }
        /**
         * Initialize the Fenwick tree with row Heights.
         *
         * @param {?} details
         * @return {?}
         */

      }, {
        key: "initCache",
        value: function initCache(details) {
          var rows = details.rows,
              rowHeight = details.rowHeight,
              detailRowHeight = details.detailRowHeight,
              externalVirtual = details.externalVirtual,
              rowCount = details.rowCount,
              rowIndexes = details.rowIndexes,
              rowExpansions = details.rowExpansions;
          /** @type {?} */

          var isFn = typeof rowHeight === 'function';
          /** @type {?} */

          var isDetailFn = typeof detailRowHeight === 'function';

          if (!isFn && isNaN(rowHeight)) {
            throw new Error("Row Height cache initialization failed. Please ensure that 'rowHeight' is a\n        valid number or function value: (".concat(rowHeight, ") when 'scrollbarV' is enabled."));
          } // Add this additional guard in case detailRowHeight is set to 'auto' as it wont work.


          if (!isDetailFn && isNaN(detailRowHeight)) {
            throw new Error("Row Height cache initialization failed. Please ensure that 'detailRowHeight' is a\n        valid number or function value: (".concat(detailRowHeight, ") when 'scrollbarV' is enabled."));
          }
          /** @type {?} */


          var n = externalVirtual ? rowCount : rows.length;
          this.treeArray = new Array(n);

          for (var i = 0; i < n; ++i) {
            this.treeArray[i] = 0;
          }

          for (var _i2 = 0; _i2 < n; ++_i2) {
            /** @type {?} */
            var row = rows[_i2];
            /** @type {?} */

            var currentRowHeight = rowHeight;

            if (isFn) {
              currentRowHeight = rowHeight(row);
            } // Add the detail row height to the already expanded rows.
            // This is useful for the table that goes through a filter or sort.

            /** @type {?} */


            var expanded = rowExpansions.get(row);

            if (row && expanded === 1) {
              if (isDetailFn) {
                /** @type {?} */
                var index = rowIndexes.get(row);
                currentRowHeight += detailRowHeight(row, index);
              } else {
                currentRowHeight += detailRowHeight;
              }
            }

            this.update(_i2, currentRowHeight);
          }
        }
        /**
         * Given the ScrollY position i.e. sum, provide the rowIndex
         * that is present in the current view port.  Below handles edge cases.
         * @param {?} scrollY
         * @return {?}
         */

      }, {
        key: "getRowIndex",
        value: function getRowIndex(scrollY) {
          if (scrollY === 0) return 0;
          return this.calcRowIndex(scrollY);
        }
        /**
         * When a row is expanded or rowHeight is changed, update the height.  This can
         * be utilized in future when Angular Data table supports dynamic row heights.
         * @param {?} atRowIndex
         * @param {?} byRowHeight
         * @return {?}
         */

      }, {
        key: "update",
        value: function update(atRowIndex, byRowHeight) {
          if (!this.treeArray.length) {
            throw new Error("Update at index ".concat(atRowIndex, " with value ").concat(byRowHeight, " failed:\n        Row Height cache not initialized."));
          }
          /** @type {?} */


          var n = this.treeArray.length;
          atRowIndex |= 0;

          while (atRowIndex < n) {
            this.treeArray[atRowIndex] += byRowHeight;
            atRowIndex |= atRowIndex + 1;
          }
        }
        /**
         * Range Sum query from 1 to the rowIndex
         * @param {?} atIndex
         * @return {?}
         */

      }, {
        key: "query",
        value: function query(atIndex) {
          if (!this.treeArray.length) {
            throw new Error("query at index ".concat(atIndex, " failed: Fenwick tree array not initialized."));
          }
          /** @type {?} */


          var sum = 0;
          atIndex |= 0;

          while (atIndex >= 0) {
            sum += this.treeArray[atIndex];
            atIndex = (atIndex & atIndex + 1) - 1;
          }

          return sum;
        }
        /**
         * Find the total height between 2 row indexes
         * @param {?} atIndexA
         * @param {?} atIndexB
         * @return {?}
         */

      }, {
        key: "queryBetween",
        value: function queryBetween(atIndexA, atIndexB) {
          return this.query(atIndexB) - this.query(atIndexA - 1);
        }
        /**
         * Given the ScrollY position i.e. sum, provide the rowIndex
         * that is present in the current view port.
         * @private
         * @param {?} sum
         * @return {?}
         */

      }, {
        key: "calcRowIndex",
        value: function calcRowIndex(sum) {
          if (!this.treeArray.length) return 0;
          /** @type {?} */

          var pos = -1;
          /** @type {?} */

          var dataLength = this.treeArray.length; // Get the highest bit for the block size.

          /** @type {?} */

          var highestBit = Math.pow(2, dataLength.toString(2).length - 1);

          for (var blockSize = highestBit; blockSize !== 0; blockSize >>= 1) {
            /** @type {?} */
            var nextPos = pos + blockSize;

            if (nextPos < dataLength && sum >= this.treeArray[nextPos]) {
              sum -= this.treeArray[nextPos];
              pos = nextPos;
            }
          }

          return pos + 1;
        }
      }]);

      return RowHeightCache;
    }();

    if (false) {}
    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    /** @type {?} */


    var cache = {};
    /** @type {?} */

    var testStyle = typeof document !== 'undefined' ? document.createElement('div').style : undefined; // Get Prefix
    // http://davidwalsh.name/vendor-prefix

    var ɵ0 =
    /**
    * @return {?}
    */
    function ɵ0() {
      /** @type {?} */
      var styles = typeof window !== 'undefined' ? window.getComputedStyle(document.documentElement, '') : undefined;
      /** @type {?} */

      var match = typeof styles !== 'undefined' ? Array.prototype.slice.call(styles).join('').match(/-(moz|webkit|ms)-/) : null;
      /** @type {?} */

      var pre = match !== null ? match[1] : undefined; // tslint:disable-next-line: tsr-detect-non-literal-regexp

      /** @type {?} */

      var dom = typeof pre !== 'undefined' ? 'WebKit|Moz|MS|O'.match(new RegExp('(' + pre + ')', 'i'))[1] : undefined;
      return dom ? {
        dom: dom,
        lowercase: pre,
        css: "-".concat(pre, "-"),
        js: pre[0].toUpperCase() + pre.substr(1)
      } : undefined;
    };
    /** @type {?} */


    var prefix = ɵ0();
    /**
     * @param {?} property
     * @return {?}
     */

    function getVendorPrefixedName(property) {
      /** @type {?} */
      var name = camelCase(property);

      if (!cache[name]) {
        if (prefix !== undefined && testStyle[prefix.css + property] !== undefined) {
          cache[name] = prefix.css + property;
        } else if (testStyle[property] !== undefined) {
          cache[name] = property;
        }
      }

      return cache[name];
    }
    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    // browser detection and prefixing tools

    /** @type {?} */


    var transform = typeof window !== 'undefined' ? getVendorPrefixedName('transform') : undefined;
    /** @type {?} */

    var backfaceVisibility = typeof window !== 'undefined' ? getVendorPrefixedName('backfaceVisibility') : undefined;
    /** @type {?} */

    var hasCSSTransforms = typeof window !== 'undefined' ? !!getVendorPrefixedName('transform') : undefined;
    /** @type {?} */

    var hasCSS3DTransforms = typeof window !== 'undefined' ? !!getVendorPrefixedName('perspective') : undefined;
    /** @type {?} */

    var ua = typeof window !== 'undefined' ? window.navigator.userAgent : 'Chrome';
    /** @type {?} */

    var isSafari = /Safari\//.test(ua) && !/Chrome\//.test(ua);
    /**
     * @param {?} styles
     * @param {?} x
     * @param {?} y
     * @return {?}
     */

    function translateXY(styles, x, y) {
      if (typeof transform !== 'undefined' && hasCSSTransforms) {
        if (!isSafari && hasCSS3DTransforms) {
          styles[transform] = "translate3d(".concat(x, "px, ").concat(y, "px, 0)");
          styles[backfaceVisibility] = 'hidden';
        } else {
          styles[camelCase(transform)] = "translate(".concat(x, "px, ").concat(y, "px)");
        }
      } else {
        styles.top = "".concat(y, "px");
        styles.left = "".concat(x, "px");
      }
    }
    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */


    var DataTableBodyComponent = /*#__PURE__*/function () {
      /**
       * Creates an instance of DataTableBodyComponent.
       * @param {?} cd
       */
      function DataTableBodyComponent(cd) {
        var _this10 = this;

        _classCallCheck(this, DataTableBodyComponent);

        this.cd = cd;
        this.selected = [];
        this.scroll = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
        this.page = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
        this.activate = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
        this.select = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
        this.detailToggle = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
        this.rowContextmenu = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"](false);
        this.treeAction = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
        this.rowHeightsCache = new RowHeightCache();
        this.temp = [];
        this.offsetY = 0;
        this.indexes = {};
        this.rowIndexes = new Map();
        this.rowExpansions = new Map();
        /**
         * Get the height of the detail row.
         */

        this.getDetailRowHeight =
        /**
        * @param {?=} row
        * @param {?=} index
        * @return {?}
        */
        function (row, index) {
          if (!_this10.rowDetail) {
            return 0;
          }
          /** @type {?} */


          var rowHeight = _this10.rowDetail.rowHeight;
          return typeof rowHeight === 'function' ? rowHeight(row, index) : rowHeight;
        }; // declare fn here so we can get access to the `this` property


        this.rowTrackingFn =
        /**
        * @param {?} index
        * @param {?} row
        * @return {?}
        */
        function (index, row) {
          /** @type {?} */
          var idx = _this10.getRowIndex(row);

          if (_this10.trackByProp) {
            return row[_this10.trackByProp];
          } else {
            return idx;
          }
        };
      }
      /**
       * @param {?} val
       * @return {?}
       */


      _createClass(DataTableBodyComponent, [{
        key: "pageSize",
        get:
        /**
         * @return {?}
         */
        function get() {
          return this._pageSize;
        }
        /**
         * @param {?} val
         * @return {?}
         */
        ,
        set: function set(val) {
          this._pageSize = val;
          this.recalcLayout();
        }
      }, {
        key: "rows",
        get:
        /**
         * @return {?}
         */
        function get() {
          return this._rows;
        }
        /**
         * @param {?} val
         * @return {?}
         */
        ,
        set: function set(val) {
          this._rows = val;
          this.rowExpansions.clear();
          this.recalcLayout();
        }
      }, {
        key: "columns",
        get:
        /**
         * @return {?}
         */
        function get() {
          return this._columns;
        }
        /**
         * @param {?} val
         * @return {?}
         */
        ,
        set: function set(val) {
          this._columns = val;
          /** @type {?} */

          var colsByPin = columnsByPin(val);
          this.columnGroupWidths = columnGroupWidths(colsByPin, val);
        }
      }, {
        key: "offset",
        get:
        /**
         * @return {?}
         */
        function get() {
          return this._offset;
        }
        /**
         * @param {?} val
         * @return {?}
         */
        ,
        set: function set(val) {
          this._offset = val;
          this.recalcLayout();
        }
      }, {
        key: "rowCount",
        get:
        /**
         * @return {?}
         */
        function get() {
          return this._rowCount;
        }
        /**
         * @return {?}
         */
        ,
        set: function set(val) {
          this._rowCount = val;
          this.recalcLayout();
        }
      }, {
        key: "bodyWidth",
        get: function get() {
          if (this.scrollbarH) {
            return this.innerWidth + 'px';
          } else {
            return '100%';
          }
        }
        /**
         * @param {?} val
         * @return {?}
         */

      }, {
        key: "bodyHeight",
        get:
        /**
         * @return {?}
         */
        function get() {
          return this._bodyHeight;
        }
        /**
         * Returns if selection is enabled.
         * @return {?}
         */
        ,
        set: function set(val) {
          if (this.scrollbarV) {
            this._bodyHeight = val + 'px';
          } else {
            this._bodyHeight = 'auto';
          }

          this.recalcLayout();
        }
      }, {
        key: "selectEnabled",
        get: function get() {
          return !!this.selectionType;
        }
        /**
         * Property that would calculate the height of scroll bar
         * based on the row heights cache for virtual scroll and virtualization. Other scenarios
         * calculate scroll height automatically (as height will be undefined).
         * @return {?}
         */

      }, {
        key: "scrollHeight",
        get: function get() {
          if (this.scrollbarV && this.virtualization && this.rowCount) {
            return this.rowHeightsCache.query(this.rowCount - 1);
          } // avoid TS7030: Not all code paths return a value.


          return undefined;
        }
        /**
         * Called after the constructor, initializing input properties
         * @return {?}
         */

      }, {
        key: "ngOnInit",
        value: function ngOnInit() {
          var _this11 = this;

          if (this.rowDetail) {
            this.listener = this.rowDetail.toggle.subscribe(
            /**
            * @param {?} __0
            * @return {?}
            */
            function (_ref5) {
              var type = _ref5.type,
                  value = _ref5.value;

              if (type === 'row') {
                _this11.toggleRowExpansion(value);
              }

              if (type === 'all') {
                _this11.toggleAllRows(value);
              } // Refresh rows after toggle
              // Fixes #883


              _this11.updateIndexes();

              _this11.updateRows();

              _this11.cd.markForCheck();
            });
          }

          if (this.groupHeader) {
            this.listener = this.groupHeader.toggle.subscribe(
            /**
            * @param {?} __0
            * @return {?}
            */
            function (_ref6) {
              var type = _ref6.type,
                  value = _ref6.value;

              if (type === 'group') {
                _this11.toggleRowExpansion(value);
              }

              if (type === 'all') {
                _this11.toggleAllRows(value);
              } // Refresh rows after toggle
              // Fixes #883


              _this11.updateIndexes();

              _this11.updateRows();

              _this11.cd.markForCheck();
            });
          }
        }
        /**
         * Called once, before the instance is destroyed.
         * @return {?}
         */

      }, {
        key: "ngOnDestroy",
        value: function ngOnDestroy() {
          if (this.rowDetail || this.groupHeader) {
            this.listener.unsubscribe();
          }
        }
        /**
         * Updates the Y offset given a new offset.
         * @param {?=} offset
         * @return {?}
         */

      }, {
        key: "updateOffsetY",
        value: function updateOffsetY(offset) {
          // scroller is missing on empty table
          if (!this.scroller) {
            return;
          }

          if (this.scrollbarV && this.virtualization && offset) {
            // First get the row Index that we need to move to.

            /** @type {?} */
            var rowIndex = this.pageSize * offset;
            offset = this.rowHeightsCache.query(rowIndex - 1);
          } else if (this.scrollbarV && !this.virtualization) {
            offset = 0;
          }

          this.scroller.setOffset(offset || 0);
        }
        /**
         * Body was scrolled, this is mainly useful for
         * when a user is server-side pagination via virtual scroll.
         * @param {?} event
         * @return {?}
         */

      }, {
        key: "onBodyScroll",
        value: function onBodyScroll(event) {
          /** @type {?} */
          var scrollYPos = event.scrollYPos;
          /** @type {?} */

          var scrollXPos = event.scrollXPos; // if scroll change, trigger update
          // this is mainly used for header cell positions

          if (this.offsetY !== scrollYPos || this.offsetX !== scrollXPos) {
            this.scroll.emit({
              offsetY: scrollYPos,
              offsetX: scrollXPos
            });
          }

          this.offsetY = scrollYPos;
          this.offsetX = scrollXPos;
          this.updateIndexes();
          this.updatePage(event.direction);
          this.updateRows();
        }
        /**
         * Updates the page given a direction.
         * @param {?} direction
         * @return {?}
         */

      }, {
        key: "updatePage",
        value: function updatePage(direction) {
          /** @type {?} */
          var offset = this.indexes.first / this.pageSize;

          if (direction === 'up') {
            offset = Math.ceil(offset);
          } else if (direction === 'down') {
            offset = Math.floor(offset);
          }

          if (direction !== undefined && !isNaN(offset)) {
            this.page.emit({
              offset: offset
            });
          }
        }
        /**
         * Updates the rows in the view port
         * @return {?}
         */

      }, {
        key: "updateRows",
        value: function updateRows() {
          var _this$indexes = this.indexes,
              first = _this$indexes.first,
              last = _this$indexes.last;
          /** @type {?} */

          var rowIndex = first;
          /** @type {?} */

          var idx = 0;
          /** @type {?} */

          var temp = [];
          this.rowIndexes.clear(); // if grouprowsby has been specified treat row paging
          // parameters as group paging parameters ie if limit 10 has been
          // specified treat it as 10 groups rather than 10 rows

          if (this.groupedRows) {
            /** @type {?} */
            var maxRowsPerGroup = 3; // if there is only one group set the maximum number of
            // rows per group the same as the total number of rows

            if (this.groupedRows.length === 1) {
              maxRowsPerGroup = this.groupedRows[0].value.length;
            }

            while (rowIndex < last && rowIndex < this.groupedRows.length) {
              // Add the groups into this page

              /** @type {?} */
              var group = this.groupedRows[rowIndex];
              temp[idx] = group;
              idx++; // Group index in this context

              rowIndex++;
            }
          } else {
            while (rowIndex < last && rowIndex < this.rowCount) {
              /** @type {?} */
              var row = this.rows[rowIndex];

              if (row) {
                this.rowIndexes.set(row, rowIndex);
                temp[idx] = row;
              }

              idx++;
              rowIndex++;
            }
          }

          this.temp = temp;
        }
        /**
         * Get the row height
         * @param {?} row
         * @return {?}
         */

      }, {
        key: "getRowHeight",
        value: function getRowHeight(row) {
          // if its a function return it
          if (typeof this.rowHeight === 'function') {
            return this.rowHeight(row);
          }

          return this.rowHeight;
        }
        /**
         * @param {?} group the group with all rows
         * @return {?}
         */

      }, {
        key: "getGroupHeight",
        value: function getGroupHeight(group) {
          /** @type {?} */
          var rowHeight = 0;

          if (group.value) {
            for (var index = 0; index < group.value.length; index++) {
              rowHeight += this.getRowAndDetailHeight(group.value[index]);
            }
          }

          return rowHeight;
        }
        /**
         * Calculate row height based on the expanded state of the row.
         * @param {?} row
         * @return {?}
         */

      }, {
        key: "getRowAndDetailHeight",
        value: function getRowAndDetailHeight(row) {
          /** @type {?} */
          var rowHeight = this.getRowHeight(row);
          /** @type {?} */

          var expanded = this.rowExpansions.get(row); // Adding detail row height if its expanded.

          if (expanded === 1) {
            rowHeight += this.getDetailRowHeight(row);
          }

          return rowHeight;
        }
        /**
         * Calculates the styles for the row so that the rows can be moved in 2D space
         * during virtual scroll inside the DOM.   In the below case the Y position is
         * manipulated.   As an example, if the height of row 0 is 30 px and row 1 is
         * 100 px then following styles are generated:
         *
         * transform: translate3d(0px, 0px, 0px);    ->  row0
         * transform: translate3d(0px, 30px, 0px);   ->  row1
         * transform: translate3d(0px, 130px, 0px);  ->  row2
         *
         * Row heights have to be calculated based on the row heights cache as we wont
         * be able to determine which row is of what height before hand.  In the above
         * case the positionY of the translate3d for row2 would be the sum of all the
         * heights of the rows before it (i.e. row0 and row1).
         *
         * \@memberOf DataTableBodyComponent
         * @param {?} rows the row that needs to be placed in the 2D space.
         * @return {?} the CSS3 style to be applied
         *
         */

      }, {
        key: "getRowsStyles",
        value: function getRowsStyles(rows) {
          /** @type {?} */
          var styles = {}; // only add styles for the group if there is a group

          if (this.groupedRows) {
            styles.width = this.columnGroupWidths.total;
          }

          if (this.scrollbarV && this.virtualization) {
            /** @type {?} */
            var idx = 0;

            if (this.groupedRows) {
              // Get the latest row rowindex in a group

              /** @type {?} */
              var row = rows[rows.length - 1];
              idx = row ? this.getRowIndex(row) : 0;
            } else {
              idx = this.getRowIndex(rows);
            } // const pos = idx * rowHeight;
            // The position of this row would be the sum of all row heights
            // until the previous row position.

            /** @type {?} */


            var pos = this.rowHeightsCache.query(idx - 1);
            translateXY(styles, 0, pos);
          }

          return styles;
        }
        /**
         * Calculate bottom summary row offset for scrollbar mode.
         * For more information about cache and offset calculation
         * see description for `getRowsStyles` method
         *
         * \@memberOf DataTableBodyComponent
         * @return {?} the CSS3 style to be applied
         *
         */

      }, {
        key: "getBottomSummaryRowStyles",
        value: function getBottomSummaryRowStyles() {
          if (!this.scrollbarV || !this.rows || !this.rows.length) {
            return null;
          }
          /** @type {?} */


          var styles = {
            position: 'absolute'
          };
          /** @type {?} */

          var pos = this.rowHeightsCache.query(this.rows.length - 1);
          translateXY(styles, 0, pos);
          return styles;
        }
        /**
         * Hides the loading indicator
         * @return {?}
         */

      }, {
        key: "hideIndicator",
        value: function hideIndicator() {
          var _this12 = this;

          setTimeout(
          /**
          * @return {?}
          */
          function () {
            return _this12.loadingIndicator = false;
          }, 500);
        }
        /**
         * Updates the index of the rows in the viewport
         * @return {?}
         */

      }, {
        key: "updateIndexes",
        value: function updateIndexes() {
          /** @type {?} */
          var first = 0;
          /** @type {?} */

          var last = 0;

          if (this.scrollbarV) {
            if (this.virtualization) {
              // Calculation of the first and last indexes will be based on where the
              // scrollY position would be at.  The last index would be the one
              // that shows up inside the view port the last.

              /** @type {?} */
              var height = parseInt(this.bodyHeight, 0);
              first = this.rowHeightsCache.getRowIndex(this.offsetY);
              last = this.rowHeightsCache.getRowIndex(height + this.offsetY) + 1;
            } else {
              // If virtual rows are not needed
              // We render all in one go
              first = 0;
              last = this.rowCount;
            }
          } else {
            // The server is handling paging and will pass an array that begins with the
            // element at a specified offset.  first should always be 0 with external paging.
            if (!this.externalPaging) {
              first = Math.max(this.offset * this.pageSize, 0);
            }

            last = Math.min(first + this.pageSize, this.rowCount);
          }

          this.indexes = {
            first: first,
            last: last
          };
        }
        /**
         * Refreshes the full Row Height cache.  Should be used
         * when the entire row array state has changed.
         * @return {?}
         */

      }, {
        key: "refreshRowHeightCache",
        value: function refreshRowHeightCache() {
          if (!this.scrollbarV || this.scrollbarV && !this.virtualization) {
            return;
          } // clear the previous row height cache if already present.
          // this is useful during sorts, filters where the state of the
          // rows array is changed.


          this.rowHeightsCache.clearCache(); // Initialize the tree only if there are rows inside the tree.

          if (this.rows && this.rows.length) {
            this.rowHeightsCache.initCache({
              rows: this.rows,
              rowHeight: this.rowHeight,
              detailRowHeight: this.getDetailRowHeight,
              externalVirtual: this.scrollbarV && this.externalPaging,
              rowCount: this.rowCount,
              rowIndexes: this.rowIndexes,
              rowExpansions: this.rowExpansions
            });
          }
        }
        /**
         * Gets the index for the view port
         * @return {?}
         */

      }, {
        key: "getAdjustedViewPortIndex",
        value: function getAdjustedViewPortIndex() {
          // Capture the row index of the first row that is visible on the viewport.
          // If the scroll bar is just below the row which is highlighted then make that as the
          // first index.

          /** @type {?} */
          var viewPortFirstRowIndex = this.indexes.first;

          if (this.scrollbarV && this.virtualization) {
            /** @type {?} */
            var offsetScroll = this.rowHeightsCache.query(viewPortFirstRowIndex - 1);
            return offsetScroll <= this.offsetY ? viewPortFirstRowIndex - 1 : viewPortFirstRowIndex;
          }

          return viewPortFirstRowIndex;
        }
        /**
         * Toggle the Expansion of the row i.e. if the row is expanded then it will
         * collapse and vice versa.   Note that the expanded status is stored as
         * a part of the row object itself as we have to preserve the expanded row
         * status in case of sorting and filtering of the row set.
         * @param {?} row
         * @return {?}
         */

      }, {
        key: "toggleRowExpansion",
        value: function toggleRowExpansion(row) {
          // Capture the row index of the first row that is visible on the viewport.

          /** @type {?} */
          var viewPortFirstRowIndex = this.getAdjustedViewPortIndex();
          /** @type {?} */

          var expanded = this.rowExpansions.get(row); // If the detailRowHeight is auto --> only in case of non-virtualized scroll

          if (this.scrollbarV && this.virtualization) {
            /** @type {?} */
            var detailRowHeight = this.getDetailRowHeight(row) * (expanded ? -1 : 1); // const idx = this.rowIndexes.get(row) || 0;

            /** @type {?} */

            var idx = this.getRowIndex(row);
            this.rowHeightsCache.update(idx, detailRowHeight);
          } // Update the toggled row and update thive nevere heights in the cache.


          expanded = expanded ^= 1;
          this.rowExpansions.set(row, expanded);
          this.detailToggle.emit({
            rows: [row],
            currentIndex: viewPortFirstRowIndex
          });
        }
        /**
         * Expand/Collapse all the rows no matter what their state is.
         * @param {?} expanded
         * @return {?}
         */

      }, {
        key: "toggleAllRows",
        value: function toggleAllRows(expanded) {
          // clear prev expansions
          this.rowExpansions.clear();
          /** @type {?} */

          var rowExpanded = expanded ? 1 : 0; // Capture the row index of the first row that is visible on the viewport.

          /** @type {?} */

          var viewPortFirstRowIndex = this.getAdjustedViewPortIndex();

          var _iterator8 = _createForOfIteratorHelper(this.rows),
              _step8;

          try {
            for (_iterator8.s(); !(_step8 = _iterator8.n()).done;) {
              var row = _step8.value;
              this.rowExpansions.set(row, rowExpanded);
            }
          } catch (err) {
            _iterator8.e(err);
          } finally {
            _iterator8.f();
          }

          if (this.scrollbarV) {
            // Refresh the full row heights cache since every row was affected.
            this.recalcLayout();
          } // Emit all rows that have been expanded.


          this.detailToggle.emit({
            rows: this.rows,
            currentIndex: viewPortFirstRowIndex
          });
        }
        /**
         * Recalculates the table
         * @return {?}
         */

      }, {
        key: "recalcLayout",
        value: function recalcLayout() {
          this.refreshRowHeightCache();
          this.updateIndexes();
          this.updateRows();
        }
        /**
         * Tracks the column
         * @param {?} index
         * @param {?} column
         * @return {?}
         */

      }, {
        key: "columnTrackingFn",
        value: function columnTrackingFn(index, column) {
          return column.$$id;
        }
        /**
         * Gets the row pinning group styles
         * @param {?} group
         * @return {?}
         */

      }, {
        key: "stylesByGroup",
        value: function stylesByGroup(group) {
          /** @type {?} */
          var widths = this.columnGroupWidths;
          /** @type {?} */

          var offsetX = this.offsetX;
          /** @type {?} */

          var styles = {
            width: "".concat(widths[group], "px")
          };

          if (group === 'left') {
            translateXY(styles, offsetX, 0);
          } else if (group === 'right') {
            /** @type {?} */
            var bodyWidth = parseInt(this.innerWidth + '', 0);
            /** @type {?} */

            var totalDiff = widths.total - bodyWidth;
            /** @type {?} */

            var offsetDiff = totalDiff - offsetX;
            /** @type {?} */

            var offset = offsetDiff * -1;
            translateXY(styles, offset, 0);
          }

          return styles;
        }
        /**
         * Returns if the row was expanded and set default row expansion when row expansion is empty
         * @param {?} row
         * @return {?}
         */

      }, {
        key: "getRowExpanded",
        value: function getRowExpanded(row) {
          if (this.rowExpansions.size === 0 && this.groupExpansionDefault) {
            var _iterator9 = _createForOfIteratorHelper(this.groupedRows),
                _step9;

            try {
              for (_iterator9.s(); !(_step9 = _iterator9.n()).done;) {
                var group = _step9.value;
                this.rowExpansions.set(group, 1);
              }
            } catch (err) {
              _iterator9.e(err);
            } finally {
              _iterator9.f();
            }
          }
          /** @type {?} */


          var expanded = this.rowExpansions.get(row);
          return expanded === 1;
        }
        /**
         * Gets the row index given a row
         * @param {?} row
         * @return {?}
         */

      }, {
        key: "getRowIndex",
        value: function getRowIndex(row) {
          return this.rowIndexes.get(row) || 0;
        }
        /**
         * @param {?} row
         * @return {?}
         */

      }, {
        key: "onTreeAction",
        value: function onTreeAction(row) {
          this.treeAction.emit({
            row: row
          });
        }
      }]);

      return DataTableBodyComponent;
    }();

    DataTableBodyComponent.ɵfac = function DataTableBodyComponent_Factory(t) {
      return new (t || DataTableBodyComponent)(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__["ChangeDetectorRef"]));
    };

    DataTableBodyComponent.ɵcmp = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineComponent"]({
      type: DataTableBodyComponent,
      selectors: [["datatable-body"]],
      viewQuery: function DataTableBodyComponent_Query(rf, ctx) {
        if (rf & 1) {
          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵviewQuery"](ScrollerComponent, true);
        }

        if (rf & 2) {
          var _t;

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵqueryRefresh"](_t = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵloadQuery"]()) && (ctx.scroller = _t.first);
        }
      },
      hostAttrs: [1, "datatable-body"],
      hostVars: 4,
      hostBindings: function DataTableBodyComponent_HostBindings(rf, ctx) {
        if (rf & 2) {
          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵstyleProp"]("width", ctx.bodyWidth)("height", ctx.bodyHeight);
        }
      },
      inputs: {
        selected: "selected",
        pageSize: "pageSize",
        rows: "rows",
        columns: "columns",
        offset: "offset",
        rowCount: "rowCount",
        bodyHeight: "bodyHeight",
        offsetX: "offsetX",
        loadingIndicator: "loadingIndicator",
        scrollbarV: "scrollbarV",
        scrollbarH: "scrollbarH",
        externalPaging: "externalPaging",
        rowHeight: "rowHeight",
        emptyMessage: "emptyMessage",
        selectionType: "selectionType",
        rowIdentity: "rowIdentity",
        rowDetail: "rowDetail",
        groupHeader: "groupHeader",
        selectCheck: "selectCheck",
        displayCheck: "displayCheck",
        trackByProp: "trackByProp",
        rowClass: "rowClass",
        groupedRows: "groupedRows",
        groupExpansionDefault: "groupExpansionDefault",
        innerWidth: "innerWidth",
        groupRowsBy: "groupRowsBy",
        virtualization: "virtualization",
        summaryRow: "summaryRow",
        summaryPosition: "summaryPosition",
        summaryHeight: "summaryHeight"
      },
      outputs: {
        scroll: "scroll",
        page: "page",
        activate: "activate",
        select: "select",
        detailToggle: "detailToggle",
        rowContextmenu: "rowContextmenu",
        treeAction: "treeAction"
      },
      decls: 5,
      vars: 9,
      consts: [[3, "selected", "rows", "selectCheck", "selectEnabled", "selectionType", "rowIdentity", "select", "activate"], ["selector", ""], [4, "ngIf"], [3, "scrollbarV", "scrollbarH", "scrollHeight", "scrollWidth", "scroll", 4, "ngIf"], ["class", "empty-row", 3, "innerHTML", 4, "ngIf"], [3, "scrollbarV", "scrollbarH", "scrollHeight", "scrollWidth", "scroll"], [3, "rowHeight", "offsetX", "innerWidth", "rows", "columns", 4, "ngIf"], [3, "groupedRows", "innerWidth", "ngStyle", "rowDetail", "groupHeader", "offsetX", "detailRowHeight", "row", "expanded", "rowIndex", "rowContextmenu", 4, "ngFor", "ngForOf", "ngForTrackBy"], [3, "ngStyle", "rowHeight", "offsetX", "innerWidth", "rows", "columns", 4, "ngIf"], [3, "rowHeight", "offsetX", "innerWidth", "rows", "columns"], [3, "groupedRows", "innerWidth", "ngStyle", "rowDetail", "groupHeader", "offsetX", "detailRowHeight", "row", "expanded", "rowIndex", "rowContextmenu"], ["tabindex", "-1", 3, "isSelected", "innerWidth", "offsetX", "columns", "rowHeight", "row", "rowIndex", "expanded", "rowClass", "displayCheck", "treeStatus", "treeAction", "activate", 4, "ngIf", "ngIfElse"], ["groupedRowsTemplate", ""], ["tabindex", "-1", 3, "isSelected", "innerWidth", "offsetX", "columns", "rowHeight", "row", "rowIndex", "expanded", "rowClass", "displayCheck", "treeStatus", "treeAction", "activate"], ["tabindex", "-1", 3, "isSelected", "innerWidth", "offsetX", "columns", "rowHeight", "row", "group", "rowIndex", "expanded", "rowClass", "activate", 4, "ngFor", "ngForOf", "ngForTrackBy"], ["tabindex", "-1", 3, "isSelected", "innerWidth", "offsetX", "columns", "rowHeight", "row", "group", "rowIndex", "expanded", "rowClass", "activate"], [3, "ngStyle", "rowHeight", "offsetX", "innerWidth", "rows", "columns"], [1, "empty-row", 3, "innerHTML"]],
      template: function DataTableBodyComponent_Template(rf, ctx) {
        if (rf & 1) {
          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](0, "datatable-selection", 0, 1);

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵlistener"]("select", function DataTableBodyComponent_Template_datatable_selection_select_0_listener($event) {
            return ctx.select.emit($event);
          })("activate", function DataTableBodyComponent_Template_datatable_selection_activate_0_listener($event) {
            return ctx.activate.emit($event);
          });

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](2, DataTableBodyComponent_datatable_progress_2_Template, 1, 0, "datatable-progress", 2);

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](3, DataTableBodyComponent_datatable_scroller_3_Template, 4, 8, "datatable-scroller", 3);

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](4, DataTableBodyComponent_div_4_Template, 1, 1, "div", 4);

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
        }

        if (rf & 2) {
          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("selected", ctx.selected)("rows", ctx.rows)("selectCheck", ctx.selectCheck)("selectEnabled", ctx.selectEnabled)("selectionType", ctx.selectionType)("rowIdentity", ctx.rowIdentity);

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](2);

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngIf", ctx.loadingIndicator);

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngIf", ctx.rows == null ? null : ctx.rows.length);

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngIf", !(ctx.rows == null ? null : ctx.rows.length) && !ctx.loadingIndicator);
        }
      },
      directives: function directives() {
        return [DataTableSelectionComponent, _angular_common__WEBPACK_IMPORTED_MODULE_1__["NgIf"], ProgressBarComponent, ScrollerComponent, _angular_common__WEBPACK_IMPORTED_MODULE_1__["NgForOf"], DataTableSummaryRowComponent, DataTableRowWrapperComponent, _angular_common__WEBPACK_IMPORTED_MODULE_1__["NgStyle"], DataTableBodyRowComponent];
      },
      encapsulation: 2,
      changeDetection: 0
    });
    /** @nocollapse */

    DataTableBodyComponent.ctorParameters = function () {
      return [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ChangeDetectorRef"]
      }];
    };

    DataTableBodyComponent.propDecorators = {
      scrollbarV: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
      }],
      scrollbarH: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
      }],
      loadingIndicator: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
      }],
      externalPaging: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
      }],
      rowHeight: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
      }],
      offsetX: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
      }],
      emptyMessage: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
      }],
      selectionType: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
      }],
      selected: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
      }],
      rowIdentity: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
      }],
      rowDetail: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
      }],
      groupHeader: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
      }],
      selectCheck: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
      }],
      displayCheck: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
      }],
      trackByProp: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
      }],
      rowClass: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
      }],
      groupedRows: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
      }],
      groupExpansionDefault: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
      }],
      innerWidth: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
      }],
      groupRowsBy: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
      }],
      virtualization: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
      }],
      summaryRow: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
      }],
      summaryPosition: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
      }],
      summaryHeight: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
      }],
      pageSize: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
      }],
      rows: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
      }],
      columns: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
      }],
      offset: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
      }],
      rowCount: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
      }],
      bodyWidth: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["HostBinding"],
        args: ['style.width']
      }],
      bodyHeight: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
      }, {
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["HostBinding"],
        args: ['style.height']
      }],
      scroll: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"]
      }],
      page: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"]
      }],
      activate: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"]
      }],
      select: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"]
      }],
      detailToggle: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"]
      }],
      rowContextmenu: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"]
      }],
      treeAction: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"]
      }],
      scroller: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewChild"],
        args: [ScrollerComponent, {
          "static": false
        }]
      }]
    };

    if (false) {}
    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */


    var DataTableHeaderComponent = /*#__PURE__*/function () {
      /**
       * @param {?} cd
       */
      function DataTableHeaderComponent(cd) {
        _classCallCheck(this, DataTableHeaderComponent);

        this.cd = cd;
        this.sort = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
        this.reorder = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
        this.resize = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
        this.select = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
        this.columnContextmenu = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"](false);
        this._columnGroupWidths = {
          total: 100
        };
        this._styleByGroup = {
          left: {},
          center: {},
          right: {}
        };
      }
      /**
       * @param {?} val
       * @return {?}
       */


      _createClass(DataTableHeaderComponent, [{
        key: "innerWidth",
        get:
        /**
         * @return {?}
         */
        function get() {
          return this._innerWidth;
        }
        /**
         * @param {?} val
         * @return {?}
         */
        ,
        set: function set(val) {
          var _this13 = this;

          this._innerWidth = val;
          setTimeout(
          /**
          * @return {?}
          */
          function () {
            if (_this13._columns) {
              /** @type {?} */
              var colByPin = columnsByPin(_this13._columns);
              _this13._columnGroupWidths = columnGroupWidths(colByPin, _this13._columns);

              _this13.setStylesByGroup();
            }
          });
        }
      }, {
        key: "headerHeight",
        get:
        /**
         * @return {?}
         */
        function get() {
          return this._headerHeight;
        }
        /**
         * @param {?} val
         * @return {?}
         */
        ,
        set: function set(val) {
          if (val !== 'auto') {
            this._headerHeight = "".concat(val, "px");
          } else {
            this._headerHeight = val;
          }
        }
      }, {
        key: "columns",
        get:
        /**
         * @return {?}
         */
        function get() {
          return this._columns;
        }
        /**
         * @param {?} val
         * @return {?}
         */
        ,
        set: function set(val) {
          var _this14 = this;

          this._columns = val;
          /** @type {?} */

          var colsByPin = columnsByPin(val);
          this._columnsByPin = columnsByPinArr(val);
          setTimeout(
          /**
          * @return {?}
          */
          function () {
            _this14._columnGroupWidths = columnGroupWidths(colsByPin, val);

            _this14.setStylesByGroup();
          });
        }
      }, {
        key: "offsetX",
        get:
        /**
         * @return {?}
         */
        function get() {
          return this._offsetX;
        }
        /**
         * @param {?} __0
         * @return {?}
         */
        ,
        set: function set(val) {
          this._offsetX = val;
          this.setStylesByGroup();
        }
      }, {
        key: "onLongPressStart",
        value: function onLongPressStart(_ref7) {
          var event = _ref7.event,
              model = _ref7.model;
          model.dragging = true;
          this.dragEventTarget = event;
        }
        /**
         * @param {?} __0
         * @return {?}
         */

      }, {
        key: "onLongPressEnd",
        value: function onLongPressEnd(_ref8) {
          var _this15 = this;

          var event = _ref8.event,
              model = _ref8.model;
          this.dragEventTarget = event; // delay resetting so sort can be
          // prevented if we were dragging

          setTimeout(
          /**
          * @return {?}
          */
          function () {
            // datatable component creates copies from columns on reorder
            // set dragging to false on new objects

            /** @type {?} */
            var column = _this15._columns.find(
            /**
            * @param {?} c
            * @return {?}
            */
            function (c) {
              return c.$$id === model.$$id;
            });

            if (column) {
              column.dragging = false;
            }
          }, 5);
        }
        /**
         * @return {?}
         */

      }, {
        key: "headerWidth",
        get: function get() {
          if (this.scrollbarH) {
            return this.innerWidth + 'px';
          }

          return '100%';
        }
        /**
         * @param {?} index
         * @param {?} colGroup
         * @return {?}
         */

      }, {
        key: "trackByGroups",
        value: function trackByGroups(index, colGroup) {
          return colGroup.type;
        }
        /**
         * @param {?} index
         * @param {?} column
         * @return {?}
         */

      }, {
        key: "columnTrackingFn",
        value: function columnTrackingFn(index, column) {
          return column.$$id;
        }
        /**
         * @param {?} width
         * @param {?} column
         * @return {?}
         */

      }, {
        key: "onColumnResized",
        value: function onColumnResized(width, column) {
          if (width <= column.minWidth) {
            width = column.minWidth;
          } else if (width >= column.maxWidth) {
            width = column.maxWidth;
          }

          this.resize.emit({
            column: column,
            prevValue: column.width,
            newValue: width
          });
        }
        /**
         * @param {?} __0
         * @return {?}
         */

      }, {
        key: "onColumnReordered",
        value: function onColumnReordered(_ref9) {
          var prevIndex = _ref9.prevIndex,
              newIndex = _ref9.newIndex,
              model = _ref9.model;

          /** @type {?} */
          var column = this.getColumn(newIndex);
          column.isTarget = false;
          column.targetMarkerContext = undefined;
          this.reorder.emit({
            column: model,
            prevValue: prevIndex,
            newValue: newIndex
          });
        }
        /**
         * @param {?} __0
         * @return {?}
         */

      }, {
        key: "onTargetChanged",
        value: function onTargetChanged(_ref10) {
          var prevIndex = _ref10.prevIndex,
              newIndex = _ref10.newIndex,
              initialIndex = _ref10.initialIndex;

          if (prevIndex || prevIndex === 0) {
            /** @type {?} */
            var oldColumn = this.getColumn(prevIndex);
            oldColumn.isTarget = false;
            oldColumn.targetMarkerContext = undefined;
          }

          if (newIndex || newIndex === 0) {
            /** @type {?} */
            var newColumn = this.getColumn(newIndex);
            newColumn.isTarget = true;

            if (initialIndex !== newIndex) {
              newColumn.targetMarkerContext = {
                "class": 'targetMarker '.concat(initialIndex > newIndex ? 'dragFromRight' : 'dragFromLeft')
              };
            }
          }
        }
        /**
         * @param {?} index
         * @return {?}
         */

      }, {
        key: "getColumn",
        value: function getColumn(index) {
          /** @type {?} */
          var leftColumnCount = this._columnsByPin[0].columns.length;

          if (index < leftColumnCount) {
            return this._columnsByPin[0].columns[index];
          }
          /** @type {?} */


          var centerColumnCount = this._columnsByPin[1].columns.length;

          if (index < leftColumnCount + centerColumnCount) {
            return this._columnsByPin[1].columns[index - leftColumnCount];
          }

          return this._columnsByPin[2].columns[index - leftColumnCount - centerColumnCount];
        }
        /**
         * @param {?} __0
         * @return {?}
         */

      }, {
        key: "onSort",
        value: function onSort(_ref11) {
          var column = _ref11.column,
              prevValue = _ref11.prevValue,
              newValue = _ref11.newValue;

          // if we are dragging don't sort!
          if (column.dragging) {
            return;
          }
          /** @type {?} */


          var sorts = this.calcNewSorts(column, prevValue, newValue);
          this.sort.emit({
            sorts: sorts,
            column: column,
            prevValue: prevValue,
            newValue: newValue
          });
        }
        /**
         * @param {?} column
         * @param {?} prevValue
         * @param {?} newValue
         * @return {?}
         */

      }, {
        key: "calcNewSorts",
        value: function calcNewSorts(column, prevValue, newValue) {
          /** @type {?} */
          var idx = 0;

          if (!this.sorts) {
            this.sorts = [];
          }
          /** @type {?} */


          var sorts = this.sorts.map(
          /**
          * @param {?} s
          * @param {?} i
          * @return {?}
          */
          function (s, i) {
            s = Object.assign({}, s);

            if (s.prop === column.prop) {
              idx = i;
            }

            return s;
          });

          if (newValue === undefined) {
            sorts.splice(idx, 1);
          } else if (prevValue) {
            sorts[idx].dir = newValue;
          } else {
            if (this.sortType === SortType.single) {
              sorts.splice(0, this.sorts.length);
            }

            sorts.push({
              dir: newValue,
              prop: column.prop
            });
          }

          return sorts;
        }
        /**
         * @return {?}
         */

      }, {
        key: "setStylesByGroup",
        value: function setStylesByGroup() {
          this._styleByGroup.left = this.calcStylesByGroup('left');
          this._styleByGroup.center = this.calcStylesByGroup('center');
          this._styleByGroup.right = this.calcStylesByGroup('right');
          this.cd.detectChanges();
        }
        /**
         * @param {?} group
         * @return {?}
         */

      }, {
        key: "calcStylesByGroup",
        value: function calcStylesByGroup(group) {
          /** @type {?} */
          var widths = this._columnGroupWidths;
          /** @type {?} */

          var offsetX = this.offsetX;
          /** @type {?} */

          var styles = {
            width: "".concat(widths[group], "px")
          };

          if (group === 'center') {
            translateXY(styles, offsetX * -1, 0);
          } else if (group === 'right') {
            /** @type {?} */
            var totalDiff = widths.total - this.innerWidth;
            /** @type {?} */

            var offset = totalDiff * -1;
            translateXY(styles, offset, 0);
          }

          return styles;
        }
      }]);

      return DataTableHeaderComponent;
    }();

    DataTableHeaderComponent.ɵfac = function DataTableHeaderComponent_Factory(t) {
      return new (t || DataTableHeaderComponent)(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__["ChangeDetectorRef"]));
    };

    DataTableHeaderComponent.ɵcmp = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineComponent"]({
      type: DataTableHeaderComponent,
      selectors: [["datatable-header"]],
      hostAttrs: [1, "datatable-header"],
      hostVars: 4,
      hostBindings: function DataTableHeaderComponent_HostBindings(rf, ctx) {
        if (rf & 2) {
          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵstyleProp"]("height", ctx.headerHeight)("width", ctx.headerWidth);
        }
      },
      inputs: {
        innerWidth: "innerWidth",
        headerHeight: "headerHeight",
        columns: "columns",
        offsetX: "offsetX",
        sorts: "sorts",
        sortAscendingIcon: "sortAscendingIcon",
        sortDescendingIcon: "sortDescendingIcon",
        scrollbarH: "scrollbarH",
        dealsWithGroup: "dealsWithGroup",
        targetMarkerTemplate: "targetMarkerTemplate",
        sortType: "sortType",
        allRowsSelected: "allRowsSelected",
        selectionType: "selectionType",
        reorderable: "reorderable"
      },
      outputs: {
        sort: "sort",
        reorder: "reorder",
        resize: "resize",
        select: "select",
        columnContextmenu: "columnContextmenu"
      },
      decls: 2,
      vars: 4,
      consts: [["orderable", "", 1, "datatable-header-inner", 3, "reorder", "targetChanged"], [3, "class", "ngStyle", 4, "ngFor", "ngForOf", "ngForTrackBy"], [3, "ngStyle"], ["resizeable", "", "long-press", "", "draggable", "", 3, "resizeEnabled", "pressModel", "pressEnabled", "dragX", "dragY", "dragModel", "dragEventTarget", "headerHeight", "isTarget", "targetMarkerTemplate", "targetMarkerContext", "column", "sortType", "sorts", "selectionType", "sortAscendingIcon", "sortDescendingIcon", "allRowsSelected", "resize", "longPressStart", "longPressEnd", "sort", "select", "columnContextmenu", 4, "ngFor", "ngForOf", "ngForTrackBy"], ["resizeable", "", "long-press", "", "draggable", "", 3, "resizeEnabled", "pressModel", "pressEnabled", "dragX", "dragY", "dragModel", "dragEventTarget", "headerHeight", "isTarget", "targetMarkerTemplate", "targetMarkerContext", "column", "sortType", "sorts", "selectionType", "sortAscendingIcon", "sortDescendingIcon", "allRowsSelected", "resize", "longPressStart", "longPressEnd", "sort", "select", "columnContextmenu"]],
      template: function DataTableHeaderComponent_Template(rf, ctx) {
        if (rf & 1) {
          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](0, "div", 0);

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵlistener"]("reorder", function DataTableHeaderComponent_Template_div_reorder_0_listener($event) {
            return ctx.onColumnReordered($event);
          })("targetChanged", function DataTableHeaderComponent_Template_div_targetChanged_0_listener($event) {
            return ctx.onTargetChanged($event);
          });

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](1, DataTableHeaderComponent_div_1_Template, 2, 5, "div", 1);

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
        }

        if (rf & 2) {
          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵstyleProp"]("width", ctx._columnGroupWidths.total, "px");

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngForOf", ctx._columnsByPin)("ngForTrackBy", ctx.trackByGroups);
        }
      },
      directives: function directives() {
        return [OrderableDirective, _angular_common__WEBPACK_IMPORTED_MODULE_1__["NgForOf"], _angular_common__WEBPACK_IMPORTED_MODULE_1__["NgStyle"], DataTableHeaderCellComponent, ResizeableDirective, LongPressDirective, DraggableDirective];
      },
      encapsulation: 2,
      changeDetection: 0
    });
    /** @nocollapse */

    DataTableHeaderComponent.ctorParameters = function () {
      return [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ChangeDetectorRef"]
      }];
    };

    DataTableHeaderComponent.propDecorators = {
      sortAscendingIcon: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
      }],
      sortDescendingIcon: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
      }],
      scrollbarH: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
      }],
      dealsWithGroup: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
      }],
      targetMarkerTemplate: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
      }],
      innerWidth: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
      }],
      sorts: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
      }],
      sortType: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
      }],
      allRowsSelected: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
      }],
      selectionType: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
      }],
      reorderable: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
      }],
      headerHeight: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["HostBinding"],
        args: ['style.height']
      }, {
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
      }],
      columns: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
      }],
      offsetX: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
      }],
      sort: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"]
      }],
      reorder: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"]
      }],
      resize: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"]
      }],
      select: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"]
      }],
      columnContextmenu: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"]
      }],
      headerWidth: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["HostBinding"],
        args: ['style.width']
      }]
    };

    if (false) {}
    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    /**
     * Throttle a function
     * @param {?} func
     * @param {?} wait
     * @param {?=} options
     * @return {?}
     */


    function throttle(func, wait, options) {
      options = options || {};
      /** @type {?} */

      var context;
      /** @type {?} */

      var args;
      /** @type {?} */

      var result;
      /** @type {?} */

      var timeout = null;
      /** @type {?} */

      var previous = 0;
      /**
       * @return {?}
       */

      function later() {
        previous = options.leading === false ? 0 : +new Date();
        timeout = null;
        result = func.apply(context, args);
      }

      return (
        /**
        * @this {?}
        * @return {?}
        */
        function () {
          /** @type {?} */
          var now = +new Date();

          if (!previous && options.leading === false) {
            previous = now;
          }
          /** @type {?} */


          var remaining = wait - (now - previous);
          context = this;
          args = arguments;

          if (remaining <= 0) {
            clearTimeout(timeout);
            timeout = null;
            previous = now;
            result = func.apply(context, args);
          } else if (!timeout && options.trailing !== false) {
            timeout = setTimeout(later, remaining);
          }

          return result;
        }
      );
    }
    /**
     * Throttle decorator
     *
     *  class MyClass {
     *    throttleable(10)
     *    myFn() { ... }
     *  }
     * @param {?} duration
     * @param {?=} options
     * @return {?}
     */


    function throttleable(duration, options) {
      return (
        /**
        * @param {?} target
        * @param {?} key
        * @param {?} descriptor
        * @return {?}
        */
        function innerDecorator(target, key, descriptor) {
          return {
            configurable: true,
            enumerable: descriptor.enumerable,
            get:
            /**
            * @return {?}
            */
            function getter() {
              Object.defineProperty(this, key, {
                configurable: true,
                enumerable: descriptor.enumerable,
                value: throttle(descriptor.value, duration, options)
              });
              return this[key];
            }
          };
        }
      );
    }
    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    /**
     * Calculates the Total Flex Grow
     * @param {?} columns
     * @return {?}
     */


    function getTotalFlexGrow(columns) {
      /** @type {?} */
      var totalFlexGrow = 0;

      var _iterator10 = _createForOfIteratorHelper(columns),
          _step10;

      try {
        for (_iterator10.s(); !(_step10 = _iterator10.n()).done;) {
          var c = _step10.value;
          totalFlexGrow += c.flexGrow || 0;
        }
      } catch (err) {
        _iterator10.e(err);
      } finally {
        _iterator10.f();
      }

      return totalFlexGrow;
    }
    /**
     * Adjusts the column widths.
     * Inspired by: https://github.com/facebook/fixed-data-table/blob/master/src/FixedDataTableWidthHelper.js
     * @param {?} allColumns
     * @param {?} expectedWidth
     * @return {?}
     */


    function adjustColumnWidths(allColumns, expectedWidth) {
      /** @type {?} */
      var columnsWidth = columnsTotalWidth(allColumns);
      /** @type {?} */

      var totalFlexGrow = getTotalFlexGrow(allColumns);
      /** @type {?} */

      var colsByGroup = columnsByPin(allColumns);

      if (columnsWidth !== expectedWidth) {
        scaleColumns(colsByGroup, expectedWidth, totalFlexGrow);
      }
    }
    /**
     * Resizes columns based on the flexGrow property, while respecting manually set widths
     * @param {?} colsByGroup
     * @param {?} maxWidth
     * @param {?} totalFlexGrow
     * @return {?}
     */


    function scaleColumns(colsByGroup, maxWidth, totalFlexGrow) {
      // calculate total width and flexgrow points for coulumns that can be resized
      for (var attr in colsByGroup) {
        var _iterator11 = _createForOfIteratorHelper(colsByGroup[attr]),
            _step11;

        try {
          for (_iterator11.s(); !(_step11 = _iterator11.n()).done;) {
            var column = _step11.value;

            if (!column.canAutoResize) {
              maxWidth -= column.width;
              totalFlexGrow -= column.flexGrow ? column.flexGrow : 0;
            } else {
              column.width = 0;
            }
          }
        } catch (err) {
          _iterator11.e(err);
        } finally {
          _iterator11.f();
        }
      }
      /** @type {?} */


      var hasMinWidth = {};
      /** @type {?} */

      var remainingWidth = maxWidth; // resize columns until no width is left to be distributed

      do {
        /** @type {?} */
        var widthPerFlexPoint = remainingWidth / totalFlexGrow;
        remainingWidth = 0;

        for (var _attr in colsByGroup) {
          var _iterator12 = _createForOfIteratorHelper(colsByGroup[_attr]),
              _step12;

          try {
            for (_iterator12.s(); !(_step12 = _iterator12.n()).done;) {
              var _column = _step12.value;

              // if the column can be resize and it hasn't reached its minimum width yet
              if (_column.canAutoResize && !hasMinWidth[_column.prop]) {
                /** @type {?} */
                var newWidth = _column.width + _column.flexGrow * widthPerFlexPoint;

                if (_column.minWidth !== undefined && newWidth < _column.minWidth) {
                  remainingWidth += newWidth - _column.minWidth;
                  _column.width = _column.minWidth;
                  hasMinWidth[_column.prop] = true;
                } else {
                  _column.width = newWidth;
                }
              }
            }
          } catch (err) {
            _iterator12.e(err);
          } finally {
            _iterator12.f();
          }
        }
      } while (remainingWidth !== 0);
    }
    /**
     * Forces the width of the columns to
     * distribute equally but overflowing when necessary
     *
     * Rules:
     *
     *  - If combined withs are less than the total width of the grid,
     *    proportion the widths given the min / max / normal widths to fill the width.
     *
     *  - If the combined widths, exceed the total width of the grid,
     *    use the standard widths.
     *
     *  - If a column is resized, it should always use that width
     *
     *  - The proportional widths should never fall below min size if specified.
     *
     *  - If the grid starts off small but then becomes greater than the size ( + / - )
     *    the width should use the original width; not the newly proportioned widths.
     * @param {?} allColumns
     * @param {?} expectedWidth
     * @param {?} startIdx
     * @param {?} allowBleed
     * @param {?=} defaultColWidth
     * @return {?}
     */


    function forceFillColumnWidths(allColumns, expectedWidth, startIdx, allowBleed) {
      var defaultColWidth = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 300;

      /** @type {?} */
      var columnsToResize = allColumns.slice(startIdx + 1, allColumns.length).filter(
      /**
      * @param {?} c
      * @return {?}
      */
      function (c) {
        return c.canAutoResize !== false;
      });

      var _iterator13 = _createForOfIteratorHelper(columnsToResize),
          _step13;

      try {
        for (_iterator13.s(); !(_step13 = _iterator13.n()).done;) {
          var _column2 = _step13.value;

          if (!_column2.$$oldWidth) {
            _column2.$$oldWidth = _column2.width;
          }
        }
        /** @type {?} */

      } catch (err) {
        _iterator13.e(err);
      } finally {
        _iterator13.f();
      }

      var additionWidthPerColumn = 0;
      /** @type {?} */

      var exceedsWindow = false;
      /** @type {?} */

      var contentWidth = getContentWidth(allColumns, defaultColWidth);
      /** @type {?} */

      var remainingWidth = expectedWidth - contentWidth;
      /** @type {?} */

      var columnsProcessed = [];
      /** @type {?} */

      var remainingWidthLimit = 1; // This loop takes care of the

      do {
        additionWidthPerColumn = remainingWidth / columnsToResize.length;
        exceedsWindow = contentWidth >= expectedWidth;

        var _iterator14 = _createForOfIteratorHelper(columnsToResize),
            _step14;

        try {
          for (_iterator14.s(); !(_step14 = _iterator14.n()).done;) {
            var column = _step14.value;

            if (exceedsWindow && allowBleed) {
              column.width = column.$$oldWidth || column.width || defaultColWidth;
            } else {
              /** @type {?} */
              var newSize = (column.width || defaultColWidth) + additionWidthPerColumn;

              if (column.minWidth && newSize < column.minWidth) {
                column.width = column.minWidth;
                columnsProcessed.push(column);
              } else if (column.maxWidth && newSize > column.maxWidth) {
                column.width = column.maxWidth;
                columnsProcessed.push(column);
              } else {
                column.width = newSize;
              }
            }

            column.width = Math.max(0, column.width);
          }
        } catch (err) {
          _iterator14.e(err);
        } finally {
          _iterator14.f();
        }

        contentWidth = getContentWidth(allColumns);
        remainingWidth = expectedWidth - contentWidth;
        removeProcessedColumns(columnsToResize, columnsProcessed);
      } while (remainingWidth > remainingWidthLimit && columnsToResize.length !== 0);
    }
    /**
     * Remove the processed columns from the current active columns.
     * @param {?} columnsToResize
     * @param {?} columnsProcessed
     * @return {?}
     */


    function removeProcessedColumns(columnsToResize, columnsProcessed) {
      var _iterator15 = _createForOfIteratorHelper(columnsProcessed),
          _step15;

      try {
        for (_iterator15.s(); !(_step15 = _iterator15.n()).done;) {
          var column = _step15.value;

          /** @type {?} */
          var index = columnsToResize.indexOf(column);
          columnsToResize.splice(index, 1);
        }
      } catch (err) {
        _iterator15.e(err);
      } finally {
        _iterator15.f();
      }
    }
    /**
     * Gets the width of the columns
     * @param {?} allColumns
     * @param {?=} defaultColWidth
     * @return {?}
     */


    function getContentWidth(allColumns) {
      var defaultColWidth = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 300;

      /** @type {?} */
      var contentWidth = 0;

      var _iterator16 = _createForOfIteratorHelper(allColumns),
          _step16;

      try {
        for (_iterator16.s(); !(_step16 = _iterator16.n()).done;) {
          var column = _step16.value;
          contentWidth += column.width || defaultColWidth;
        }
      } catch (err) {
        _iterator16.e(err);
      } finally {
        _iterator16.f();
      }

      return contentWidth;
    }
    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    /** @enum {string} */


    var SortDirection = {
      asc: 'asc',
      desc: 'desc'
    };
    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    /**
     * Gets the next sort direction
     * @param {?} sortType
     * @param {?} current
     * @return {?}
     */

    function nextSortDir(sortType, current) {
      if (sortType === SortType.single) {
        if (current === SortDirection.asc) {
          return SortDirection.desc;
        } else {
          return SortDirection.asc;
        }
      } else {
        if (!current) {
          return SortDirection.asc;
        } else if (current === SortDirection.asc) {
          return SortDirection.desc;
        } else if (current === SortDirection.desc) {
          return undefined;
        } // avoid TS7030: Not all code paths return a value.


        return undefined;
      }
    }
    /**
     * Adapted from fueld-ui on 6/216
     * https://github.com/FuelInteractive/fuel-ui/tree/master/src/pipes/OrderBy
     * @param {?} a
     * @param {?} b
     * @return {?}
     */


    function orderByComparator(a, b) {
      if (a === null || typeof a === 'undefined') a = 0;
      if (b === null || typeof b === 'undefined') b = 0;

      if (a instanceof Date && b instanceof Date) {
        if (a < b) return -1;
        if (a > b) return 1;
      } else if (isNaN(parseFloat(a)) || !isFinite(a) || isNaN(parseFloat(b)) || !isFinite(b)) {
        // Convert to string in case of a=0 or b=0
        a = String(a);
        b = String(b); // Isn't a number so lowercase the string to properly compare

        if (a.toLowerCase() < b.toLowerCase()) return -1;
        if (a.toLowerCase() > b.toLowerCase()) return 1;
      } else {
        // Parse strings as numbers to compare properly
        if (parseFloat(a) < parseFloat(b)) return -1;
        if (parseFloat(a) > parseFloat(b)) return 1;
      } // equal each other


      return 0;
    }
    /**
     * creates a shallow copy of the `rows` input and returns the sorted copy. this function
     * does not sort the `rows` argument in place
     * @param {?} rows
     * @param {?} columns
     * @param {?} dirs
     * @return {?}
     */


    function sortRows(rows, columns, dirs) {
      if (!rows) return [];
      if (!dirs || !dirs.length || !columns) return _toConsumableArray(rows);
      /**
       * record the row ordering of results from prior sort operations (if applicable)
       * this is necessary to guarantee stable sorting behavior
       * @type {?}
       */

      var rowToIndexMap = new Map();
      rows.forEach(
      /**
      * @param {?} row
      * @param {?} index
      * @return {?}
      */
      function (row, index) {
        return rowToIndexMap.set(row, index);
      });
      /** @type {?} */

      var temp = _toConsumableArray(rows);
      /** @type {?} */


      var cols = columns.reduce(
      /**
      * @param {?} obj
      * @param {?} col
      * @return {?}
      */
      function (obj, col) {
        if (col.comparator && typeof col.comparator === 'function') {
          obj[col.prop] = col.comparator;
        }

        return obj;
      }, {}); // cache valueGetter and compareFn so that they
      // do not need to be looked-up in the sort function body

      /** @type {?} */

      var cachedDirs = dirs.map(
      /**
      * @param {?} dir
      * @return {?}
      */
      function (dir) {
        /** @type {?} */
        var prop = dir.prop;
        return {
          prop: prop,
          dir: dir.dir,
          valueGetter: getterForProp(prop),
          compareFn: cols[prop] || orderByComparator
        };
      });
      return temp.sort(
      /**
      * @param {?} rowA
      * @param {?} rowB
      * @return {?}
      */
      function (rowA, rowB) {
        var _iterator17 = _createForOfIteratorHelper(cachedDirs),
            _step17;

        try {
          for (_iterator17.s(); !(_step17 = _iterator17.n()).done;) {
            var cachedDir = _step17.value;
            // Get property and valuegetters for column to be sorted
            var prop = cachedDir.prop,
                valueGetter = cachedDir.valueGetter; // Get A and B cell values from rows based on properties of the columns

            /** @type {?} */

            var propA = valueGetter(rowA, prop);
            /** @type {?} */

            var propB = valueGetter(rowB, prop); // Compare function gets five parameters:
            // Two cell values to be compared as propA and propB
            // Two rows corresponding to the cells as rowA and rowB
            // Direction of the sort for this column as SortDirection
            // Compare can be a standard JS comparison function (a,b) => -1|0|1
            // as additional parameters are silently ignored. The whole row and sort
            // direction enable more complex sort logic.

            /** @type {?} */

            var comparison = cachedDir.dir !== SortDirection.desc ? cachedDir.compareFn(propA, propB, rowA, rowB, cachedDir.dir) : -cachedDir.compareFn(propA, propB, rowA, rowB, cachedDir.dir); // Don't return 0 yet in case of needing to sort by next property

            if (comparison !== 0) return comparison;
          }
        } catch (err) {
          _iterator17.e(err);
        } finally {
          _iterator17.f();
        }

        if (!(rowToIndexMap.has(rowA) && rowToIndexMap.has(rowB))) return 0;
        /**
         * all else being equal, preserve original order of the rows (stable sort)
         */

        return rowToIndexMap.get(rowA) < rowToIndexMap.get(rowB) ? -1 : 1;
      });
    }
    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */


    var DatatableComponent = /*#__PURE__*/function () {
      /**
       * @param {?} scrollbarHelper
       * @param {?} dimensionsHelper
       * @param {?} cd
       * @param {?} element
       * @param {?} differs
       * @param {?} columnChangesService
       * @param {?} configuration
       */
      function DatatableComponent(scrollbarHelper, dimensionsHelper, cd, element, differs, columnChangesService, configuration) {
        _classCallCheck(this, DatatableComponent);

        this.scrollbarHelper = scrollbarHelper;
        this.dimensionsHelper = dimensionsHelper;
        this.cd = cd;
        this.columnChangesService = columnChangesService;
        this.configuration = configuration;
        /**
         * List of row objects that should be
         * represented as selected in the grid.
         * Default value: `[]`
         */

        this.selected = [];
        /**
         * Enable vertical scrollbars
         */

        this.scrollbarV = false;
        /**
         * Enable horz scrollbars
         */

        this.scrollbarH = false;
        /**
         * The row height; which is necessary
         * to calculate the height for the lazy rendering.
         */

        this.rowHeight = 30;
        /**
         * Type of column width distribution formula.
         * Example: flex, force, standard
         */

        this.columnMode = ColumnMode.standard;
        /**
         * The minimum header height in pixels.
         * Pass a falsey for no header
         */

        this.headerHeight = 30;
        /**
         * The minimum footer height in pixels.
         * Pass falsey for no footer
         */

        this.footerHeight = 0;
        /**
         * If the table should use external paging
         * otherwise its assumed that all data is preloaded.
         */

        this.externalPaging = false;
        /**
         * If the table should use external sorting or
         * the built-in basic sorting.
         */

        this.externalSorting = false;
        /**
         * Show the linear loading bar.
         * Default value: `false`
         */

        this.loadingIndicator = false;
        /**
         * Enable/Disable ability to re-order columns
         * by dragging them.
         */

        this.reorderable = true;
        /**
         * Swap columns on re-order columns or
         * move them.
         */

        this.swapColumns = true;
        /**
         * The type of sorting
         */

        this.sortType = SortType.single;
        /**
         * Array of sorted columns by property and type.
         * Default value: `[]`
         */

        this.sorts = [];
        /**
         * Css class overrides
         */

        this.cssClasses = {
          sortAscending: 'datatable-icon-up',
          sortDescending: 'datatable-icon-down',
          pagerLeftArrow: 'datatable-icon-left',
          pagerRightArrow: 'datatable-icon-right',
          pagerPrevious: 'datatable-icon-prev',
          pagerNext: 'datatable-icon-skip'
        };
        /**
         * Message overrides for localization
         *
         * emptyMessage     [default] = 'No data to display'
         * totalMessage     [default] = 'total'
         * selectedMessage  [default] = 'selected'
         */

        this.messages = {
          // Message to show when array is presented
          // but contains no values
          emptyMessage: 'No data to display',
          // Footer total message
          totalMessage: 'total',
          // Footer selected message
          selectedMessage: 'selected'
        };
        /**
         * A boolean you can use to set the detault behaviour of rows and groups
         * whether they will start expanded or not. If ommited the default is NOT expanded.
         *
         */

        this.groupExpansionDefault = false;
        /**
         * Property to which you can use for determining select all
         * rows on current page or not.
         *
         * \@memberOf DatatableComponent
         */

        this.selectAllRowsOnPage = false;
        /**
         * A flag for row virtualization on / off
         */

        this.virtualization = true;
        /**
         * A flag for switching summary row on / off
         */

        this.summaryRow = false;
        /**
         * A height of summary row
         */

        this.summaryHeight = 30;
        /**
         * A property holds a summary row position: top/bottom
         */

        this.summaryPosition = 'top';
        /**
         * Body was scrolled typically in a `scrollbarV:true` scenario.
         */

        this.scroll = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
        /**
         * A cell or row was focused via keyboard or mouse click.
         */

        this.activate = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
        /**
         * A cell or row was selected.
         */

        this.select = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
        /**
         * Column sort was invoked.
         */

        this.sort = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
        /**
         * The table was paged either triggered by the pager or the body scroll.
         */

        this.page = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
        /**
         * Columns were re-ordered.
         */

        this.reorder = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
        /**
         * Column was resized.
         */

        this.resize = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
        /**
         * The context menu was invoked on the table.
         * type indicates whether the header or the body was clicked.
         * content contains either the column or the row that was clicked.
         */

        this.tableContextmenu = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"](false);
        /**
         * A row was expanded ot collapsed for tree
         */

        this.treeAction = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
        this.rowCount = 0;
        this._offsetX = new rxjs__WEBPACK_IMPORTED_MODULE_2__["BehaviorSubject"](0);
        this._count = 0;
        this._offset = 0;
        this._subscriptions = [];
        /**
         * This will be used when displaying or selecting rows.
         * when tracking/comparing them, we'll use the value of this fn,
         *
         * (`fn(x) === fn(y)` instead of `x === y`)
         */

        this.rowIdentity =
        /**
        * @param {?} x
        * @return {?}
        */
        function (x) {
          return x;
        }; // get ref to elm for measuring


        this.element = element.nativeElement;
        this.rowDiffer = differs.find({}).create(); // apply global settings from Module.forRoot

        if (this.configuration && this.configuration.messages) {
          this.messages = Object.assign({}, this.configuration.messages);
        }
      }
      /**
       * Rows that are displayed in the table.
       * @param {?} val
       * @return {?}
       */


      _createClass(DatatableComponent, [{
        key: "rows",
        get:
        /**
         * Gets the rows.
         * @return {?}
         */
        function get() {
          return this._rows;
        }
        /**
         * This attribute allows the user to set the name of the column to group the data with
         * @param {?} val
         * @return {?}
         */
        ,
        set: function set(val) {
          this._rows = val;

          if (val) {
            this._internalRows = _toConsumableArray(val);
          } // auto sort on new updates


          if (!this.externalSorting) {
            this.sortInternalRows();
          } // auto group by parent on new update


          this._internalRows = groupRowsByParents(this._internalRows, optionalGetterForProp(this.treeFromRelation), optionalGetterForProp(this.treeToRelation)); // recalculate sizes/etc

          this.recalculate();

          if (this._rows && this._groupRowsBy) {
            // If a column has been specified in _groupRowsBy created a new array with the data grouped by that row
            this.groupedRows = this.groupArrayBy(this._rows, this._groupRowsBy);
          }

          this.cd.markForCheck();
        }
      }, {
        key: "groupRowsBy",
        get:
        /**
         * @return {?}
         */
        function get() {
          return this._groupRowsBy;
        }
        /**
         * Columns to be displayed.
         * @param {?} val
         * @return {?}
         */
        ,
        set: function set(val) {
          if (val) {
            this._groupRowsBy = val;

            if (this._rows && this._groupRowsBy) {
              // cretes a new array with the data grouped
              this.groupedRows = this.groupArrayBy(this._rows, this._groupRowsBy);
            }
          }
        }
      }, {
        key: "columns",
        get:
        /**
         * Get the columns.
         * @return {?}
         */
        function get() {
          return this._columns;
        }
        /**
         * The page size to be shown.
         * Default value: `undefined`
         * @param {?} val
         * @return {?}
         */
        ,
        set: function set(val) {
          if (val) {
            this._internalColumns = _toConsumableArray(val);
            setColumnDefaults(this._internalColumns);
            this.recalculateColumns();
          }

          this._columns = val;
        }
      }, {
        key: "limit",
        get:
        /**
         * Gets the limit.
         * @return {?}
         */
        function get() {
          return this._limit;
        }
        /**
         * The total count of all rows.
         * Default value: `0`
         * @param {?} val
         * @return {?}
         */
        ,
        set: function set(val) {
          this._limit = val; // recalculate sizes/etc

          this.recalculate();
        }
      }, {
        key: "count",
        get:
        /**
         * Gets the count.
         * @return {?}
         */
        function get() {
          return this._count;
        }
        /**
         * The current offset ( page - 1 ) shown.
         * Default value: `0`
         * @param {?} val
         * @return {?}
         */
        ,
        set: function set(val) {
          this._count = val; // recalculate sizes/etc

          this.recalculate();
        }
      }, {
        key: "offset",
        get:
        /**
         * @return {?}
         */
        function get() {
          return Math.max(Math.min(this._offset, Math.ceil(this.rowCount / this.pageSize) - 1), 0);
        }
        /**
         * CSS class applied if the header height if fixed height.
         * @return {?}
         */
        ,
        set: function set(val) {
          this._offset = val;
        }
      }, {
        key: "isFixedHeader",
        get: function get() {
          /** @type {?} */
          var headerHeight = this.headerHeight;
          return typeof headerHeight === 'string' ? headerHeight !== 'auto' : true;
        }
        /**
         * CSS class applied to the root element if
         * the row heights are fixed heights.
         * @return {?}
         */

      }, {
        key: "isFixedRow",
        get: function get() {
          return this.rowHeight !== 'auto';
        }
        /**
         * CSS class applied to root element if
         * vertical scrolling is enabled.
         * @return {?}
         */

      }, {
        key: "isVertScroll",
        get: function get() {
          return this.scrollbarV;
        }
        /**
         * CSS class applied to root element if
         * virtualization is enabled.
         * @return {?}
         */

      }, {
        key: "isVirtualized",
        get: function get() {
          return this.virtualization;
        }
        /**
         * CSS class applied to the root element
         * if the horziontal scrolling is enabled.
         * @return {?}
         */

      }, {
        key: "isHorScroll",
        get: function get() {
          return this.scrollbarH;
        }
        /**
         * CSS class applied to root element is selectable.
         * @return {?}
         */

      }, {
        key: "isSelectable",
        get: function get() {
          return this.selectionType !== undefined;
        }
        /**
         * CSS class applied to root is checkbox selection.
         * @return {?}
         */

      }, {
        key: "isCheckboxSelection",
        get: function get() {
          return this.selectionType === SelectionType.checkbox;
        }
        /**
         * CSS class applied to root if cell selection.
         * @return {?}
         */

      }, {
        key: "isCellSelection",
        get: function get() {
          return this.selectionType === SelectionType.cell;
        }
        /**
         * CSS class applied to root if single select.
         * @return {?}
         */

      }, {
        key: "isSingleSelection",
        get: function get() {
          return this.selectionType === SelectionType.single;
        }
        /**
         * CSS class added to root element if mulit select
         * @return {?}
         */

      }, {
        key: "isMultiSelection",
        get: function get() {
          return this.selectionType === SelectionType.multi;
        }
        /**
         * CSS class added to root element if mulit click select
         * @return {?}
         */

      }, {
        key: "isMultiClickSelection",
        get: function get() {
          return this.selectionType === SelectionType.multiClick;
        }
        /**
         * Column templates gathered from `ContentChildren`
         * if described in your markup.
         * @param {?} val
         * @return {?}
         */

      }, {
        key: "columnTemplates",
        get:
        /**
         * Returns the column templates.
         * @return {?}
         */
        function get() {
          return this._columnTemplates;
        }
        /**
         * Returns if all rows are selected.
         * @return {?}
         */
        ,
        set: function set(val) {
          this._columnTemplates = val;
          this.translateColumns(val);
        }
      }, {
        key: "allRowsSelected",
        get: function get() {
          /** @type {?} */
          var allRowsSelected = this.rows && this.selected && this.selected.length === this.rows.length;

          if (this.selectAllRowsOnPage) {
            /** @type {?} */
            var indexes = this.bodyComponent.indexes;
            /** @type {?} */

            var rowsOnPage = indexes.last - indexes.first;
            allRowsSelected = this.selected.length === rowsOnPage;
          }

          return this.selected && this.rows && this.rows.length !== 0 && allRowsSelected;
        }
        /**
         * Lifecycle hook that is called after data-bound
         * properties of a directive are initialized.
         * @return {?}
         */

      }, {
        key: "ngOnInit",
        value: function ngOnInit() {
          // need to call this immediatly to size
          // if the table is hidden the visibility
          // listener will invoke this itself upon show
          this.recalculate();
        }
        /**
         * Lifecycle hook that is called after a component's
         * view has been fully initialized.
         * @return {?}
         */

      }, {
        key: "ngAfterViewInit",
        value: function ngAfterViewInit() {
          var _this16 = this;

          if (!this.externalSorting) {
            this.sortInternalRows();
          } // this has to be done to prevent the change detection
          // tree from freaking out because we are readjusting


          if (typeof requestAnimationFrame === 'undefined') {
            return;
          }

          requestAnimationFrame(
          /**
          * @return {?}
          */
          function () {
            _this16.recalculate(); // emit page for virtual server-side kickoff


            if (_this16.externalPaging && _this16.scrollbarV) {
              _this16.page.emit({
                count: _this16.count,
                pageSize: _this16.pageSize,
                limit: _this16.limit,
                offset: 0
              });
            }
          });
        }
        /**
         * Lifecycle hook that is called after a component's
         * content has been fully initialized.
         * @return {?}
         */

      }, {
        key: "ngAfterContentInit",
        value: function ngAfterContentInit() {
          var _this17 = this;

          this.columnTemplates.changes.subscribe(
          /**
          * @param {?} v
          * @return {?}
          */
          function (v) {
            return _this17.translateColumns(v);
          });
          this.listenForColumnInputChanges();
        }
        /**
         * Translates the templates to the column objects
         * @param {?} val
         * @return {?}
         */

      }, {
        key: "translateColumns",
        value: function translateColumns(val) {
          if (val) {
            /** @type {?} */
            var arr = val.toArray();

            if (arr.length) {
              this._internalColumns = translateTemplates(arr);
              setColumnDefaults(this._internalColumns);
              this.recalculateColumns();
              this.sortInternalRows();
              this.cd.markForCheck();
            }
          }
        }
        /**
         * Creates a map with the data grouped by the user choice of grouping index
         *
         * @param {?} originalArray the original array passed via parameter
         * @param {?} groupBy
         * @return {?}
         */

      }, {
        key: "groupArrayBy",
        value: function groupArrayBy(originalArray, groupBy) {
          // create a map to hold groups with their corresponding results

          /** @type {?} */
          var map = new Map();
          /** @type {?} */

          var i = 0;
          originalArray.forEach(
          /**
          * @param {?} item
          * @return {?}
          */
          function (item) {
            /** @type {?} */
            var key = item[groupBy];

            if (!map.has(key)) {
              map.set(key, [item]);
            } else {
              map.get(key).push(item);
            }

            i++;
          });
          /** @type {?} */

          var addGroup =
          /**
          * @param {?} key
          * @param {?} value
          * @return {?}
          */
          function addGroup(key, value) {
            return {
              key: key,
              value: value
            };
          }; // convert map back to a simple array of objects


          return Array.from(map,
          /**
          * @param {?} x
          * @return {?}
          */
          function (x) {
            return addGroup(x[0], x[1]);
          });
        }
        /*
           * Lifecycle hook that is called when Angular dirty checks a directive.
           */

        /**
         * @return {?}
         */

      }, {
        key: "ngDoCheck",
        value: function ngDoCheck() {
          if (this.rowDiffer.diff(this.rows)) {
            if (!this.externalSorting) {
              this.sortInternalRows();
            } else {
              this._internalRows = _toConsumableArray(this.rows);
            } // auto group by parent on new update


            this._internalRows = groupRowsByParents(this._internalRows, optionalGetterForProp(this.treeFromRelation), optionalGetterForProp(this.treeToRelation));
            this.recalculatePages();
            this.cd.markForCheck();
          }
        }
        /**
         * Recalc's the sizes of the grid.
         *
         * Updated automatically on changes to:
         *
         *  - Columns
         *  - Rows
         *  - Paging related
         *
         * Also can be manually invoked or upon window resize.
         * @return {?}
         */

      }, {
        key: "recalculate",
        value: function recalculate() {
          this.recalculateDims();
          this.recalculateColumns();
        }
        /**
         * Window resize handler to update sizes.
         * @return {?}
         */

      }, {
        key: "onWindowResize",
        value: function onWindowResize() {
          this.recalculate();
        }
        /**
         * Recalulcates the column widths based on column width
         * distribution mode and scrollbar offsets.
         * @param {?=} columns
         * @param {?=} forceIdx
         * @param {?=} allowBleed
         * @return {?}
         */

      }, {
        key: "recalculateColumns",
        value: function recalculateColumns() {
          var columns = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this._internalColumns;
          var forceIdx = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : -1;
          var allowBleed = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : this.scrollbarH;
          if (!columns) return undefined;
          /** @type {?} */

          var width = this._innerWidth;

          if (this.scrollbarV) {
            width = width - this.scrollbarHelper.width;
          }

          if (this.columnMode === ColumnMode.force) {
            forceFillColumnWidths(columns, width, forceIdx, allowBleed);
          } else if (this.columnMode === ColumnMode.flex) {
            adjustColumnWidths(columns, width);
          }

          return columns;
        }
        /**
         * Recalculates the dimensions of the table size.
         * Internally calls the page size and row count calcs too.
         *
         * @return {?}
         */

      }, {
        key: "recalculateDims",
        value: function recalculateDims() {
          /** @type {?} */
          var dims = this.dimensionsHelper.getDimensions(this.element);
          this._innerWidth = Math.floor(dims.width);

          if (this.scrollbarV) {
            /** @type {?} */
            var height = dims.height;
            if (this.headerHeight) height = height - this.headerHeight;
            if (this.footerHeight) height = height - this.footerHeight;
            this.bodyHeight = height;
          }

          this.recalculatePages();
        }
        /**
         * Recalculates the pages after a update.
         * @return {?}
         */

      }, {
        key: "recalculatePages",
        value: function recalculatePages() {
          this.pageSize = this.calcPageSize();
          this.rowCount = this.calcRowCount();
        }
        /**
         * Body triggered a page event.
         * @param {?} __0
         * @return {?}
         */

      }, {
        key: "onBodyPage",
        value: function onBodyPage(_ref12) {
          var offset = _ref12.offset;

          // Avoid pagination caming from body events like scroll when the table
          // has no virtualization and the external paging is enable.
          // This means, let's the developer handle pagination by my him(her) self
          if (this.externalPaging && !this.virtualization) {
            return;
          }

          this.offset = offset;
          this.page.emit({
            count: this.count,
            pageSize: this.pageSize,
            limit: this.limit,
            offset: this.offset
          });
        }
        /**
         * The body triggered a scroll event.
         * @param {?} event
         * @return {?}
         */

      }, {
        key: "onBodyScroll",
        value: function onBodyScroll(event) {
          this._offsetX.next(event.offsetX);

          this.scroll.emit(event);
          this.cd.detectChanges();
        }
        /**
         * The footer triggered a page event.
         * @param {?} event
         * @return {?}
         */

      }, {
        key: "onFooterPage",
        value: function onFooterPage(event) {
          this.offset = event.page - 1;
          this.bodyComponent.updateOffsetY(this.offset);
          this.page.emit({
            count: this.count,
            pageSize: this.pageSize,
            limit: this.limit,
            offset: this.offset
          });

          if (this.selectAllRowsOnPage) {
            this.selected = [];
            this.select.emit({
              selected: this.selected
            });
          }
        }
        /**
         * Recalculates the sizes of the page
         * @param {?=} val
         * @return {?}
         */

      }, {
        key: "calcPageSize",
        value: function calcPageSize() {
          var val = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.rows;

          // Keep the page size constant even if the row has been expanded.
          // This is because an expanded row is still considered to be a child of
          // the original row.  Hence calculation would use rowHeight only.
          if (this.scrollbarV && this.virtualization) {
            /** @type {?} */
            var size = Math.ceil(this.bodyHeight / this.rowHeight);
            return Math.max(size, 0);
          } // if limit is passed, we are paging


          if (this.limit !== undefined) {
            return this.limit;
          } // otherwise use row length


          if (val) {
            return val.length;
          } // other empty :(


          return 0;
        }
        /**
         * Calculates the row count.
         * @param {?=} val
         * @return {?}
         */

      }, {
        key: "calcRowCount",
        value: function calcRowCount() {
          var val = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.rows;

          if (!this.externalPaging) {
            if (!val) return 0;

            if (this.groupedRows) {
              return this.groupedRows.length;
            } else if (this.treeFromRelation != null && this.treeToRelation != null) {
              return this._internalRows.length;
            } else {
              return val.length;
            }
          }

          return this.count;
        }
        /**
         * The header triggered a contextmenu event.
         * @param {?} __0
         * @return {?}
         */

      }, {
        key: "onColumnContextmenu",
        value: function onColumnContextmenu(_ref13) {
          var event = _ref13.event,
              column = _ref13.column;
          this.tableContextmenu.emit({
            event: event,
            type: ContextmenuType.header,
            content: column
          });
        }
        /**
         * The body triggered a contextmenu event.
         * @param {?} __0
         * @return {?}
         */

      }, {
        key: "onRowContextmenu",
        value: function onRowContextmenu(_ref14) {
          var event = _ref14.event,
              row = _ref14.row;
          this.tableContextmenu.emit({
            event: event,
            type: ContextmenuType.body,
            content: row
          });
        }
        /**
         * The header triggered a column resize event.
         * @param {?} __0
         * @return {?}
         */

      }, {
        key: "onColumnResize",
        value: function onColumnResize(_ref15) {
          var column = _ref15.column,
              newValue = _ref15.newValue;

          /* Safari/iOS 10.2 workaround */
          if (column === undefined) {
            return;
          }
          /** @type {?} */


          var idx;
          /** @type {?} */

          var cols = this._internalColumns.map(
          /**
          * @param {?} c
          * @param {?} i
          * @return {?}
          */
          function (c, i) {
            c = Object.assign({}, c);

            if (c.$$id === column.$$id) {
              idx = i;
              c.width = newValue; // set this so we can force the column
              // width distribution to be to this value

              c.$$oldWidth = newValue;
            }

            return c;
          });

          this.recalculateColumns(cols, idx);
          this._internalColumns = cols;
          this.resize.emit({
            column: column,
            newValue: newValue
          });
        }
        /**
         * The header triggered a column re-order event.
         * @param {?} __0
         * @return {?}
         */

      }, {
        key: "onColumnReorder",
        value: function onColumnReorder(_ref16) {
          var column = _ref16.column,
              newValue = _ref16.newValue,
              prevValue = _ref16.prevValue;

          /** @type {?} */
          var cols = this._internalColumns.map(
          /**
          * @param {?} c
          * @return {?}
          */
          function (c) {
            return Object.assign({}, c);
          });

          if (this.swapColumns) {
            /** @type {?} */
            var prevCol = cols[newValue];
            cols[newValue] = column;
            cols[prevValue] = prevCol;
          } else {
            if (newValue > prevValue) {
              /** @type {?} */
              var movedCol = cols[prevValue];

              for (var i = prevValue; i < newValue; i++) {
                cols[i] = cols[i + 1];
              }

              cols[newValue] = movedCol;
            } else {
              /** @type {?} */
              var _movedCol = cols[prevValue];

              for (var _i3 = prevValue; _i3 > newValue; _i3--) {
                cols[_i3] = cols[_i3 - 1];
              }

              cols[newValue] = _movedCol;
            }
          }

          this._internalColumns = cols;
          this.reorder.emit({
            column: column,
            newValue: newValue,
            prevValue: prevValue
          });
        }
        /**
         * The header triggered a column sort event.
         * @param {?} event
         * @return {?}
         */

      }, {
        key: "onColumnSort",
        value: function onColumnSort(event) {
          // clean selected rows
          if (this.selectAllRowsOnPage) {
            this.selected = [];
            this.select.emit({
              selected: this.selected
            });
          }

          this.sorts = event.sorts; // this could be optimized better since it will resort
          // the rows again on the 'push' detection...

          if (this.externalSorting === false) {
            // don't use normal setter so we don't resort
            this.sortInternalRows();
          } // auto group by parent on new update


          this._internalRows = groupRowsByParents(this._internalRows, optionalGetterForProp(this.treeFromRelation), optionalGetterForProp(this.treeToRelation)); // Always go to first page when sorting to see the newly sorted data

          this.offset = 0;
          this.bodyComponent.updateOffsetY(this.offset);
          this.sort.emit(event);
        }
        /**
         * Toggle all row selection
         * @param {?} event
         * @return {?}
         */

      }, {
        key: "onHeaderSelect",
        value: function onHeaderSelect(event) {
          if (this.selectAllRowsOnPage) {
            // before we splice, chk if we currently have all selected

            /** @type {?} */
            var first = this.bodyComponent.indexes.first;
            /** @type {?} */

            var last = this.bodyComponent.indexes.last;
            /** @type {?} */

            var allSelected = this.selected.length === last - first; // remove all existing either way

            this.selected = []; // do the opposite here

            if (!allSelected) {
              var _this$selected;

              (_this$selected = this.selected).push.apply(_this$selected, _toConsumableArray(this._internalRows.slice(first, last)));
            }
          } else {
            // before we splice, chk if we currently have all selected

            /** @type {?} */
            var _allSelected = this.selected.length === this.rows.length; // remove all existing either way


            this.selected = []; // do the opposite here

            if (!_allSelected) {
              var _this$selected2;

              (_this$selected2 = this.selected).push.apply(_this$selected2, _toConsumableArray(this.rows));
            }
          }

          this.select.emit({
            selected: this.selected
          });
        }
        /**
         * A row was selected from body
         * @param {?} event
         * @return {?}
         */

      }, {
        key: "onBodySelect",
        value: function onBodySelect(event) {
          this.select.emit(event);
        }
        /**
         * A row was expanded or collapsed for tree
         * @param {?} event
         * @return {?}
         */

      }, {
        key: "onTreeAction",
        value: function onTreeAction(event) {
          var _this18 = this;

          /** @type {?} */
          var row = event.row; // TODO: For duplicated items this will not work

          /** @type {?} */

          var rowIndex = this._rows.findIndex(
          /**
          * @param {?} r
          * @return {?}
          */
          function (r) {
            return r[_this18.treeToRelation] === event.row[_this18.treeToRelation];
          });

          this.treeAction.emit({
            row: row,
            rowIndex: rowIndex
          });
        }
        /**
         * @return {?}
         */

      }, {
        key: "ngOnDestroy",
        value: function ngOnDestroy() {
          this._subscriptions.forEach(
          /**
          * @param {?} subscription
          * @return {?}
          */
          function (subscription) {
            return subscription.unsubscribe();
          });
        }
        /**
         * listen for changes to input bindings of all DataTableColumnDirective and
         * trigger the columnTemplates.changes observable to emit
         * @private
         * @return {?}
         */

      }, {
        key: "listenForColumnInputChanges",
        value: function listenForColumnInputChanges() {
          var _this19 = this;

          this._subscriptions.push(this.columnChangesService.columnInputChanges$.subscribe(
          /**
          * @return {?}
          */
          function () {
            if (_this19.columnTemplates) {
              _this19.columnTemplates.notifyOnChanges();
            }
          }));
        }
        /**
         * @private
         * @return {?}
         */

      }, {
        key: "sortInternalRows",
        value: function sortInternalRows() {
          this._internalRows = sortRows(this._internalRows, this._internalColumns, this.sorts);
        }
      }]);

      return DatatableComponent;
    }();

    DatatableComponent.ɵfac = function DatatableComponent_Factory(t) {
      return new (t || DatatableComponent)(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](ScrollbarHelper, 4), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](DimensionsHelper, 4), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__["ChangeDetectorRef"]), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__["ElementRef"]), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__["KeyValueDiffers"]), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](ColumnChangesService), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"]('configuration', 8));
    };

    DatatableComponent.ɵcmp = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineComponent"]({
      type: DatatableComponent,
      selectors: [["ngx-datatable"]],
      contentQueries: function DatatableComponent_ContentQueries(rf, ctx, dirIndex) {
        if (rf & 1) {
          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵcontentQuery"](dirIndex, DatatableRowDetailDirective, true);

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵcontentQuery"](dirIndex, DatatableGroupHeaderDirective, true);

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵcontentQuery"](dirIndex, DatatableFooterDirective, true);

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵcontentQuery"](dirIndex, DataTableColumnDirective, false);
        }

        if (rf & 2) {
          var _t;

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵqueryRefresh"](_t = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵloadQuery"]()) && (ctx.rowDetail = _t.first);
          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵqueryRefresh"](_t = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵloadQuery"]()) && (ctx.groupHeader = _t.first);
          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵqueryRefresh"](_t = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵloadQuery"]()) && (ctx.footer = _t.first);
          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵqueryRefresh"](_t = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵloadQuery"]()) && (ctx.columnTemplates = _t);
        }
      },
      viewQuery: function DatatableComponent_Query(rf, ctx) {
        if (rf & 1) {
          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵviewQuery"](DataTableBodyComponent, true);

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵviewQuery"](DataTableHeaderComponent, true);
        }

        if (rf & 2) {
          var _t;

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵqueryRefresh"](_t = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵloadQuery"]()) && (ctx.bodyComponent = _t.first);
          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵqueryRefresh"](_t = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵloadQuery"]()) && (ctx.headerComponent = _t.first);
        }
      },
      hostAttrs: [1, "ngx-datatable"],
      hostVars: 22,
      hostBindings: function DatatableComponent_HostBindings(rf, ctx) {
        if (rf & 1) {
          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵlistener"]("resize", function DatatableComponent_resize_HostBindingHandler() {
            return ctx.onWindowResize();
          }, false, _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵresolveWindow"]);
        }

        if (rf & 2) {
          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵclassProp"]("fixed-header", ctx.isFixedHeader)("fixed-row", ctx.isFixedRow)("scroll-vertical", ctx.isVertScroll)("virtualized", ctx.isVirtualized)("scroll-horz", ctx.isHorScroll)("selectable", ctx.isSelectable)("checkbox-selection", ctx.isCheckboxSelection)("cell-selection", ctx.isCellSelection)("single-selection", ctx.isSingleSelection)("multi-selection", ctx.isMultiSelection)("multi-click-selection", ctx.isMultiClickSelection);
        }
      },
      inputs: {
        selected: "selected",
        scrollbarV: "scrollbarV",
        scrollbarH: "scrollbarH",
        rowHeight: "rowHeight",
        columnMode: "columnMode",
        headerHeight: "headerHeight",
        footerHeight: "footerHeight",
        externalPaging: "externalPaging",
        externalSorting: "externalSorting",
        loadingIndicator: "loadingIndicator",
        reorderable: "reorderable",
        swapColumns: "swapColumns",
        sortType: "sortType",
        sorts: "sorts",
        cssClasses: "cssClasses",
        messages: "messages",
        groupExpansionDefault: "groupExpansionDefault",
        selectAllRowsOnPage: "selectAllRowsOnPage",
        virtualization: "virtualization",
        summaryRow: "summaryRow",
        summaryHeight: "summaryHeight",
        summaryPosition: "summaryPosition",
        rowIdentity: "rowIdentity",
        rows: "rows",
        groupedRows: "groupedRows",
        groupRowsBy: "groupRowsBy",
        columns: "columns",
        limit: "limit",
        count: "count",
        offset: "offset",
        targetMarkerTemplate: "targetMarkerTemplate",
        selectionType: "selectionType",
        rowClass: "rowClass",
        selectCheck: "selectCheck",
        displayCheck: "displayCheck",
        trackByProp: "trackByProp",
        treeFromRelation: "treeFromRelation",
        treeToRelation: "treeToRelation"
      },
      outputs: {
        scroll: "scroll",
        activate: "activate",
        select: "select",
        sort: "sort",
        page: "page",
        reorder: "reorder",
        resize: "resize",
        tableContextmenu: "tableContextmenu",
        treeAction: "treeAction"
      },
      decls: 5,
      vars: 34,
      consts: [["visibilityObserver", "", 3, "visible"], [3, "sorts", "sortType", "scrollbarH", "innerWidth", "offsetX", "dealsWithGroup", "columns", "headerHeight", "reorderable", "targetMarkerTemplate", "sortAscendingIcon", "sortDescendingIcon", "allRowsSelected", "selectionType", "sort", "resize", "reorder", "select", "columnContextmenu", 4, "ngIf"], [3, "groupRowsBy", "groupedRows", "rows", "groupExpansionDefault", "scrollbarV", "scrollbarH", "virtualization", "loadingIndicator", "externalPaging", "rowHeight", "rowCount", "offset", "trackByProp", "columns", "pageSize", "offsetX", "rowDetail", "groupHeader", "selected", "innerWidth", "bodyHeight", "selectionType", "emptyMessage", "rowIdentity", "rowClass", "selectCheck", "displayCheck", "summaryRow", "summaryHeight", "summaryPosition", "page", "activate", "rowContextmenu", "select", "scroll", "treeAction"], [3, "rowCount", "pageSize", "offset", "footerHeight", "footerTemplate", "totalMessage", "pagerLeftArrowIcon", "pagerRightArrowIcon", "pagerPreviousIcon", "selectedCount", "selectedMessage", "pagerNextIcon", "page", 4, "ngIf"], [3, "sorts", "sortType", "scrollbarH", "innerWidth", "offsetX", "dealsWithGroup", "columns", "headerHeight", "reorderable", "targetMarkerTemplate", "sortAscendingIcon", "sortDescendingIcon", "allRowsSelected", "selectionType", "sort", "resize", "reorder", "select", "columnContextmenu"], [3, "rowCount", "pageSize", "offset", "footerHeight", "footerTemplate", "totalMessage", "pagerLeftArrowIcon", "pagerRightArrowIcon", "pagerPreviousIcon", "selectedCount", "selectedMessage", "pagerNextIcon", "page"]],
      template: function DatatableComponent_Template(rf, ctx) {
        if (rf & 1) {
          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](0, "div", 0);

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵlistener"]("visible", function DatatableComponent_Template_div_visible_0_listener() {
            return ctx.recalculate();
          });

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](1, DatatableComponent_datatable_header_1_Template, 2, 16, "datatable-header", 1);

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](2, "datatable-body", 2);

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵlistener"]("page", function DatatableComponent_Template_datatable_body_page_2_listener($event) {
            return ctx.onBodyPage($event);
          })("activate", function DatatableComponent_Template_datatable_body_activate_2_listener($event) {
            return ctx.activate.emit($event);
          })("rowContextmenu", function DatatableComponent_Template_datatable_body_rowContextmenu_2_listener($event) {
            return ctx.onRowContextmenu($event);
          })("select", function DatatableComponent_Template_datatable_body_select_2_listener($event) {
            return ctx.onBodySelect($event);
          })("scroll", function DatatableComponent_Template_datatable_body_scroll_2_listener($event) {
            return ctx.onBodyScroll($event);
          })("treeAction", function DatatableComponent_Template_datatable_body_treeAction_2_listener($event) {
            return ctx.onTreeAction($event);
          });

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵpipe"](3, "async");

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](4, DatatableComponent_datatable_footer_4_Template, 1, 12, "datatable-footer", 3);

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
        }

        if (rf & 2) {
          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngIf", ctx.headerHeight);

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("groupRowsBy", ctx.groupRowsBy)("groupedRows", ctx.groupedRows)("rows", ctx._internalRows)("groupExpansionDefault", ctx.groupExpansionDefault)("scrollbarV", ctx.scrollbarV)("scrollbarH", ctx.scrollbarH)("virtualization", ctx.virtualization)("loadingIndicator", ctx.loadingIndicator)("externalPaging", ctx.externalPaging)("rowHeight", ctx.rowHeight)("rowCount", ctx.rowCount)("offset", ctx.offset)("trackByProp", ctx.trackByProp)("columns", ctx._internalColumns)("pageSize", ctx.pageSize)("offsetX", _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵpipeBind1"](3, 32, ctx._offsetX))("rowDetail", ctx.rowDetail)("groupHeader", ctx.groupHeader)("selected", ctx.selected)("innerWidth", ctx._innerWidth)("bodyHeight", ctx.bodyHeight)("selectionType", ctx.selectionType)("emptyMessage", ctx.messages.emptyMessage)("rowIdentity", ctx.rowIdentity)("rowClass", ctx.rowClass)("selectCheck", ctx.selectCheck)("displayCheck", ctx.displayCheck)("summaryRow", ctx.summaryRow)("summaryHeight", ctx.summaryHeight)("summaryPosition", ctx.summaryPosition);

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](2);

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngIf", ctx.footerHeight);
        }
      },
      directives: function directives() {
        return [VisibilityDirective, _angular_common__WEBPACK_IMPORTED_MODULE_1__["NgIf"], DataTableBodyComponent, DataTableHeaderComponent, DataTableFooterComponent];
      },
      pipes: function pipes() {
        return [_angular_common__WEBPACK_IMPORTED_MODULE_1__["AsyncPipe"]];
      },
      styles: [".ngx-datatable{display:block;overflow:hidden;justify-content:center;position:relative;-webkit-transform:translate3d(0,0,0)}.ngx-datatable [hidden]{display:none!important}.ngx-datatable *,.ngx-datatable :after,.ngx-datatable :before{box-sizing:border-box}.ngx-datatable.scroll-vertical .datatable-body{overflow-y:auto}.ngx-datatable.scroll-vertical.virtualized .datatable-body .datatable-row-wrapper{position:absolute}.ngx-datatable.scroll-horz .datatable-body{overflow-x:auto;-webkit-overflow-scrolling:touch}.ngx-datatable.fixed-header .datatable-header .datatable-header-inner{white-space:nowrap}.ngx-datatable.fixed-header .datatable-header .datatable-header-inner .datatable-header-cell{white-space:nowrap;overflow:hidden;text-overflow:ellipsis}.ngx-datatable.fixed-row .datatable-scroll,.ngx-datatable.fixed-row .datatable-scroll .datatable-body-row{white-space:nowrap}.ngx-datatable.fixed-row .datatable-scroll .datatable-body-row .datatable-body-cell,.ngx-datatable.fixed-row .datatable-scroll .datatable-body-row .datatable-body-group-cell{overflow:hidden;white-space:nowrap;text-overflow:ellipsis}.ngx-datatable .datatable-body-row,.ngx-datatable .datatable-header-inner,.ngx-datatable .datatable-row-center{display:flex;flex-direction:row;-o-flex-flow:row;flex-flow:row}.ngx-datatable .datatable-body-cell,.ngx-datatable .datatable-header-cell{overflow-x:hidden;vertical-align:top;display:inline-block;line-height:1.625}.ngx-datatable .datatable-body-cell:focus,.ngx-datatable .datatable-header-cell:focus{outline:0}.ngx-datatable .datatable-row-left,.ngx-datatable .datatable-row-right{z-index:9}.ngx-datatable .datatable-row-center,.ngx-datatable .datatable-row-group,.ngx-datatable .datatable-row-left,.ngx-datatable .datatable-row-right{position:relative}.ngx-datatable .datatable-header{display:block;overflow:hidden}.ngx-datatable .datatable-header .datatable-header-inner{align-items:stretch;-webkit-align-items:stretch}.ngx-datatable .datatable-header .datatable-header-cell{position:relative;display:inline-block}.ngx-datatable .datatable-header .datatable-header-cell.sortable .datatable-header-cell-wrapper{cursor:pointer}.ngx-datatable .datatable-header .datatable-header-cell.longpress .datatable-header-cell-wrapper{cursor:move}.ngx-datatable .datatable-header .datatable-header-cell .sort-btn{line-height:100%;vertical-align:middle;display:inline-block;cursor:pointer}.ngx-datatable .datatable-header .datatable-header-cell .resize-handle,.ngx-datatable .datatable-header .datatable-header-cell .resize-handle--not-resizable{display:inline-block;position:absolute;right:0;top:0;bottom:0;width:5px;padding:0 4px;visibility:hidden}.ngx-datatable .datatable-header .datatable-header-cell .resize-handle{cursor:ew-resize}.ngx-datatable .datatable-header .datatable-header-cell.resizeable:hover .resize-handle,.ngx-datatable .datatable-header .datatable-header-cell:hover .resize-handle--not-resizable{visibility:visible}.ngx-datatable .datatable-header .datatable-header-cell .targetMarker{position:absolute;top:0;bottom:0}.ngx-datatable .datatable-header .datatable-header-cell .targetMarker.dragFromLeft{right:0}.ngx-datatable .datatable-header .datatable-header-cell .targetMarker.dragFromRight{left:0}.ngx-datatable .datatable-header .datatable-header-cell .datatable-header-cell-template-wrap{height:inherit}.ngx-datatable .datatable-body{position:relative;z-index:10;display:block}.ngx-datatable .datatable-body .datatable-scroll{display:inline-block}.ngx-datatable .datatable-body .datatable-row-detail{overflow-y:hidden}.ngx-datatable .datatable-body .datatable-row-wrapper{display:flex;flex-direction:column}.ngx-datatable .datatable-body .datatable-body-row{outline:0}.ngx-datatable .datatable-body .datatable-body-row>div{display:flex}.ngx-datatable .datatable-footer{display:block;width:100%;overflow:auto}.ngx-datatable .datatable-footer .datatable-footer-inner{display:flex;align-items:center;width:100%}.ngx-datatable .datatable-footer .selected-count .page-count{flex:1 1 40%}.ngx-datatable .datatable-footer .selected-count .datatable-pager{flex:1 1 60%}.ngx-datatable .datatable-footer .page-count{flex:1 1 20%}.ngx-datatable .datatable-footer .datatable-pager{flex:1 1 80%;text-align:right}.ngx-datatable .datatable-footer .datatable-pager .pager,.ngx-datatable .datatable-footer .datatable-pager .pager li{padding:0;margin:0;display:inline-block;list-style:none}.ngx-datatable .datatable-footer .datatable-pager .pager li,.ngx-datatable .datatable-footer .datatable-pager .pager li a{outline:0}.ngx-datatable .datatable-footer .datatable-pager .pager li a{cursor:pointer;display:inline-block}.ngx-datatable .datatable-footer .datatable-pager .pager li.disabled a{cursor:not-allowed}"],
      encapsulation: 2,
      changeDetection: 0
    });
    /** @nocollapse */

    DatatableComponent.ctorParameters = function () {
      return [{
        type: ScrollbarHelper,
        decorators: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["SkipSelf"]
        }]
      }, {
        type: DimensionsHelper,
        decorators: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["SkipSelf"]
        }]
      }, {
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ChangeDetectorRef"]
      }, {
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ElementRef"]
      }, {
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["KeyValueDiffers"]
      }, {
        type: ColumnChangesService
      }, {
        type: undefined,
        decorators: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Optional"]
        }, {
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Inject"],
          args: ['configuration']
        }]
      }];
    };

    DatatableComponent.propDecorators = {
      targetMarkerTemplate: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
      }],
      rows: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
      }],
      groupRowsBy: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
      }],
      groupedRows: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
      }],
      columns: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
      }],
      selected: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
      }],
      scrollbarV: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
      }],
      scrollbarH: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
      }],
      rowHeight: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
      }],
      columnMode: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
      }],
      headerHeight: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
      }],
      footerHeight: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
      }],
      externalPaging: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
      }],
      externalSorting: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
      }],
      limit: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
      }],
      count: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
      }],
      offset: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
      }],
      loadingIndicator: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
      }],
      selectionType: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
      }],
      reorderable: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
      }],
      swapColumns: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
      }],
      sortType: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
      }],
      sorts: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
      }],
      cssClasses: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
      }],
      messages: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
      }],
      rowClass: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
      }],
      selectCheck: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
      }],
      displayCheck: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
      }],
      groupExpansionDefault: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
      }],
      trackByProp: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
      }],
      selectAllRowsOnPage: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
      }],
      virtualization: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
      }],
      treeFromRelation: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
      }],
      treeToRelation: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
      }],
      summaryRow: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
      }],
      summaryHeight: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
      }],
      summaryPosition: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
      }],
      scroll: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"]
      }],
      activate: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"]
      }],
      select: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"]
      }],
      sort: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"]
      }],
      page: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"]
      }],
      reorder: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"]
      }],
      resize: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"]
      }],
      tableContextmenu: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"]
      }],
      treeAction: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"]
      }],
      isFixedHeader: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["HostBinding"],
        args: ['class.fixed-header']
      }],
      isFixedRow: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["HostBinding"],
        args: ['class.fixed-row']
      }],
      isVertScroll: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["HostBinding"],
        args: ['class.scroll-vertical']
      }],
      isVirtualized: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["HostBinding"],
        args: ['class.virtualized']
      }],
      isHorScroll: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["HostBinding"],
        args: ['class.scroll-horz']
      }],
      isSelectable: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["HostBinding"],
        args: ['class.selectable']
      }],
      isCheckboxSelection: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["HostBinding"],
        args: ['class.checkbox-selection']
      }],
      isCellSelection: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["HostBinding"],
        args: ['class.cell-selection']
      }],
      isSingleSelection: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["HostBinding"],
        args: ['class.single-selection']
      }],
      isMultiSelection: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["HostBinding"],
        args: ['class.multi-selection']
      }],
      isMultiClickSelection: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["HostBinding"],
        args: ['class.multi-click-selection']
      }],
      columnTemplates: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ContentChildren"],
        args: [DataTableColumnDirective]
      }],
      rowDetail: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ContentChild"],
        args: [DatatableRowDetailDirective, {
          "static": false
        }]
      }],
      groupHeader: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ContentChild"],
        args: [DatatableGroupHeaderDirective, {
          "static": false
        }]
      }],
      footer: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ContentChild"],
        args: [DatatableFooterDirective, {
          "static": false
        }]
      }],
      bodyComponent: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewChild"],
        args: [DataTableBodyComponent, {
          "static": false
        }]
      }],
      headerComponent: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewChild"],
        args: [DataTableHeaderComponent, {
          "static": false
        }]
      }],
      rowIdentity: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
      }],
      onWindowResize: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["HostListener"],
        args: ['window:resize']
      }]
    };
    Object(tslib__WEBPACK_IMPORTED_MODULE_4__["__decorate"])([throttleable(5), Object(tslib__WEBPACK_IMPORTED_MODULE_4__["__metadata"])("design:type", Function), Object(tslib__WEBPACK_IMPORTED_MODULE_4__["__metadata"])("design:paramtypes", []), Object(tslib__WEBPACK_IMPORTED_MODULE_4__["__metadata"])("design:returntype", void 0)], DatatableComponent.prototype, "onWindowResize", null);
    /*@__PURE__*/

    (function () {
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](ScrollbarHelper, [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Injectable"]
      }], function () {
        return [{
          type: undefined,
          decorators: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Inject"],
            args: [_angular_common__WEBPACK_IMPORTED_MODULE_1__["DOCUMENT"]]
          }]
        }];
      }, null);
    })();
    /*@__PURE__*/


    (function () {
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](DimensionsHelper, [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Injectable"]
      }], null, null);
    })();
    /*@__PURE__*/


    (function () {
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](ColumnChangesService, [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Injectable"]
      }], function () {
        return [];
      }, null);
    })();
    /*@__PURE__*/


    (function () {
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](DataTableFooterTemplateDirective, [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Directive"],
        args: [{
          selector: '[ngx-datatable-footer-template]'
        }]
      }], function () {
        return [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["TemplateRef"]
        }];
      }, null);
    })();
    /*@__PURE__*/


    (function () {
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](VisibilityDirective, [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Directive"],
        args: [{
          selector: '[visibilityObserver]'
        }]
      }], function () {
        return [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ElementRef"]
        }, {
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["NgZone"]
        }];
      }, {
        isVisible: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["HostBinding"],
          args: ['class.visible']
        }],
        visible: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"]
        }]
      });
    })();
    /*@__PURE__*/


    (function () {
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](DraggableDirective, [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Directive"],
        args: [{
          selector: '[draggable]'
        }]
      }], function () {
        return [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ElementRef"]
        }];
      }, {
        dragX: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
        }],
        dragY: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
        }],
        dragStart: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"]
        }],
        dragging: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"]
        }],
        dragEnd: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"]
        }],
        dragEventTarget: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
        }],
        dragModel: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
        }]
      });
    })();
    /*@__PURE__*/


    (function () {
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](ResizeableDirective, [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Directive"],
        args: [{
          selector: '[resizeable]',
          host: {
            '[class.resizeable]': 'resizeEnabled'
          }
        }]
      }], function () {
        return [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ElementRef"]
        }, {
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Renderer2"]
        }];
      }, {
        resizeEnabled: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
        }],
        resize: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"]
        }],
        onMousedown: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["HostListener"],
          args: ['mousedown', ['$event']]
        }],
        minWidth: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
        }],
        maxWidth: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
        }]
      });
    })();
    /*@__PURE__*/


    (function () {
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](OrderableDirective, [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Directive"],
        args: [{
          selector: '[orderable]'
        }]
      }], function () {
        return [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["KeyValueDiffers"]
        }, {
          type: undefined,
          decorators: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Inject"],
            args: [_angular_common__WEBPACK_IMPORTED_MODULE_1__["DOCUMENT"]]
          }]
        }];
      }, {
        reorder: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"]
        }],
        targetChanged: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"]
        }],
        draggables: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ContentChildren"],
          args: [DraggableDirective, {
            descendants: true
          }]
        }]
      });
    })();
    /*@__PURE__*/


    (function () {
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](LongPressDirective, [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Directive"],
        args: [{
          selector: '[long-press]'
        }]
      }], function () {
        return [];
      }, {
        pressEnabled: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
        }],
        duration: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
        }],
        longPressStart: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"]
        }],
        longPressing: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"]
        }],
        longPressEnd: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"]
        }],
        press: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["HostBinding"],
          args: ['class.press']
        }],
        isLongPress: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["HostBinding"],
          args: ['class.longpress']
        }],
        onMouseDown: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["HostListener"],
          args: ['mousedown', ['$event']]
        }],
        pressModel: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
        }]
      });
    })();
    /*@__PURE__*/


    (function () {
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](ScrollerComponent, [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"],
        args: [{
          selector: 'datatable-scroller',
          template: "\n    <ng-content></ng-content>\n  ",
          host: {
            "class": 'datatable-scroll'
          },
          changeDetection: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ChangeDetectionStrategy"].OnPush
        }]
      }], function () {
        return [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["NgZone"]
        }, {
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ElementRef"]
        }, {
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Renderer2"]
        }];
      }, {
        scrollbarV: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
        }],
        scrollbarH: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
        }],
        scroll: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"]
        }],
        scrollHeight: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["HostBinding"],
          args: ['style.height.px']
        }, {
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
        }],
        scrollWidth: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["HostBinding"],
          args: ['style.width.px']
        }, {
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
        }]
      });
    })();
    /*@__PURE__*/


    (function () {
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](DatatableGroupHeaderTemplateDirective, [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Directive"],
        args: [{
          selector: '[ngx-datatable-group-header-template]'
        }]
      }], function () {
        return [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["TemplateRef"]
        }];
      }, null);
    })();
    /*@__PURE__*/


    (function () {
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](DatatableGroupHeaderDirective, [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Directive"],
        args: [{
          selector: 'ngx-datatable-group-header'
        }]
      }], function () {
        return [];
      }, {
        rowHeight: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
        }],
        toggle: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"]
        }],
        _templateInput: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"],
          args: ['template']
        }],
        _templateQuery: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ContentChild"],
          args: [DatatableGroupHeaderTemplateDirective, {
            read: _angular_core__WEBPACK_IMPORTED_MODULE_0__["TemplateRef"],
            "static": true
          }]
        }]
      });
    })();
    /*@__PURE__*/


    (function () {
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](DataTableColumnHeaderDirective, [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Directive"],
        args: [{
          selector: '[ngx-datatable-header-template]'
        }]
      }], function () {
        return [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["TemplateRef"]
        }];
      }, null);
    })();
    /*@__PURE__*/


    (function () {
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](DataTableColumnCellDirective, [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Directive"],
        args: [{
          selector: '[ngx-datatable-cell-template]'
        }]
      }], function () {
        return [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["TemplateRef"]
        }];
      }, null);
    })();
    /*@__PURE__*/


    (function () {
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](DataTableColumnCellTreeToggle, [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Directive"],
        args: [{
          selector: '[ngx-datatable-tree-toggle]'
        }]
      }], function () {
        return [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["TemplateRef"]
        }];
      }, null);
    })();
    /*@__PURE__*/


    (function () {
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](DataTableColumnDirective, [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Directive"],
        args: [{
          selector: 'ngx-datatable-column'
        }]
      }], function () {
        return [{
          type: ColumnChangesService
        }];
      }, {
        name: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
        }],
        prop: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
        }],
        frozenLeft: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
        }],
        frozenRight: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
        }],
        flexGrow: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
        }],
        resizeable: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
        }],
        comparator: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
        }],
        pipe: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
        }],
        sortable: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
        }],
        draggable: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
        }],
        canAutoResize: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
        }],
        minWidth: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
        }],
        width: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
        }],
        maxWidth: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
        }],
        checkboxable: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
        }],
        headerCheckboxable: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
        }],
        headerClass: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
        }],
        cellClass: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
        }],
        isTreeColumn: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
        }],
        treeLevelIndent: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
        }],
        summaryFunc: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
        }],
        summaryTemplate: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
        }],
        _cellTemplateInput: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"],
          args: ['cellTemplate']
        }],
        _cellTemplateQuery: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ContentChild"],
          args: [DataTableColumnCellDirective, {
            read: _angular_core__WEBPACK_IMPORTED_MODULE_0__["TemplateRef"],
            "static": true
          }]
        }],
        _headerTemplateInput: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"],
          args: ['headerTemplate']
        }],
        _headerTemplateQuery: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ContentChild"],
          args: [DataTableColumnHeaderDirective, {
            read: _angular_core__WEBPACK_IMPORTED_MODULE_0__["TemplateRef"],
            "static": true
          }]
        }],
        _treeToggleTemplateInput: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"],
          args: ['treeToggleTemplate']
        }],
        _treeToggleTemplateQuery: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ContentChild"],
          args: [DataTableColumnCellTreeToggle, {
            read: _angular_core__WEBPACK_IMPORTED_MODULE_0__["TemplateRef"],
            "static": true
          }]
        }]
      });
    })();
    /*@__PURE__*/


    (function () {
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](DatatableRowDetailTemplateDirective, [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Directive"],
        args: [{
          selector: '[ngx-datatable-row-detail-template]'
        }]
      }], function () {
        return [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["TemplateRef"]
        }];
      }, null);
    })();
    /*@__PURE__*/


    (function () {
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](DatatableRowDetailDirective, [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Directive"],
        args: [{
          selector: 'ngx-datatable-row-detail'
        }]
      }], function () {
        return [];
      }, {
        rowHeight: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
        }],
        toggle: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"]
        }],
        _templateInput: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"],
          args: ['template']
        }],
        _templateQuery: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ContentChild"],
          args: [DatatableRowDetailTemplateDirective, {
            read: _angular_core__WEBPACK_IMPORTED_MODULE_0__["TemplateRef"],
            "static": true
          }]
        }]
      });
    })();
    /*@__PURE__*/


    (function () {
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](DatatableFooterDirective, [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Directive"],
        args: [{
          selector: 'ngx-datatable-footer'
        }]
      }], null, {
        footerHeight: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
        }],
        totalMessage: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
        }],
        selectedMessage: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
        }],
        pagerLeftArrowIcon: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
        }],
        pagerRightArrowIcon: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
        }],
        pagerPreviousIcon: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
        }],
        pagerNextIcon: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
        }],
        _templateInput: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"],
          args: ['template']
        }],
        _templateQuery: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ContentChild"],
          args: [DataTableFooterTemplateDirective, {
            read: _angular_core__WEBPACK_IMPORTED_MODULE_0__["TemplateRef"],
            "static": false
          }]
        }]
      });
    })();
    /*@__PURE__*/


    (function () {
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](DataTableBodyComponent, [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"],
        args: [{
          selector: 'datatable-body',
          template: "\n    <datatable-selection\n      #selector\n      [selected]=\"selected\"\n      [rows]=\"rows\"\n      [selectCheck]=\"selectCheck\"\n      [selectEnabled]=\"selectEnabled\"\n      [selectionType]=\"selectionType\"\n      [rowIdentity]=\"rowIdentity\"\n      (select)=\"select.emit($event)\"\n      (activate)=\"activate.emit($event)\"\n    >\n      <datatable-progress *ngIf=\"loadingIndicator\"> </datatable-progress>\n      <datatable-scroller\n        *ngIf=\"rows?.length\"\n        [scrollbarV]=\"scrollbarV\"\n        [scrollbarH]=\"scrollbarH\"\n        [scrollHeight]=\"scrollHeight\"\n        [scrollWidth]=\"columnGroupWidths?.total\"\n        (scroll)=\"onBodyScroll($event)\"\n      >\n        <datatable-summary-row\n          *ngIf=\"summaryRow && summaryPosition === 'top'\"\n          [rowHeight]=\"summaryHeight\"\n          [offsetX]=\"offsetX\"\n          [innerWidth]=\"innerWidth\"\n          [rows]=\"rows\"\n          [columns]=\"columns\"\n        >\n        </datatable-summary-row>\n        <datatable-row-wrapper\n          [groupedRows]=\"groupedRows\"\n          *ngFor=\"let group of temp; let i = index; trackBy: rowTrackingFn\"\n          [innerWidth]=\"innerWidth\"\n          [ngStyle]=\"getRowsStyles(group)\"\n          [rowDetail]=\"rowDetail\"\n          [groupHeader]=\"groupHeader\"\n          [offsetX]=\"offsetX\"\n          [detailRowHeight]=\"getDetailRowHeight(group[i], i)\"\n          [row]=\"group\"\n          [expanded]=\"getRowExpanded(group)\"\n          [rowIndex]=\"getRowIndex(group[i])\"\n          (rowContextmenu)=\"rowContextmenu.emit($event)\"\n        >\n          <datatable-body-row\n            *ngIf=\"!groupedRows; else groupedRowsTemplate\"\n            tabindex=\"-1\"\n            [isSelected]=\"selector.getRowSelected(group)\"\n            [innerWidth]=\"innerWidth\"\n            [offsetX]=\"offsetX\"\n            [columns]=\"columns\"\n            [rowHeight]=\"getRowHeight(group)\"\n            [row]=\"group\"\n            [rowIndex]=\"getRowIndex(group)\"\n            [expanded]=\"getRowExpanded(group)\"\n            [rowClass]=\"rowClass\"\n            [displayCheck]=\"displayCheck\"\n            [treeStatus]=\"group.treeStatus\"\n            (treeAction)=\"onTreeAction(group)\"\n            (activate)=\"selector.onActivate($event, indexes.first + i)\"\n          >\n          </datatable-body-row>\n          <ng-template #groupedRowsTemplate>\n            <datatable-body-row\n              *ngFor=\"let row of group.value; let i = index; trackBy: rowTrackingFn\"\n              tabindex=\"-1\"\n              [isSelected]=\"selector.getRowSelected(row)\"\n              [innerWidth]=\"innerWidth\"\n              [offsetX]=\"offsetX\"\n              [columns]=\"columns\"\n              [rowHeight]=\"getRowHeight(row)\"\n              [row]=\"row\"\n              [group]=\"group.value\"\n              [rowIndex]=\"getRowIndex(row)\"\n              [expanded]=\"getRowExpanded(row)\"\n              [rowClass]=\"rowClass\"\n              (activate)=\"selector.onActivate($event, i)\"\n            >\n            </datatable-body-row>\n          </ng-template>\n        </datatable-row-wrapper>\n        <datatable-summary-row\n          *ngIf=\"summaryRow && summaryPosition === 'bottom'\"\n          [ngStyle]=\"getBottomSummaryRowStyles()\"\n          [rowHeight]=\"summaryHeight\"\n          [offsetX]=\"offsetX\"\n          [innerWidth]=\"innerWidth\"\n          [rows]=\"rows\"\n          [columns]=\"columns\"\n        >\n        </datatable-summary-row>\n      </datatable-scroller>\n      <div class=\"empty-row\" *ngIf=\"!rows?.length && !loadingIndicator\" [innerHTML]=\"emptyMessage\"></div>\n    </datatable-selection>\n  ",
          changeDetection: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ChangeDetectionStrategy"].OnPush,
          host: {
            "class": 'datatable-body'
          }
        }]
      }], function () {
        return [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ChangeDetectorRef"]
        }];
      }, {
        selected: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
        }],
        scroll: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"]
        }],
        page: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"]
        }],
        activate: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"]
        }],
        select: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"]
        }],
        detailToggle: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"]
        }],
        rowContextmenu: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"]
        }],
        treeAction: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"]
        }],
        pageSize: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
        }],
        rows: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
        }],
        columns: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
        }],
        offset: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
        }],
        rowCount: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
        }],
        bodyWidth: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["HostBinding"],
          args: ['style.width']
        }],
        bodyHeight: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
        }, {
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["HostBinding"],
          args: ['style.height']
        }],
        offsetX: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
        }],
        loadingIndicator: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
        }],
        scrollbarV: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
        }],
        scrollbarH: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
        }],
        externalPaging: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
        }],
        rowHeight: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
        }],
        emptyMessage: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
        }],
        selectionType: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
        }],
        rowIdentity: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
        }],
        rowDetail: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
        }],
        groupHeader: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
        }],
        selectCheck: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
        }],
        displayCheck: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
        }],
        trackByProp: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
        }],
        rowClass: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
        }],
        groupedRows: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
        }],
        groupExpansionDefault: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
        }],
        innerWidth: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
        }],
        groupRowsBy: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
        }],
        virtualization: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
        }],
        summaryRow: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
        }],
        summaryPosition: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
        }],
        summaryHeight: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
        }],
        scroller: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewChild"],
          args: [ScrollerComponent, {
            "static": false
          }]
        }]
      });
    })();
    /*@__PURE__*/


    (function () {
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](DataTableHeaderComponent, [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"],
        args: [{
          selector: 'datatable-header',
          template: "\n    <div\n      orderable\n      (reorder)=\"onColumnReordered($event)\"\n      (targetChanged)=\"onTargetChanged($event)\"\n      [style.width.px]=\"_columnGroupWidths.total\"\n      class=\"datatable-header-inner\"\n    >\n      <div\n        *ngFor=\"let colGroup of _columnsByPin; trackBy: trackByGroups\"\n        [class]=\"'datatable-row-' + colGroup.type\"\n        [ngStyle]=\"_styleByGroup[colGroup.type]\"\n      >\n        <datatable-header-cell\n          *ngFor=\"let column of colGroup.columns; trackBy: columnTrackingFn\"\n          resizeable\n          [resizeEnabled]=\"column.resizeable\"\n          (resize)=\"onColumnResized($event, column)\"\n          long-press\n          [pressModel]=\"column\"\n          [pressEnabled]=\"reorderable && column.draggable\"\n          (longPressStart)=\"onLongPressStart($event)\"\n          (longPressEnd)=\"onLongPressEnd($event)\"\n          draggable\n          [dragX]=\"reorderable && column.draggable && column.dragging\"\n          [dragY]=\"false\"\n          [dragModel]=\"column\"\n          [dragEventTarget]=\"dragEventTarget\"\n          [headerHeight]=\"headerHeight\"\n          [isTarget]=\"column.isTarget\"\n          [targetMarkerTemplate]=\"targetMarkerTemplate\"\n          [targetMarkerContext]=\"column.targetMarkerContext\"\n          [column]=\"column\"\n          [sortType]=\"sortType\"\n          [sorts]=\"sorts\"\n          [selectionType]=\"selectionType\"\n          [sortAscendingIcon]=\"sortAscendingIcon\"\n          [sortDescendingIcon]=\"sortDescendingIcon\"\n          [allRowsSelected]=\"allRowsSelected\"\n          (sort)=\"onSort($event)\"\n          (select)=\"select.emit($event)\"\n          (columnContextmenu)=\"columnContextmenu.emit($event)\"\n        >\n        </datatable-header-cell>\n      </div>\n    </div>\n  ",
          host: {
            "class": 'datatable-header'
          },
          changeDetection: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ChangeDetectionStrategy"].OnPush
        }]
      }], function () {
        return [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ChangeDetectorRef"]
        }];
      }, {
        sort: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"]
        }],
        reorder: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"]
        }],
        resize: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"]
        }],
        select: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"]
        }],
        columnContextmenu: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"]
        }],
        innerWidth: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
        }],
        headerHeight: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["HostBinding"],
          args: ['style.height']
        }, {
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
        }],
        columns: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
        }],
        offsetX: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
        }],
        headerWidth: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["HostBinding"],
          args: ['style.width']
        }],
        sorts: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
        }],
        sortAscendingIcon: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
        }],
        sortDescendingIcon: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
        }],
        scrollbarH: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
        }],
        dealsWithGroup: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
        }],
        targetMarkerTemplate: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
        }],
        sortType: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
        }],
        allRowsSelected: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
        }],
        selectionType: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
        }],
        reorderable: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
        }]
      });
    })();
    /*@__PURE__*/


    (function () {
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](DatatableComponent, [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"],
        args: [{
          selector: 'ngx-datatable',
          template: "<div visibilityObserver (visible)=\"recalculate()\">\n  <datatable-header\n    *ngIf=\"headerHeight\"\n    [sorts]=\"sorts\"\n    [sortType]=\"sortType\"\n    [scrollbarH]=\"scrollbarH\"\n    [innerWidth]=\"_innerWidth\"\n    [offsetX]=\"_offsetX | async\"\n    [dealsWithGroup]=\"groupedRows !== undefined\"\n    [columns]=\"_internalColumns\"\n    [headerHeight]=\"headerHeight\"\n    [reorderable]=\"reorderable\"\n    [targetMarkerTemplate]=\"targetMarkerTemplate\"\n    [sortAscendingIcon]=\"cssClasses.sortAscending\"\n    [sortDescendingIcon]=\"cssClasses.sortDescending\"\n    [allRowsSelected]=\"allRowsSelected\"\n    [selectionType]=\"selectionType\"\n    (sort)=\"onColumnSort($event)\"\n    (resize)=\"onColumnResize($event)\"\n    (reorder)=\"onColumnReorder($event)\"\n    (select)=\"onHeaderSelect($event)\"\n    (columnContextmenu)=\"onColumnContextmenu($event)\"\n  >\n  </datatable-header>\n  <datatable-body\n    [groupRowsBy]=\"groupRowsBy\"\n    [groupedRows]=\"groupedRows\"\n    [rows]=\"_internalRows\"\n    [groupExpansionDefault]=\"groupExpansionDefault\"\n    [scrollbarV]=\"scrollbarV\"\n    [scrollbarH]=\"scrollbarH\"\n    [virtualization]=\"virtualization\"\n    [loadingIndicator]=\"loadingIndicator\"\n    [externalPaging]=\"externalPaging\"\n    [rowHeight]=\"rowHeight\"\n    [rowCount]=\"rowCount\"\n    [offset]=\"offset\"\n    [trackByProp]=\"trackByProp\"\n    [columns]=\"_internalColumns\"\n    [pageSize]=\"pageSize\"\n    [offsetX]=\"_offsetX | async\"\n    [rowDetail]=\"rowDetail\"\n    [groupHeader]=\"groupHeader\"\n    [selected]=\"selected\"\n    [innerWidth]=\"_innerWidth\"\n    [bodyHeight]=\"bodyHeight\"\n    [selectionType]=\"selectionType\"\n    [emptyMessage]=\"messages.emptyMessage\"\n    [rowIdentity]=\"rowIdentity\"\n    [rowClass]=\"rowClass\"\n    [selectCheck]=\"selectCheck\"\n    [displayCheck]=\"displayCheck\"\n    [summaryRow]=\"summaryRow\"\n    [summaryHeight]=\"summaryHeight\"\n    [summaryPosition]=\"summaryPosition\"\n    (page)=\"onBodyPage($event)\"\n    (activate)=\"activate.emit($event)\"\n    (rowContextmenu)=\"onRowContextmenu($event)\"\n    (select)=\"onBodySelect($event)\"\n    (scroll)=\"onBodyScroll($event)\"\n    (treeAction)=\"onTreeAction($event)\"\n  >\n  </datatable-body>\n  <datatable-footer\n    *ngIf=\"footerHeight\"\n    [rowCount]=\"rowCount\"\n    [pageSize]=\"pageSize\"\n    [offset]=\"offset\"\n    [footerHeight]=\"footerHeight\"\n    [footerTemplate]=\"footer\"\n    [totalMessage]=\"messages.totalMessage\"\n    [pagerLeftArrowIcon]=\"cssClasses.pagerLeftArrow\"\n    [pagerRightArrowIcon]=\"cssClasses.pagerRightArrow\"\n    [pagerPreviousIcon]=\"cssClasses.pagerPrevious\"\n    [selectedCount]=\"selected.length\"\n    [selectedMessage]=\"!!selectionType && messages.selectedMessage\"\n    [pagerNextIcon]=\"cssClasses.pagerNext\"\n    (page)=\"onFooterPage($event)\"\n  >\n  </datatable-footer>\n</div>\n",
          changeDetection: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ChangeDetectionStrategy"].OnPush,
          encapsulation: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewEncapsulation"].None,
          host: {
            "class": 'ngx-datatable'
          },
          styles: [".ngx-datatable{display:block;overflow:hidden;justify-content:center;position:relative;-webkit-transform:translate3d(0,0,0)}.ngx-datatable [hidden]{display:none!important}.ngx-datatable *,.ngx-datatable :after,.ngx-datatable :before{box-sizing:border-box}.ngx-datatable.scroll-vertical .datatable-body{overflow-y:auto}.ngx-datatable.scroll-vertical.virtualized .datatable-body .datatable-row-wrapper{position:absolute}.ngx-datatable.scroll-horz .datatable-body{overflow-x:auto;-webkit-overflow-scrolling:touch}.ngx-datatable.fixed-header .datatable-header .datatable-header-inner{white-space:nowrap}.ngx-datatable.fixed-header .datatable-header .datatable-header-inner .datatable-header-cell{white-space:nowrap;overflow:hidden;text-overflow:ellipsis}.ngx-datatable.fixed-row .datatable-scroll,.ngx-datatable.fixed-row .datatable-scroll .datatable-body-row{white-space:nowrap}.ngx-datatable.fixed-row .datatable-scroll .datatable-body-row .datatable-body-cell,.ngx-datatable.fixed-row .datatable-scroll .datatable-body-row .datatable-body-group-cell{overflow:hidden;white-space:nowrap;text-overflow:ellipsis}.ngx-datatable .datatable-body-row,.ngx-datatable .datatable-header-inner,.ngx-datatable .datatable-row-center{display:flex;flex-direction:row;-o-flex-flow:row;flex-flow:row}.ngx-datatable .datatable-body-cell,.ngx-datatable .datatable-header-cell{overflow-x:hidden;vertical-align:top;display:inline-block;line-height:1.625}.ngx-datatable .datatable-body-cell:focus,.ngx-datatable .datatable-header-cell:focus{outline:0}.ngx-datatable .datatable-row-left,.ngx-datatable .datatable-row-right{z-index:9}.ngx-datatable .datatable-row-center,.ngx-datatable .datatable-row-group,.ngx-datatable .datatable-row-left,.ngx-datatable .datatable-row-right{position:relative}.ngx-datatable .datatable-header{display:block;overflow:hidden}.ngx-datatable .datatable-header .datatable-header-inner{align-items:stretch;-webkit-align-items:stretch}.ngx-datatable .datatable-header .datatable-header-cell{position:relative;display:inline-block}.ngx-datatable .datatable-header .datatable-header-cell.sortable .datatable-header-cell-wrapper{cursor:pointer}.ngx-datatable .datatable-header .datatable-header-cell.longpress .datatable-header-cell-wrapper{cursor:move}.ngx-datatable .datatable-header .datatable-header-cell .sort-btn{line-height:100%;vertical-align:middle;display:inline-block;cursor:pointer}.ngx-datatable .datatable-header .datatable-header-cell .resize-handle,.ngx-datatable .datatable-header .datatable-header-cell .resize-handle--not-resizable{display:inline-block;position:absolute;right:0;top:0;bottom:0;width:5px;padding:0 4px;visibility:hidden}.ngx-datatable .datatable-header .datatable-header-cell .resize-handle{cursor:ew-resize}.ngx-datatable .datatable-header .datatable-header-cell.resizeable:hover .resize-handle,.ngx-datatable .datatable-header .datatable-header-cell:hover .resize-handle--not-resizable{visibility:visible}.ngx-datatable .datatable-header .datatable-header-cell .targetMarker{position:absolute;top:0;bottom:0}.ngx-datatable .datatable-header .datatable-header-cell .targetMarker.dragFromLeft{right:0}.ngx-datatable .datatable-header .datatable-header-cell .targetMarker.dragFromRight{left:0}.ngx-datatable .datatable-header .datatable-header-cell .datatable-header-cell-template-wrap{height:inherit}.ngx-datatable .datatable-body{position:relative;z-index:10;display:block}.ngx-datatable .datatable-body .datatable-scroll{display:inline-block}.ngx-datatable .datatable-body .datatable-row-detail{overflow-y:hidden}.ngx-datatable .datatable-body .datatable-row-wrapper{display:flex;flex-direction:column}.ngx-datatable .datatable-body .datatable-body-row{outline:0}.ngx-datatable .datatable-body .datatable-body-row>div{display:flex}.ngx-datatable .datatable-footer{display:block;width:100%;overflow:auto}.ngx-datatable .datatable-footer .datatable-footer-inner{display:flex;align-items:center;width:100%}.ngx-datatable .datatable-footer .selected-count .page-count{flex:1 1 40%}.ngx-datatable .datatable-footer .selected-count .datatable-pager{flex:1 1 60%}.ngx-datatable .datatable-footer .page-count{flex:1 1 20%}.ngx-datatable .datatable-footer .datatable-pager{flex:1 1 80%;text-align:right}.ngx-datatable .datatable-footer .datatable-pager .pager,.ngx-datatable .datatable-footer .datatable-pager .pager li{padding:0;margin:0;display:inline-block;list-style:none}.ngx-datatable .datatable-footer .datatable-pager .pager li,.ngx-datatable .datatable-footer .datatable-pager .pager li a{outline:0}.ngx-datatable .datatable-footer .datatable-pager .pager li a{cursor:pointer;display:inline-block}.ngx-datatable .datatable-footer .datatable-pager .pager li.disabled a{cursor:not-allowed}"]
        }]
      }], function () {
        return [{
          type: ScrollbarHelper,
          decorators: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["SkipSelf"]
          }]
        }, {
          type: DimensionsHelper,
          decorators: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["SkipSelf"]
          }]
        }, {
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ChangeDetectorRef"]
        }, {
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ElementRef"]
        }, {
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["KeyValueDiffers"]
        }, {
          type: ColumnChangesService
        }, {
          type: undefined,
          decorators: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Optional"]
          }, {
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Inject"],
            args: ['configuration']
          }]
        }];
      }, {
        selected: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
        }],
        scrollbarV: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
        }],
        scrollbarH: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
        }],
        rowHeight: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
        }],
        columnMode: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
        }],
        headerHeight: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
        }],
        footerHeight: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
        }],
        externalPaging: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
        }],
        externalSorting: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
        }],
        loadingIndicator: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
        }],
        reorderable: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
        }],
        swapColumns: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
        }],
        sortType: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
        }],
        sorts: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
        }],
        cssClasses: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
        }],
        messages: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
        }],
        groupExpansionDefault: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
        }],
        selectAllRowsOnPage: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
        }],
        virtualization: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
        }],
        summaryRow: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
        }],
        summaryHeight: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
        }],
        summaryPosition: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
        }],
        scroll: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"]
        }],
        activate: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"]
        }],
        select: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"]
        }],
        sort: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"]
        }],
        page: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"]
        }],
        reorder: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"]
        }],
        resize: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"]
        }],
        tableContextmenu: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"]
        }],
        treeAction: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"]
        }],
        rowIdentity: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
        }],
        rows: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
        }],
        groupedRows: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
        }],
        groupRowsBy: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
        }],
        columns: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
        }],
        limit: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
        }],
        count: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
        }],
        offset: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
        }],
        isFixedHeader: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["HostBinding"],
          args: ['class.fixed-header']
        }],
        isFixedRow: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["HostBinding"],
          args: ['class.fixed-row']
        }],
        isVertScroll: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["HostBinding"],
          args: ['class.scroll-vertical']
        }],
        isVirtualized: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["HostBinding"],
          args: ['class.virtualized']
        }],
        isHorScroll: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["HostBinding"],
          args: ['class.scroll-horz']
        }],
        isSelectable: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["HostBinding"],
          args: ['class.selectable']
        }],
        isCheckboxSelection: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["HostBinding"],
          args: ['class.checkbox-selection']
        }],
        isCellSelection: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["HostBinding"],
          args: ['class.cell-selection']
        }],
        isSingleSelection: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["HostBinding"],
          args: ['class.single-selection']
        }],
        isMultiSelection: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["HostBinding"],
          args: ['class.multi-selection']
        }],
        isMultiClickSelection: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["HostBinding"],
          args: ['class.multi-click-selection']
        }],
        columnTemplates: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ContentChildren"],
          args: [DataTableColumnDirective]
        }],
        onWindowResize: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["HostListener"],
          args: ['window:resize']
        }],
        targetMarkerTemplate: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
        }],
        selectionType: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
        }],
        rowClass: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
        }],
        selectCheck: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
        }],
        displayCheck: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
        }],
        trackByProp: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
        }],
        treeFromRelation: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
        }],
        treeToRelation: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
        }],
        rowDetail: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ContentChild"],
          args: [DatatableRowDetailDirective, {
            "static": false
          }]
        }],
        groupHeader: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ContentChild"],
          args: [DatatableGroupHeaderDirective, {
            "static": false
          }]
        }],
        footer: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ContentChild"],
          args: [DatatableFooterDirective, {
            "static": false
          }]
        }],
        bodyComponent: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewChild"],
          args: [DataTableBodyComponent, {
            "static": false
          }]
        }],
        headerComponent: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewChild"],
          args: [DataTableHeaderComponent, {
            "static": false
          }]
        }]
      });
    })();

    if (false) {}
    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */


    var DataTableHeaderCellComponent = /*#__PURE__*/function () {
      /**
       * @param {?} cd
       */
      function DataTableHeaderCellComponent(cd) {
        _classCallCheck(this, DataTableHeaderCellComponent);

        this.cd = cd;
        this.sort = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
        this.select = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
        this.columnContextmenu = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"](false);
        this.sortFn = this.onSort.bind(this);
        this.selectFn = this.select.emit.bind(this.select);
        this.cellContext = {
          column: this.column,
          sortDir: this.sortDir,
          sortFn: this.sortFn,
          allRowsSelected: this.allRowsSelected,
          selectFn: this.selectFn
        };
      }
      /**
       * @param {?} value
       * @return {?}
       */


      _createClass(DataTableHeaderCellComponent, [{
        key: "allRowsSelected",
        get:
        /**
         * @return {?}
         */
        function get() {
          return this._allRowsSelected;
        }
        /**
         * @param {?} column
         * @return {?}
         */
        ,
        set: function set(value) {
          this._allRowsSelected = value;
          this.cellContext.allRowsSelected = value;
        }
      }, {
        key: "column",
        get:
        /**
         * @return {?}
         */
        function get() {
          return this._column;
        }
        /**
         * @param {?} val
         * @return {?}
         */
        ,
        set: function set(column) {
          this._column = column;
          this.cellContext.column = column;
          this.cd.markForCheck();
        }
      }, {
        key: "sorts",
        get:
        /**
         * @return {?}
         */
        function get() {
          return this._sorts;
        }
        /**
         * @return {?}
         */
        ,
        set: function set(val) {
          this._sorts = val;
          this.sortDir = this.calcSortDir(val);
          this.cellContext.sortDir = this.sortDir;
          this.sortClass = this.calcSortClass(this.sortDir);
          this.cd.markForCheck();
        }
      }, {
        key: "columnCssClasses",
        get: function get() {
          /** @type {?} */
          var cls = 'datatable-header-cell';
          if (this.column.sortable) cls += ' sortable';
          if (this.column.resizeable) cls += ' resizeable';

          if (this.column.headerClass) {
            if (typeof this.column.headerClass === 'string') {
              cls += ' ' + this.column.headerClass;
            } else if (typeof this.column.headerClass === 'function') {
              /** @type {?} */
              var res = this.column.headerClass({
                column: this.column
              });

              if (typeof res === 'string') {
                cls += res;
              } else if (typeof res === 'object') {
                /** @type {?} */
                var keys = Object.keys(res);

                for (var _i4 = 0, _keys = keys; _i4 < _keys.length; _i4++) {
                  var k = _keys[_i4];
                  if (res[k] === true) cls += " ".concat(k);
                }
              }
            }
          }
          /** @type {?} */


          var sortDir = this.sortDir;

          if (sortDir) {
            cls += " sort-active sort-".concat(sortDir);
          }

          return cls;
        }
        /**
         * @return {?}
         */

      }, {
        key: "name",
        get: function get() {
          // guaranteed to have a value by setColumnDefaults() in column-helper.ts
          return this.column.headerTemplate === undefined ? this.column.name : undefined;
        }
        /**
         * @return {?}
         */

      }, {
        key: "minWidth",
        get: function get() {
          return this.column.minWidth;
        }
        /**
         * @return {?}
         */

      }, {
        key: "maxWidth",
        get: function get() {
          return this.column.maxWidth;
        }
        /**
         * @return {?}
         */

      }, {
        key: "width",
        get: function get() {
          return this.column.width;
        }
        /**
         * @return {?}
         */

      }, {
        key: "isCheckboxable",
        get: function get() {
          return this.column.checkboxable && this.column.headerCheckboxable && this.selectionType === SelectionType.checkbox;
        }
        /**
         * @param {?} $event
         * @return {?}
         */

      }, {
        key: "onContextmenu",
        value: function onContextmenu($event) {
          this.columnContextmenu.emit({
            event: $event,
            column: this.column
          });
        }
        /**
         * @param {?} sorts
         * @return {?}
         */

      }, {
        key: "calcSortDir",
        value: function calcSortDir(sorts) {
          var _this20 = this;

          if (sorts && this.column) {
            /** @type {?} */
            var sort = sorts.find(
            /**
            * @param {?} s
            * @return {?}
            */
            function (s) {
              return s.prop === _this20.column.prop;
            });
            if (sort) return sort.dir;
          }
        }
        /**
         * @return {?}
         */

      }, {
        key: "onSort",
        value: function onSort() {
          if (!this.column.sortable) return;
          /** @type {?} */

          var newValue = nextSortDir(this.sortType, this.sortDir);
          this.sort.emit({
            column: this.column,
            prevValue: this.sortDir,
            newValue: newValue
          });
        }
        /**
         * @param {?} sortDir
         * @return {?}
         */

      }, {
        key: "calcSortClass",
        value: function calcSortClass(sortDir) {
          if (sortDir === SortDirection.asc) {
            return "sort-btn sort-asc ".concat(this.sortAscendingIcon);
          } else if (sortDir === SortDirection.desc) {
            return "sort-btn sort-desc ".concat(this.sortDescendingIcon);
          } else {
            return "sort-btn";
          }
        }
      }]);

      return DataTableHeaderCellComponent;
    }();

    DataTableHeaderCellComponent.ɵfac = function DataTableHeaderCellComponent_Factory(t) {
      return new (t || DataTableHeaderCellComponent)(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__["ChangeDetectorRef"]));
    };

    DataTableHeaderCellComponent.ɵcmp = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineComponent"]({
      type: DataTableHeaderCellComponent,
      selectors: [["datatable-header-cell"]],
      hostAttrs: [1, "datatable-header-cell"],
      hostVars: 11,
      hostBindings: function DataTableHeaderCellComponent_HostBindings(rf, ctx) {
        if (rf & 1) {
          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵlistener"]("contextmenu", function DataTableHeaderCellComponent_contextmenu_HostBindingHandler($event) {
            return ctx.onContextmenu($event);
          });
        }

        if (rf & 2) {
          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵattribute"]("title", ctx.name);

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵclassMap"](ctx.columnCssClasses);

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵstyleProp"]("min-width", ctx.minWidth, "px")("max-width", ctx.maxWidth, "px")("width", ctx.width, "px")("height", ctx.headerHeight, "px");
        }
      },
      inputs: {
        allRowsSelected: "allRowsSelected",
        column: "column",
        sorts: "sorts",
        sortType: "sortType",
        sortAscendingIcon: "sortAscendingIcon",
        sortDescendingIcon: "sortDescendingIcon",
        isTarget: "isTarget",
        targetMarkerTemplate: "targetMarkerTemplate",
        targetMarkerContext: "targetMarkerContext",
        selectionType: "selectionType",
        headerHeight: "headerHeight"
      },
      outputs: {
        sort: "sort",
        select: "select",
        columnContextmenu: "columnContextmenu"
      },
      decls: 6,
      vars: 6,
      consts: [[1, "datatable-header-cell-template-wrap"], [4, "ngIf"], ["class", "datatable-checkbox", 4, "ngIf"], ["class", "datatable-header-cell-wrapper", 4, "ngIf"], [3, "click"], [3, "ngTemplateOutlet", "ngTemplateOutletContext"], [1, "datatable-checkbox"], ["type", "checkbox", 3, "checked", "change"], [1, "datatable-header-cell-wrapper"], [1, "datatable-header-cell-label", "draggable", 3, "innerHTML", "click"]],
      template: function DataTableHeaderCellComponent_Template(rf, ctx) {
        if (rf & 1) {
          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](0, "div", 0);

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](1, DataTableHeaderCellComponent_1_Template, 1, 2, undefined, 1);

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](2, DataTableHeaderCellComponent_label_2_Template, 2, 1, "label", 2);

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](3, DataTableHeaderCellComponent_span_3_Template, 2, 1, "span", 3);

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](4, DataTableHeaderCellComponent_4_Template, 1, 2, undefined, 1);

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](5, "span", 4);

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵlistener"]("click", function DataTableHeaderCellComponent_Template_span_click_5_listener() {
            return ctx.onSort();
          });

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
        }

        if (rf & 2) {
          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngIf", ctx.isTarget);

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngIf", ctx.isCheckboxable);

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngIf", !ctx.column.headerTemplate);

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngIf", ctx.column.headerTemplate);

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵclassMap"](ctx.sortClass);
        }
      },
      directives: [_angular_common__WEBPACK_IMPORTED_MODULE_1__["NgIf"], _angular_common__WEBPACK_IMPORTED_MODULE_1__["NgTemplateOutlet"]],
      encapsulation: 2,
      changeDetection: 0
    });
    /** @nocollapse */

    DataTableHeaderCellComponent.ctorParameters = function () {
      return [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ChangeDetectorRef"]
      }];
    };

    DataTableHeaderCellComponent.propDecorators = {
      sortType: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
      }],
      sortAscendingIcon: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
      }],
      sortDescendingIcon: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
      }],
      isTarget: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
      }],
      targetMarkerTemplate: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
      }],
      targetMarkerContext: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
      }],
      allRowsSelected: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
      }],
      selectionType: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
      }],
      column: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
      }],
      headerHeight: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["HostBinding"],
        args: ['style.height.px']
      }, {
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
      }],
      sorts: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
      }],
      sort: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"]
      }],
      select: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"]
      }],
      columnContextmenu: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"]
      }],
      columnCssClasses: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["HostBinding"],
        args: ['class']
      }],
      name: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["HostBinding"],
        args: ['attr.title']
      }],
      minWidth: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["HostBinding"],
        args: ['style.minWidth.px']
      }],
      maxWidth: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["HostBinding"],
        args: ['style.maxWidth.px']
      }],
      width: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["HostBinding"],
        args: ['style.width.px']
      }],
      onContextmenu: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["HostListener"],
        args: ['contextmenu', ['$event']]
      }]
    };
    /*@__PURE__*/

    (function () {
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](DataTableHeaderCellComponent, [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"],
        args: [{
          selector: 'datatable-header-cell',
          template: "\n    <div class=\"datatable-header-cell-template-wrap\">\n      <ng-template\n        *ngIf=\"isTarget\"\n        [ngTemplateOutlet]=\"targetMarkerTemplate\"\n        [ngTemplateOutletContext]=\"targetMarkerContext\"\n      >\n      </ng-template>\n      <label *ngIf=\"isCheckboxable\" class=\"datatable-checkbox\">\n        <input type=\"checkbox\" [checked]=\"allRowsSelected\" (change)=\"select.emit(!allRowsSelected)\" />\n      </label>\n      <span *ngIf=\"!column.headerTemplate\" class=\"datatable-header-cell-wrapper\">\n        <span class=\"datatable-header-cell-label draggable\" (click)=\"onSort()\" [innerHTML]=\"name\"> </span>\n      </span>\n      <ng-template\n        *ngIf=\"column.headerTemplate\"\n        [ngTemplateOutlet]=\"column.headerTemplate\"\n        [ngTemplateOutletContext]=\"cellContext\"\n      >\n      </ng-template>\n      <span (click)=\"onSort()\" [class]=\"sortClass\"> </span>\n    </div>\n  ",
          host: {
            "class": 'datatable-header-cell'
          },
          changeDetection: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ChangeDetectionStrategy"].OnPush
        }]
      }], function () {
        return [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ChangeDetectorRef"]
        }];
      }, {
        sort: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"]
        }],
        select: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"]
        }],
        columnContextmenu: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"]
        }],
        allRowsSelected: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
        }],
        column: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
        }],
        sorts: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
        }],
        columnCssClasses: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["HostBinding"],
          args: ['class']
        }],
        name: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["HostBinding"],
          args: ['attr.title']
        }],
        minWidth: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["HostBinding"],
          args: ['style.minWidth.px']
        }],
        maxWidth: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["HostBinding"],
          args: ['style.maxWidth.px']
        }],
        width: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["HostBinding"],
          args: ['style.width.px']
        }],
        onContextmenu: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["HostListener"],
          args: ['contextmenu', ['$event']]
        }],
        sortType: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
        }],
        sortAscendingIcon: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
        }],
        sortDescendingIcon: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
        }],
        isTarget: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
        }],
        targetMarkerTemplate: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
        }],
        targetMarkerContext: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
        }],
        selectionType: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
        }],
        headerHeight: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["HostBinding"],
          args: ['style.height.px']
        }, {
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
        }]
      });
    })();

    if (false) {}
    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */


    var DataTableFooterComponent = /*#__PURE__*/function () {
      function DataTableFooterComponent() {
        _classCallCheck(this, DataTableFooterComponent);

        this.selectedCount = 0;
        this.page = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
      }
      /**
       * @return {?}
       */


      _createClass(DataTableFooterComponent, [{
        key: "isVisible",
        get: function get() {
          return this.rowCount / this.pageSize > 1;
        }
        /**
         * @return {?}
         */

      }, {
        key: "curPage",
        get: function get() {
          return this.offset + 1;
        }
      }]);

      return DataTableFooterComponent;
    }();

    DataTableFooterComponent.ɵfac = function DataTableFooterComponent_Factory(t) {
      return new (t || DataTableFooterComponent)();
    };

    DataTableFooterComponent.ɵcmp = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineComponent"]({
      type: DataTableFooterComponent,
      selectors: [["datatable-footer"]],
      hostAttrs: [1, "datatable-footer"],
      inputs: {
        selectedCount: "selectedCount",
        footerHeight: "footerHeight",
        rowCount: "rowCount",
        pageSize: "pageSize",
        offset: "offset",
        pagerLeftArrowIcon: "pagerLeftArrowIcon",
        pagerRightArrowIcon: "pagerRightArrowIcon",
        pagerPreviousIcon: "pagerPreviousIcon",
        pagerNextIcon: "pagerNextIcon",
        totalMessage: "totalMessage",
        footerTemplate: "footerTemplate",
        selectedMessage: "selectedMessage"
      },
      outputs: {
        page: "page"
      },
      decls: 4,
      vars: 8,
      consts: [[1, "datatable-footer-inner", 3, "ngClass"], [4, "ngIf"], ["class", "page-count", 4, "ngIf"], [3, "pagerLeftArrowIcon", "pagerRightArrowIcon", "pagerPreviousIcon", "pagerNextIcon", "page", "size", "count", "hidden", "change", 4, "ngIf"], [3, "ngTemplateOutlet", "ngTemplateOutletContext"], [1, "page-count"], [3, "pagerLeftArrowIcon", "pagerRightArrowIcon", "pagerPreviousIcon", "pagerNextIcon", "page", "size", "count", "hidden", "change"]],
      template: function DataTableFooterComponent_Template(rf, ctx) {
        if (rf & 1) {
          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](0, "div", 0);

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](1, DataTableFooterComponent_1_Template, 1, 8, undefined, 1);

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](2, DataTableFooterComponent_div_2_Template, 3, 3, "div", 2);

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](3, DataTableFooterComponent_datatable_pager_3_Template, 1, 8, "datatable-pager", 3);

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
        }

        if (rf & 2) {
          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵstyleProp"]("height", ctx.footerHeight, "px");

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngClass", _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵpureFunction1"](6, _c2, ctx.selectedMessage));

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngIf", ctx.footerTemplate);

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngIf", !ctx.footerTemplate);

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngIf", !ctx.footerTemplate);
        }
      },
      directives: function directives() {
        return [_angular_common__WEBPACK_IMPORTED_MODULE_1__["NgClass"], _angular_common__WEBPACK_IMPORTED_MODULE_1__["NgIf"], _angular_common__WEBPACK_IMPORTED_MODULE_1__["NgTemplateOutlet"], DataTablePagerComponent];
      },
      encapsulation: 2,
      changeDetection: 0
    });
    DataTableFooterComponent.propDecorators = {
      footerHeight: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
      }],
      rowCount: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
      }],
      pageSize: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
      }],
      offset: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
      }],
      pagerLeftArrowIcon: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
      }],
      pagerRightArrowIcon: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
      }],
      pagerPreviousIcon: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
      }],
      pagerNextIcon: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
      }],
      totalMessage: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
      }],
      footerTemplate: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
      }],
      selectedCount: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
      }],
      selectedMessage: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
      }],
      page: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"]
      }]
    };
    /*@__PURE__*/

    (function () {
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](DataTableFooterComponent, [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"],
        args: [{
          selector: 'datatable-footer',
          template: "\n    <div\n      class=\"datatable-footer-inner\"\n      [ngClass]=\"{ 'selected-count': selectedMessage }\"\n      [style.height.px]=\"footerHeight\"\n    >\n      <ng-template\n        *ngIf=\"footerTemplate\"\n        [ngTemplateOutlet]=\"footerTemplate.template\"\n        [ngTemplateOutletContext]=\"{\n          rowCount: rowCount,\n          pageSize: pageSize,\n          selectedCount: selectedCount,\n          curPage: curPage,\n          offset: offset\n        }\"\n      >\n      </ng-template>\n      <div class=\"page-count\" *ngIf=\"!footerTemplate\">\n        <span *ngIf=\"selectedMessage\"> {{ selectedCount?.toLocaleString() }} {{ selectedMessage }} / </span>\n        {{ rowCount?.toLocaleString() }} {{ totalMessage }}\n      </div>\n      <datatable-pager\n        *ngIf=\"!footerTemplate\"\n        [pagerLeftArrowIcon]=\"pagerLeftArrowIcon\"\n        [pagerRightArrowIcon]=\"pagerRightArrowIcon\"\n        [pagerPreviousIcon]=\"pagerPreviousIcon\"\n        [pagerNextIcon]=\"pagerNextIcon\"\n        [page]=\"curPage\"\n        [size]=\"pageSize\"\n        [count]=\"rowCount\"\n        [hidden]=\"!isVisible\"\n        (change)=\"page.emit($event)\"\n      >\n      </datatable-pager>\n    </div>\n  ",
          host: {
            "class": 'datatable-footer'
          },
          changeDetection: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ChangeDetectionStrategy"].OnPush
        }]
      }], function () {
        return [];
      }, {
        selectedCount: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
        }],
        page: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"]
        }],
        footerHeight: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
        }],
        rowCount: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
        }],
        pageSize: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
        }],
        offset: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
        }],
        pagerLeftArrowIcon: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
        }],
        pagerRightArrowIcon: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
        }],
        pagerPreviousIcon: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
        }],
        pagerNextIcon: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
        }],
        totalMessage: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
        }],
        footerTemplate: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
        }],
        selectedMessage: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
        }]
      });
    })();

    if (false) {}
    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */


    var DataTablePagerComponent = /*#__PURE__*/function () {
      function DataTablePagerComponent() {
        _classCallCheck(this, DataTablePagerComponent);

        this.change = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
        this._count = 0;
        this._page = 1;
        this._size = 0;
      }
      /**
       * @param {?} val
       * @return {?}
       */


      _createClass(DataTablePagerComponent, [{
        key: "size",
        get:
        /**
         * @return {?}
         */
        function get() {
          return this._size;
        }
        /**
         * @param {?} val
         * @return {?}
         */
        ,
        set: function set(val) {
          this._size = val;
          this.pages = this.calcPages();
        }
      }, {
        key: "count",
        get:
        /**
         * @return {?}
         */
        function get() {
          return this._count;
        }
        /**
         * @param {?} val
         * @return {?}
         */
        ,
        set: function set(val) {
          this._count = val;
          this.pages = this.calcPages();
        }
      }, {
        key: "page",
        get:
        /**
         * @return {?}
         */
        function get() {
          return this._page;
        }
        /**
         * @return {?}
         */
        ,
        set: function set(val) {
          this._page = val;
          this.pages = this.calcPages();
        }
      }, {
        key: "totalPages",
        get: function get() {
          /** @type {?} */
          var count = this.size < 1 ? 1 : Math.ceil(this.count / this.size);
          return Math.max(count || 0, 1);
        }
        /**
         * @return {?}
         */

      }, {
        key: "canPrevious",
        value: function canPrevious() {
          return this.page > 1;
        }
        /**
         * @return {?}
         */

      }, {
        key: "canNext",
        value: function canNext() {
          return this.page < this.totalPages;
        }
        /**
         * @return {?}
         */

      }, {
        key: "prevPage",
        value: function prevPage() {
          this.selectPage(this.page - 1);
        }
        /**
         * @return {?}
         */

      }, {
        key: "nextPage",
        value: function nextPage() {
          this.selectPage(this.page + 1);
        }
        /**
         * @param {?} page
         * @return {?}
         */

      }, {
        key: "selectPage",
        value: function selectPage(page) {
          if (page > 0 && page <= this.totalPages && page !== this.page) {
            this.page = page;
            this.change.emit({
              page: page
            });
          }
        }
        /**
         * @param {?=} page
         * @return {?}
         */

      }, {
        key: "calcPages",
        value: function calcPages(page) {
          /** @type {?} */
          var pages = [];
          /** @type {?} */

          var startPage = 1;
          /** @type {?} */

          var endPage = this.totalPages;
          /** @type {?} */

          var maxSize = 5;
          /** @type {?} */

          var isMaxSized = maxSize < this.totalPages;
          page = page || this.page;

          if (isMaxSized) {
            startPage = page - Math.floor(maxSize / 2);
            endPage = page + Math.floor(maxSize / 2);

            if (startPage < 1) {
              startPage = 1;
              endPage = Math.min(startPage + maxSize - 1, this.totalPages);
            } else if (endPage > this.totalPages) {
              startPage = Math.max(this.totalPages - maxSize + 1, 1);
              endPage = this.totalPages;
            }
          }

          for (var num = startPage; num <= endPage; num++) {
            pages.push({
              number: num,
              text: num
            });
          }

          return pages;
        }
      }]);

      return DataTablePagerComponent;
    }();

    DataTablePagerComponent.ɵfac = function DataTablePagerComponent_Factory(t) {
      return new (t || DataTablePagerComponent)();
    };

    DataTablePagerComponent.ɵcmp = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineComponent"]({
      type: DataTablePagerComponent,
      selectors: [["datatable-pager"]],
      hostAttrs: [1, "datatable-pager"],
      inputs: {
        size: "size",
        count: "count",
        page: "page",
        pagerLeftArrowIcon: "pagerLeftArrowIcon",
        pagerRightArrowIcon: "pagerRightArrowIcon",
        pagerPreviousIcon: "pagerPreviousIcon",
        pagerNextIcon: "pagerNextIcon"
      },
      outputs: {
        change: "change"
      },
      decls: 14,
      vars: 21,
      consts: [[1, "pager"], ["role", "button", "aria-label", "go to first page", "href", "javascript:void(0)", 3, "click"], ["role", "button", "aria-label", "go to previous page", "href", "javascript:void(0)", 3, "click"], ["role", "button", "class", "pages", 3, "active", 4, "ngFor", "ngForOf"], ["role", "button", "aria-label", "go to next page", "href", "javascript:void(0)", 3, "click"], ["role", "button", "aria-label", "go to last page", "href", "javascript:void(0)", 3, "click"], ["role", "button", 1, "pages"], ["href", "javascript:void(0)", 3, "click"]],
      template: function DataTablePagerComponent_Template(rf, ctx) {
        if (rf & 1) {
          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](0, "ul", 0);

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](1, "li");

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](2, "a", 1);

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵlistener"]("click", function DataTablePagerComponent_Template_a_click_2_listener() {
            return ctx.selectPage(1);
          });

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelement"](3, "i");

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](4, "li");

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](5, "a", 2);

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵlistener"]("click", function DataTablePagerComponent_Template_a_click_5_listener() {
            return ctx.prevPage();
          });

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelement"](6, "i");

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](7, DataTablePagerComponent_li_7_Template, 3, 4, "li", 3);

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](8, "li");

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](9, "a", 4);

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵlistener"]("click", function DataTablePagerComponent_Template_a_click_9_listener() {
            return ctx.nextPage();
          });

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelement"](10, "i");

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](11, "li");

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](12, "a", 5);

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵlistener"]("click", function DataTablePagerComponent_Template_a_click_12_listener() {
            return ctx.selectPage(ctx.totalPages);
          });

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelement"](13, "i");

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
        }

        if (rf & 2) {
          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵclassProp"]("disabled", !ctx.canPrevious());

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](2);

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵclassMap"](ctx.pagerPreviousIcon);

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵclassProp"]("disabled", !ctx.canPrevious());

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](2);

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵclassMap"](ctx.pagerLeftArrowIcon);

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngForOf", ctx.pages);

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵclassProp"]("disabled", !ctx.canNext());

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](2);

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵclassMap"](ctx.pagerRightArrowIcon);

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵclassProp"]("disabled", !ctx.canNext());

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](2);

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵclassMap"](ctx.pagerNextIcon);
        }
      },
      directives: [_angular_common__WEBPACK_IMPORTED_MODULE_1__["NgForOf"]],
      encapsulation: 2,
      changeDetection: 0
    });
    DataTablePagerComponent.propDecorators = {
      pagerLeftArrowIcon: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
      }],
      pagerRightArrowIcon: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
      }],
      pagerPreviousIcon: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
      }],
      pagerNextIcon: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
      }],
      size: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
      }],
      count: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
      }],
      page: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
      }],
      change: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"]
      }]
    };
    /*@__PURE__*/

    (function () {
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](DataTablePagerComponent, [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"],
        args: [{
          selector: 'datatable-pager',
          template: "\n    <ul class=\"pager\">\n      <li [class.disabled]=\"!canPrevious()\">\n        <a role=\"button\" aria-label=\"go to first page\" href=\"javascript:void(0)\" (click)=\"selectPage(1)\">\n          <i class=\"{{ pagerPreviousIcon }}\"></i>\n        </a>\n      </li>\n      <li [class.disabled]=\"!canPrevious()\">\n        <a role=\"button\" aria-label=\"go to previous page\" href=\"javascript:void(0)\" (click)=\"prevPage()\">\n          <i class=\"{{ pagerLeftArrowIcon }}\"></i>\n        </a>\n      </li>\n      <li\n        role=\"button\"\n        [attr.aria-label]=\"'page ' + pg.number\"\n        class=\"pages\"\n        *ngFor=\"let pg of pages\"\n        [class.active]=\"pg.number === page\"\n      >\n        <a href=\"javascript:void(0)\" (click)=\"selectPage(pg.number)\">\n          {{ pg.text }}\n        </a>\n      </li>\n      <li [class.disabled]=\"!canNext()\">\n        <a role=\"button\" aria-label=\"go to next page\" href=\"javascript:void(0)\" (click)=\"nextPage()\">\n          <i class=\"{{ pagerRightArrowIcon }}\"></i>\n        </a>\n      </li>\n      <li [class.disabled]=\"!canNext()\">\n        <a role=\"button\" aria-label=\"go to last page\" href=\"javascript:void(0)\" (click)=\"selectPage(totalPages)\">\n          <i class=\"{{ pagerNextIcon }}\"></i>\n        </a>\n      </li>\n    </ul>\n  ",
          host: {
            "class": 'datatable-pager'
          },
          changeDetection: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ChangeDetectionStrategy"].OnPush
        }]
      }], function () {
        return [];
      }, {
        change: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"]
        }],
        size: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
        }],
        count: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
        }],
        page: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
        }],
        pagerLeftArrowIcon: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
        }],
        pagerRightArrowIcon: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
        }],
        pagerPreviousIcon: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
        }],
        pagerNextIcon: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
        }]
      });
    })();

    if (false) {}
    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */


    var ProgressBarComponent = function ProgressBarComponent() {
      _classCallCheck(this, ProgressBarComponent);
    };

    ProgressBarComponent.ɵfac = function ProgressBarComponent_Factory(t) {
      return new (t || ProgressBarComponent)();
    };

    ProgressBarComponent.ɵcmp = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineComponent"]({
      type: ProgressBarComponent,
      selectors: [["datatable-progress"]],
      decls: 3,
      vars: 0,
      consts: [["role", "progressbar", 1, "progress-linear"], [1, "container"], [1, "bar"]],
      template: function ProgressBarComponent_Template(rf, ctx) {
        if (rf & 1) {
          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](0, "div", 0);

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](1, "div", 1);

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelement"](2, "div", 2);

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
        }
      },
      encapsulation: 2,
      changeDetection: 0
    });
    /*@__PURE__*/

    (function () {
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](ProgressBarComponent, [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"],
        args: [{
          selector: 'datatable-progress',
          template: "\n    <div class=\"progress-linear\" role=\"progressbar\">\n      <div class=\"container\">\n        <div class=\"bar\"></div>\n      </div>\n    </div>\n  ",
          changeDetection: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ChangeDetectionStrategy"].OnPush
        }]
      }], null, null);
    })();
    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    /** @enum {number} */


    var Keys = {
      up: 38,
      down: 40,
      "return": 13,
      escape: 27,
      left: 37,
      right: 39
    };
    Keys[Keys.up] = 'up';
    Keys[Keys.down] = 'down';
    Keys[Keys["return"]] = 'return';
    Keys[Keys.escape] = 'escape';
    Keys[Keys.left] = 'left';
    Keys[Keys.right] = 'right';
    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    var DataTableBodyRowComponent = /*#__PURE__*/function () {
      /**
       * @param {?} differs
       * @param {?} scrollbarHelper
       * @param {?} cd
       * @param {?} element
       */
      function DataTableBodyRowComponent(differs, scrollbarHelper, cd, element) {
        _classCallCheck(this, DataTableBodyRowComponent);

        this.differs = differs;
        this.scrollbarHelper = scrollbarHelper;
        this.cd = cd;
        this.treeStatus = 'collapsed';
        this.activate = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
        this.treeAction = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
        this._groupStyles = {
          left: {},
          center: {},
          right: {}
        };
        this._element = element.nativeElement;
        this._rowDiffer = differs.find({}).create();
      }
      /**
       * @param {?} val
       * @return {?}
       */


      _createClass(DataTableBodyRowComponent, [{
        key: "columns",
        get:
        /**
         * @return {?}
         */
        function get() {
          return this._columns;
        }
        /**
         * @param {?} val
         * @return {?}
         */
        ,
        set: function set(val) {
          this._columns = val;
          this.recalculateColumns(val);
          this.buildStylesByGroup();
        }
      }, {
        key: "innerWidth",
        get:
        /**
         * @return {?}
         */
        function get() {
          return this._innerWidth;
        }
        /**
         * @param {?} val
         * @return {?}
         */
        ,
        set: function set(val) {
          if (this._columns) {
            /** @type {?} */
            var colByPin = columnsByPin(this._columns);
            this._columnGroupWidths = columnGroupWidths(colByPin, this._columns);
          }

          this._innerWidth = val;
          this.recalculateColumns();
          this.buildStylesByGroup();
        }
      }, {
        key: "offsetX",
        get:
        /**
         * @return {?}
         */
        function get() {
          return this._offsetX;
        }
        /**
         * @return {?}
         */
        ,
        set: function set(val) {
          this._offsetX = val;
          this.buildStylesByGroup();
        }
      }, {
        key: "cssClass",
        get: function get() {
          /** @type {?} */
          var cls = 'datatable-body-row';

          if (this.isSelected) {
            cls += ' active';
          }

          if (this.rowIndex % 2 !== 0) {
            cls += ' datatable-row-odd';
          }

          if (this.rowIndex % 2 === 0) {
            cls += ' datatable-row-even';
          }

          if (this.rowClass) {
            /** @type {?} */
            var res = this.rowClass(this.row);

            if (typeof res === 'string') {
              cls += " ".concat(res);
            } else if (typeof res === 'object') {
              /** @type {?} */
              var keys = Object.keys(res);

              for (var _i5 = 0, _keys2 = keys; _i5 < _keys2.length; _i5++) {
                var k = _keys2[_i5];

                if (res[k] === true) {
                  cls += " ".concat(k);
                }
              }
            }
          }

          return cls;
        }
        /**
         * @return {?}
         */

      }, {
        key: "columnsTotalWidths",
        get: function get() {
          return this._columnGroupWidths.total;
        }
        /**
         * @return {?}
         */

      }, {
        key: "ngDoCheck",
        value: function ngDoCheck() {
          if (this._rowDiffer.diff(this.row)) {
            this.cd.markForCheck();
          }
        }
        /**
         * @param {?} index
         * @param {?} colGroup
         * @return {?}
         */

      }, {
        key: "trackByGroups",
        value: function trackByGroups(index, colGroup) {
          return colGroup.type;
        }
        /**
         * @param {?} index
         * @param {?} column
         * @return {?}
         */

      }, {
        key: "columnTrackingFn",
        value: function columnTrackingFn(index, column) {
          return column.$$id;
        }
        /**
         * @return {?}
         */

      }, {
        key: "buildStylesByGroup",
        value: function buildStylesByGroup() {
          this._groupStyles.left = this.calcStylesByGroup('left');
          this._groupStyles.center = this.calcStylesByGroup('center');
          this._groupStyles.right = this.calcStylesByGroup('right');
          this.cd.markForCheck();
        }
        /**
         * @param {?} group
         * @return {?}
         */

      }, {
        key: "calcStylesByGroup",
        value: function calcStylesByGroup(group) {
          /** @type {?} */
          var widths = this._columnGroupWidths;
          /** @type {?} */

          var offsetX = this.offsetX;
          /** @type {?} */

          var styles = {
            width: "".concat(widths[group], "px")
          };

          if (group === 'left') {
            translateXY(styles, offsetX, 0);
          } else if (group === 'right') {
            /** @type {?} */
            var bodyWidth = parseInt(this.innerWidth + '', 0);
            /** @type {?} */

            var totalDiff = widths.total - bodyWidth;
            /** @type {?} */

            var offsetDiff = totalDiff - offsetX;
            /** @type {?} */

            var offset = (offsetDiff + this.scrollbarHelper.width) * -1;
            translateXY(styles, offset, 0);
          }

          return styles;
        }
        /**
         * @param {?} event
         * @param {?} index
         * @return {?}
         */

      }, {
        key: "onActivate",
        value: function onActivate(event, index) {
          event.cellIndex = index;
          event.rowElement = this._element;
          this.activate.emit(event);
        }
        /**
         * @param {?} event
         * @return {?}
         */

      }, {
        key: "onKeyDown",
        value: function onKeyDown(event) {
          /** @type {?} */
          var keyCode = event.keyCode;
          /** @type {?} */

          var isTargetRow = event.target === this._element;
          /** @type {?} */

          var isAction = keyCode === Keys["return"] || keyCode === Keys.down || keyCode === Keys.up || keyCode === Keys.left || keyCode === Keys.right;

          if (isAction && isTargetRow) {
            event.preventDefault();
            event.stopPropagation();
            this.activate.emit({
              type: 'keydown',
              event: event,
              row: this.row,
              rowElement: this._element
            });
          }
        }
        /**
         * @param {?} event
         * @return {?}
         */

      }, {
        key: "onMouseenter",
        value: function onMouseenter(event) {
          this.activate.emit({
            type: 'mouseenter',
            event: event,
            row: this.row,
            rowElement: this._element
          });
        }
        /**
         * @param {?=} val
         * @return {?}
         */

      }, {
        key: "recalculateColumns",
        value: function recalculateColumns() {
          var val = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.columns;
          this._columns = val;
          /** @type {?} */

          var colsByPin = columnsByPin(this._columns);
          this._columnsByPin = columnsByPinArr(this._columns);
          this._columnGroupWidths = columnGroupWidths(colsByPin, this._columns);
        }
        /**
         * @return {?}
         */

      }, {
        key: "onTreeAction",
        value: function onTreeAction() {
          this.treeAction.emit();
        }
      }]);

      return DataTableBodyRowComponent;
    }();

    DataTableBodyRowComponent.ɵfac = function DataTableBodyRowComponent_Factory(t) {
      return new (t || DataTableBodyRowComponent)(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__["KeyValueDiffers"]), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](ScrollbarHelper, 4), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__["ChangeDetectorRef"]), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__["ElementRef"]));
    };

    DataTableBodyRowComponent.ɵcmp = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineComponent"]({
      type: DataTableBodyRowComponent,
      selectors: [["datatable-body-row"]],
      hostVars: 6,
      hostBindings: function DataTableBodyRowComponent_HostBindings(rf, ctx) {
        if (rf & 1) {
          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵlistener"]("keydown", function DataTableBodyRowComponent_keydown_HostBindingHandler($event) {
            return ctx.onKeyDown($event);
          })("mouseenter", function DataTableBodyRowComponent_mouseenter_HostBindingHandler($event) {
            return ctx.onMouseenter($event);
          });
        }

        if (rf & 2) {
          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵclassMap"](ctx.cssClass);

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵstyleProp"]("width", ctx.columnsTotalWidths, "px")("height", ctx.rowHeight, "px");
        }
      },
      inputs: {
        treeStatus: "treeStatus",
        columns: "columns",
        innerWidth: "innerWidth",
        offsetX: "offsetX",
        expanded: "expanded",
        rowClass: "rowClass",
        row: "row",
        group: "group",
        isSelected: "isSelected",
        rowIndex: "rowIndex",
        displayCheck: "displayCheck",
        rowHeight: "rowHeight"
      },
      outputs: {
        activate: "activate",
        treeAction: "treeAction"
      },
      decls: 1,
      vars: 2,
      consts: [[3, "class", "ngStyle", 4, "ngFor", "ngForOf", "ngForTrackBy"], [3, "ngStyle"], ["tabindex", "-1", 3, "row", "group", "expanded", "isSelected", "rowIndex", "column", "rowHeight", "displayCheck", "treeStatus", "activate", "treeAction", 4, "ngFor", "ngForOf", "ngForTrackBy"], ["tabindex", "-1", 3, "row", "group", "expanded", "isSelected", "rowIndex", "column", "rowHeight", "displayCheck", "treeStatus", "activate", "treeAction"]],
      template: function DataTableBodyRowComponent_Template(rf, ctx) {
        if (rf & 1) {
          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](0, DataTableBodyRowComponent_div_0_Template, 2, 6, "div", 0);
        }

        if (rf & 2) {
          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngForOf", ctx._columnsByPin)("ngForTrackBy", ctx.trackByGroups);
        }
      },
      directives: function directives() {
        return [_angular_common__WEBPACK_IMPORTED_MODULE_1__["NgForOf"], _angular_common__WEBPACK_IMPORTED_MODULE_1__["NgStyle"], DataTableBodyCellComponent];
      },
      encapsulation: 2,
      changeDetection: 0
    });
    /** @nocollapse */

    DataTableBodyRowComponent.ctorParameters = function () {
      return [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["KeyValueDiffers"]
      }, {
        type: ScrollbarHelper,
        decorators: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["SkipSelf"]
        }]
      }, {
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ChangeDetectorRef"]
      }, {
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ElementRef"]
      }];
    };

    DataTableBodyRowComponent.propDecorators = {
      columns: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
      }],
      innerWidth: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
      }],
      expanded: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
      }],
      rowClass: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
      }],
      row: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
      }],
      group: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
      }],
      isSelected: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
      }],
      rowIndex: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
      }],
      displayCheck: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
      }],
      treeStatus: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
      }],
      offsetX: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
      }],
      cssClass: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["HostBinding"],
        args: ['class']
      }],
      rowHeight: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["HostBinding"],
        args: ['style.height.px']
      }, {
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
      }],
      columnsTotalWidths: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["HostBinding"],
        args: ['style.width.px']
      }],
      activate: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"]
      }],
      treeAction: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"]
      }],
      onKeyDown: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["HostListener"],
        args: ['keydown', ['$event']]
      }],
      onMouseenter: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["HostListener"],
        args: ['mouseenter', ['$event']]
      }]
    };
    /*@__PURE__*/

    (function () {
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](DataTableBodyRowComponent, [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"],
        args: [{
          selector: 'datatable-body-row',
          changeDetection: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ChangeDetectionStrategy"].OnPush,
          template: "\n    <div\n      *ngFor=\"let colGroup of _columnsByPin; let i = index; trackBy: trackByGroups\"\n      class=\"datatable-row-{{ colGroup.type }} datatable-row-group\"\n      [ngStyle]=\"_groupStyles[colGroup.type]\"\n    >\n      <datatable-body-cell\n        *ngFor=\"let column of colGroup.columns; let ii = index; trackBy: columnTrackingFn\"\n        tabindex=\"-1\"\n        [row]=\"row\"\n        [group]=\"group\"\n        [expanded]=\"expanded\"\n        [isSelected]=\"isSelected\"\n        [rowIndex]=\"rowIndex\"\n        [column]=\"column\"\n        [rowHeight]=\"rowHeight\"\n        [displayCheck]=\"displayCheck\"\n        [treeStatus]=\"treeStatus\"\n        (activate)=\"onActivate($event, ii)\"\n        (treeAction)=\"onTreeAction()\"\n      >\n      </datatable-body-cell>\n    </div>\n  "
        }]
      }], function () {
        return [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["KeyValueDiffers"]
        }, {
          type: ScrollbarHelper,
          decorators: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["SkipSelf"]
          }]
        }, {
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ChangeDetectorRef"]
        }, {
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ElementRef"]
        }];
      }, {
        treeStatus: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
        }],
        activate: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"]
        }],
        treeAction: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"]
        }],
        columns: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
        }],
        innerWidth: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
        }],
        offsetX: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
        }],
        cssClass: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["HostBinding"],
          args: ['class']
        }],
        columnsTotalWidths: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["HostBinding"],
          args: ['style.width.px']
        }],
        onKeyDown: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["HostListener"],
          args: ['keydown', ['$event']]
        }],
        onMouseenter: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["HostListener"],
          args: ['mouseenter', ['$event']]
        }],
        expanded: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
        }],
        rowClass: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
        }],
        row: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
        }],
        group: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
        }],
        isSelected: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
        }],
        rowIndex: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
        }],
        displayCheck: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
        }],
        rowHeight: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["HostBinding"],
          args: ['style.height.px']
        }, {
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
        }]
      });
    })();

    if (false) {}
    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */


    var DataTableRowWrapperComponent = /*#__PURE__*/function () {
      /**
       * @param {?} cd
       * @param {?} differs
       */
      function DataTableRowWrapperComponent(cd, differs) {
        _classCallCheck(this, DataTableRowWrapperComponent);

        this.cd = cd;
        this.differs = differs;
        this.rowContextmenu = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"](false);
        this.groupContext = {
          group: this.row,
          expanded: this.expanded,
          rowIndex: this.rowIndex
        };
        this.rowContext = {
          row: this.row,
          expanded: this.expanded,
          rowIndex: this.rowIndex
        };
        this._expanded = false;
        this.rowDiffer = differs.find({}).create();
      }
      /**
       * @param {?} val
       * @return {?}
       */


      _createClass(DataTableRowWrapperComponent, [{
        key: "rowIndex",
        get:
        /**
         * @return {?}
         */
        function get() {
          return this._rowIndex;
        }
        /**
         * @param {?} val
         * @return {?}
         */
        ,
        set: function set(val) {
          this._rowIndex = val;
          this.rowContext.rowIndex = val;
          this.groupContext.rowIndex = val;
          this.cd.markForCheck();
        }
      }, {
        key: "expanded",
        get:
        /**
         * @return {?}
         */
        function get() {
          return this._expanded;
        }
        /**
         * @return {?}
         */
        ,
        set: function set(val) {
          this._expanded = val;
          this.groupContext.expanded = val;
          this.rowContext.expanded = val;
          this.cd.markForCheck();
        }
      }, {
        key: "ngDoCheck",
        value: function ngDoCheck() {
          if (this.rowDiffer.diff(this.row)) {
            this.rowContext.row = this.row;
            this.groupContext.group = this.row;
            this.cd.markForCheck();
          }
        }
        /**
         * @param {?} $event
         * @return {?}
         */

      }, {
        key: "onContextmenu",
        value: function onContextmenu($event) {
          this.rowContextmenu.emit({
            event: $event,
            row: this.row
          });
        }
        /**
         * @return {?}
         */

      }, {
        key: "getGroupHeaderStyle",
        value: function getGroupHeaderStyle() {
          /** @type {?} */
          var styles = {};
          styles['transform'] = 'translate3d(' + this.offsetX + 'px, 0px, 0px)';
          styles['backface-visibility'] = 'hidden';
          styles['width'] = this.innerWidth;
          return styles;
        }
      }]);

      return DataTableRowWrapperComponent;
    }();

    DataTableRowWrapperComponent.ɵfac = function DataTableRowWrapperComponent_Factory(t) {
      return new (t || DataTableRowWrapperComponent)(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__["ChangeDetectorRef"]), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__["KeyValueDiffers"]));
    };

    DataTableRowWrapperComponent.ɵcmp = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineComponent"]({
      type: DataTableRowWrapperComponent,
      selectors: [["datatable-row-wrapper"]],
      hostAttrs: [1, "datatable-row-wrapper"],
      hostBindings: function DataTableRowWrapperComponent_HostBindings(rf, ctx) {
        if (rf & 1) {
          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵlistener"]("contextmenu", function DataTableRowWrapperComponent_contextmenu_HostBindingHandler($event) {
            return ctx.onContextmenu($event);
          });
        }
      },
      inputs: {
        rowIndex: "rowIndex",
        expanded: "expanded",
        innerWidth: "innerWidth",
        rowDetail: "rowDetail",
        groupHeader: "groupHeader",
        offsetX: "offsetX",
        detailRowHeight: "detailRowHeight",
        row: "row",
        groupedRows: "groupedRows"
      },
      outputs: {
        rowContextmenu: "rowContextmenu"
      },
      ngContentSelectors: _c0,
      decls: 3,
      vars: 3,
      consts: [["class", "datatable-group-header", 3, "ngStyle", 4, "ngIf"], [4, "ngIf"], ["class", "datatable-row-detail", 3, "height", 4, "ngIf"], [1, "datatable-group-header", 3, "ngStyle"], [3, "ngTemplateOutlet", "ngTemplateOutletContext"], [1, "datatable-row-detail"]],
      template: function DataTableRowWrapperComponent_Template(rf, ctx) {
        if (rf & 1) {
          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵprojectionDef"]();

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](0, DataTableRowWrapperComponent_div_0_Template, 2, 2, "div", 0);

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](1, DataTableRowWrapperComponent_1_Template, 1, 0, undefined, 1);

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](2, DataTableRowWrapperComponent_div_2_Template, 2, 3, "div", 2);
        }

        if (rf & 2) {
          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngIf", ctx.groupHeader && ctx.groupHeader.template);

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngIf", ctx.groupHeader && ctx.groupHeader.template && ctx.expanded || !ctx.groupHeader || !ctx.groupHeader.template);

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngIf", ctx.rowDetail && ctx.rowDetail.template && ctx.expanded);
        }
      },
      directives: [_angular_common__WEBPACK_IMPORTED_MODULE_1__["NgIf"], _angular_common__WEBPACK_IMPORTED_MODULE_1__["NgStyle"], _angular_common__WEBPACK_IMPORTED_MODULE_1__["NgTemplateOutlet"]],
      encapsulation: 2,
      changeDetection: 0
    });
    /** @nocollapse */

    DataTableRowWrapperComponent.ctorParameters = function () {
      return [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ChangeDetectorRef"]
      }, {
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["KeyValueDiffers"]
      }];
    };

    DataTableRowWrapperComponent.propDecorators = {
      innerWidth: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
      }],
      rowDetail: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
      }],
      groupHeader: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
      }],
      offsetX: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
      }],
      detailRowHeight: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
      }],
      row: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
      }],
      groupedRows: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
      }],
      rowContextmenu: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"]
      }],
      rowIndex: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
      }],
      expanded: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
      }],
      onContextmenu: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["HostListener"],
        args: ['contextmenu', ['$event']]
      }]
    };
    /*@__PURE__*/

    (function () {
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](DataTableRowWrapperComponent, [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"],
        args: [{
          selector: 'datatable-row-wrapper',
          changeDetection: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ChangeDetectionStrategy"].OnPush,
          template: "\n    <div *ngIf=\"groupHeader && groupHeader.template\" class=\"datatable-group-header\" [ngStyle]=\"getGroupHeaderStyle()\">\n      <ng-template\n        *ngIf=\"groupHeader && groupHeader.template\"\n        [ngTemplateOutlet]=\"groupHeader.template\"\n        [ngTemplateOutletContext]=\"groupContext\"\n      >\n      </ng-template>\n    </div>\n    <ng-content *ngIf=\"(groupHeader && groupHeader.template && expanded) || (!groupHeader || !groupHeader.template)\">\n    </ng-content>\n    <div\n      *ngIf=\"rowDetail && rowDetail.template && expanded\"\n      [style.height.px]=\"detailRowHeight\"\n      class=\"datatable-row-detail\"\n    >\n      <ng-template\n        *ngIf=\"rowDetail && rowDetail.template\"\n        [ngTemplateOutlet]=\"rowDetail.template\"\n        [ngTemplateOutletContext]=\"rowContext\"\n      >\n      </ng-template>\n    </div>\n  ",
          host: {
            "class": 'datatable-row-wrapper'
          }
        }]
      }], function () {
        return [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ChangeDetectorRef"]
        }, {
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["KeyValueDiffers"]
        }];
      }, {
        rowContextmenu: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"]
        }],
        rowIndex: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
        }],
        expanded: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
        }],
        onContextmenu: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["HostListener"],
          args: ['contextmenu', ['$event']]
        }],
        innerWidth: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
        }],
        rowDetail: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
        }],
        groupHeader: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
        }],
        offsetX: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
        }],
        detailRowHeight: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
        }],
        row: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
        }],
        groupedRows: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
        }]
      });
    })();

    if (false) {}
    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */


    var DataTableBodyCellComponent = /*#__PURE__*/function () {
      /**
       * @param {?} element
       * @param {?} cd
       */
      function DataTableBodyCellComponent(element, cd) {
        _classCallCheck(this, DataTableBodyCellComponent);

        this.cd = cd;
        this.activate = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
        this.treeAction = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
        this.isFocused = false;
        this.onCheckboxChangeFn = this.onCheckboxChange.bind(this);
        this.activateFn = this.activate.emit.bind(this.activate);
        this.cellContext = {
          onCheckboxChangeFn: this.onCheckboxChangeFn,
          activateFn: this.activateFn,
          row: this.row,
          group: this.group,
          value: this.value,
          column: this.column,
          rowHeight: this.rowHeight,
          isSelected: this.isSelected,
          rowIndex: this.rowIndex,
          treeStatus: this.treeStatus,
          onTreeAction: this.onTreeAction.bind(this)
        };
        this._element = element.nativeElement;
      }
      /**
       * @param {?} group
       * @return {?}
       */


      _createClass(DataTableBodyCellComponent, [{
        key: "group",
        get:
        /**
         * @return {?}
         */
        function get() {
          return this._group;
        }
        /**
         * @param {?} val
         * @return {?}
         */
        ,
        set: function set(group) {
          this._group = group;
          this.cellContext.group = group;
          this.checkValueUpdates();
          this.cd.markForCheck();
        }
      }, {
        key: "rowHeight",
        get:
        /**
         * @return {?}
         */
        function get() {
          return this._rowHeight;
        }
        /**
         * @param {?} val
         * @return {?}
         */
        ,
        set: function set(val) {
          this._rowHeight = val;
          this.cellContext.rowHeight = val;
          this.checkValueUpdates();
          this.cd.markForCheck();
        }
      }, {
        key: "isSelected",
        get:
        /**
         * @return {?}
         */
        function get() {
          return this._isSelected;
        }
        /**
         * @param {?} val
         * @return {?}
         */
        ,
        set: function set(val) {
          this._isSelected = val;
          this.cellContext.isSelected = val;
          this.cd.markForCheck();
        }
      }, {
        key: "expanded",
        get:
        /**
         * @return {?}
         */
        function get() {
          return this._expanded;
        }
        /**
         * @param {?} val
         * @return {?}
         */
        ,
        set: function set(val) {
          this._expanded = val;
          this.cellContext.expanded = val;
          this.cd.markForCheck();
        }
      }, {
        key: "rowIndex",
        get:
        /**
         * @return {?}
         */
        function get() {
          return this._rowIndex;
        }
        /**
         * @param {?} column
         * @return {?}
         */
        ,
        set: function set(val) {
          this._rowIndex = val;
          this.cellContext.rowIndex = val;
          this.checkValueUpdates();
          this.cd.markForCheck();
        }
      }, {
        key: "column",
        get:
        /**
         * @return {?}
         */
        function get() {
          return this._column;
        }
        /**
         * @param {?} row
         * @return {?}
         */
        ,
        set: function set(column) {
          this._column = column;
          this.cellContext.column = column;
          this.checkValueUpdates();
          this.cd.markForCheck();
        }
      }, {
        key: "row",
        get:
        /**
         * @return {?}
         */
        function get() {
          return this._row;
        }
        /**
         * @param {?} val
         * @return {?}
         */
        ,
        set: function set(row) {
          this._row = row;
          this.cellContext.row = row;
          this.checkValueUpdates();
          this.cd.markForCheck();
        }
      }, {
        key: "sorts",
        get:
        /**
         * @return {?}
         */
        function get() {
          return this._sorts;
        }
        /**
         * @param {?} status
         * @return {?}
         */
        ,
        set: function set(val) {
          this._sorts = val;
          this.calcSortDir = this.calcSortDir(val);
        }
      }, {
        key: "treeStatus",
        get:
        /**
         * @return {?}
         */
        function get() {
          return this._treeStatus;
        }
        /**
         * @return {?}
         */
        ,
        set: function set(status) {
          if (status !== 'collapsed' && status !== 'expanded' && status !== 'loading' && status !== 'disabled') {
            this._treeStatus = 'collapsed';
          } else {
            this._treeStatus = status;
          }

          this.cellContext.treeStatus = this._treeStatus;
          this.checkValueUpdates();
          this.cd.markForCheck();
        }
      }, {
        key: "columnCssClasses",
        get: function get() {
          /** @type {?} */
          var cls = 'datatable-body-cell';

          if (this.column.cellClass) {
            if (typeof this.column.cellClass === 'string') {
              cls += ' ' + this.column.cellClass;
            } else if (typeof this.column.cellClass === 'function') {
              /** @type {?} */
              var res = this.column.cellClass({
                row: this.row,
                group: this.group,
                column: this.column,
                value: this.value,
                rowHeight: this.rowHeight
              });

              if (typeof res === 'string') {
                cls += res;
              } else if (typeof res === 'object') {
                /** @type {?} */
                var keys = Object.keys(res);

                for (var _i6 = 0, _keys3 = keys; _i6 < _keys3.length; _i6++) {
                  var k = _keys3[_i6];

                  if (res[k] === true) {
                    cls += " ".concat(k);
                  }
                }
              }
            }
          }

          if (!this.sortDir) {
            cls += ' sort-active';
          }

          if (this.isFocused) {
            cls += ' active';
          }

          if (this.sortDir === SortDirection.asc) {
            cls += ' sort-asc';
          }

          if (this.sortDir === SortDirection.desc) {
            cls += ' sort-desc';
          }

          return cls;
        }
        /**
         * @return {?}
         */

      }, {
        key: "width",
        get: function get() {
          return this.column.width;
        }
        /**
         * @return {?}
         */

      }, {
        key: "minWidth",
        get: function get() {
          return this.column.minWidth;
        }
        /**
         * @return {?}
         */

      }, {
        key: "maxWidth",
        get: function get() {
          return this.column.maxWidth;
        }
        /**
         * @return {?}
         */

      }, {
        key: "height",
        get: function get() {
          /** @type {?} */
          var height = this.rowHeight;

          if (isNaN(height)) {
            return height;
          }

          return height + 'px';
        }
        /**
         * @return {?}
         */

      }, {
        key: "ngDoCheck",
        value: function ngDoCheck() {
          this.checkValueUpdates();
        }
        /**
         * @return {?}
         */

      }, {
        key: "ngOnDestroy",
        value: function ngOnDestroy() {
          if (this.cellTemplate) {
            this.cellTemplate.clear();
          }
        }
        /**
         * @return {?}
         */

      }, {
        key: "checkValueUpdates",
        value: function checkValueUpdates() {
          /** @type {?} */
          var value = '';

          if (!this.row || !this.column) {
            value = '';
          } else {
            /** @type {?} */
            var val = this.column.$$valueGetter(this.row, this.column.prop);
            /** @type {?} */

            var userPipe = this.column.pipe;

            if (userPipe) {
              value = userPipe.transform(val);
            } else if (value !== undefined) {
              value = val;
            }
          }

          if (this.value !== value) {
            this.value = value;
            this.cellContext.value = value;
            this.sanitizedValue = value !== null && value !== undefined ? this.stripHtml(value) : value;
            this.cd.markForCheck();
          }
        }
        /**
         * @return {?}
         */

      }, {
        key: "onFocus",
        value: function onFocus() {
          this.isFocused = true;
        }
        /**
         * @return {?}
         */

      }, {
        key: "onBlur",
        value: function onBlur() {
          this.isFocused = false;
        }
        /**
         * @param {?} event
         * @return {?}
         */

      }, {
        key: "onClick",
        value: function onClick(event) {
          this.activate.emit({
            type: 'click',
            event: event,
            row: this.row,
            group: this.group,
            rowHeight: this.rowHeight,
            column: this.column,
            value: this.value,
            cellElement: this._element
          });
        }
        /**
         * @param {?} event
         * @return {?}
         */

      }, {
        key: "onDblClick",
        value: function onDblClick(event) {
          this.activate.emit({
            type: 'dblclick',
            event: event,
            row: this.row,
            group: this.group,
            rowHeight: this.rowHeight,
            column: this.column,
            value: this.value,
            cellElement: this._element
          });
        }
        /**
         * @param {?} event
         * @return {?}
         */

      }, {
        key: "onKeyDown",
        value: function onKeyDown(event) {
          /** @type {?} */
          var keyCode = event.keyCode;
          /** @type {?} */

          var isTargetCell = event.target === this._element;
          /** @type {?} */

          var isAction = keyCode === Keys["return"] || keyCode === Keys.down || keyCode === Keys.up || keyCode === Keys.left || keyCode === Keys.right;

          if (isAction && isTargetCell) {
            event.preventDefault();
            event.stopPropagation();
            this.activate.emit({
              type: 'keydown',
              event: event,
              row: this.row,
              group: this.group,
              rowHeight: this.rowHeight,
              column: this.column,
              value: this.value,
              cellElement: this._element
            });
          }
        }
        /**
         * @param {?} event
         * @return {?}
         */

      }, {
        key: "onCheckboxChange",
        value: function onCheckboxChange(event) {
          this.activate.emit({
            type: 'checkbox',
            event: event,
            row: this.row,
            group: this.group,
            rowHeight: this.rowHeight,
            column: this.column,
            value: this.value,
            cellElement: this._element,
            treeStatus: 'collapsed'
          });
        }
        /**
         * @param {?} sorts
         * @return {?}
         */

      }, {
        key: "calcSortDir",
        value: function calcSortDir(sorts) {
          var _this21 = this;

          if (!sorts) {
            return;
          }
          /** @type {?} */


          var sort = sorts.find(
          /**
          * @param {?} s
          * @return {?}
          */
          function (s) {
            return s.prop === _this21.column.prop;
          });

          if (sort) {
            return sort.dir;
          }
        }
        /**
         * @param {?} html
         * @return {?}
         */

      }, {
        key: "stripHtml",
        value: function stripHtml(html) {
          if (!html.replace) {
            return html;
          }

          return html.replace(/<\/?[^>]+(>|$)/g, '');
        }
        /**
         * @return {?}
         */

      }, {
        key: "onTreeAction",
        value: function onTreeAction() {
          this.treeAction.emit(this.row);
        }
        /**
         * @param {?} column
         * @param {?} row
         * @return {?}
         */

      }, {
        key: "calcLeftMargin",
        value: function calcLeftMargin(column, row) {
          /** @type {?} */
          var levelIndent = column.treeLevelIndent != null ? column.treeLevelIndent : 50;
          return column.isTreeColumn ? row.level * levelIndent : 0;
        }
      }]);

      return DataTableBodyCellComponent;
    }();

    DataTableBodyCellComponent.ɵfac = function DataTableBodyCellComponent_Factory(t) {
      return new (t || DataTableBodyCellComponent)(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__["ElementRef"]), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__["ChangeDetectorRef"]));
    };

    DataTableBodyCellComponent.ɵcmp = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineComponent"]({
      type: DataTableBodyCellComponent,
      selectors: [["datatable-body-cell"]],
      viewQuery: function DataTableBodyCellComponent_Query(rf, ctx) {
        if (rf & 1) {
          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵstaticViewQuery"](_c3, true, _angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewContainerRef"]);
        }

        if (rf & 2) {
          var _t;

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵqueryRefresh"](_t = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵloadQuery"]()) && (ctx.cellTemplate = _t.first);
        }
      },
      hostVars: 10,
      hostBindings: function DataTableBodyCellComponent_HostBindings(rf, ctx) {
        if (rf & 1) {
          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵlistener"]("focus", function DataTableBodyCellComponent_focus_HostBindingHandler() {
            return ctx.onFocus();
          })("blur", function DataTableBodyCellComponent_blur_HostBindingHandler() {
            return ctx.onBlur();
          })("click", function DataTableBodyCellComponent_click_HostBindingHandler($event) {
            return ctx.onClick($event);
          })("dblclick", function DataTableBodyCellComponent_dblclick_HostBindingHandler($event) {
            return ctx.onDblClick($event);
          })("keydown", function DataTableBodyCellComponent_keydown_HostBindingHandler($event) {
            return ctx.onKeyDown($event);
          });
        }

        if (rf & 2) {
          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵclassMap"](ctx.columnCssClasses);

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵstyleProp"]("width", ctx.width, "px")("min-width", ctx.minWidth, "px")("max-width", ctx.maxWidth, "px")("height", ctx.height);
        }
      },
      inputs: {
        group: "group",
        rowHeight: "rowHeight",
        isSelected: "isSelected",
        expanded: "expanded",
        rowIndex: "rowIndex",
        column: "column",
        row: "row",
        sorts: "sorts",
        treeStatus: "treeStatus",
        displayCheck: "displayCheck"
      },
      outputs: {
        activate: "activate",
        treeAction: "treeAction"
      },
      decls: 5,
      vars: 6,
      consts: [[1, "datatable-body-cell-label"], ["class", "datatable-checkbox", 4, "ngIf"], [4, "ngIf"], [3, "title", "innerHTML", 4, "ngIf"], [1, "datatable-checkbox"], ["type", "checkbox", 3, "checked", "click"], ["class", "datatable-tree-button", 3, "disabled", "click", 4, "ngIf"], [1, "datatable-tree-button", 3, "disabled", "click"], ["class", "icon datatable-icon-collapse", 4, "ngIf"], ["class", "icon datatable-icon-up", 4, "ngIf"], ["class", "icon datatable-icon-down", 4, "ngIf"], [1, "icon", "datatable-icon-collapse"], [1, "icon", "datatable-icon-up"], [1, "icon", "datatable-icon-down"], [3, "ngTemplateOutlet", "ngTemplateOutletContext"], [3, "title", "innerHTML"], ["cellTemplate", ""]],
      template: function DataTableBodyCellComponent_Template(rf, ctx) {
        if (rf & 1) {
          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](0, "div", 0);

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](1, DataTableBodyCellComponent_label_1_Template, 2, 1, "label", 1);

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](2, DataTableBodyCellComponent_ng_container_2_Template, 3, 2, "ng-container", 2);

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](3, DataTableBodyCellComponent_span_3_Template, 1, 2, "span", 3);

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](4, DataTableBodyCellComponent_4_Template, 2, 2, undefined, 2);

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
        }

        if (rf & 2) {
          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵstyleProp"]("margin-left", ctx.calcLeftMargin(ctx.column, ctx.row), "px");

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngIf", ctx.column.checkboxable && (!ctx.displayCheck || ctx.displayCheck(ctx.row, ctx.column, ctx.value)));

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngIf", ctx.column.isTreeColumn);

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngIf", !ctx.column.cellTemplate);

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngIf", ctx.column.cellTemplate);
        }
      },
      directives: [_angular_common__WEBPACK_IMPORTED_MODULE_1__["NgIf"], _angular_common__WEBPACK_IMPORTED_MODULE_1__["NgTemplateOutlet"]],
      encapsulation: 2,
      changeDetection: 0
    });
    /** @nocollapse */

    DataTableBodyCellComponent.ctorParameters = function () {
      return [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ElementRef"]
      }, {
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ChangeDetectorRef"]
      }];
    };

    DataTableBodyCellComponent.propDecorators = {
      displayCheck: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
      }],
      group: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
      }],
      rowHeight: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
      }],
      isSelected: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
      }],
      expanded: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
      }],
      rowIndex: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
      }],
      column: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
      }],
      row: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
      }],
      sorts: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
      }],
      treeStatus: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
      }],
      activate: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"]
      }],
      treeAction: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"]
      }],
      cellTemplate: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewChild"],
        args: ['cellTemplate', {
          read: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewContainerRef"],
          "static": true
        }]
      }],
      columnCssClasses: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["HostBinding"],
        args: ['class']
      }],
      width: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["HostBinding"],
        args: ['style.width.px']
      }],
      minWidth: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["HostBinding"],
        args: ['style.minWidth.px']
      }],
      maxWidth: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["HostBinding"],
        args: ['style.maxWidth.px']
      }],
      height: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["HostBinding"],
        args: ['style.height']
      }],
      onFocus: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["HostListener"],
        args: ['focus']
      }],
      onBlur: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["HostListener"],
        args: ['blur']
      }],
      onClick: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["HostListener"],
        args: ['click', ['$event']]
      }],
      onDblClick: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["HostListener"],
        args: ['dblclick', ['$event']]
      }],
      onKeyDown: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["HostListener"],
        args: ['keydown', ['$event']]
      }]
    };
    /*@__PURE__*/

    (function () {
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](DataTableBodyCellComponent, [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"],
        args: [{
          selector: 'datatable-body-cell',
          changeDetection: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ChangeDetectionStrategy"].OnPush,
          template: "\n    <div class=\"datatable-body-cell-label\" [style.margin-left.px]=\"calcLeftMargin(column, row)\">\n      <label\n        *ngIf=\"column.checkboxable && (!displayCheck || displayCheck(row, column, value))\"\n        class=\"datatable-checkbox\"\n      >\n        <input type=\"checkbox\" [checked]=\"isSelected\" (click)=\"onCheckboxChange($event)\" />\n      </label>\n      <ng-container *ngIf=\"column.isTreeColumn\">\n        <button\n          *ngIf=\"!column.treeToggleTemplate\"\n          class=\"datatable-tree-button\"\n          [disabled]=\"treeStatus === 'disabled'\"\n          (click)=\"onTreeAction()\"\n        >\n          <span>\n            <i *ngIf=\"treeStatus === 'loading'\" class=\"icon datatable-icon-collapse\"></i>\n            <i *ngIf=\"treeStatus === 'collapsed'\" class=\"icon datatable-icon-up\"></i>\n            <i *ngIf=\"treeStatus === 'expanded' || treeStatus === 'disabled'\" class=\"icon datatable-icon-down\"></i>\n          </span>\n        </button>\n        <ng-template\n          *ngIf=\"column.treeToggleTemplate\"\n          [ngTemplateOutlet]=\"column.treeToggleTemplate\"\n          [ngTemplateOutletContext]=\"{ cellContext: cellContext }\"\n        >\n        </ng-template>\n      </ng-container>\n\n      <span *ngIf=\"!column.cellTemplate\" [title]=\"sanitizedValue\" [innerHTML]=\"value\"> </span>\n      <ng-template\n        #cellTemplate\n        *ngIf=\"column.cellTemplate\"\n        [ngTemplateOutlet]=\"column.cellTemplate\"\n        [ngTemplateOutletContext]=\"cellContext\"\n      >\n      </ng-template>\n    </div>\n  "
        }]
      }], function () {
        return [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ElementRef"]
        }, {
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ChangeDetectorRef"]
        }];
      }, {
        activate: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"]
        }],
        treeAction: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"]
        }],
        group: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
        }],
        rowHeight: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
        }],
        isSelected: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
        }],
        expanded: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
        }],
        rowIndex: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
        }],
        column: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
        }],
        row: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
        }],
        sorts: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
        }],
        treeStatus: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
        }],
        columnCssClasses: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["HostBinding"],
          args: ['class']
        }],
        width: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["HostBinding"],
          args: ['style.width.px']
        }],
        minWidth: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["HostBinding"],
          args: ['style.minWidth.px']
        }],
        maxWidth: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["HostBinding"],
          args: ['style.maxWidth.px']
        }],
        height: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["HostBinding"],
          args: ['style.height']
        }],
        onFocus: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["HostListener"],
          args: ['focus']
        }],
        onBlur: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["HostListener"],
          args: ['blur']
        }],
        onClick: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["HostListener"],
          args: ['click', ['$event']]
        }],
        onDblClick: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["HostListener"],
          args: ['dblclick', ['$event']]
        }],
        onKeyDown: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["HostListener"],
          args: ['keydown', ['$event']]
        }],
        displayCheck: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
        }],
        cellTemplate: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewChild"],
          args: ['cellTemplate', {
            read: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewContainerRef"],
            "static": true
          }]
        }]
      });
    })();

    if (false) {}
    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    /**
     * @param {?} selected
     * @param {?} row
     * @param {?} comparefn
     * @return {?}
     */


    function selectRows(selected, row, comparefn) {
      /** @type {?} */
      var selectedIndex = comparefn(row, selected);

      if (selectedIndex > -1) {
        selected.splice(selectedIndex, 1);
      } else {
        selected.push(row);
      }

      return selected;
    }
    /**
     * @param {?} selected
     * @param {?} rows
     * @param {?} index
     * @param {?} prevIndex
     * @param {?} comparefn
     * @return {?}
     */


    function selectRowsBetween(selected, rows, index, prevIndex, comparefn) {
      /** @type {?} */
      var reverse = index < prevIndex;

      for (var i = 0; i < rows.length; i++) {
        /** @type {?} */
        var row = rows[i];
        /** @type {?} */

        var greater = i >= prevIndex && i <= index;
        /** @type {?} */

        var lesser = i <= prevIndex && i >= index;
        /** @type {?} */

        var range = {
          start: 0,
          end: 0
        };

        if (reverse) {
          range = {
            start: index,
            end: prevIndex
          };
        } else {
          range = {
            start: prevIndex,
            end: index + 1
          };
        }

        if (reverse && lesser || !reverse && greater) {
          // if in the positive range to be added to `selected`, and
          // not already in the selected array, add it
          if (i >= range.start && i <= range.end) {
            selected.push(row);
          }
        }
      }

      return selected;
    }
    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    /**
     * @record
     */


    function Model() {}

    if (false) {}

    var DataTableSelectionComponent = /*#__PURE__*/function () {
      function DataTableSelectionComponent() {
        _classCallCheck(this, DataTableSelectionComponent);

        this.activate = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
        this.select = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
      }
      /**
       * @param {?} event
       * @param {?} index
       * @param {?} row
       * @return {?}
       */


      _createClass(DataTableSelectionComponent, [{
        key: "selectRow",
        value: function selectRow(event, index, row) {
          var _this$selected3;

          if (!this.selectEnabled) return;
          /** @type {?} */

          var chkbox = this.selectionType === SelectionType.checkbox;
          /** @type {?} */

          var multi = this.selectionType === SelectionType.multi;
          /** @type {?} */

          var multiClick = this.selectionType === SelectionType.multiClick;
          /** @type {?} */

          var selected = [];

          if (multi || chkbox || multiClick) {
            if (event.shiftKey) {
              selected = selectRowsBetween([], this.rows, index, this.prevIndex, this.getRowSelectedIdx.bind(this));
            } else if (event.ctrlKey || event.metaKey || multiClick || chkbox) {
              selected = selectRows(_toConsumableArray(this.selected), row, this.getRowSelectedIdx.bind(this));
            } else {
              selected = selectRows([], row, this.getRowSelectedIdx.bind(this));
            }
          } else {
            selected = selectRows([], row, this.getRowSelectedIdx.bind(this));
          }

          if (typeof this.selectCheck === 'function') {
            selected = selected.filter(this.selectCheck.bind(this));
          }

          this.selected.splice(0, this.selected.length);

          (_this$selected3 = this.selected).push.apply(_this$selected3, _toConsumableArray(selected));

          this.prevIndex = index;
          this.select.emit({
            selected: selected
          });
        }
        /**
         * @param {?} model
         * @param {?} index
         * @return {?}
         */

      }, {
        key: "onActivate",
        value: function onActivate(model, index) {
          var type = model.type,
              event = model.event,
              row = model.row;
          /** @type {?} */

          var chkbox = this.selectionType === SelectionType.checkbox;
          /** @type {?} */

          var select = !chkbox && (type === 'click' || type === 'dblclick') || chkbox && type === 'checkbox';

          if (select) {
            this.selectRow(event, index, row);
          } else if (type === 'keydown') {
            if (event.keyCode === Keys["return"]) {
              this.selectRow(event, index, row);
            } else {
              this.onKeyboardFocus(model);
            }
          }

          this.activate.emit(model);
        }
        /**
         * @param {?} model
         * @return {?}
         */

      }, {
        key: "onKeyboardFocus",
        value: function onKeyboardFocus(model) {
          var keyCode = model.event.keyCode;
          /** @type {?} */

          var shouldFocus = keyCode === Keys.up || keyCode === Keys.down || keyCode === Keys.right || keyCode === Keys.left;

          if (shouldFocus) {
            /** @type {?} */
            var isCellSelection = this.selectionType === SelectionType.cell;

            if (!model.cellElement || !isCellSelection) {
              this.focusRow(model.rowElement, keyCode);
            } else if (isCellSelection) {
              this.focusCell(model.cellElement, model.rowElement, keyCode, model.cellIndex);
            }
          }
        }
        /**
         * @param {?} rowElement
         * @param {?} keyCode
         * @return {?}
         */

      }, {
        key: "focusRow",
        value: function focusRow(rowElement, keyCode) {
          /** @type {?} */
          var nextRowElement = this.getPrevNextRow(rowElement, keyCode);
          if (nextRowElement) nextRowElement.focus();
        }
        /**
         * @param {?} rowElement
         * @param {?} keyCode
         * @return {?}
         */

      }, {
        key: "getPrevNextRow",
        value: function getPrevNextRow(rowElement, keyCode) {
          /** @type {?} */
          var parentElement = rowElement.parentElement;

          if (parentElement) {
            /** @type {?} */
            var focusElement;

            if (keyCode === Keys.up) {
              focusElement = parentElement.previousElementSibling;
            } else if (keyCode === Keys.down) {
              focusElement = parentElement.nextElementSibling;
            }

            if (focusElement && focusElement.children.length) {
              return focusElement.children[0];
            }
          }
        }
        /**
         * @param {?} cellElement
         * @param {?} rowElement
         * @param {?} keyCode
         * @param {?} cellIndex
         * @return {?}
         */

      }, {
        key: "focusCell",
        value: function focusCell(cellElement, rowElement, keyCode, cellIndex) {
          /** @type {?} */
          var nextCellElement;

          if (keyCode === Keys.left) {
            nextCellElement = cellElement.previousElementSibling;
          } else if (keyCode === Keys.right) {
            nextCellElement = cellElement.nextElementSibling;
          } else if (keyCode === Keys.up || keyCode === Keys.down) {
            /** @type {?} */
            var nextRowElement = this.getPrevNextRow(rowElement, keyCode);

            if (nextRowElement) {
              /** @type {?} */
              var children = nextRowElement.getElementsByClassName('datatable-body-cell');
              if (children.length) nextCellElement = children[cellIndex];
            }
          }

          if (nextCellElement) nextCellElement.focus();
        }
        /**
         * @param {?} row
         * @return {?}
         */

      }, {
        key: "getRowSelected",
        value: function getRowSelected(row) {
          return this.getRowSelectedIdx(row, this.selected) > -1;
        }
        /**
         * @param {?} row
         * @param {?} selected
         * @return {?}
         */

      }, {
        key: "getRowSelectedIdx",
        value: function getRowSelectedIdx(row, selected) {
          var _this22 = this;

          if (!selected || !selected.length) return -1;
          /** @type {?} */

          var rowId = this.rowIdentity(row);
          return selected.findIndex(
          /**
          * @param {?} r
          * @return {?}
          */
          function (r) {
            /** @type {?} */
            var id = _this22.rowIdentity(r);

            return id === rowId;
          });
        }
      }]);

      return DataTableSelectionComponent;
    }();

    DataTableSelectionComponent.ɵfac = function DataTableSelectionComponent_Factory(t) {
      return new (t || DataTableSelectionComponent)();
    };

    DataTableSelectionComponent.ɵcmp = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineComponent"]({
      type: DataTableSelectionComponent,
      selectors: [["datatable-selection"]],
      inputs: {
        rows: "rows",
        selected: "selected",
        selectEnabled: "selectEnabled",
        selectionType: "selectionType",
        rowIdentity: "rowIdentity",
        selectCheck: "selectCheck"
      },
      outputs: {
        activate: "activate",
        select: "select"
      },
      ngContentSelectors: _c0,
      decls: 1,
      vars: 0,
      template: function DataTableSelectionComponent_Template(rf, ctx) {
        if (rf & 1) {
          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵprojectionDef"]();

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵprojection"](0);
        }
      },
      encapsulation: 2,
      changeDetection: 0
    });
    DataTableSelectionComponent.propDecorators = {
      rows: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
      }],
      selected: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
      }],
      selectEnabled: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
      }],
      selectionType: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
      }],
      rowIdentity: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
      }],
      selectCheck: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
      }],
      activate: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"]
      }],
      select: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"]
      }]
    };
    /*@__PURE__*/

    (function () {
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](DataTableSelectionComponent, [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"],
        args: [{
          selector: 'datatable-selection',
          template: "\n    <ng-content></ng-content>\n  ",
          changeDetection: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ChangeDetectionStrategy"].OnPush
        }]
      }], function () {
        return [];
      }, {
        activate: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"]
        }],
        select: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"]
        }],
        rows: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
        }],
        selected: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
        }],
        selectEnabled: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
        }],
        selectionType: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
        }],
        rowIdentity: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
        }],
        selectCheck: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
        }]
      });
    })();

    if (false) {}
    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    /**
     * @record
     */


    function ISummaryColumn() {}

    if (false) {}
    /**
     * @param {?} cells
     * @return {?}
     */


    function defaultSumFunc(cells) {
      /** @type {?} */
      var cellsWithValues = cells.filter(
      /**
      * @param {?} cell
      * @return {?}
      */
      function (cell) {
        return !!cell;
      });

      if (!cellsWithValues.length) {
        return null;
      }

      if (cellsWithValues.some(
      /**
      * @param {?} cell
      * @return {?}
      */
      function (cell) {
        return typeof cell !== 'number';
      })) {
        return null;
      }

      return cellsWithValues.reduce(
      /**
      * @param {?} res
      * @param {?} cell
      * @return {?}
      */
      function (res, cell) {
        return res + cell;
      });
    }
    /**
     * @param {?} cells
     * @return {?}
     */


    function noopSumFunc(cells) {
      return null;
    }

    var DataTableSummaryRowComponent = /*#__PURE__*/function () {
      function DataTableSummaryRowComponent() {
        _classCallCheck(this, DataTableSummaryRowComponent);

        this.summaryRow = {};
      }
      /**
       * @return {?}
       */


      _createClass(DataTableSummaryRowComponent, [{
        key: "ngOnChanges",
        value: function ngOnChanges() {
          if (!this.columns || !this.rows) {
            return;
          }

          this.updateInternalColumns();
          this.updateValues();
        }
        /**
         * @private
         * @return {?}
         */

      }, {
        key: "updateInternalColumns",
        value: function updateInternalColumns() {
          this._internalColumns = this.columns.map(
          /**
          * @param {?} col
          * @return {?}
          */
          function (col) {
            return Object.assign({}, col, {
              cellTemplate: col.summaryTemplate
            });
          });
        }
        /**
         * @private
         * @return {?}
         */

      }, {
        key: "updateValues",
        value: function updateValues() {
          var _this23 = this;

          this.summaryRow = {};
          this.columns.filter(
          /**
          * @param {?} col
          * @return {?}
          */
          function (col) {
            return !col.summaryTemplate;
          }).forEach(
          /**
          * @param {?} col
          * @return {?}
          */
          function (col) {
            /** @type {?} */
            var cellsFromSingleColumn = _this23.rows.map(
            /**
            * @param {?} row
            * @return {?}
            */
            function (row) {
              return row[col.prop];
            });
            /** @type {?} */


            var sumFunc = _this23.getSummaryFunction(col);

            _this23.summaryRow[col.prop] = col.pipe ? col.pipe.transform(sumFunc(cellsFromSingleColumn)) : sumFunc(cellsFromSingleColumn);
          });
        }
        /**
         * @private
         * @param {?} column
         * @return {?}
         */

      }, {
        key: "getSummaryFunction",
        value: function getSummaryFunction(column) {
          if (column.summaryFunc === undefined) {
            return defaultSumFunc;
          } else if (column.summaryFunc === null) {
            return noopSumFunc;
          } else {
            return column.summaryFunc;
          }
        }
      }]);

      return DataTableSummaryRowComponent;
    }();

    DataTableSummaryRowComponent.ɵfac = function DataTableSummaryRowComponent_Factory(t) {
      return new (t || DataTableSummaryRowComponent)();
    };

    DataTableSummaryRowComponent.ɵcmp = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineComponent"]({
      type: DataTableSummaryRowComponent,
      selectors: [["datatable-summary-row"]],
      hostAttrs: [1, "datatable-summary-row"],
      inputs: {
        rows: "rows",
        columns: "columns",
        rowHeight: "rowHeight",
        offsetX: "offsetX",
        innerWidth: "innerWidth"
      },
      features: [_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵNgOnChangesFeature"]],
      decls: 1,
      vars: 1,
      consts: [["tabindex", "-1", 3, "innerWidth", "offsetX", "columns", "rowHeight", "row", "rowIndex", 4, "ngIf"], ["tabindex", "-1", 3, "innerWidth", "offsetX", "columns", "rowHeight", "row", "rowIndex"]],
      template: function DataTableSummaryRowComponent_Template(rf, ctx) {
        if (rf & 1) {
          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](0, DataTableSummaryRowComponent_datatable_body_row_0_Template, 1, 6, "datatable-body-row", 0);
        }

        if (rf & 2) {
          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngIf", ctx.summaryRow && ctx._internalColumns);
        }
      },
      directives: [_angular_common__WEBPACK_IMPORTED_MODULE_1__["NgIf"], DataTableBodyRowComponent],
      encapsulation: 2
    });
    DataTableSummaryRowComponent.propDecorators = {
      rows: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
      }],
      columns: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
      }],
      rowHeight: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
      }],
      offsetX: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
      }],
      innerWidth: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
      }]
    };
    /*@__PURE__*/

    (function () {
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](DataTableSummaryRowComponent, [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"],
        args: [{
          selector: 'datatable-summary-row',
          template: "\n    <datatable-body-row\n      *ngIf=\"summaryRow && _internalColumns\"\n      tabindex=\"-1\"\n      [innerWidth]=\"innerWidth\"\n      [offsetX]=\"offsetX\"\n      [columns]=\"_internalColumns\"\n      [rowHeight]=\"rowHeight\"\n      [row]=\"summaryRow\"\n      [rowIndex]=\"-1\"\n    >\n    </datatable-body-row>\n  ",
          host: {
            "class": 'datatable-summary-row'
          }
        }]
      }], function () {
        return [];
      }, {
        rows: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
        }],
        columns: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
        }],
        rowHeight: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
        }],
        offsetX: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
        }],
        innerWidth: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
        }]
      });
    })();

    if (false) {}
    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */


    var NgxDatatableModule = /*#__PURE__*/function () {
      function NgxDatatableModule() {
        _classCallCheck(this, NgxDatatableModule);
      }

      _createClass(NgxDatatableModule, null, [{
        key: "forRoot",
        value:
        /**
         * Configure global configuration via INgxDatatableConfig
         * @param {?} configuration
         * @return {?}
         */
        function forRoot(configuration) {
          return {
            ngModule: NgxDatatableModule,
            providers: [{
              provide: 'configuration',
              useValue: configuration
            }]
          };
        }
      }]);

      return NgxDatatableModule;
    }();

    NgxDatatableModule.ɵmod = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineNgModule"]({
      type: NgxDatatableModule
    });
    NgxDatatableModule.ɵinj = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineInjector"]({
      factory: function NgxDatatableModule_Factory(t) {
        return new (t || NgxDatatableModule)();
      },
      providers: [ScrollbarHelper, DimensionsHelper, ColumnChangesService],
      imports: [[_angular_common__WEBPACK_IMPORTED_MODULE_1__["CommonModule"]]]
    });

    (function () {
      (typeof ngJitMode === "undefined" || ngJitMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵsetNgModuleScope"](NgxDatatableModule, {
        declarations: function declarations() {
          return [DataTableFooterTemplateDirective, VisibilityDirective, DraggableDirective, ResizeableDirective, OrderableDirective, LongPressDirective, ScrollerComponent, DatatableComponent, DataTableColumnDirective, DataTableHeaderComponent, DataTableHeaderCellComponent, DataTableBodyComponent, DataTableFooterComponent, DataTablePagerComponent, ProgressBarComponent, DataTableBodyRowComponent, DataTableRowWrapperComponent, DatatableRowDetailDirective, DatatableGroupHeaderDirective, DatatableRowDetailTemplateDirective, DataTableBodyCellComponent, DataTableSelectionComponent, DataTableColumnHeaderDirective, DataTableColumnCellDirective, DataTableColumnCellTreeToggle, DatatableFooterDirective, DatatableGroupHeaderTemplateDirective, DataTableSummaryRowComponent];
        },
        imports: function imports() {
          return [_angular_common__WEBPACK_IMPORTED_MODULE_1__["CommonModule"]];
        },
        exports: function exports() {
          return [DatatableComponent, DatatableRowDetailDirective, DatatableGroupHeaderDirective, DatatableRowDetailTemplateDirective, DataTableColumnDirective, DataTableColumnHeaderDirective, DataTableColumnCellDirective, DataTableColumnCellTreeToggle, DataTableFooterTemplateDirective, DatatableFooterDirective, DataTablePagerComponent, DatatableGroupHeaderTemplateDirective];
        }
      });
    })();
    /*@__PURE__*/


    (function () {
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](NgxDatatableModule, [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["NgModule"],
        args: [{
          imports: [_angular_common__WEBPACK_IMPORTED_MODULE_1__["CommonModule"]],
          providers: [ScrollbarHelper, DimensionsHelper, ColumnChangesService],
          declarations: [DataTableFooterTemplateDirective, VisibilityDirective, DraggableDirective, ResizeableDirective, OrderableDirective, LongPressDirective, ScrollerComponent, DatatableComponent, DataTableColumnDirective, DataTableHeaderComponent, DataTableHeaderCellComponent, DataTableBodyComponent, DataTableFooterComponent, DataTablePagerComponent, ProgressBarComponent, DataTableBodyRowComponent, DataTableRowWrapperComponent, DatatableRowDetailDirective, DatatableGroupHeaderDirective, DatatableRowDetailTemplateDirective, DataTableBodyCellComponent, DataTableSelectionComponent, DataTableColumnHeaderDirective, DataTableColumnCellDirective, DataTableColumnCellTreeToggle, DatatableFooterDirective, DatatableGroupHeaderTemplateDirective, DataTableSummaryRowComponent],
          exports: [DatatableComponent, DatatableRowDetailDirective, DatatableGroupHeaderDirective, DatatableRowDetailTemplateDirective, DataTableColumnDirective, DataTableColumnHeaderDirective, DataTableColumnCellDirective, DataTableColumnCellTreeToggle, DataTableFooterTemplateDirective, DatatableFooterDirective, DataTablePagerComponent, DatatableGroupHeaderTemplateDirective]
        }]
      }], null, null);
    })();
    /**
     * Interface definition for INgxDatatableConfig global configuration
     * @record
     */


    function INgxDatatableConfig() {}

    if (false) {}
    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    /** @enum {string} */


    var ClickType = {
      single: 'single',
      "double": 'double'
    };
    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    /**
     * Column Type
     * @record
     */

    function TableColumn() {}

    if (false) {}
    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    /**
     * @record
     */


    function SortPropDir() {}

    if (false) {}
    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */


    if (typeof document !== 'undefined' && !document.elementsFromPoint) {
      document.elementsFromPoint = elementsFromPoint;
    }
    /*tslint:disable*/

    /**
     * Polyfill for `elementsFromPoint`
     *
     * https://developer.mozilla.org/en-US/docs/Web/API/Document/elementsFromPoint
     * https://gist.github.com/iddan/54d5d9e58311b0495a91bf06de661380
     * https://gist.github.com/oslego/7265412
     * @param {?} x
     * @param {?} y
     * @return {?}
     */


    function elementsFromPoint(x, y) {
      /** @type {?} */
      var elements = [];
      /** @type {?} */

      var previousPointerEvents = [];
      /** @type {?} */

      var current; // TODO: window.getComputedStyle should be used with inferred type (Element)

      /** @type {?} */

      var i;
      /** @type {?} */

      var d; //if (document === undefined) return elements;
      // get all elements via elementFromPoint, and remove them from hit-testing in order

      while ((current = document.elementFromPoint(x, y)) && elements.indexOf(current) === -1 && current != null) {
        // push the element and its current style
        elements.push(current);
        previousPointerEvents.push({
          value: current.style.getPropertyValue('pointer-events'),
          priority: current.style.getPropertyPriority('pointer-events')
        }); // add "pointer-events: none", to get to the underlying element

        current.style.setProperty('pointer-events', 'none', 'important');
      } // restore the previous pointer-events values


      for (i = previousPointerEvents.length; d = previousPointerEvents[--i];) {
        elements[i].style.setProperty('pointer-events', d.value ? d.value : '', d.priority);
      } // return our results


      return elements;
    }
    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    //# sourceMappingURL=swimlane-ngx-datatable.js.map

    /***/

  },

  /***/
  "./node_modules/chart.js/src/chart.js": function node_modulesChartJsSrcChartJs(module, exports, __webpack_require__) {
    /**
     * @namespace Chart
     */
    var Chart = __webpack_require__(
    /*! ./core/core.js */
    "./node_modules/chart.js/src/core/core.js")();

    __webpack_require__(
    /*! ./core/core.helpers */
    "./node_modules/chart.js/src/core/core.helpers.js")(Chart);

    __webpack_require__(
    /*! ./platforms/platform.js */
    "./node_modules/chart.js/src/platforms/platform.js")(Chart);

    __webpack_require__(
    /*! ./core/core.canvasHelpers */
    "./node_modules/chart.js/src/core/core.canvasHelpers.js")(Chart);

    __webpack_require__(
    /*! ./core/core.plugin.js */
    "./node_modules/chart.js/src/core/core.plugin.js")(Chart);

    __webpack_require__(
    /*! ./core/core.element */
    "./node_modules/chart.js/src/core/core.element.js")(Chart);

    __webpack_require__(
    /*! ./core/core.animation */
    "./node_modules/chart.js/src/core/core.animation.js")(Chart);

    __webpack_require__(
    /*! ./core/core.controller */
    "./node_modules/chart.js/src/core/core.controller.js")(Chart);

    __webpack_require__(
    /*! ./core/core.datasetController */
    "./node_modules/chart.js/src/core/core.datasetController.js")(Chart);

    __webpack_require__(
    /*! ./core/core.layoutService */
    "./node_modules/chart.js/src/core/core.layoutService.js")(Chart);

    __webpack_require__(
    /*! ./core/core.scaleService */
    "./node_modules/chart.js/src/core/core.scaleService.js")(Chart);

    __webpack_require__(
    /*! ./core/core.ticks.js */
    "./node_modules/chart.js/src/core/core.ticks.js")(Chart);

    __webpack_require__(
    /*! ./core/core.scale */
    "./node_modules/chart.js/src/core/core.scale.js")(Chart);

    __webpack_require__(
    /*! ./core/core.title */
    "./node_modules/chart.js/src/core/core.title.js")(Chart);

    __webpack_require__(
    /*! ./core/core.legend */
    "./node_modules/chart.js/src/core/core.legend.js")(Chart);

    __webpack_require__(
    /*! ./core/core.interaction */
    "./node_modules/chart.js/src/core/core.interaction.js")(Chart);

    __webpack_require__(
    /*! ./core/core.tooltip */
    "./node_modules/chart.js/src/core/core.tooltip.js")(Chart);

    __webpack_require__(
    /*! ./elements/element.arc */
    "./node_modules/chart.js/src/elements/element.arc.js")(Chart);

    __webpack_require__(
    /*! ./elements/element.line */
    "./node_modules/chart.js/src/elements/element.line.js")(Chart);

    __webpack_require__(
    /*! ./elements/element.point */
    "./node_modules/chart.js/src/elements/element.point.js")(Chart);

    __webpack_require__(
    /*! ./elements/element.rectangle */
    "./node_modules/chart.js/src/elements/element.rectangle.js")(Chart);

    __webpack_require__(
    /*! ./scales/scale.linearbase.js */
    "./node_modules/chart.js/src/scales/scale.linearbase.js")(Chart);

    __webpack_require__(
    /*! ./scales/scale.category */
    "./node_modules/chart.js/src/scales/scale.category.js")(Chart);

    __webpack_require__(
    /*! ./scales/scale.linear */
    "./node_modules/chart.js/src/scales/scale.linear.js")(Chart);

    __webpack_require__(
    /*! ./scales/scale.logarithmic */
    "./node_modules/chart.js/src/scales/scale.logarithmic.js")(Chart);

    __webpack_require__(
    /*! ./scales/scale.radialLinear */
    "./node_modules/chart.js/src/scales/scale.radialLinear.js")(Chart);

    __webpack_require__(
    /*! ./scales/scale.time */
    "./node_modules/chart.js/src/scales/scale.time.js")(Chart); // Controllers must be loaded after elements
    // See Chart.core.datasetController.dataElementType


    __webpack_require__(
    /*! ./controllers/controller.bar */
    "./node_modules/chart.js/src/controllers/controller.bar.js")(Chart);

    __webpack_require__(
    /*! ./controllers/controller.bubble */
    "./node_modules/chart.js/src/controllers/controller.bubble.js")(Chart);

    __webpack_require__(
    /*! ./controllers/controller.doughnut */
    "./node_modules/chart.js/src/controllers/controller.doughnut.js")(Chart);

    __webpack_require__(
    /*! ./controllers/controller.line */
    "./node_modules/chart.js/src/controllers/controller.line.js")(Chart);

    __webpack_require__(
    /*! ./controllers/controller.polarArea */
    "./node_modules/chart.js/src/controllers/controller.polarArea.js")(Chart);

    __webpack_require__(
    /*! ./controllers/controller.radar */
    "./node_modules/chart.js/src/controllers/controller.radar.js")(Chart);

    __webpack_require__(
    /*! ./charts/Chart.Bar */
    "./node_modules/chart.js/src/charts/Chart.Bar.js")(Chart);

    __webpack_require__(
    /*! ./charts/Chart.Bubble */
    "./node_modules/chart.js/src/charts/Chart.Bubble.js")(Chart);

    __webpack_require__(
    /*! ./charts/Chart.Doughnut */
    "./node_modules/chart.js/src/charts/Chart.Doughnut.js")(Chart);

    __webpack_require__(
    /*! ./charts/Chart.Line */
    "./node_modules/chart.js/src/charts/Chart.Line.js")(Chart);

    __webpack_require__(
    /*! ./charts/Chart.PolarArea */
    "./node_modules/chart.js/src/charts/Chart.PolarArea.js")(Chart);

    __webpack_require__(
    /*! ./charts/Chart.Radar */
    "./node_modules/chart.js/src/charts/Chart.Radar.js")(Chart);

    __webpack_require__(
    /*! ./charts/Chart.Scatter */
    "./node_modules/chart.js/src/charts/Chart.Scatter.js")(Chart);

    window.Chart = module.exports = Chart;
    /***/
  },

  /***/
  "./node_modules/chart.js/src/charts/Chart.Bar.js": function node_modulesChartJsSrcChartsChartBarJs(module, exports, __webpack_require__) {
    "use strict";

    module.exports = function (Chart) {
      Chart.Bar = function (context, config) {
        config.type = 'bar';
        return new Chart(context, config);
      };
    };
    /***/

  },

  /***/
  "./node_modules/chart.js/src/charts/Chart.Bubble.js": function node_modulesChartJsSrcChartsChartBubbleJs(module, exports, __webpack_require__) {
    "use strict";

    module.exports = function (Chart) {
      Chart.Bubble = function (context, config) {
        config.type = 'bubble';
        return new Chart(context, config);
      };
    };
    /***/

  },

  /***/
  "./node_modules/chart.js/src/charts/Chart.Doughnut.js": function node_modulesChartJsSrcChartsChartDoughnutJs(module, exports, __webpack_require__) {
    "use strict";

    module.exports = function (Chart) {
      Chart.Doughnut = function (context, config) {
        config.type = 'doughnut';
        return new Chart(context, config);
      };
    };
    /***/

  },

  /***/
  "./node_modules/chart.js/src/charts/Chart.Line.js": function node_modulesChartJsSrcChartsChartLineJs(module, exports, __webpack_require__) {
    "use strict";

    module.exports = function (Chart) {
      Chart.Line = function (context, config) {
        config.type = 'line';
        return new Chart(context, config);
      };
    };
    /***/

  },

  /***/
  "./node_modules/chart.js/src/charts/Chart.PolarArea.js": function node_modulesChartJsSrcChartsChartPolarAreaJs(module, exports, __webpack_require__) {
    "use strict";

    module.exports = function (Chart) {
      Chart.PolarArea = function (context, config) {
        config.type = 'polarArea';
        return new Chart(context, config);
      };
    };
    /***/

  },

  /***/
  "./node_modules/chart.js/src/charts/Chart.Radar.js": function node_modulesChartJsSrcChartsChartRadarJs(module, exports, __webpack_require__) {
    "use strict";

    module.exports = function (Chart) {
      Chart.Radar = function (context, config) {
        config.type = 'radar';
        return new Chart(context, config);
      };
    };
    /***/

  },

  /***/
  "./node_modules/chart.js/src/charts/Chart.Scatter.js": function node_modulesChartJsSrcChartsChartScatterJs(module, exports, __webpack_require__) {
    "use strict";

    module.exports = function (Chart) {
      var defaultConfig = {
        hover: {
          mode: 'single'
        },
        scales: {
          xAxes: [{
            type: 'linear',
            // scatter should not use a category axis
            position: 'bottom',
            id: 'x-axis-1' // need an ID so datasets can reference the scale

          }],
          yAxes: [{
            type: 'linear',
            position: 'left',
            id: 'y-axis-1'
          }]
        },
        tooltips: {
          callbacks: {
            title: function title() {
              // Title doesn't make sense for scatter since we format the data as a point
              return '';
            },
            label: function label(tooltipItem) {
              return '(' + tooltipItem.xLabel + ', ' + tooltipItem.yLabel + ')';
            }
          }
        }
      }; // Register the default config for this type

      Chart.defaults.scatter = defaultConfig; // Scatter charts use line controllers

      Chart.controllers.scatter = Chart.controllers.line;

      Chart.Scatter = function (context, config) {
        config.type = 'scatter';
        return new Chart(context, config);
      };
    };
    /***/

  },

  /***/
  "./node_modules/chart.js/src/controllers/controller.bar.js": function node_modulesChartJsSrcControllersControllerBarJs(module, exports, __webpack_require__) {
    "use strict";

    module.exports = function (Chart) {
      var helpers = Chart.helpers;
      Chart.defaults.bar = {
        hover: {
          mode: 'label'
        },
        scales: {
          xAxes: [{
            type: 'category',
            // Specific to Bar Controller
            categoryPercentage: 0.8,
            barPercentage: 0.9,
            // grid line settings
            gridLines: {
              offsetGridLines: true
            }
          }],
          yAxes: [{
            type: 'linear'
          }]
        }
      };
      Chart.controllers.bar = Chart.DatasetController.extend({
        dataElementType: Chart.elements.Rectangle,
        initialize: function initialize(chart, datasetIndex) {
          Chart.DatasetController.prototype.initialize.call(this, chart, datasetIndex);
          var me = this;
          var meta = me.getMeta();
          var dataset = me.getDataset();
          meta.stack = dataset.stack; // Use this to indicate that this is a bar dataset.

          meta.bar = true;
        },
        // Correctly calculate the bar width accounting for stacks and the fact that not all bars are visible
        getStackCount: function getStackCount() {
          var me = this;
          var meta = me.getMeta();
          var yScale = me.getScaleForId(meta.yAxisID);
          var stacks = [];
          helpers.each(me.chart.data.datasets, function (dataset, datasetIndex) {
            var dsMeta = me.chart.getDatasetMeta(datasetIndex);

            if (dsMeta.bar && me.chart.isDatasetVisible(datasetIndex) && (yScale.options.stacked === false || yScale.options.stacked === true && stacks.indexOf(dsMeta.stack) === -1 || yScale.options.stacked === undefined && (dsMeta.stack === undefined || stacks.indexOf(dsMeta.stack) === -1))) {
              stacks.push(dsMeta.stack);
            }
          }, me);
          return stacks.length;
        },
        update: function update(reset) {
          var me = this;
          helpers.each(me.getMeta().data, function (rectangle, index) {
            me.updateElement(rectangle, index, reset);
          }, me);
        },
        updateElement: function updateElement(rectangle, index, reset) {
          var me = this;
          var meta = me.getMeta();
          var xScale = me.getScaleForId(meta.xAxisID);
          var yScale = me.getScaleForId(meta.yAxisID);
          var scaleBase = yScale.getBasePixel();
          var rectangleElementOptions = me.chart.options.elements.rectangle;
          var custom = rectangle.custom || {};
          var dataset = me.getDataset();
          rectangle._xScale = xScale;
          rectangle._yScale = yScale;
          rectangle._datasetIndex = me.index;
          rectangle._index = index;
          var ruler = me.getRuler(index); // The index argument for compatible

          rectangle._model = {
            x: me.calculateBarX(index, me.index, ruler),
            y: reset ? scaleBase : me.calculateBarY(index, me.index),
            // Tooltip
            label: me.chart.data.labels[index],
            datasetLabel: dataset.label,
            // Appearance
            horizontal: false,
            base: reset ? scaleBase : me.calculateBarBase(me.index, index),
            width: me.calculateBarWidth(ruler),
            backgroundColor: custom.backgroundColor ? custom.backgroundColor : helpers.getValueAtIndexOrDefault(dataset.backgroundColor, index, rectangleElementOptions.backgroundColor),
            borderSkipped: custom.borderSkipped ? custom.borderSkipped : rectangleElementOptions.borderSkipped,
            borderColor: custom.borderColor ? custom.borderColor : helpers.getValueAtIndexOrDefault(dataset.borderColor, index, rectangleElementOptions.borderColor),
            borderWidth: custom.borderWidth ? custom.borderWidth : helpers.getValueAtIndexOrDefault(dataset.borderWidth, index, rectangleElementOptions.borderWidth)
          };
          rectangle.pivot();
        },
        calculateBarBase: function calculateBarBase(datasetIndex, index) {
          var me = this;
          var meta = me.getMeta();
          var yScale = me.getScaleForId(meta.yAxisID);
          var base = yScale.getBaseValue();
          var original = base;

          if (yScale.options.stacked === true || yScale.options.stacked === undefined && meta.stack !== undefined) {
            var chart = me.chart;
            var datasets = chart.data.datasets;
            var value = Number(datasets[datasetIndex].data[index]);

            for (var i = 0; i < datasetIndex; i++) {
              var currentDs = datasets[i];
              var currentDsMeta = chart.getDatasetMeta(i);

              if (currentDsMeta.bar && currentDsMeta.yAxisID === yScale.id && chart.isDatasetVisible(i) && meta.stack === currentDsMeta.stack) {
                var currentVal = Number(currentDs.data[index]);
                base += value < 0 ? Math.min(currentVal, original) : Math.max(currentVal, original);
              }
            }

            return yScale.getPixelForValue(base);
          }

          return yScale.getBasePixel();
        },
        getRuler: function getRuler() {
          var me = this;
          var meta = me.getMeta();
          var xScale = me.getScaleForId(meta.xAxisID);
          var stackCount = me.getStackCount();
          var tickWidth = xScale.width / xScale.ticks.length;
          var categoryWidth = tickWidth * xScale.options.categoryPercentage;
          var categorySpacing = (tickWidth - tickWidth * xScale.options.categoryPercentage) / 2;
          var fullBarWidth = categoryWidth / stackCount;
          var barWidth = fullBarWidth * xScale.options.barPercentage;
          var barSpacing = fullBarWidth - fullBarWidth * xScale.options.barPercentage;
          return {
            stackCount: stackCount,
            tickWidth: tickWidth,
            categoryWidth: categoryWidth,
            categorySpacing: categorySpacing,
            fullBarWidth: fullBarWidth,
            barWidth: barWidth,
            barSpacing: barSpacing
          };
        },
        calculateBarWidth: function calculateBarWidth(ruler) {
          var me = this;
          var meta = me.getMeta();
          var xScale = me.getScaleForId(meta.xAxisID);

          if (xScale.options.barThickness) {
            return xScale.options.barThickness;
          }

          return ruler.barWidth;
        },
        // Get stack index from the given dataset index accounting for stacks and the fact that not all bars are visible
        getStackIndex: function getStackIndex(datasetIndex) {
          var me = this;
          var meta = me.chart.getDatasetMeta(datasetIndex);
          var yScale = me.getScaleForId(meta.yAxisID);
          var dsMeta, j;
          var stacks = [meta.stack];

          for (j = 0; j < datasetIndex; ++j) {
            dsMeta = this.chart.getDatasetMeta(j);

            if (dsMeta.bar && this.chart.isDatasetVisible(j) && (yScale.options.stacked === false || yScale.options.stacked === true && stacks.indexOf(dsMeta.stack) === -1 || yScale.options.stacked === undefined && (dsMeta.stack === undefined || stacks.indexOf(dsMeta.stack) === -1))) {
              stacks.push(dsMeta.stack);
            }
          }

          return stacks.length - 1;
        },
        calculateBarX: function calculateBarX(index, datasetIndex, ruler) {
          var me = this;
          var meta = me.getMeta();
          var xScale = me.getScaleForId(meta.xAxisID);
          var stackIndex = me.getStackIndex(datasetIndex);
          var leftTick = xScale.getPixelForValue(null, index, datasetIndex, me.chart.isCombo);
          leftTick -= me.chart.isCombo ? ruler.tickWidth / 2 : 0;
          return leftTick + ruler.barWidth / 2 + ruler.categorySpacing + ruler.barWidth * stackIndex + ruler.barSpacing / 2 + ruler.barSpacing * stackIndex;
        },
        calculateBarY: function calculateBarY(index, datasetIndex) {
          var me = this;
          var meta = me.getMeta();
          var yScale = me.getScaleForId(meta.yAxisID);
          var value = Number(me.getDataset().data[index]);

          if (yScale.options.stacked || yScale.options.stacked === undefined && meta.stack !== undefined) {
            var base = yScale.getBaseValue();
            var sumPos = base,
                sumNeg = base;

            for (var i = 0; i < datasetIndex; i++) {
              var ds = me.chart.data.datasets[i];
              var dsMeta = me.chart.getDatasetMeta(i);

              if (dsMeta.bar && dsMeta.yAxisID === yScale.id && me.chart.isDatasetVisible(i) && meta.stack === dsMeta.stack) {
                var stackedVal = Number(ds.data[index]);

                if (stackedVal < 0) {
                  sumNeg += stackedVal || 0;
                } else {
                  sumPos += stackedVal || 0;
                }
              }
            }

            if (value < 0) {
              return yScale.getPixelForValue(sumNeg + value);
            }

            return yScale.getPixelForValue(sumPos + value);
          }

          return yScale.getPixelForValue(value);
        },
        draw: function draw(ease) {
          var me = this;
          var easingDecimal = ease || 1;
          var metaData = me.getMeta().data;
          var dataset = me.getDataset();
          var i, len;
          Chart.canvasHelpers.clipArea(me.chart.chart.ctx, me.chart.chartArea);

          for (i = 0, len = metaData.length; i < len; ++i) {
            var d = dataset.data[i];

            if (d !== null && d !== undefined && !isNaN(d)) {
              metaData[i].transition(easingDecimal).draw();
            }
          }

          Chart.canvasHelpers.unclipArea(me.chart.chart.ctx);
        },
        setHoverStyle: function setHoverStyle(rectangle) {
          var dataset = this.chart.data.datasets[rectangle._datasetIndex];
          var index = rectangle._index;
          var custom = rectangle.custom || {};
          var model = rectangle._model;
          model.backgroundColor = custom.hoverBackgroundColor ? custom.hoverBackgroundColor : helpers.getValueAtIndexOrDefault(dataset.hoverBackgroundColor, index, helpers.getHoverColor(model.backgroundColor));
          model.borderColor = custom.hoverBorderColor ? custom.hoverBorderColor : helpers.getValueAtIndexOrDefault(dataset.hoverBorderColor, index, helpers.getHoverColor(model.borderColor));
          model.borderWidth = custom.hoverBorderWidth ? custom.hoverBorderWidth : helpers.getValueAtIndexOrDefault(dataset.hoverBorderWidth, index, model.borderWidth);
        },
        removeHoverStyle: function removeHoverStyle(rectangle) {
          var dataset = this.chart.data.datasets[rectangle._datasetIndex];
          var index = rectangle._index;
          var custom = rectangle.custom || {};
          var model = rectangle._model;
          var rectangleElementOptions = this.chart.options.elements.rectangle;
          model.backgroundColor = custom.backgroundColor ? custom.backgroundColor : helpers.getValueAtIndexOrDefault(dataset.backgroundColor, index, rectangleElementOptions.backgroundColor);
          model.borderColor = custom.borderColor ? custom.borderColor : helpers.getValueAtIndexOrDefault(dataset.borderColor, index, rectangleElementOptions.borderColor);
          model.borderWidth = custom.borderWidth ? custom.borderWidth : helpers.getValueAtIndexOrDefault(dataset.borderWidth, index, rectangleElementOptions.borderWidth);
        }
      }); // including horizontalBar in the bar file, instead of a file of its own
      // it extends bar (like pie extends doughnut)

      Chart.defaults.horizontalBar = {
        hover: {
          mode: 'label'
        },
        scales: {
          xAxes: [{
            type: 'linear',
            position: 'bottom'
          }],
          yAxes: [{
            position: 'left',
            type: 'category',
            // Specific to Horizontal Bar Controller
            categoryPercentage: 0.8,
            barPercentage: 0.9,
            // grid line settings
            gridLines: {
              offsetGridLines: true
            }
          }]
        },
        elements: {
          rectangle: {
            borderSkipped: 'left'
          }
        },
        tooltips: {
          callbacks: {
            title: function title(tooltipItems, data) {
              // Pick first xLabel for now
              var title = '';

              if (tooltipItems.length > 0) {
                if (tooltipItems[0].yLabel) {
                  title = tooltipItems[0].yLabel;
                } else if (data.labels.length > 0 && tooltipItems[0].index < data.labels.length) {
                  title = data.labels[tooltipItems[0].index];
                }
              }

              return title;
            },
            label: function label(tooltipItem, data) {
              var datasetLabel = data.datasets[tooltipItem.datasetIndex].label || '';
              return datasetLabel + ': ' + tooltipItem.xLabel;
            }
          }
        }
      };
      Chart.controllers.horizontalBar = Chart.controllers.bar.extend({
        // Correctly calculate the bar width accounting for stacks and the fact that not all bars are visible
        getStackCount: function getStackCount() {
          var me = this;
          var meta = me.getMeta();
          var xScale = me.getScaleForId(meta.xAxisID);
          var stacks = [];
          helpers.each(me.chart.data.datasets, function (dataset, datasetIndex) {
            var dsMeta = me.chart.getDatasetMeta(datasetIndex);

            if (dsMeta.bar && me.chart.isDatasetVisible(datasetIndex) && (xScale.options.stacked === false || xScale.options.stacked === true && stacks.indexOf(dsMeta.stack) === -1 || xScale.options.stacked === undefined && (dsMeta.stack === undefined || stacks.indexOf(dsMeta.stack) === -1))) {
              stacks.push(dsMeta.stack);
            }
          }, me);
          return stacks.length;
        },
        updateElement: function updateElement(rectangle, index, reset) {
          var me = this;
          var meta = me.getMeta();
          var xScale = me.getScaleForId(meta.xAxisID);
          var yScale = me.getScaleForId(meta.yAxisID);
          var scaleBase = xScale.getBasePixel();
          var custom = rectangle.custom || {};
          var dataset = me.getDataset();
          var rectangleElementOptions = me.chart.options.elements.rectangle;
          rectangle._xScale = xScale;
          rectangle._yScale = yScale;
          rectangle._datasetIndex = me.index;
          rectangle._index = index;
          var ruler = me.getRuler(index); // The index argument for compatible

          rectangle._model = {
            x: reset ? scaleBase : me.calculateBarX(index, me.index),
            y: me.calculateBarY(index, me.index, ruler),
            // Tooltip
            label: me.chart.data.labels[index],
            datasetLabel: dataset.label,
            // Appearance
            horizontal: true,
            base: reset ? scaleBase : me.calculateBarBase(me.index, index),
            height: me.calculateBarHeight(ruler),
            backgroundColor: custom.backgroundColor ? custom.backgroundColor : helpers.getValueAtIndexOrDefault(dataset.backgroundColor, index, rectangleElementOptions.backgroundColor),
            borderSkipped: custom.borderSkipped ? custom.borderSkipped : rectangleElementOptions.borderSkipped,
            borderColor: custom.borderColor ? custom.borderColor : helpers.getValueAtIndexOrDefault(dataset.borderColor, index, rectangleElementOptions.borderColor),
            borderWidth: custom.borderWidth ? custom.borderWidth : helpers.getValueAtIndexOrDefault(dataset.borderWidth, index, rectangleElementOptions.borderWidth)
          };
          rectangle.pivot();
        },
        calculateBarBase: function calculateBarBase(datasetIndex, index) {
          var me = this;
          var meta = me.getMeta();
          var xScale = me.getScaleForId(meta.xAxisID);
          var base = xScale.getBaseValue();
          var originalBase = base;

          if (xScale.options.stacked || xScale.options.stacked === undefined && meta.stack !== undefined) {
            var chart = me.chart;
            var datasets = chart.data.datasets;
            var value = Number(datasets[datasetIndex].data[index]);

            for (var i = 0; i < datasetIndex; i++) {
              var currentDs = datasets[i];
              var currentDsMeta = chart.getDatasetMeta(i);

              if (currentDsMeta.bar && currentDsMeta.xAxisID === xScale.id && chart.isDatasetVisible(i) && meta.stack === currentDsMeta.stack) {
                var currentVal = Number(currentDs.data[index]);
                base += value < 0 ? Math.min(currentVal, originalBase) : Math.max(currentVal, originalBase);
              }
            }

            return xScale.getPixelForValue(base);
          }

          return xScale.getBasePixel();
        },
        getRuler: function getRuler() {
          var me = this;
          var meta = me.getMeta();
          var yScale = me.getScaleForId(meta.yAxisID);
          var stackCount = me.getStackCount();
          var tickHeight = yScale.height / yScale.ticks.length;
          var categoryHeight = tickHeight * yScale.options.categoryPercentage;
          var categorySpacing = (tickHeight - tickHeight * yScale.options.categoryPercentage) / 2;
          var fullBarHeight = categoryHeight / stackCount;
          var barHeight = fullBarHeight * yScale.options.barPercentage;
          var barSpacing = fullBarHeight - fullBarHeight * yScale.options.barPercentage;
          return {
            stackCount: stackCount,
            tickHeight: tickHeight,
            categoryHeight: categoryHeight,
            categorySpacing: categorySpacing,
            fullBarHeight: fullBarHeight,
            barHeight: barHeight,
            barSpacing: barSpacing
          };
        },
        calculateBarHeight: function calculateBarHeight(ruler) {
          var me = this;
          var meta = me.getMeta();
          var yScale = me.getScaleForId(meta.yAxisID);

          if (yScale.options.barThickness) {
            return yScale.options.barThickness;
          }

          return ruler.barHeight;
        },
        // Get stack index from the given dataset index accounting for stacks and the fact that not all bars are visible
        getStackIndex: function getStackIndex(datasetIndex) {
          var me = this;
          var meta = me.chart.getDatasetMeta(datasetIndex);
          var xScale = me.getScaleForId(meta.xAxisID);
          var dsMeta, j;
          var stacks = [meta.stack];

          for (j = 0; j < datasetIndex; ++j) {
            dsMeta = this.chart.getDatasetMeta(j);

            if (dsMeta.bar && this.chart.isDatasetVisible(j) && (xScale.options.stacked === false || xScale.options.stacked === true && stacks.indexOf(dsMeta.stack) === -1 || xScale.options.stacked === undefined && (dsMeta.stack === undefined || stacks.indexOf(dsMeta.stack) === -1))) {
              stacks.push(dsMeta.stack);
            }
          }

          return stacks.length - 1;
        },
        calculateBarX: function calculateBarX(index, datasetIndex) {
          var me = this;
          var meta = me.getMeta();
          var xScale = me.getScaleForId(meta.xAxisID);
          var value = Number(me.getDataset().data[index]);

          if (xScale.options.stacked || xScale.options.stacked === undefined && meta.stack !== undefined) {
            var base = xScale.getBaseValue();
            var sumPos = base,
                sumNeg = base;

            for (var i = 0; i < datasetIndex; i++) {
              var ds = me.chart.data.datasets[i];
              var dsMeta = me.chart.getDatasetMeta(i);

              if (dsMeta.bar && dsMeta.xAxisID === xScale.id && me.chart.isDatasetVisible(i) && meta.stack === dsMeta.stack) {
                var stackedVal = Number(ds.data[index]);

                if (stackedVal < 0) {
                  sumNeg += stackedVal || 0;
                } else {
                  sumPos += stackedVal || 0;
                }
              }
            }

            if (value < 0) {
              return xScale.getPixelForValue(sumNeg + value);
            }

            return xScale.getPixelForValue(sumPos + value);
          }

          return xScale.getPixelForValue(value);
        },
        calculateBarY: function calculateBarY(index, datasetIndex, ruler) {
          var me = this;
          var meta = me.getMeta();
          var yScale = me.getScaleForId(meta.yAxisID);
          var stackIndex = me.getStackIndex(datasetIndex);
          var topTick = yScale.getPixelForValue(null, index, datasetIndex, me.chart.isCombo);
          topTick -= me.chart.isCombo ? ruler.tickHeight / 2 : 0;
          return topTick + ruler.barHeight / 2 + ruler.categorySpacing + ruler.barHeight * stackIndex + ruler.barSpacing / 2 + ruler.barSpacing * stackIndex;
        }
      });
    };
    /***/

  },

  /***/
  "./node_modules/chart.js/src/controllers/controller.bubble.js": function node_modulesChartJsSrcControllersControllerBubbleJs(module, exports, __webpack_require__) {
    "use strict";

    module.exports = function (Chart) {
      var helpers = Chart.helpers;
      Chart.defaults.bubble = {
        hover: {
          mode: 'single'
        },
        scales: {
          xAxes: [{
            type: 'linear',
            // bubble should probably use a linear scale by default
            position: 'bottom',
            id: 'x-axis-0' // need an ID so datasets can reference the scale

          }],
          yAxes: [{
            type: 'linear',
            position: 'left',
            id: 'y-axis-0'
          }]
        },
        tooltips: {
          callbacks: {
            title: function title() {
              // Title doesn't make sense for scatter since we format the data as a point
              return '';
            },
            label: function label(tooltipItem, data) {
              var datasetLabel = data.datasets[tooltipItem.datasetIndex].label || '';
              var dataPoint = data.datasets[tooltipItem.datasetIndex].data[tooltipItem.index];
              return datasetLabel + ': (' + tooltipItem.xLabel + ', ' + tooltipItem.yLabel + ', ' + dataPoint.r + ')';
            }
          }
        }
      };
      Chart.controllers.bubble = Chart.DatasetController.extend({
        dataElementType: Chart.elements.Point,
        update: function update(reset) {
          var me = this;
          var meta = me.getMeta();
          var points = meta.data; // Update Points

          helpers.each(points, function (point, index) {
            me.updateElement(point, index, reset);
          });
        },
        updateElement: function updateElement(point, index, reset) {
          var me = this;
          var meta = me.getMeta();
          var xScale = me.getScaleForId(meta.xAxisID);
          var yScale = me.getScaleForId(meta.yAxisID);
          var custom = point.custom || {};
          var dataset = me.getDataset();
          var data = dataset.data[index];
          var pointElementOptions = me.chart.options.elements.point;
          var dsIndex = me.index;
          helpers.extend(point, {
            // Utility
            _xScale: xScale,
            _yScale: yScale,
            _datasetIndex: dsIndex,
            _index: index,
            // Desired view properties
            _model: {
              x: reset ? xScale.getPixelForDecimal(0.5) : xScale.getPixelForValue(typeof data === 'object' ? data : NaN, index, dsIndex, me.chart.isCombo),
              y: reset ? yScale.getBasePixel() : yScale.getPixelForValue(data, index, dsIndex),
              // Appearance
              radius: reset ? 0 : custom.radius ? custom.radius : me.getRadius(data),
              // Tooltip
              hitRadius: custom.hitRadius ? custom.hitRadius : helpers.getValueAtIndexOrDefault(dataset.hitRadius, index, pointElementOptions.hitRadius)
            }
          }); // Trick to reset the styles of the point

          Chart.DatasetController.prototype.removeHoverStyle.call(me, point, pointElementOptions);
          var model = point._model;
          model.skip = custom.skip ? custom.skip : isNaN(model.x) || isNaN(model.y);
          point.pivot();
        },
        getRadius: function getRadius(value) {
          return value.r || this.chart.options.elements.point.radius;
        },
        setHoverStyle: function setHoverStyle(point) {
          var me = this;
          Chart.DatasetController.prototype.setHoverStyle.call(me, point); // Radius

          var dataset = me.chart.data.datasets[point._datasetIndex];
          var index = point._index;
          var custom = point.custom || {};
          var model = point._model;
          model.radius = custom.hoverRadius ? custom.hoverRadius : helpers.getValueAtIndexOrDefault(dataset.hoverRadius, index, me.chart.options.elements.point.hoverRadius) + me.getRadius(dataset.data[index]);
        },
        removeHoverStyle: function removeHoverStyle(point) {
          var me = this;
          Chart.DatasetController.prototype.removeHoverStyle.call(me, point, me.chart.options.elements.point);
          var dataVal = me.chart.data.datasets[point._datasetIndex].data[point._index];
          var custom = point.custom || {};
          var model = point._model;
          model.radius = custom.radius ? custom.radius : me.getRadius(dataVal);
        }
      });
    };
    /***/

  },

  /***/
  "./node_modules/chart.js/src/controllers/controller.doughnut.js": function node_modulesChartJsSrcControllersControllerDoughnutJs(module, exports, __webpack_require__) {
    "use strict";

    module.exports = function (Chart) {
      var helpers = Chart.helpers,
          defaults = Chart.defaults;
      defaults.doughnut = {
        animation: {
          // Boolean - Whether we animate the rotation of the Doughnut
          animateRotate: true,
          // Boolean - Whether we animate scaling the Doughnut from the centre
          animateScale: false
        },
        aspectRatio: 1,
        hover: {
          mode: 'single'
        },
        legendCallback: function legendCallback(chart) {
          var text = [];
          text.push('<ul class="' + chart.id + '-legend">');
          var data = chart.data;
          var datasets = data.datasets;
          var labels = data.labels;

          if (datasets.length) {
            for (var i = 0; i < datasets[0].data.length; ++i) {
              text.push('<li><span style="background-color:' + datasets[0].backgroundColor[i] + '"></span>');

              if (labels[i]) {
                text.push(labels[i]);
              }

              text.push('</li>');
            }
          }

          text.push('</ul>');
          return text.join('');
        },
        legend: {
          labels: {
            generateLabels: function generateLabels(chart) {
              var data = chart.data;

              if (data.labels.length && data.datasets.length) {
                return data.labels.map(function (label, i) {
                  var meta = chart.getDatasetMeta(0);
                  var ds = data.datasets[0];
                  var arc = meta.data[i];
                  var custom = arc && arc.custom || {};
                  var getValueAtIndexOrDefault = helpers.getValueAtIndexOrDefault;
                  var arcOpts = chart.options.elements.arc;
                  var fill = custom.backgroundColor ? custom.backgroundColor : getValueAtIndexOrDefault(ds.backgroundColor, i, arcOpts.backgroundColor);
                  var stroke = custom.borderColor ? custom.borderColor : getValueAtIndexOrDefault(ds.borderColor, i, arcOpts.borderColor);
                  var bw = custom.borderWidth ? custom.borderWidth : getValueAtIndexOrDefault(ds.borderWidth, i, arcOpts.borderWidth);
                  return {
                    text: label,
                    fillStyle: fill,
                    strokeStyle: stroke,
                    lineWidth: bw,
                    hidden: isNaN(ds.data[i]) || meta.data[i].hidden,
                    // Extra data used for toggling the correct item
                    index: i
                  };
                });
              }

              return [];
            }
          },
          onClick: function onClick(e, legendItem) {
            var index = legendItem.index;
            var chart = this.chart;
            var i, ilen, meta;

            for (i = 0, ilen = (chart.data.datasets || []).length; i < ilen; ++i) {
              meta = chart.getDatasetMeta(i); // toggle visibility of index if exists

              if (meta.data[index]) {
                meta.data[index].hidden = !meta.data[index].hidden;
              }
            }

            chart.update();
          }
        },
        // The percentage of the chart that we cut out of the middle.
        cutoutPercentage: 50,
        // The rotation of the chart, where the first data arc begins.
        rotation: Math.PI * -0.5,
        // The total circumference of the chart.
        circumference: Math.PI * 2.0,
        // Need to override these to give a nice default
        tooltips: {
          callbacks: {
            title: function title() {
              return '';
            },
            label: function label(tooltipItem, data) {
              var dataLabel = data.labels[tooltipItem.index];
              var value = ': ' + data.datasets[tooltipItem.datasetIndex].data[tooltipItem.index];

              if (helpers.isArray(dataLabel)) {
                // show value on first line of multiline label
                // need to clone because we are changing the value
                dataLabel = dataLabel.slice();
                dataLabel[0] += value;
              } else {
                dataLabel += value;
              }

              return dataLabel;
            }
          }
        }
      };
      defaults.pie = helpers.clone(defaults.doughnut);
      helpers.extend(defaults.pie, {
        cutoutPercentage: 0
      });
      Chart.controllers.doughnut = Chart.controllers.pie = Chart.DatasetController.extend({
        dataElementType: Chart.elements.Arc,
        linkScales: helpers.noop,
        // Get index of the dataset in relation to the visible datasets. This allows determining the inner and outer radius correctly
        getRingIndex: function getRingIndex(datasetIndex) {
          var ringIndex = 0;

          for (var j = 0; j < datasetIndex; ++j) {
            if (this.chart.isDatasetVisible(j)) {
              ++ringIndex;
            }
          }

          return ringIndex;
        },
        update: function update(reset) {
          var me = this;
          var chart = me.chart,
              chartArea = chart.chartArea,
              opts = chart.options,
              arcOpts = opts.elements.arc,
              availableWidth = chartArea.right - chartArea.left - arcOpts.borderWidth,
              availableHeight = chartArea.bottom - chartArea.top - arcOpts.borderWidth,
              minSize = Math.min(availableWidth, availableHeight),
              offset = {
            x: 0,
            y: 0
          },
              meta = me.getMeta(),
              cutoutPercentage = opts.cutoutPercentage,
              circumference = opts.circumference; // If the chart's circumference isn't a full circle, calculate minSize as a ratio of the width/height of the arc

          if (circumference < Math.PI * 2.0) {
            var startAngle = opts.rotation % (Math.PI * 2.0);
            startAngle += Math.PI * 2.0 * (startAngle >= Math.PI ? -1 : startAngle < -Math.PI ? 1 : 0);
            var endAngle = startAngle + circumference;
            var start = {
              x: Math.cos(startAngle),
              y: Math.sin(startAngle)
            };
            var end = {
              x: Math.cos(endAngle),
              y: Math.sin(endAngle)
            };
            var contains0 = startAngle <= 0 && 0 <= endAngle || startAngle <= Math.PI * 2.0 && Math.PI * 2.0 <= endAngle;
            var contains90 = startAngle <= Math.PI * 0.5 && Math.PI * 0.5 <= endAngle || startAngle <= Math.PI * 2.5 && Math.PI * 2.5 <= endAngle;
            var contains180 = startAngle <= -Math.PI && -Math.PI <= endAngle || startAngle <= Math.PI && Math.PI <= endAngle;
            var contains270 = startAngle <= -Math.PI * 0.5 && -Math.PI * 0.5 <= endAngle || startAngle <= Math.PI * 1.5 && Math.PI * 1.5 <= endAngle;
            var cutout = cutoutPercentage / 100.0;
            var min = {
              x: contains180 ? -1 : Math.min(start.x * (start.x < 0 ? 1 : cutout), end.x * (end.x < 0 ? 1 : cutout)),
              y: contains270 ? -1 : Math.min(start.y * (start.y < 0 ? 1 : cutout), end.y * (end.y < 0 ? 1 : cutout))
            };
            var max = {
              x: contains0 ? 1 : Math.max(start.x * (start.x > 0 ? 1 : cutout), end.x * (end.x > 0 ? 1 : cutout)),
              y: contains90 ? 1 : Math.max(start.y * (start.y > 0 ? 1 : cutout), end.y * (end.y > 0 ? 1 : cutout))
            };
            var size = {
              width: (max.x - min.x) * 0.5,
              height: (max.y - min.y) * 0.5
            };
            minSize = Math.min(availableWidth / size.width, availableHeight / size.height);
            offset = {
              x: (max.x + min.x) * -0.5,
              y: (max.y + min.y) * -0.5
            };
          }

          chart.borderWidth = me.getMaxBorderWidth(meta.data);
          chart.outerRadius = Math.max((minSize - chart.borderWidth) / 2, 0);
          chart.innerRadius = Math.max(cutoutPercentage ? chart.outerRadius / 100 * cutoutPercentage : 0, 0);
          chart.radiusLength = (chart.outerRadius - chart.innerRadius) / chart.getVisibleDatasetCount();
          chart.offsetX = offset.x * chart.outerRadius;
          chart.offsetY = offset.y * chart.outerRadius;
          meta.total = me.calculateTotal();
          me.outerRadius = chart.outerRadius - chart.radiusLength * me.getRingIndex(me.index);
          me.innerRadius = Math.max(me.outerRadius - chart.radiusLength, 0);
          helpers.each(meta.data, function (arc, index) {
            me.updateElement(arc, index, reset);
          });
        },
        updateElement: function updateElement(arc, index, reset) {
          var me = this;
          var chart = me.chart,
              chartArea = chart.chartArea,
              opts = chart.options,
              animationOpts = opts.animation,
              centerX = (chartArea.left + chartArea.right) / 2,
              centerY = (chartArea.top + chartArea.bottom) / 2,
              startAngle = opts.rotation,
              // non reset case handled later
          endAngle = opts.rotation,
              // non reset case handled later
          dataset = me.getDataset(),
              circumference = reset && animationOpts.animateRotate ? 0 : arc.hidden ? 0 : me.calculateCircumference(dataset.data[index]) * (opts.circumference / (2.0 * Math.PI)),
              innerRadius = reset && animationOpts.animateScale ? 0 : me.innerRadius,
              outerRadius = reset && animationOpts.animateScale ? 0 : me.outerRadius,
              valueAtIndexOrDefault = helpers.getValueAtIndexOrDefault;
          helpers.extend(arc, {
            // Utility
            _datasetIndex: me.index,
            _index: index,
            // Desired view properties
            _model: {
              x: centerX + chart.offsetX,
              y: centerY + chart.offsetY,
              startAngle: startAngle,
              endAngle: endAngle,
              circumference: circumference,
              outerRadius: outerRadius,
              innerRadius: innerRadius,
              label: valueAtIndexOrDefault(dataset.label, index, chart.data.labels[index])
            }
          });
          var model = arc._model; // Resets the visual styles

          this.removeHoverStyle(arc); // Set correct angles if not resetting

          if (!reset || !animationOpts.animateRotate) {
            if (index === 0) {
              model.startAngle = opts.rotation;
            } else {
              model.startAngle = me.getMeta().data[index - 1]._model.endAngle;
            }

            model.endAngle = model.startAngle + model.circumference;
          }

          arc.pivot();
        },
        removeHoverStyle: function removeHoverStyle(arc) {
          Chart.DatasetController.prototype.removeHoverStyle.call(this, arc, this.chart.options.elements.arc);
        },
        calculateTotal: function calculateTotal() {
          var dataset = this.getDataset();
          var meta = this.getMeta();
          var total = 0;
          var value;
          helpers.each(meta.data, function (element, index) {
            value = dataset.data[index];

            if (!isNaN(value) && !element.hidden) {
              total += Math.abs(value);
            }
          });
          /* if (total === 0) {
          	total = NaN;
          }*/

          return total;
        },
        calculateCircumference: function calculateCircumference(value) {
          var total = this.getMeta().total;

          if (total > 0 && !isNaN(value)) {
            return Math.PI * 2.0 * (value / total);
          }

          return 0;
        },
        // gets the max border or hover width to properly scale pie charts
        getMaxBorderWidth: function getMaxBorderWidth(elements) {
          var max = 0,
              index = this.index,
              length = elements.length,
              borderWidth,
              hoverWidth;

          for (var i = 0; i < length; i++) {
            borderWidth = elements[i]._model ? elements[i]._model.borderWidth : 0;
            hoverWidth = elements[i]._chart ? elements[i]._chart.config.data.datasets[index].hoverBorderWidth : 0;
            max = borderWidth > max ? borderWidth : max;
            max = hoverWidth > max ? hoverWidth : max;
          }

          return max;
        }
      });
    };
    /***/

  },

  /***/
  "./node_modules/chart.js/src/controllers/controller.line.js": function node_modulesChartJsSrcControllersControllerLineJs(module, exports, __webpack_require__) {
    "use strict";

    module.exports = function (Chart) {
      var helpers = Chart.helpers;
      Chart.defaults.line = {
        showLines: true,
        spanGaps: false,
        hover: {
          mode: 'label'
        },
        scales: {
          xAxes: [{
            type: 'category',
            id: 'x-axis-0'
          }],
          yAxes: [{
            type: 'linear',
            id: 'y-axis-0'
          }]
        }
      };

      function lineEnabled(dataset, options) {
        return helpers.getValueOrDefault(dataset.showLine, options.showLines);
      }

      Chart.controllers.line = Chart.DatasetController.extend({
        datasetElementType: Chart.elements.Line,
        dataElementType: Chart.elements.Point,
        update: function update(reset) {
          var me = this;
          var meta = me.getMeta();
          var line = meta.dataset;
          var points = meta.data || [];
          var options = me.chart.options;
          var lineElementOptions = options.elements.line;
          var scale = me.getScaleForId(meta.yAxisID);
          var i, ilen, custom;
          var dataset = me.getDataset();
          var showLine = lineEnabled(dataset, options); // Update Line

          if (showLine) {
            custom = line.custom || {}; // Compatibility: If the properties are defined with only the old name, use those values

            if (dataset.tension !== undefined && dataset.lineTension === undefined) {
              dataset.lineTension = dataset.tension;
            } // Utility


            line._scale = scale;
            line._datasetIndex = me.index; // Data

            line._children = points; // Model

            line._model = {
              // Appearance
              // The default behavior of lines is to break at null values, according
              // to https://github.com/chartjs/Chart.js/issues/2435#issuecomment-216718158
              // This option gives lines the ability to span gaps
              spanGaps: dataset.spanGaps ? dataset.spanGaps : options.spanGaps,
              tension: custom.tension ? custom.tension : helpers.getValueOrDefault(dataset.lineTension, lineElementOptions.tension),
              backgroundColor: custom.backgroundColor ? custom.backgroundColor : dataset.backgroundColor || lineElementOptions.backgroundColor,
              borderWidth: custom.borderWidth ? custom.borderWidth : dataset.borderWidth || lineElementOptions.borderWidth,
              borderColor: custom.borderColor ? custom.borderColor : dataset.borderColor || lineElementOptions.borderColor,
              borderCapStyle: custom.borderCapStyle ? custom.borderCapStyle : dataset.borderCapStyle || lineElementOptions.borderCapStyle,
              borderDash: custom.borderDash ? custom.borderDash : dataset.borderDash || lineElementOptions.borderDash,
              borderDashOffset: custom.borderDashOffset ? custom.borderDashOffset : dataset.borderDashOffset || lineElementOptions.borderDashOffset,
              borderJoinStyle: custom.borderJoinStyle ? custom.borderJoinStyle : dataset.borderJoinStyle || lineElementOptions.borderJoinStyle,
              fill: custom.fill ? custom.fill : dataset.fill !== undefined ? dataset.fill : lineElementOptions.fill,
              steppedLine: custom.steppedLine ? custom.steppedLine : helpers.getValueOrDefault(dataset.steppedLine, lineElementOptions.stepped),
              cubicInterpolationMode: custom.cubicInterpolationMode ? custom.cubicInterpolationMode : helpers.getValueOrDefault(dataset.cubicInterpolationMode, lineElementOptions.cubicInterpolationMode),
              // Scale
              scaleTop: scale.top,
              scaleBottom: scale.bottom,
              scaleZero: scale.getBasePixel()
            };
            line.pivot();
          } // Update Points


          for (i = 0, ilen = points.length; i < ilen; ++i) {
            me.updateElement(points[i], i, reset);
          }

          if (showLine && line._model.tension !== 0) {
            me.updateBezierControlPoints();
          } // Now pivot the point for animation


          for (i = 0, ilen = points.length; i < ilen; ++i) {
            points[i].pivot();
          }
        },
        getPointBackgroundColor: function getPointBackgroundColor(point, index) {
          var backgroundColor = this.chart.options.elements.point.backgroundColor;
          var dataset = this.getDataset();
          var custom = point.custom || {};

          if (custom.backgroundColor) {
            backgroundColor = custom.backgroundColor;
          } else if (dataset.pointBackgroundColor) {
            backgroundColor = helpers.getValueAtIndexOrDefault(dataset.pointBackgroundColor, index, backgroundColor);
          } else if (dataset.backgroundColor) {
            backgroundColor = dataset.backgroundColor;
          }

          return backgroundColor;
        },
        getPointBorderColor: function getPointBorderColor(point, index) {
          var borderColor = this.chart.options.elements.point.borderColor;
          var dataset = this.getDataset();
          var custom = point.custom || {};

          if (custom.borderColor) {
            borderColor = custom.borderColor;
          } else if (dataset.pointBorderColor) {
            borderColor = helpers.getValueAtIndexOrDefault(dataset.pointBorderColor, index, borderColor);
          } else if (dataset.borderColor) {
            borderColor = dataset.borderColor;
          }

          return borderColor;
        },
        getPointBorderWidth: function getPointBorderWidth(point, index) {
          var borderWidth = this.chart.options.elements.point.borderWidth;
          var dataset = this.getDataset();
          var custom = point.custom || {};

          if (!isNaN(custom.borderWidth)) {
            borderWidth = custom.borderWidth;
          } else if (!isNaN(dataset.pointBorderWidth)) {
            borderWidth = helpers.getValueAtIndexOrDefault(dataset.pointBorderWidth, index, borderWidth);
          } else if (!isNaN(dataset.borderWidth)) {
            borderWidth = dataset.borderWidth;
          }

          return borderWidth;
        },
        updateElement: function updateElement(point, index, reset) {
          var me = this;
          var meta = me.getMeta();
          var custom = point.custom || {};
          var dataset = me.getDataset();
          var datasetIndex = me.index;
          var value = dataset.data[index];
          var yScale = me.getScaleForId(meta.yAxisID);
          var xScale = me.getScaleForId(meta.xAxisID);
          var pointOptions = me.chart.options.elements.point;
          var x, y;
          var labels = me.chart.data.labels || [];
          var includeOffset = labels.length === 1 || dataset.data.length === 1 || me.chart.isCombo; // Compatibility: If the properties are defined with only the old name, use those values

          if (dataset.radius !== undefined && dataset.pointRadius === undefined) {
            dataset.pointRadius = dataset.radius;
          }

          if (dataset.hitRadius !== undefined && dataset.pointHitRadius === undefined) {
            dataset.pointHitRadius = dataset.hitRadius;
          }

          x = xScale.getPixelForValue(typeof value === 'object' ? value : NaN, index, datasetIndex, includeOffset);
          y = reset ? yScale.getBasePixel() : me.calculatePointY(value, index, datasetIndex); // Utility

          point._xScale = xScale;
          point._yScale = yScale;
          point._datasetIndex = datasetIndex;
          point._index = index; // Desired view properties

          point._model = {
            x: x,
            y: y,
            skip: custom.skip || isNaN(x) || isNaN(y),
            // Appearance
            radius: custom.radius || helpers.getValueAtIndexOrDefault(dataset.pointRadius, index, pointOptions.radius),
            pointStyle: custom.pointStyle || helpers.getValueAtIndexOrDefault(dataset.pointStyle, index, pointOptions.pointStyle),
            backgroundColor: me.getPointBackgroundColor(point, index),
            borderColor: me.getPointBorderColor(point, index),
            borderWidth: me.getPointBorderWidth(point, index),
            tension: meta.dataset._model ? meta.dataset._model.tension : 0,
            steppedLine: meta.dataset._model ? meta.dataset._model.steppedLine : false,
            // Tooltip
            hitRadius: custom.hitRadius || helpers.getValueAtIndexOrDefault(dataset.pointHitRadius, index, pointOptions.hitRadius)
          };
        },
        calculatePointY: function calculatePointY(value, index, datasetIndex) {
          var me = this;
          var chart = me.chart;
          var meta = me.getMeta();
          var yScale = me.getScaleForId(meta.yAxisID);
          var sumPos = 0;
          var sumNeg = 0;
          var i, ds, dsMeta;

          if (yScale.options.stacked) {
            for (i = 0; i < datasetIndex; i++) {
              ds = chart.data.datasets[i];
              dsMeta = chart.getDatasetMeta(i);

              if (dsMeta.type === 'line' && dsMeta.yAxisID === yScale.id && chart.isDatasetVisible(i)) {
                var stackedRightValue = Number(yScale.getRightValue(ds.data[index]));

                if (stackedRightValue < 0) {
                  sumNeg += stackedRightValue || 0;
                } else {
                  sumPos += stackedRightValue || 0;
                }
              }
            }

            var rightValue = Number(yScale.getRightValue(value));

            if (rightValue < 0) {
              return yScale.getPixelForValue(sumNeg + rightValue);
            }

            return yScale.getPixelForValue(sumPos + rightValue);
          }

          return yScale.getPixelForValue(value);
        },
        updateBezierControlPoints: function updateBezierControlPoints() {
          var me = this;
          var meta = me.getMeta();
          var area = me.chart.chartArea;
          var points = meta.data || [];
          var i, ilen, point, model, controlPoints; // Only consider points that are drawn in case the spanGaps option is used

          if (meta.dataset._model.spanGaps) {
            points = points.filter(function (pt) {
              return !pt._model.skip;
            });
          }

          function capControlPoint(pt, min, max) {
            return Math.max(Math.min(pt, max), min);
          }

          if (meta.dataset._model.cubicInterpolationMode === 'monotone') {
            helpers.splineCurveMonotone(points);
          } else {
            for (i = 0, ilen = points.length; i < ilen; ++i) {
              point = points[i];
              model = point._model;
              controlPoints = helpers.splineCurve(helpers.previousItem(points, i)._model, model, helpers.nextItem(points, i)._model, meta.dataset._model.tension);
              model.controlPointPreviousX = controlPoints.previous.x;
              model.controlPointPreviousY = controlPoints.previous.y;
              model.controlPointNextX = controlPoints.next.x;
              model.controlPointNextY = controlPoints.next.y;
            }
          }

          if (me.chart.options.elements.line.capBezierPoints) {
            for (i = 0, ilen = points.length; i < ilen; ++i) {
              model = points[i]._model;
              model.controlPointPreviousX = capControlPoint(model.controlPointPreviousX, area.left, area.right);
              model.controlPointPreviousY = capControlPoint(model.controlPointPreviousY, area.top, area.bottom);
              model.controlPointNextX = capControlPoint(model.controlPointNextX, area.left, area.right);
              model.controlPointNextY = capControlPoint(model.controlPointNextY, area.top, area.bottom);
            }
          }
        },
        draw: function draw(ease) {
          var me = this;
          var meta = me.getMeta();
          var points = meta.data || [];
          var easingDecimal = ease || 1;
          var i, ilen; // Transition Point Locations

          for (i = 0, ilen = points.length; i < ilen; ++i) {
            points[i].transition(easingDecimal);
          }

          Chart.canvasHelpers.clipArea(me.chart.chart.ctx, me.chart.chartArea); // Transition and Draw the line

          if (lineEnabled(me.getDataset(), me.chart.options)) {
            meta.dataset.transition(easingDecimal).draw();
          }

          Chart.canvasHelpers.unclipArea(me.chart.chart.ctx); // Draw the points

          for (i = 0, ilen = points.length; i < ilen; ++i) {
            points[i].draw(me.chart.chartArea);
          }
        },
        setHoverStyle: function setHoverStyle(point) {
          // Point
          var dataset = this.chart.data.datasets[point._datasetIndex];
          var index = point._index;
          var custom = point.custom || {};
          var model = point._model;
          model.radius = custom.hoverRadius || helpers.getValueAtIndexOrDefault(dataset.pointHoverRadius, index, this.chart.options.elements.point.hoverRadius);
          model.backgroundColor = custom.hoverBackgroundColor || helpers.getValueAtIndexOrDefault(dataset.pointHoverBackgroundColor, index, helpers.getHoverColor(model.backgroundColor));
          model.borderColor = custom.hoverBorderColor || helpers.getValueAtIndexOrDefault(dataset.pointHoverBorderColor, index, helpers.getHoverColor(model.borderColor));
          model.borderWidth = custom.hoverBorderWidth || helpers.getValueAtIndexOrDefault(dataset.pointHoverBorderWidth, index, model.borderWidth);
        },
        removeHoverStyle: function removeHoverStyle(point) {
          var me = this;
          var dataset = me.chart.data.datasets[point._datasetIndex];
          var index = point._index;
          var custom = point.custom || {};
          var model = point._model; // Compatibility: If the properties are defined with only the old name, use those values

          if (dataset.radius !== undefined && dataset.pointRadius === undefined) {
            dataset.pointRadius = dataset.radius;
          }

          model.radius = custom.radius || helpers.getValueAtIndexOrDefault(dataset.pointRadius, index, me.chart.options.elements.point.radius);
          model.backgroundColor = me.getPointBackgroundColor(point, index);
          model.borderColor = me.getPointBorderColor(point, index);
          model.borderWidth = me.getPointBorderWidth(point, index);
        }
      });
    };
    /***/

  },

  /***/
  "./node_modules/chart.js/src/controllers/controller.polarArea.js": function node_modulesChartJsSrcControllersControllerPolarAreaJs(module, exports, __webpack_require__) {
    "use strict";

    module.exports = function (Chart) {
      var helpers = Chart.helpers;
      Chart.defaults.polarArea = {
        scale: {
          type: 'radialLinear',
          lineArc: true,
          // so that lines are circular
          ticks: {
            beginAtZero: true
          }
        },
        // Boolean - Whether to animate the rotation of the chart
        animation: {
          animateRotate: true,
          animateScale: true
        },
        startAngle: -0.5 * Math.PI,
        aspectRatio: 1,
        legendCallback: function legendCallback(chart) {
          var text = [];
          text.push('<ul class="' + chart.id + '-legend">');
          var data = chart.data;
          var datasets = data.datasets;
          var labels = data.labels;

          if (datasets.length) {
            for (var i = 0; i < datasets[0].data.length; ++i) {
              text.push('<li><span style="background-color:' + datasets[0].backgroundColor[i] + '"></span>');

              if (labels[i]) {
                text.push(labels[i]);
              }

              text.push('</li>');
            }
          }

          text.push('</ul>');
          return text.join('');
        },
        legend: {
          labels: {
            generateLabels: function generateLabels(chart) {
              var data = chart.data;

              if (data.labels.length && data.datasets.length) {
                return data.labels.map(function (label, i) {
                  var meta = chart.getDatasetMeta(0);
                  var ds = data.datasets[0];
                  var arc = meta.data[i];
                  var custom = arc.custom || {};
                  var getValueAtIndexOrDefault = helpers.getValueAtIndexOrDefault;
                  var arcOpts = chart.options.elements.arc;
                  var fill = custom.backgroundColor ? custom.backgroundColor : getValueAtIndexOrDefault(ds.backgroundColor, i, arcOpts.backgroundColor);
                  var stroke = custom.borderColor ? custom.borderColor : getValueAtIndexOrDefault(ds.borderColor, i, arcOpts.borderColor);
                  var bw = custom.borderWidth ? custom.borderWidth : getValueAtIndexOrDefault(ds.borderWidth, i, arcOpts.borderWidth);
                  return {
                    text: label,
                    fillStyle: fill,
                    strokeStyle: stroke,
                    lineWidth: bw,
                    hidden: isNaN(ds.data[i]) || meta.data[i].hidden,
                    // Extra data used for toggling the correct item
                    index: i
                  };
                });
              }

              return [];
            }
          },
          onClick: function onClick(e, legendItem) {
            var index = legendItem.index;
            var chart = this.chart;
            var i, ilen, meta;

            for (i = 0, ilen = (chart.data.datasets || []).length; i < ilen; ++i) {
              meta = chart.getDatasetMeta(i);
              meta.data[index].hidden = !meta.data[index].hidden;
            }

            chart.update();
          }
        },
        // Need to override these to give a nice default
        tooltips: {
          callbacks: {
            title: function title() {
              return '';
            },
            label: function label(tooltipItem, data) {
              return data.labels[tooltipItem.index] + ': ' + tooltipItem.yLabel;
            }
          }
        }
      };
      Chart.controllers.polarArea = Chart.DatasetController.extend({
        dataElementType: Chart.elements.Arc,
        linkScales: helpers.noop,
        update: function update(reset) {
          var me = this;
          var chart = me.chart;
          var chartArea = chart.chartArea;
          var meta = me.getMeta();
          var opts = chart.options;
          var arcOpts = opts.elements.arc;
          var minSize = Math.min(chartArea.right - chartArea.left, chartArea.bottom - chartArea.top);
          chart.outerRadius = Math.max((minSize - arcOpts.borderWidth / 2) / 2, 0);
          chart.innerRadius = Math.max(opts.cutoutPercentage ? chart.outerRadius / 100 * opts.cutoutPercentage : 1, 0);
          chart.radiusLength = (chart.outerRadius - chart.innerRadius) / chart.getVisibleDatasetCount();
          me.outerRadius = chart.outerRadius - chart.radiusLength * me.index;
          me.innerRadius = me.outerRadius - chart.radiusLength;
          meta.count = me.countVisibleElements();
          helpers.each(meta.data, function (arc, index) {
            me.updateElement(arc, index, reset);
          });
        },
        updateElement: function updateElement(arc, index, reset) {
          var me = this;
          var chart = me.chart;
          var dataset = me.getDataset();
          var opts = chart.options;
          var animationOpts = opts.animation;
          var scale = chart.scale;
          var getValueAtIndexOrDefault = helpers.getValueAtIndexOrDefault;
          var labels = chart.data.labels;
          var circumference = me.calculateCircumference(dataset.data[index]);
          var centerX = scale.xCenter;
          var centerY = scale.yCenter; // If there is NaN data before us, we need to calculate the starting angle correctly.
          // We could be way more efficient here, but its unlikely that the polar area chart will have a lot of data

          var visibleCount = 0;
          var meta = me.getMeta();

          for (var i = 0; i < index; ++i) {
            if (!isNaN(dataset.data[i]) && !meta.data[i].hidden) {
              ++visibleCount;
            }
          } // var negHalfPI = -0.5 * Math.PI;


          var datasetStartAngle = opts.startAngle;
          var distance = arc.hidden ? 0 : scale.getDistanceFromCenterForValue(dataset.data[index]);
          var startAngle = datasetStartAngle + circumference * visibleCount;
          var endAngle = startAngle + (arc.hidden ? 0 : circumference);
          var resetRadius = animationOpts.animateScale ? 0 : scale.getDistanceFromCenterForValue(dataset.data[index]);
          helpers.extend(arc, {
            // Utility
            _datasetIndex: me.index,
            _index: index,
            _scale: scale,
            // Desired view properties
            _model: {
              x: centerX,
              y: centerY,
              innerRadius: 0,
              outerRadius: reset ? resetRadius : distance,
              startAngle: reset && animationOpts.animateRotate ? datasetStartAngle : startAngle,
              endAngle: reset && animationOpts.animateRotate ? datasetStartAngle : endAngle,
              label: getValueAtIndexOrDefault(labels, index, labels[index])
            }
          }); // Apply border and fill style

          me.removeHoverStyle(arc);
          arc.pivot();
        },
        removeHoverStyle: function removeHoverStyle(arc) {
          Chart.DatasetController.prototype.removeHoverStyle.call(this, arc, this.chart.options.elements.arc);
        },
        countVisibleElements: function countVisibleElements() {
          var dataset = this.getDataset();
          var meta = this.getMeta();
          var count = 0;
          helpers.each(meta.data, function (element, index) {
            if (!isNaN(dataset.data[index]) && !element.hidden) {
              count++;
            }
          });
          return count;
        },
        calculateCircumference: function calculateCircumference(value) {
          var count = this.getMeta().count;

          if (count > 0 && !isNaN(value)) {
            return 2 * Math.PI / count;
          }

          return 0;
        }
      });
    };
    /***/

  },

  /***/
  "./node_modules/chart.js/src/controllers/controller.radar.js": function node_modulesChartJsSrcControllersControllerRadarJs(module, exports, __webpack_require__) {
    "use strict";

    module.exports = function (Chart) {
      var helpers = Chart.helpers;
      Chart.defaults.radar = {
        aspectRatio: 1,
        scale: {
          type: 'radialLinear'
        },
        elements: {
          line: {
            tension: 0 // no bezier in radar

          }
        }
      };
      Chart.controllers.radar = Chart.DatasetController.extend({
        datasetElementType: Chart.elements.Line,
        dataElementType: Chart.elements.Point,
        linkScales: helpers.noop,
        update: function update(reset) {
          var me = this;
          var meta = me.getMeta();
          var line = meta.dataset;
          var points = meta.data;
          var custom = line.custom || {};
          var dataset = me.getDataset();
          var lineElementOptions = me.chart.options.elements.line;
          var scale = me.chart.scale; // Compatibility: If the properties are defined with only the old name, use those values

          if (dataset.tension !== undefined && dataset.lineTension === undefined) {
            dataset.lineTension = dataset.tension;
          }

          helpers.extend(meta.dataset, {
            // Utility
            _datasetIndex: me.index,
            // Data
            _children: points,
            _loop: true,
            // Model
            _model: {
              // Appearance
              tension: custom.tension ? custom.tension : helpers.getValueOrDefault(dataset.lineTension, lineElementOptions.tension),
              backgroundColor: custom.backgroundColor ? custom.backgroundColor : dataset.backgroundColor || lineElementOptions.backgroundColor,
              borderWidth: custom.borderWidth ? custom.borderWidth : dataset.borderWidth || lineElementOptions.borderWidth,
              borderColor: custom.borderColor ? custom.borderColor : dataset.borderColor || lineElementOptions.borderColor,
              fill: custom.fill ? custom.fill : dataset.fill !== undefined ? dataset.fill : lineElementOptions.fill,
              borderCapStyle: custom.borderCapStyle ? custom.borderCapStyle : dataset.borderCapStyle || lineElementOptions.borderCapStyle,
              borderDash: custom.borderDash ? custom.borderDash : dataset.borderDash || lineElementOptions.borderDash,
              borderDashOffset: custom.borderDashOffset ? custom.borderDashOffset : dataset.borderDashOffset || lineElementOptions.borderDashOffset,
              borderJoinStyle: custom.borderJoinStyle ? custom.borderJoinStyle : dataset.borderJoinStyle || lineElementOptions.borderJoinStyle,
              // Scale
              scaleTop: scale.top,
              scaleBottom: scale.bottom,
              scaleZero: scale.getBasePosition()
            }
          });
          meta.dataset.pivot(); // Update Points

          helpers.each(points, function (point, index) {
            me.updateElement(point, index, reset);
          }, me); // Update bezier control points

          me.updateBezierControlPoints();
        },
        updateElement: function updateElement(point, index, reset) {
          var me = this;
          var custom = point.custom || {};
          var dataset = me.getDataset();
          var scale = me.chart.scale;
          var pointElementOptions = me.chart.options.elements.point;
          var pointPosition = scale.getPointPositionForValue(index, dataset.data[index]);
          helpers.extend(point, {
            // Utility
            _datasetIndex: me.index,
            _index: index,
            _scale: scale,
            // Desired view properties
            _model: {
              x: reset ? scale.xCenter : pointPosition.x,
              // value not used in dataset scale, but we want a consistent API between scales
              y: reset ? scale.yCenter : pointPosition.y,
              // Appearance
              tension: custom.tension ? custom.tension : helpers.getValueOrDefault(dataset.lineTension, me.chart.options.elements.line.tension),
              radius: custom.radius ? custom.radius : helpers.getValueAtIndexOrDefault(dataset.pointRadius, index, pointElementOptions.radius),
              backgroundColor: custom.backgroundColor ? custom.backgroundColor : helpers.getValueAtIndexOrDefault(dataset.pointBackgroundColor, index, pointElementOptions.backgroundColor),
              borderColor: custom.borderColor ? custom.borderColor : helpers.getValueAtIndexOrDefault(dataset.pointBorderColor, index, pointElementOptions.borderColor),
              borderWidth: custom.borderWidth ? custom.borderWidth : helpers.getValueAtIndexOrDefault(dataset.pointBorderWidth, index, pointElementOptions.borderWidth),
              pointStyle: custom.pointStyle ? custom.pointStyle : helpers.getValueAtIndexOrDefault(dataset.pointStyle, index, pointElementOptions.pointStyle),
              // Tooltip
              hitRadius: custom.hitRadius ? custom.hitRadius : helpers.getValueAtIndexOrDefault(dataset.hitRadius, index, pointElementOptions.hitRadius)
            }
          });
          point._model.skip = custom.skip ? custom.skip : isNaN(point._model.x) || isNaN(point._model.y);
        },
        updateBezierControlPoints: function updateBezierControlPoints() {
          var chartArea = this.chart.chartArea;
          var meta = this.getMeta();
          helpers.each(meta.data, function (point, index) {
            var model = point._model;
            var controlPoints = helpers.splineCurve(helpers.previousItem(meta.data, index, true)._model, model, helpers.nextItem(meta.data, index, true)._model, model.tension); // Prevent the bezier going outside of the bounds of the graph

            model.controlPointPreviousX = Math.max(Math.min(controlPoints.previous.x, chartArea.right), chartArea.left);
            model.controlPointPreviousY = Math.max(Math.min(controlPoints.previous.y, chartArea.bottom), chartArea.top);
            model.controlPointNextX = Math.max(Math.min(controlPoints.next.x, chartArea.right), chartArea.left);
            model.controlPointNextY = Math.max(Math.min(controlPoints.next.y, chartArea.bottom), chartArea.top); // Now pivot the point for animation

            point.pivot();
          });
        },
        draw: function draw(ease) {
          var meta = this.getMeta();
          var easingDecimal = ease || 1; // Transition Point Locations

          helpers.each(meta.data, function (point) {
            point.transition(easingDecimal);
          }); // Transition and Draw the line

          meta.dataset.transition(easingDecimal).draw(); // Draw the points

          helpers.each(meta.data, function (point) {
            point.draw();
          });
        },
        setHoverStyle: function setHoverStyle(point) {
          // Point
          var dataset = this.chart.data.datasets[point._datasetIndex];
          var custom = point.custom || {};
          var index = point._index;
          var model = point._model;
          model.radius = custom.hoverRadius ? custom.hoverRadius : helpers.getValueAtIndexOrDefault(dataset.pointHoverRadius, index, this.chart.options.elements.point.hoverRadius);
          model.backgroundColor = custom.hoverBackgroundColor ? custom.hoverBackgroundColor : helpers.getValueAtIndexOrDefault(dataset.pointHoverBackgroundColor, index, helpers.getHoverColor(model.backgroundColor));
          model.borderColor = custom.hoverBorderColor ? custom.hoverBorderColor : helpers.getValueAtIndexOrDefault(dataset.pointHoverBorderColor, index, helpers.getHoverColor(model.borderColor));
          model.borderWidth = custom.hoverBorderWidth ? custom.hoverBorderWidth : helpers.getValueAtIndexOrDefault(dataset.pointHoverBorderWidth, index, model.borderWidth);
        },
        removeHoverStyle: function removeHoverStyle(point) {
          var dataset = this.chart.data.datasets[point._datasetIndex];
          var custom = point.custom || {};
          var index = point._index;
          var model = point._model;
          var pointElementOptions = this.chart.options.elements.point;
          model.radius = custom.radius ? custom.radius : helpers.getValueAtIndexOrDefault(dataset.radius, index, pointElementOptions.radius);
          model.backgroundColor = custom.backgroundColor ? custom.backgroundColor : helpers.getValueAtIndexOrDefault(dataset.pointBackgroundColor, index, pointElementOptions.backgroundColor);
          model.borderColor = custom.borderColor ? custom.borderColor : helpers.getValueAtIndexOrDefault(dataset.pointBorderColor, index, pointElementOptions.borderColor);
          model.borderWidth = custom.borderWidth ? custom.borderWidth : helpers.getValueAtIndexOrDefault(dataset.pointBorderWidth, index, pointElementOptions.borderWidth);
        }
      });
    };
    /***/

  },

  /***/
  "./node_modules/chart.js/src/core/core.animation.js": function node_modulesChartJsSrcCoreCoreAnimationJs(module, exports, __webpack_require__) {
    "use strict";
    /* global window: false */

    module.exports = function (Chart) {
      var helpers = Chart.helpers;
      Chart.defaults.global.animation = {
        duration: 1000,
        easing: 'easeOutQuart',
        onProgress: helpers.noop,
        onComplete: helpers.noop
      };
      Chart.Animation = Chart.Element.extend({
        currentStep: null,
        // the current animation step
        numSteps: 60,
        // default number of steps
        easing: '',
        // the easing to use for this animation
        render: null,
        // render function used by the animation service
        onAnimationProgress: null,
        // user specified callback to fire on each step of the animation
        onAnimationComplete: null // user specified callback to fire when the animation finishes

      });
      Chart.animationService = {
        frameDuration: 17,
        animations: [],
        dropFrames: 0,
        request: null,

        /**
         * @function Chart.animationService.addAnimation
         * @param chartInstance {ChartController} the chart to animate
         * @param animationObject {IAnimation} the animation that we will animate
         * @param duration {Number} length of animation in ms
         * @param lazy {Boolean} if true, the chart is not marked as animating to enable more responsive interactions
         */
        addAnimation: function addAnimation(chartInstance, animationObject, duration, lazy) {
          var me = this;

          if (!lazy) {
            chartInstance.animating = true;
          }

          for (var index = 0; index < me.animations.length; ++index) {
            if (me.animations[index].chartInstance === chartInstance) {
              // replacing an in progress animation
              me.animations[index].animationObject = animationObject;
              return;
            }
          }

          me.animations.push({
            chartInstance: chartInstance,
            animationObject: animationObject
          }); // If there are no animations queued, manually kickstart a digest, for lack of a better word

          if (me.animations.length === 1) {
            me.requestAnimationFrame();
          }
        },
        // Cancel the animation for a given chart instance
        cancelAnimation: function cancelAnimation(chartInstance) {
          var index = helpers.findIndex(this.animations, function (animationWrapper) {
            return animationWrapper.chartInstance === chartInstance;
          });

          if (index !== -1) {
            this.animations.splice(index, 1);
            chartInstance.animating = false;
          }
        },
        requestAnimationFrame: function requestAnimationFrame() {
          var me = this;

          if (me.request === null) {
            // Skip animation frame requests until the active one is executed.
            // This can happen when processing mouse events, e.g. 'mousemove'
            // and 'mouseout' events will trigger multiple renders.
            me.request = helpers.requestAnimFrame.call(window, function () {
              me.request = null;
              me.startDigest();
            });
          }
        },
        startDigest: function startDigest() {
          var me = this;
          var startTime = Date.now();
          var framesToDrop = 0;

          if (me.dropFrames > 1) {
            framesToDrop = Math.floor(me.dropFrames);
            me.dropFrames = me.dropFrames % 1;
          }

          var i = 0;

          while (i < me.animations.length) {
            if (me.animations[i].animationObject.currentStep === null) {
              me.animations[i].animationObject.currentStep = 0;
            }

            me.animations[i].animationObject.currentStep += 1 + framesToDrop;

            if (me.animations[i].animationObject.currentStep > me.animations[i].animationObject.numSteps) {
              me.animations[i].animationObject.currentStep = me.animations[i].animationObject.numSteps;
            }

            me.animations[i].animationObject.render(me.animations[i].chartInstance, me.animations[i].animationObject);

            if (me.animations[i].animationObject.onAnimationProgress && me.animations[i].animationObject.onAnimationProgress.call) {
              me.animations[i].animationObject.onAnimationProgress.call(me.animations[i].chartInstance, me.animations[i]);
            }

            if (me.animations[i].animationObject.currentStep === me.animations[i].animationObject.numSteps) {
              if (me.animations[i].animationObject.onAnimationComplete && me.animations[i].animationObject.onAnimationComplete.call) {
                me.animations[i].animationObject.onAnimationComplete.call(me.animations[i].chartInstance, me.animations[i]);
              } // executed the last frame. Remove the animation.


              me.animations[i].chartInstance.animating = false;
              me.animations.splice(i, 1);
            } else {
              ++i;
            }
          }

          var endTime = Date.now();
          var dropFrames = (endTime - startTime) / me.frameDuration;
          me.dropFrames += dropFrames; // Do we have more stuff to animate?

          if (me.animations.length > 0) {
            me.requestAnimationFrame();
          }
        }
      };
    };
    /***/

  },

  /***/
  "./node_modules/chart.js/src/core/core.canvasHelpers.js": function node_modulesChartJsSrcCoreCoreCanvasHelpersJs(module, exports, __webpack_require__) {
    "use strict";

    module.exports = function (Chart) {
      // Global Chart canvas helpers object for drawing items to canvas
      var helpers = Chart.canvasHelpers = {};

      helpers.drawPoint = function (ctx, pointStyle, radius, x, y) {
        var type, edgeLength, xOffset, yOffset, height, size;

        if (typeof pointStyle === 'object') {
          type = pointStyle.toString();

          if (type === '[object HTMLImageElement]' || type === '[object HTMLCanvasElement]') {
            ctx.drawImage(pointStyle, x - pointStyle.width / 2, y - pointStyle.height / 2);
            return;
          }
        }

        if (isNaN(radius) || radius <= 0) {
          return;
        }

        switch (pointStyle) {
          // Default includes circle
          default:
            ctx.beginPath();
            ctx.arc(x, y, radius, 0, Math.PI * 2);
            ctx.closePath();
            ctx.fill();
            break;

          case 'triangle':
            ctx.beginPath();
            edgeLength = 3 * radius / Math.sqrt(3);
            height = edgeLength * Math.sqrt(3) / 2;
            ctx.moveTo(x - edgeLength / 2, y + height / 3);
            ctx.lineTo(x + edgeLength / 2, y + height / 3);
            ctx.lineTo(x, y - 2 * height / 3);
            ctx.closePath();
            ctx.fill();
            break;

          case 'rect':
            size = 1 / Math.SQRT2 * radius;
            ctx.beginPath();
            ctx.fillRect(x - size, y - size, 2 * size, 2 * size);
            ctx.strokeRect(x - size, y - size, 2 * size, 2 * size);
            break;

          case 'rectRounded':
            var offset = radius / Math.SQRT2;
            var leftX = x - offset;
            var topY = y - offset;
            var sideSize = Math.SQRT2 * radius;
            Chart.helpers.drawRoundedRectangle(ctx, leftX, topY, sideSize, sideSize, radius / 2);
            ctx.fill();
            break;

          case 'rectRot':
            size = 1 / Math.SQRT2 * radius;
            ctx.beginPath();
            ctx.moveTo(x - size, y);
            ctx.lineTo(x, y + size);
            ctx.lineTo(x + size, y);
            ctx.lineTo(x, y - size);
            ctx.closePath();
            ctx.fill();
            break;

          case 'cross':
            ctx.beginPath();
            ctx.moveTo(x, y + radius);
            ctx.lineTo(x, y - radius);
            ctx.moveTo(x - radius, y);
            ctx.lineTo(x + radius, y);
            ctx.closePath();
            break;

          case 'crossRot':
            ctx.beginPath();
            xOffset = Math.cos(Math.PI / 4) * radius;
            yOffset = Math.sin(Math.PI / 4) * radius;
            ctx.moveTo(x - xOffset, y - yOffset);
            ctx.lineTo(x + xOffset, y + yOffset);
            ctx.moveTo(x - xOffset, y + yOffset);
            ctx.lineTo(x + xOffset, y - yOffset);
            ctx.closePath();
            break;

          case 'star':
            ctx.beginPath();
            ctx.moveTo(x, y + radius);
            ctx.lineTo(x, y - radius);
            ctx.moveTo(x - radius, y);
            ctx.lineTo(x + radius, y);
            xOffset = Math.cos(Math.PI / 4) * radius;
            yOffset = Math.sin(Math.PI / 4) * radius;
            ctx.moveTo(x - xOffset, y - yOffset);
            ctx.lineTo(x + xOffset, y + yOffset);
            ctx.moveTo(x - xOffset, y + yOffset);
            ctx.lineTo(x + xOffset, y - yOffset);
            ctx.closePath();
            break;

          case 'line':
            ctx.beginPath();
            ctx.moveTo(x - radius, y);
            ctx.lineTo(x + radius, y);
            ctx.closePath();
            break;

          case 'dash':
            ctx.beginPath();
            ctx.moveTo(x, y);
            ctx.lineTo(x + radius, y);
            ctx.closePath();
            break;
        }

        ctx.stroke();
      };

      helpers.clipArea = function (ctx, clipArea) {
        ctx.save();
        ctx.beginPath();
        ctx.rect(clipArea.left, clipArea.top, clipArea.right - clipArea.left, clipArea.bottom - clipArea.top);
        ctx.clip();
      };

      helpers.unclipArea = function (ctx) {
        ctx.restore();
      };
    };
    /***/

  },

  /***/
  "./node_modules/chart.js/src/core/core.controller.js": function node_modulesChartJsSrcCoreCoreControllerJs(module, exports, __webpack_require__) {
    "use strict";

    module.exports = function (Chart) {
      var helpers = Chart.helpers;
      var plugins = Chart.plugins;
      var platform = Chart.platform; // Create a dictionary of chart types, to allow for extension of existing types

      Chart.types = {}; // Store a reference to each instance - allowing us to globally resize chart instances on window resize.
      // Destroy method on the chart will remove the instance of the chart from this reference.

      Chart.instances = {}; // Controllers available for dataset visualization eg. bar, line, slice, etc.

      Chart.controllers = {};
      /**
       * Initializes the given config with global and chart default values.
       */

      function initConfig(config) {
        config = config || {}; // Do NOT use configMerge() for the data object because this method merges arrays
        // and so would change references to labels and datasets, preventing data updates.

        var data = config.data = config.data || {};
        data.datasets = data.datasets || [];
        data.labels = data.labels || [];
        config.options = helpers.configMerge(Chart.defaults.global, Chart.defaults[config.type], config.options || {});
        return config;
      }
      /**
       * Updates the config of the chart
       * @param chart {Chart.Controller} chart to update the options for
       */


      function updateConfig(chart) {
        var newOptions = chart.options; // Update Scale(s) with options

        if (newOptions.scale) {
          chart.scale.options = newOptions.scale;
        } else if (newOptions.scales) {
          newOptions.scales.xAxes.concat(newOptions.scales.yAxes).forEach(function (scaleOptions) {
            chart.scales[scaleOptions.id].options = scaleOptions;
          });
        } // Tooltip


        chart.tooltip._options = newOptions.tooltips;
      }
      /**
       * @class Chart.Controller
       * The main controller of a chart.
       */


      Chart.Controller = function (item, config, instance) {
        var me = this;
        config = initConfig(config);
        var context = platform.acquireContext(item, config);
        var canvas = context && context.canvas;
        var height = canvas && canvas.height;
        var width = canvas && canvas.width;
        instance.ctx = context;
        instance.canvas = canvas;
        instance.config = config;
        instance.width = width;
        instance.height = height;
        instance.aspectRatio = height ? width / height : null;
        me.id = helpers.uid();
        me.chart = instance;
        me.config = config;
        me.options = config.options;
        me._bufferedRender = false; // Add the chart instance to the global namespace

        Chart.instances[me.id] = me;
        Object.defineProperty(me, 'data', {
          get: function get() {
            return me.config.data;
          }
        });

        if (!context || !canvas) {
          // The given item is not a compatible context2d element, let's return before finalizing
          // the chart initialization but after setting basic chart / controller properties that
          // can help to figure out that the chart is not valid (e.g chart.canvas !== null);
          // https://github.com/chartjs/Chart.js/issues/2807
          console.error("Failed to create chart: can't acquire context from the given item");
          return me;
        }

        me.initialize();
        me.update();
        return me;
      };

      helpers.extend(Chart.Controller.prototype,
      /** @lends Chart.Controller.prototype */
      {
        initialize: function initialize() {
          var me = this; // Before init plugin notification

          plugins.notify(me, 'beforeInit');
          helpers.retinaScale(me.chart);
          me.bindEvents();

          if (me.options.responsive) {
            // Initial resize before chart draws (must be silent to preserve initial animations).
            me.resize(true);
          } // Make sure scales have IDs and are built before we build any controllers.


          me.ensureScalesHaveIDs();
          me.buildScales();
          me.initToolTip(); // After init plugin notification

          plugins.notify(me, 'afterInit');
          return me;
        },
        clear: function clear() {
          helpers.clear(this.chart);
          return this;
        },
        stop: function stop() {
          // Stops any current animation loop occurring
          Chart.animationService.cancelAnimation(this);
          return this;
        },
        resize: function resize(silent) {
          var me = this;
          var chart = me.chart;
          var options = me.options;
          var canvas = chart.canvas;
          var aspectRatio = options.maintainAspectRatio && chart.aspectRatio || null; // the canvas render width and height will be casted to integers so make sure that
          // the canvas display style uses the same integer values to avoid blurring effect.

          var newWidth = Math.floor(helpers.getMaximumWidth(canvas));
          var newHeight = Math.floor(aspectRatio ? newWidth / aspectRatio : helpers.getMaximumHeight(canvas));

          if (chart.width === newWidth && chart.height === newHeight) {
            return;
          }

          canvas.width = chart.width = newWidth;
          canvas.height = chart.height = newHeight;
          canvas.style.width = newWidth + 'px';
          canvas.style.height = newHeight + 'px';
          helpers.retinaScale(chart);

          if (!silent) {
            // Notify any plugins about the resize
            var newSize = {
              width: newWidth,
              height: newHeight
            };
            plugins.notify(me, 'resize', [newSize]); // Notify of resize

            if (me.options.onResize) {
              me.options.onResize(me, newSize);
            }

            me.stop();
            me.update(me.options.responsiveAnimationDuration);
          }
        },
        ensureScalesHaveIDs: function ensureScalesHaveIDs() {
          var options = this.options;
          var scalesOptions = options.scales || {};
          var scaleOptions = options.scale;
          helpers.each(scalesOptions.xAxes, function (xAxisOptions, index) {
            xAxisOptions.id = xAxisOptions.id || 'x-axis-' + index;
          });
          helpers.each(scalesOptions.yAxes, function (yAxisOptions, index) {
            yAxisOptions.id = yAxisOptions.id || 'y-axis-' + index;
          });

          if (scaleOptions) {
            scaleOptions.id = scaleOptions.id || 'scale';
          }
        },

        /**
         * Builds a map of scale ID to scale object for future lookup.
         */
        buildScales: function buildScales() {
          var me = this;
          var options = me.options;
          var scales = me.scales = {};
          var items = [];

          if (options.scales) {
            items = items.concat((options.scales.xAxes || []).map(function (xAxisOptions) {
              return {
                options: xAxisOptions,
                dtype: 'category'
              };
            }), (options.scales.yAxes || []).map(function (yAxisOptions) {
              return {
                options: yAxisOptions,
                dtype: 'linear'
              };
            }));
          }

          if (options.scale) {
            items.push({
              options: options.scale,
              dtype: 'radialLinear',
              isDefault: true
            });
          }

          helpers.each(items, function (item) {
            var scaleOptions = item.options;
            var scaleType = helpers.getValueOrDefault(scaleOptions.type, item.dtype);
            var scaleClass = Chart.scaleService.getScaleConstructor(scaleType);

            if (!scaleClass) {
              return;
            }

            var scale = new scaleClass({
              id: scaleOptions.id,
              options: scaleOptions,
              ctx: me.chart.ctx,
              chart: me
            });
            scales[scale.id] = scale; // TODO(SB): I think we should be able to remove this custom case (options.scale)
            // and consider it as a regular scale part of the "scales"" map only! This would
            // make the logic easier and remove some useless? custom code.

            if (item.isDefault) {
              me.scale = scale;
            }
          });
          Chart.scaleService.addScalesToLayout(this);
        },
        buildOrUpdateControllers: function buildOrUpdateControllers() {
          var me = this;
          var types = [];
          var newControllers = [];
          helpers.each(me.data.datasets, function (dataset, datasetIndex) {
            var meta = me.getDatasetMeta(datasetIndex);

            if (!meta.type) {
              meta.type = dataset.type || me.config.type;
            }

            types.push(meta.type);

            if (meta.controller) {
              meta.controller.updateIndex(datasetIndex);
            } else {
              meta.controller = new Chart.controllers[meta.type](me, datasetIndex);
              newControllers.push(meta.controller);
            }
          }, me);

          if (types.length > 1) {
            for (var i = 1; i < types.length; i++) {
              if (types[i] !== types[i - 1]) {
                me.isCombo = true;
                break;
              }
            }
          }

          return newControllers;
        },

        /**
         * Reset the elements of all datasets
         * @private
         */
        resetElements: function resetElements() {
          var me = this;
          helpers.each(me.data.datasets, function (dataset, datasetIndex) {
            me.getDatasetMeta(datasetIndex).controller.reset();
          }, me);
        },

        /**
        * Resets the chart back to it's state before the initial animation
        */
        reset: function reset() {
          this.resetElements();
          this.tooltip.initialize();
        },
        update: function update(animationDuration, lazy) {
          var me = this;
          updateConfig(me);

          if (plugins.notify(me, 'beforeUpdate') === false) {
            return;
          } // In case the entire data object changed


          me.tooltip._data = me.data; // Make sure dataset controllers are updated and new controllers are reset

          var newControllers = me.buildOrUpdateControllers(); // Make sure all dataset controllers have correct meta data counts

          helpers.each(me.data.datasets, function (dataset, datasetIndex) {
            me.getDatasetMeta(datasetIndex).controller.buildOrUpdateElements();
          }, me);
          me.updateLayout(); // Can only reset the new controllers after the scales have been updated

          helpers.each(newControllers, function (controller) {
            controller.reset();
          });
          me.updateDatasets(); // Do this before render so that any plugins that need final scale updates can use it

          plugins.notify(me, 'afterUpdate');

          if (me._bufferedRender) {
            me._bufferedRequest = {
              lazy: lazy,
              duration: animationDuration
            };
          } else {
            me.render(animationDuration, lazy);
          }
        },

        /**
         * Updates the chart layout unless a plugin returns `false` to the `beforeLayout`
         * hook, in which case, plugins will not be called on `afterLayout`.
         * @private
         */
        updateLayout: function updateLayout() {
          var me = this;

          if (plugins.notify(me, 'beforeLayout') === false) {
            return;
          }

          Chart.layoutService.update(this, this.chart.width, this.chart.height);
          /**
           * Provided for backward compatibility, use `afterLayout` instead.
           * @method IPlugin#afterScaleUpdate
           * @deprecated since version 2.5.0
           * @todo remove at version 3
           */

          plugins.notify(me, 'afterScaleUpdate');
          plugins.notify(me, 'afterLayout');
        },

        /**
         * Updates all datasets unless a plugin returns `false` to the `beforeDatasetsUpdate`
         * hook, in which case, plugins will not be called on `afterDatasetsUpdate`.
         * @private
         */
        updateDatasets: function updateDatasets() {
          var me = this;

          if (plugins.notify(me, 'beforeDatasetsUpdate') === false) {
            return;
          }

          for (var i = 0, ilen = me.data.datasets.length; i < ilen; ++i) {
            me.getDatasetMeta(i).controller.update();
          }

          plugins.notify(me, 'afterDatasetsUpdate');
        },
        render: function render(duration, lazy) {
          var me = this;

          if (plugins.notify(me, 'beforeRender') === false) {
            return;
          }

          var animationOptions = me.options.animation;

          var onComplete = function onComplete() {
            plugins.notify(me, 'afterRender');
            var callback = animationOptions && animationOptions.onComplete;

            if (callback && callback.call) {
              callback.call(me);
            }
          };

          if (animationOptions && (typeof duration !== 'undefined' && duration !== 0 || typeof duration === 'undefined' && animationOptions.duration !== 0)) {
            var animation = new Chart.Animation();
            animation.numSteps = (duration || animationOptions.duration) / 16.66; // 60 fps

            animation.easing = animationOptions.easing; // render function

            animation.render = function (chartInstance, animationObject) {
              var easingFunction = helpers.easingEffects[animationObject.easing];
              var stepDecimal = animationObject.currentStep / animationObject.numSteps;
              var easeDecimal = easingFunction(stepDecimal);
              chartInstance.draw(easeDecimal, stepDecimal, animationObject.currentStep);
            }; // user events


            animation.onAnimationProgress = animationOptions.onProgress;
            animation.onAnimationComplete = onComplete;
            Chart.animationService.addAnimation(me, animation, duration, lazy);
          } else {
            me.draw();
            onComplete();
          }

          return me;
        },
        draw: function draw(easingValue) {
          var me = this;
          me.clear();

          if (easingValue === undefined || easingValue === null) {
            easingValue = 1;
          }

          if (plugins.notify(me, 'beforeDraw', [easingValue]) === false) {
            return;
          } // Draw all the scales


          helpers.each(me.boxes, function (box) {
            box.draw(me.chartArea);
          }, me);

          if (me.scale) {
            me.scale.draw();
          }

          me.drawDatasets(easingValue); // Finally draw the tooltip

          me.tooltip.transition(easingValue).draw();
          plugins.notify(me, 'afterDraw', [easingValue]);
        },

        /**
         * Draws all datasets unless a plugin returns `false` to the `beforeDatasetsDraw`
         * hook, in which case, plugins will not be called on `afterDatasetsDraw`.
         * @private
         */
        drawDatasets: function drawDatasets(easingValue) {
          var me = this;

          if (plugins.notify(me, 'beforeDatasetsDraw', [easingValue]) === false) {
            return;
          } // Draw each dataset via its respective controller (reversed to support proper line stacking)


          helpers.each(me.data.datasets, function (dataset, datasetIndex) {
            if (me.isDatasetVisible(datasetIndex)) {
              me.getDatasetMeta(datasetIndex).controller.draw(easingValue);
            }
          }, me, true);
          plugins.notify(me, 'afterDatasetsDraw', [easingValue]);
        },
        // Get the single element that was clicked on
        // @return : An object containing the dataset index and element index of the matching element. Also contains the rectangle that was draw
        getElementAtEvent: function getElementAtEvent(e) {
          return Chart.Interaction.modes.single(this, e);
        },
        getElementsAtEvent: function getElementsAtEvent(e) {
          return Chart.Interaction.modes.label(this, e, {
            intersect: true
          });
        },
        getElementsAtXAxis: function getElementsAtXAxis(e) {
          return Chart.Interaction.modes['x-axis'](this, e, {
            intersect: true
          });
        },
        getElementsAtEventForMode: function getElementsAtEventForMode(e, mode, options) {
          var method = Chart.Interaction.modes[mode];

          if (typeof method === 'function') {
            return method(this, e, options);
          }

          return [];
        },
        getDatasetAtEvent: function getDatasetAtEvent(e) {
          return Chart.Interaction.modes.dataset(this, e, {
            intersect: true
          });
        },
        getDatasetMeta: function getDatasetMeta(datasetIndex) {
          var me = this;
          var dataset = me.data.datasets[datasetIndex];

          if (!dataset._meta) {
            dataset._meta = {};
          }

          var meta = dataset._meta[me.id];

          if (!meta) {
            meta = dataset._meta[me.id] = {
              type: null,
              data: [],
              dataset: null,
              controller: null,
              hidden: null,
              // See isDatasetVisible() comment
              xAxisID: null,
              yAxisID: null
            };
          }

          return meta;
        },
        getVisibleDatasetCount: function getVisibleDatasetCount() {
          var count = 0;

          for (var i = 0, ilen = this.data.datasets.length; i < ilen; ++i) {
            if (this.isDatasetVisible(i)) {
              count++;
            }
          }

          return count;
        },
        isDatasetVisible: function isDatasetVisible(datasetIndex) {
          var meta = this.getDatasetMeta(datasetIndex); // meta.hidden is a per chart dataset hidden flag override with 3 states: if true or false,
          // the dataset.hidden value is ignored, else if null, the dataset hidden state is returned.

          return typeof meta.hidden === 'boolean' ? !meta.hidden : !this.data.datasets[datasetIndex].hidden;
        },
        generateLegend: function generateLegend() {
          return this.options.legendCallback(this);
        },
        destroy: function destroy() {
          var me = this;
          var canvas = me.chart.canvas;
          var meta, i, ilen;
          me.stop(); // dataset controllers need to cleanup associated data

          for (i = 0, ilen = me.data.datasets.length; i < ilen; ++i) {
            meta = me.getDatasetMeta(i);

            if (meta.controller) {
              meta.controller.destroy();
              meta.controller = null;
            }
          }

          if (canvas) {
            me.unbindEvents();
            helpers.clear(me.chart);
            platform.releaseContext(me.chart.ctx);
            me.chart.canvas = null;
            me.chart.ctx = null;
          }

          plugins.notify(me, 'destroy');
          delete Chart.instances[me.id];
        },
        toBase64Image: function toBase64Image() {
          return this.chart.canvas.toDataURL.apply(this.chart.canvas, arguments);
        },
        initToolTip: function initToolTip() {
          var me = this;
          me.tooltip = new Chart.Tooltip({
            _chart: me.chart,
            _chartInstance: me,
            _data: me.data,
            _options: me.options.tooltips
          }, me);
          me.tooltip.initialize();
        },

        /**
         * @private
         */
        bindEvents: function bindEvents() {
          var me = this;
          var listeners = me._listeners = {};

          var listener = function listener() {
            me.eventHandler.apply(me, arguments);
          };

          helpers.each(me.options.events, function (type) {
            platform.addEventListener(me, type, listener);
            listeners[type] = listener;
          }); // Responsiveness is currently based on the use of an iframe, however this method causes
          // performance issues and could be troublesome when used with ad blockers. So make sure
          // that the user is still able to create a chart without iframe when responsive is false.
          // See https://github.com/chartjs/Chart.js/issues/2210

          if (me.options.responsive) {
            listener = function listener() {
              me.resize();
            };

            platform.addEventListener(me, 'resize', listener);
            listeners.resize = listener;
          }
        },

        /**
         * @private
         */
        unbindEvents: function unbindEvents() {
          var me = this;
          var listeners = me._listeners;

          if (!listeners) {
            return;
          }

          delete me._listeners;
          helpers.each(listeners, function (listener, type) {
            platform.removeEventListener(me, type, listener);
          });
        },
        updateHoverStyle: function updateHoverStyle(elements, mode, enabled) {
          var method = enabled ? 'setHoverStyle' : 'removeHoverStyle';
          var element, i, ilen;

          for (i = 0, ilen = elements.length; i < ilen; ++i) {
            element = elements[i];

            if (element) {
              this.getDatasetMeta(element._datasetIndex).controller[method](element);
            }
          }
        },

        /**
         * @private
         */
        eventHandler: function eventHandler(e) {
          var me = this;
          var tooltip = me.tooltip;

          if (plugins.notify(me, 'beforeEvent', [e]) === false) {
            return;
          } // Buffer any update calls so that renders do not occur


          me._bufferedRender = true;
          me._bufferedRequest = null;
          var changed = me.handleEvent(e);
          changed |= tooltip && tooltip.handleEvent(e);
          plugins.notify(me, 'afterEvent', [e]);
          var bufferedRequest = me._bufferedRequest;

          if (bufferedRequest) {
            // If we have an update that was triggered, we need to do a normal render
            me.render(bufferedRequest.duration, bufferedRequest.lazy);
          } else if (changed && !me.animating) {
            // If entering, leaving, or changing elements, animate the change via pivot
            me.stop(); // We only need to render at this point. Updating will cause scales to be
            // recomputed generating flicker & using more memory than necessary.

            me.render(me.options.hover.animationDuration, true);
          }

          me._bufferedRender = false;
          me._bufferedRequest = null;
          return me;
        },

        /**
         * Handle an event
         * @private
         * @param {IEvent} event the event to handle
         * @return {Boolean} true if the chart needs to re-render
         */
        handleEvent: function handleEvent(e) {
          var me = this;
          var options = me.options || {};
          var hoverOptions = options.hover;
          var changed = false;
          me.lastActive = me.lastActive || []; // Find Active Elements for hover and tooltips

          if (e.type === 'mouseout') {
            me.active = [];
          } else {
            me.active = me.getElementsAtEventForMode(e, hoverOptions.mode, hoverOptions);
          } // On Hover hook


          if (hoverOptions.onHover) {
            // Need to call with native event here to not break backwards compatibility
            hoverOptions.onHover.call(me, e["native"], me.active);
          }

          if (e.type === 'mouseup' || e.type === 'click') {
            if (options.onClick) {
              // Use e.native here for backwards compatibility
              options.onClick.call(me, e["native"], me.active);
            }
          } // Remove styling for last active (even if it may still be active)


          if (me.lastActive.length) {
            me.updateHoverStyle(me.lastActive, hoverOptions.mode, false);
          } // Built in hover styling


          if (me.active.length && hoverOptions.mode) {
            me.updateHoverStyle(me.active, hoverOptions.mode, true);
          }

          changed = !helpers.arrayEquals(me.active, me.lastActive); // Remember Last Actives

          me.lastActive = me.active;
          return changed;
        }
      });
    };
    /***/

  },

  /***/
  "./node_modules/chart.js/src/core/core.datasetController.js": function node_modulesChartJsSrcCoreCoreDatasetControllerJs(module, exports, __webpack_require__) {
    "use strict";

    module.exports = function (Chart) {
      var helpers = Chart.helpers;
      var arrayEvents = ['push', 'pop', 'shift', 'splice', 'unshift'];
      /**
       * Hooks the array methods that add or remove values ('push', pop', 'shift', 'splice',
       * 'unshift') and notify the listener AFTER the array has been altered. Listeners are
       * called on the 'onData*' callbacks (e.g. onDataPush, etc.) with same arguments.
       */

      function listenArrayEvents(array, listener) {
        if (array._chartjs) {
          array._chartjs.listeners.push(listener);

          return;
        }

        Object.defineProperty(array, '_chartjs', {
          configurable: true,
          enumerable: false,
          value: {
            listeners: [listener]
          }
        });
        arrayEvents.forEach(function (key) {
          var method = 'onData' + key.charAt(0).toUpperCase() + key.slice(1);
          var base = array[key];
          Object.defineProperty(array, key, {
            configurable: true,
            enumerable: false,
            value: function value() {
              var args = Array.prototype.slice.call(arguments);
              var res = base.apply(this, args);
              helpers.each(array._chartjs.listeners, function (object) {
                if (typeof object[method] === 'function') {
                  object[method].apply(object, args);
                }
              });
              return res;
            }
          });
        });
      }
      /**
       * Removes the given array event listener and cleanup extra attached properties (such as
       * the _chartjs stub and overridden methods) if array doesn't have any more listeners.
       */


      function unlistenArrayEvents(array, listener) {
        var stub = array._chartjs;

        if (!stub) {
          return;
        }

        var listeners = stub.listeners;
        var index = listeners.indexOf(listener);

        if (index !== -1) {
          listeners.splice(index, 1);
        }

        if (listeners.length > 0) {
          return;
        }

        arrayEvents.forEach(function (key) {
          delete array[key];
        });
        delete array._chartjs;
      } // Base class for all dataset controllers (line, bar, etc)


      Chart.DatasetController = function (chart, datasetIndex) {
        this.initialize(chart, datasetIndex);
      };

      helpers.extend(Chart.DatasetController.prototype, {
        /**
         * Element type used to generate a meta dataset (e.g. Chart.element.Line).
         * @type {Chart.core.element}
         */
        datasetElementType: null,

        /**
         * Element type used to generate a meta data (e.g. Chart.element.Point).
         * @type {Chart.core.element}
         */
        dataElementType: null,
        initialize: function initialize(chart, datasetIndex) {
          var me = this;
          me.chart = chart;
          me.index = datasetIndex;
          me.linkScales();
          me.addElements();
        },
        updateIndex: function updateIndex(datasetIndex) {
          this.index = datasetIndex;
        },
        linkScales: function linkScales() {
          var me = this;
          var meta = me.getMeta();
          var dataset = me.getDataset();

          if (meta.xAxisID === null) {
            meta.xAxisID = dataset.xAxisID || me.chart.options.scales.xAxes[0].id;
          }

          if (meta.yAxisID === null) {
            meta.yAxisID = dataset.yAxisID || me.chart.options.scales.yAxes[0].id;
          }
        },
        getDataset: function getDataset() {
          return this.chart.data.datasets[this.index];
        },
        getMeta: function getMeta() {
          return this.chart.getDatasetMeta(this.index);
        },
        getScaleForId: function getScaleForId(scaleID) {
          return this.chart.scales[scaleID];
        },
        reset: function reset() {
          this.update(true);
        },

        /**
         * @private
         */
        destroy: function destroy() {
          if (this._data) {
            unlistenArrayEvents(this._data, this);
          }
        },
        createMetaDataset: function createMetaDataset() {
          var me = this;
          var type = me.datasetElementType;
          return type && new type({
            _chart: me.chart.chart,
            _datasetIndex: me.index
          });
        },
        createMetaData: function createMetaData(index) {
          var me = this;
          var type = me.dataElementType;
          return type && new type({
            _chart: me.chart.chart,
            _datasetIndex: me.index,
            _index: index
          });
        },
        addElements: function addElements() {
          var me = this;
          var meta = me.getMeta();
          var data = me.getDataset().data || [];
          var metaData = meta.data;
          var i, ilen;

          for (i = 0, ilen = data.length; i < ilen; ++i) {
            metaData[i] = metaData[i] || me.createMetaData(i);
          }

          meta.dataset = meta.dataset || me.createMetaDataset();
        },
        addElementAndReset: function addElementAndReset(index) {
          var element = this.createMetaData(index);
          this.getMeta().data.splice(index, 0, element);
          this.updateElement(element, index, true);
        },
        buildOrUpdateElements: function buildOrUpdateElements() {
          var me = this;
          var dataset = me.getDataset();
          var data = dataset.data || (dataset.data = []); // In order to correctly handle data addition/deletion animation (an thus simulate
          // real-time charts), we need to monitor these data modifications and synchronize
          // the internal meta data accordingly.

          if (me._data !== data) {
            if (me._data) {
              // This case happens when the user replaced the data array instance.
              unlistenArrayEvents(me._data, me);
            }

            listenArrayEvents(data, me);
            me._data = data;
          } // Re-sync meta data in case the user replaced the data array or if we missed
          // any updates and so make sure that we handle number of datapoints changing.


          me.resyncElements();
        },
        update: helpers.noop,
        draw: function draw(ease) {
          var easingDecimal = ease || 1;
          var i, len;
          var metaData = this.getMeta().data;

          for (i = 0, len = metaData.length; i < len; ++i) {
            metaData[i].transition(easingDecimal).draw();
          }
        },
        removeHoverStyle: function removeHoverStyle(element, elementOpts) {
          var dataset = this.chart.data.datasets[element._datasetIndex],
              index = element._index,
              custom = element.custom || {},
              valueOrDefault = helpers.getValueAtIndexOrDefault,
              model = element._model;
          model.backgroundColor = custom.backgroundColor ? custom.backgroundColor : valueOrDefault(dataset.backgroundColor, index, elementOpts.backgroundColor);
          model.borderColor = custom.borderColor ? custom.borderColor : valueOrDefault(dataset.borderColor, index, elementOpts.borderColor);
          model.borderWidth = custom.borderWidth ? custom.borderWidth : valueOrDefault(dataset.borderWidth, index, elementOpts.borderWidth);
        },
        setHoverStyle: function setHoverStyle(element) {
          var dataset = this.chart.data.datasets[element._datasetIndex],
              index = element._index,
              custom = element.custom || {},
              valueOrDefault = helpers.getValueAtIndexOrDefault,
              getHoverColor = helpers.getHoverColor,
              model = element._model;
          model.backgroundColor = custom.hoverBackgroundColor ? custom.hoverBackgroundColor : valueOrDefault(dataset.hoverBackgroundColor, index, getHoverColor(model.backgroundColor));
          model.borderColor = custom.hoverBorderColor ? custom.hoverBorderColor : valueOrDefault(dataset.hoverBorderColor, index, getHoverColor(model.borderColor));
          model.borderWidth = custom.hoverBorderWidth ? custom.hoverBorderWidth : valueOrDefault(dataset.hoverBorderWidth, index, model.borderWidth);
        },

        /**
         * @private
         */
        resyncElements: function resyncElements() {
          var me = this;
          var meta = me.getMeta();
          var data = me.getDataset().data;
          var numMeta = meta.data.length;
          var numData = data.length;

          if (numData < numMeta) {
            meta.data.splice(numData, numMeta - numData);
          } else if (numData > numMeta) {
            me.insertElements(numMeta, numData - numMeta);
          }
        },

        /**
         * @private
         */
        insertElements: function insertElements(start, count) {
          for (var i = 0; i < count; ++i) {
            this.addElementAndReset(start + i);
          }
        },

        /**
         * @private
         */
        onDataPush: function onDataPush() {
          this.insertElements(this.getDataset().data.length - 1, arguments.length);
        },

        /**
         * @private
         */
        onDataPop: function onDataPop() {
          this.getMeta().data.pop();
        },

        /**
         * @private
         */
        onDataShift: function onDataShift() {
          this.getMeta().data.shift();
        },

        /**
         * @private
         */
        onDataSplice: function onDataSplice(start, count) {
          this.getMeta().data.splice(start, count);
          this.insertElements(start, arguments.length - 2);
        },

        /**
         * @private
         */
        onDataUnshift: function onDataUnshift() {
          this.insertElements(0, arguments.length);
        }
      });
      Chart.DatasetController.extend = helpers.inherits;
    };
    /***/

  },

  /***/
  "./node_modules/chart.js/src/core/core.element.js": function node_modulesChartJsSrcCoreCoreElementJs(module, exports, __webpack_require__) {
    "use strict";

    module.exports = function (Chart) {
      var helpers = Chart.helpers;
      Chart.elements = {};

      Chart.Element = function (configuration) {
        helpers.extend(this, configuration);
        this.initialize.apply(this, arguments);
      };

      helpers.extend(Chart.Element.prototype, {
        initialize: function initialize() {
          this.hidden = false;
        },
        pivot: function pivot() {
          var me = this;

          if (!me._view) {
            me._view = helpers.clone(me._model);
          }

          me._start = helpers.clone(me._view);
          return me;
        },
        transition: function transition(ease) {
          var me = this;

          if (!me._view) {
            me._view = helpers.clone(me._model);
          } // No animation -> No Transition


          if (ease === 1) {
            me._view = me._model;
            me._start = null;
            return me;
          }

          if (!me._start) {
            me.pivot();
          }

          helpers.each(me._model, function (value, key) {
            if (key[0] === '_') {// Only non-underscored properties
              // Init if doesn't exist
            } else if (!me._view.hasOwnProperty(key)) {
              if (typeof value === 'number' && !isNaN(me._view[key])) {
                me._view[key] = value * ease;
              } else {
                me._view[key] = value;
              } // No unnecessary computations

            } else if (value === me._view[key]) {// It's the same! Woohoo!
              // Color transitions if possible
            } else if (typeof value === 'string') {
              try {
                var color = helpers.color(me._model[key]).mix(helpers.color(me._start[key]), ease);
                me._view[key] = color.rgbString();
              } catch (err) {
                me._view[key] = value;
              } // Number transitions

            } else if (typeof value === 'number') {
              var startVal = me._start[key] !== undefined && isNaN(me._start[key]) === false ? me._start[key] : 0;
              me._view[key] = (me._model[key] - startVal) * ease + startVal; // Everything else
            } else {
              me._view[key] = value;
            }
          }, me);
          return me;
        },
        tooltipPosition: function tooltipPosition() {
          return {
            x: this._model.x,
            y: this._model.y
          };
        },
        hasValue: function hasValue() {
          return helpers.isNumber(this._model.x) && helpers.isNumber(this._model.y);
        }
      });
      Chart.Element.extend = helpers.inherits;
    };
    /***/

  },

  /***/
  "./node_modules/chart.js/src/core/core.helpers.js": function node_modulesChartJsSrcCoreCoreHelpersJs(module, exports, __webpack_require__) {
    "use strict";
    /* global window: false */

    /* global document: false */

    var color = __webpack_require__(
    /*! chartjs-color */
    "./node_modules/chartjs-color/index.js");

    module.exports = function (Chart) {
      // Global Chart helpers object for utility methods and classes
      var helpers = Chart.helpers = {}; // -- Basic js utility methods

      helpers.each = function (loopable, callback, self, reverse) {
        // Check to see if null or undefined firstly.
        var i, len;

        if (helpers.isArray(loopable)) {
          len = loopable.length;

          if (reverse) {
            for (i = len - 1; i >= 0; i--) {
              callback.call(self, loopable[i], i);
            }
          } else {
            for (i = 0; i < len; i++) {
              callback.call(self, loopable[i], i);
            }
          }
        } else if (typeof loopable === 'object') {
          var keys = Object.keys(loopable);
          len = keys.length;

          for (i = 0; i < len; i++) {
            callback.call(self, loopable[keys[i]], keys[i]);
          }
        }
      };

      helpers.clone = function (obj) {
        var objClone = {};
        helpers.each(obj, function (value, key) {
          if (helpers.isArray(value)) {
            objClone[key] = value.slice(0);
          } else if (typeof value === 'object' && value !== null) {
            objClone[key] = helpers.clone(value);
          } else {
            objClone[key] = value;
          }
        });
        return objClone;
      };

      helpers.extend = function (base) {
        var setFn = function setFn(value, key) {
          base[key] = value;
        };

        for (var i = 1, ilen = arguments.length; i < ilen; i++) {
          helpers.each(arguments[i], setFn);
        }

        return base;
      }; // Need a special merge function to chart configs since they are now grouped


      helpers.configMerge = function (_base) {
        var base = helpers.clone(_base);
        helpers.each(Array.prototype.slice.call(arguments, 1), function (extension) {
          helpers.each(extension, function (value, key) {
            var baseHasProperty = base.hasOwnProperty(key);
            var baseVal = baseHasProperty ? base[key] : {};

            if (key === 'scales') {
              // Scale config merging is complex. Add our own function here for that
              base[key] = helpers.scaleMerge(baseVal, value);
            } else if (key === 'scale') {
              // Used in polar area & radar charts since there is only one scale
              base[key] = helpers.configMerge(baseVal, Chart.scaleService.getScaleDefaults(value.type), value);
            } else if (baseHasProperty && typeof baseVal === 'object' && !helpers.isArray(baseVal) && baseVal !== null && typeof value === 'object' && !helpers.isArray(value)) {
              // If we are overwriting an object with an object, do a merge of the properties.
              base[key] = helpers.configMerge(baseVal, value);
            } else {
              // can just overwrite the value in this case
              base[key] = value;
            }
          });
        });
        return base;
      };

      helpers.scaleMerge = function (_base, extension) {
        var base = helpers.clone(_base);
        helpers.each(extension, function (value, key) {
          if (key === 'xAxes' || key === 'yAxes') {
            // These properties are arrays of items
            if (base.hasOwnProperty(key)) {
              helpers.each(value, function (valueObj, index) {
                var axisType = helpers.getValueOrDefault(valueObj.type, key === 'xAxes' ? 'category' : 'linear');
                var axisDefaults = Chart.scaleService.getScaleDefaults(axisType);

                if (index >= base[key].length || !base[key][index].type) {
                  base[key].push(helpers.configMerge(axisDefaults, valueObj));
                } else if (valueObj.type && valueObj.type !== base[key][index].type) {
                  // Type changed. Bring in the new defaults before we bring in valueObj so that valueObj can override the correct scale defaults
                  base[key][index] = helpers.configMerge(base[key][index], axisDefaults, valueObj);
                } else {
                  // Type is the same
                  base[key][index] = helpers.configMerge(base[key][index], valueObj);
                }
              });
            } else {
              base[key] = [];
              helpers.each(value, function (valueObj) {
                var axisType = helpers.getValueOrDefault(valueObj.type, key === 'xAxes' ? 'category' : 'linear');
                base[key].push(helpers.configMerge(Chart.scaleService.getScaleDefaults(axisType), valueObj));
              });
            }
          } else if (base.hasOwnProperty(key) && typeof base[key] === 'object' && base[key] !== null && typeof value === 'object') {
            // If we are overwriting an object with an object, do a merge of the properties.
            base[key] = helpers.configMerge(base[key], value);
          } else {
            // can just overwrite the value in this case
            base[key] = value;
          }
        });
        return base;
      };

      helpers.getValueAtIndexOrDefault = function (value, index, defaultValue) {
        if (value === undefined || value === null) {
          return defaultValue;
        }

        if (helpers.isArray(value)) {
          return index < value.length ? value[index] : defaultValue;
        }

        return value;
      };

      helpers.getValueOrDefault = function (value, defaultValue) {
        return value === undefined ? defaultValue : value;
      };

      helpers.indexOf = Array.prototype.indexOf ? function (array, item) {
        return array.indexOf(item);
      } : function (array, item) {
        for (var i = 0, ilen = array.length; i < ilen; ++i) {
          if (array[i] === item) {
            return i;
          }
        }

        return -1;
      };

      helpers.where = function (collection, filterCallback) {
        if (helpers.isArray(collection) && Array.prototype.filter) {
          return collection.filter(filterCallback);
        }

        var filtered = [];
        helpers.each(collection, function (item) {
          if (filterCallback(item)) {
            filtered.push(item);
          }
        });
        return filtered;
      };

      helpers.findIndex = Array.prototype.findIndex ? function (array, callback, scope) {
        return array.findIndex(callback, scope);
      } : function (array, callback, scope) {
        scope = scope === undefined ? array : scope;

        for (var i = 0, ilen = array.length; i < ilen; ++i) {
          if (callback.call(scope, array[i], i, array)) {
            return i;
          }
        }

        return -1;
      };

      helpers.findNextWhere = function (arrayToSearch, filterCallback, startIndex) {
        // Default to start of the array
        if (startIndex === undefined || startIndex === null) {
          startIndex = -1;
        }

        for (var i = startIndex + 1; i < arrayToSearch.length; i++) {
          var currentItem = arrayToSearch[i];

          if (filterCallback(currentItem)) {
            return currentItem;
          }
        }
      };

      helpers.findPreviousWhere = function (arrayToSearch, filterCallback, startIndex) {
        // Default to end of the array
        if (startIndex === undefined || startIndex === null) {
          startIndex = arrayToSearch.length;
        }

        for (var i = startIndex - 1; i >= 0; i--) {
          var currentItem = arrayToSearch[i];

          if (filterCallback(currentItem)) {
            return currentItem;
          }
        }
      };

      helpers.inherits = function (extensions) {
        // Basic javascript inheritance based on the model created in Backbone.js
        var me = this;
        var ChartElement = extensions && extensions.hasOwnProperty('constructor') ? extensions.constructor : function () {
          return me.apply(this, arguments);
        };

        var Surrogate = function Surrogate() {
          this.constructor = ChartElement;
        };

        Surrogate.prototype = me.prototype;
        ChartElement.prototype = new Surrogate();
        ChartElement.extend = helpers.inherits;

        if (extensions) {
          helpers.extend(ChartElement.prototype, extensions);
        }

        ChartElement.__super__ = me.prototype;
        return ChartElement;
      };

      helpers.noop = function () {};

      helpers.uid = function () {
        var id = 0;
        return function () {
          return id++;
        };
      }(); // -- Math methods


      helpers.isNumber = function (n) {
        return !isNaN(parseFloat(n)) && isFinite(n);
      };

      helpers.almostEquals = function (x, y, epsilon) {
        return Math.abs(x - y) < epsilon;
      };

      helpers.almostWhole = function (x, epsilon) {
        var rounded = Math.round(x);
        return rounded - epsilon < x && rounded + epsilon > x;
      };

      helpers.max = function (array) {
        return array.reduce(function (max, value) {
          if (!isNaN(value)) {
            return Math.max(max, value);
          }

          return max;
        }, Number.NEGATIVE_INFINITY);
      };

      helpers.min = function (array) {
        return array.reduce(function (min, value) {
          if (!isNaN(value)) {
            return Math.min(min, value);
          }

          return min;
        }, Number.POSITIVE_INFINITY);
      };

      helpers.sign = Math.sign ? function (x) {
        return Math.sign(x);
      } : function (x) {
        x = +x; // convert to a number

        if (x === 0 || isNaN(x)) {
          return x;
        }

        return x > 0 ? 1 : -1;
      };
      helpers.log10 = Math.log10 ? function (x) {
        return Math.log10(x);
      } : function (x) {
        return Math.log(x) / Math.LN10;
      };

      helpers.toRadians = function (degrees) {
        return degrees * (Math.PI / 180);
      };

      helpers.toDegrees = function (radians) {
        return radians * (180 / Math.PI);
      }; // Gets the angle from vertical upright to the point about a centre.


      helpers.getAngleFromPoint = function (centrePoint, anglePoint) {
        var distanceFromXCenter = anglePoint.x - centrePoint.x,
            distanceFromYCenter = anglePoint.y - centrePoint.y,
            radialDistanceFromCenter = Math.sqrt(distanceFromXCenter * distanceFromXCenter + distanceFromYCenter * distanceFromYCenter);
        var angle = Math.atan2(distanceFromYCenter, distanceFromXCenter);

        if (angle < -0.5 * Math.PI) {
          angle += 2.0 * Math.PI; // make sure the returned angle is in the range of (-PI/2, 3PI/2]
        }

        return {
          angle: angle,
          distance: radialDistanceFromCenter
        };
      };

      helpers.distanceBetweenPoints = function (pt1, pt2) {
        return Math.sqrt(Math.pow(pt2.x - pt1.x, 2) + Math.pow(pt2.y - pt1.y, 2));
      };

      helpers.aliasPixel = function (pixelWidth) {
        return pixelWidth % 2 === 0 ? 0 : 0.5;
      };

      helpers.splineCurve = function (firstPoint, middlePoint, afterPoint, t) {
        // Props to Rob Spencer at scaled innovation for his post on splining between points
        // http://scaledinnovation.com/analytics/splines/aboutSplines.html
        // This function must also respect "skipped" points
        var previous = firstPoint.skip ? middlePoint : firstPoint,
            current = middlePoint,
            next = afterPoint.skip ? middlePoint : afterPoint;
        var d01 = Math.sqrt(Math.pow(current.x - previous.x, 2) + Math.pow(current.y - previous.y, 2));
        var d12 = Math.sqrt(Math.pow(next.x - current.x, 2) + Math.pow(next.y - current.y, 2));
        var s01 = d01 / (d01 + d12);
        var s12 = d12 / (d01 + d12); // If all points are the same, s01 & s02 will be inf

        s01 = isNaN(s01) ? 0 : s01;
        s12 = isNaN(s12) ? 0 : s12;
        var fa = t * s01; // scaling factor for triangle Ta

        var fb = t * s12;
        return {
          previous: {
            x: current.x - fa * (next.x - previous.x),
            y: current.y - fa * (next.y - previous.y)
          },
          next: {
            x: current.x + fb * (next.x - previous.x),
            y: current.y + fb * (next.y - previous.y)
          }
        };
      };

      helpers.EPSILON = Number.EPSILON || 1e-14;

      helpers.splineCurveMonotone = function (points) {
        // This function calculates Bézier control points in a similar way than |splineCurve|,
        // but preserves monotonicity of the provided data and ensures no local extremums are added
        // between the dataset discrete points due to the interpolation.
        // See : https://en.wikipedia.org/wiki/Monotone_cubic_interpolation
        var pointsWithTangents = (points || []).map(function (point) {
          return {
            model: point._model,
            deltaK: 0,
            mK: 0
          };
        }); // Calculate slopes (deltaK) and initialize tangents (mK)

        var pointsLen = pointsWithTangents.length;
        var i, pointBefore, pointCurrent, pointAfter;

        for (i = 0; i < pointsLen; ++i) {
          pointCurrent = pointsWithTangents[i];

          if (pointCurrent.model.skip) {
            continue;
          }

          pointBefore = i > 0 ? pointsWithTangents[i - 1] : null;
          pointAfter = i < pointsLen - 1 ? pointsWithTangents[i + 1] : null;

          if (pointAfter && !pointAfter.model.skip) {
            var slopeDeltaX = pointAfter.model.x - pointCurrent.model.x; // In the case of two points that appear at the same x pixel, slopeDeltaX is 0

            pointCurrent.deltaK = slopeDeltaX !== 0 ? (pointAfter.model.y - pointCurrent.model.y) / slopeDeltaX : 0;
          }

          if (!pointBefore || pointBefore.model.skip) {
            pointCurrent.mK = pointCurrent.deltaK;
          } else if (!pointAfter || pointAfter.model.skip) {
            pointCurrent.mK = pointBefore.deltaK;
          } else if (this.sign(pointBefore.deltaK) !== this.sign(pointCurrent.deltaK)) {
            pointCurrent.mK = 0;
          } else {
            pointCurrent.mK = (pointBefore.deltaK + pointCurrent.deltaK) / 2;
          }
        } // Adjust tangents to ensure monotonic properties


        var alphaK, betaK, tauK, squaredMagnitude;

        for (i = 0; i < pointsLen - 1; ++i) {
          pointCurrent = pointsWithTangents[i];
          pointAfter = pointsWithTangents[i + 1];

          if (pointCurrent.model.skip || pointAfter.model.skip) {
            continue;
          }

          if (helpers.almostEquals(pointCurrent.deltaK, 0, this.EPSILON)) {
            pointCurrent.mK = pointAfter.mK = 0;
            continue;
          }

          alphaK = pointCurrent.mK / pointCurrent.deltaK;
          betaK = pointAfter.mK / pointCurrent.deltaK;
          squaredMagnitude = Math.pow(alphaK, 2) + Math.pow(betaK, 2);

          if (squaredMagnitude <= 9) {
            continue;
          }

          tauK = 3 / Math.sqrt(squaredMagnitude);
          pointCurrent.mK = alphaK * tauK * pointCurrent.deltaK;
          pointAfter.mK = betaK * tauK * pointCurrent.deltaK;
        } // Compute control points


        var deltaX;

        for (i = 0; i < pointsLen; ++i) {
          pointCurrent = pointsWithTangents[i];

          if (pointCurrent.model.skip) {
            continue;
          }

          pointBefore = i > 0 ? pointsWithTangents[i - 1] : null;
          pointAfter = i < pointsLen - 1 ? pointsWithTangents[i + 1] : null;

          if (pointBefore && !pointBefore.model.skip) {
            deltaX = (pointCurrent.model.x - pointBefore.model.x) / 3;
            pointCurrent.model.controlPointPreviousX = pointCurrent.model.x - deltaX;
            pointCurrent.model.controlPointPreviousY = pointCurrent.model.y - deltaX * pointCurrent.mK;
          }

          if (pointAfter && !pointAfter.model.skip) {
            deltaX = (pointAfter.model.x - pointCurrent.model.x) / 3;
            pointCurrent.model.controlPointNextX = pointCurrent.model.x + deltaX;
            pointCurrent.model.controlPointNextY = pointCurrent.model.y + deltaX * pointCurrent.mK;
          }
        }
      };

      helpers.nextItem = function (collection, index, loop) {
        if (loop) {
          return index >= collection.length - 1 ? collection[0] : collection[index + 1];
        }

        return index >= collection.length - 1 ? collection[collection.length - 1] : collection[index + 1];
      };

      helpers.previousItem = function (collection, index, loop) {
        if (loop) {
          return index <= 0 ? collection[collection.length - 1] : collection[index - 1];
        }

        return index <= 0 ? collection[0] : collection[index - 1];
      }; // Implementation of the nice number algorithm used in determining where axis labels will go


      helpers.niceNum = function (range, round) {
        var exponent = Math.floor(helpers.log10(range));
        var fraction = range / Math.pow(10, exponent);
        var niceFraction;

        if (round) {
          if (fraction < 1.5) {
            niceFraction = 1;
          } else if (fraction < 3) {
            niceFraction = 2;
          } else if (fraction < 7) {
            niceFraction = 5;
          } else {
            niceFraction = 10;
          }
        } else if (fraction <= 1.0) {
          niceFraction = 1;
        } else if (fraction <= 2) {
          niceFraction = 2;
        } else if (fraction <= 5) {
          niceFraction = 5;
        } else {
          niceFraction = 10;
        }

        return niceFraction * Math.pow(10, exponent);
      }; // Easing functions adapted from Robert Penner's easing equations
      // http://www.robertpenner.com/easing/


      var easingEffects = helpers.easingEffects = {
        linear: function linear(t) {
          return t;
        },
        easeInQuad: function easeInQuad(t) {
          return t * t;
        },
        easeOutQuad: function easeOutQuad(t) {
          return -1 * t * (t - 2);
        },
        easeInOutQuad: function easeInOutQuad(t) {
          if ((t /= 1 / 2) < 1) {
            return 1 / 2 * t * t;
          }

          return -1 / 2 * (--t * (t - 2) - 1);
        },
        easeInCubic: function easeInCubic(t) {
          return t * t * t;
        },
        easeOutCubic: function easeOutCubic(t) {
          return 1 * ((t = t / 1 - 1) * t * t + 1);
        },
        easeInOutCubic: function easeInOutCubic(t) {
          if ((t /= 1 / 2) < 1) {
            return 1 / 2 * t * t * t;
          }

          return 1 / 2 * ((t -= 2) * t * t + 2);
        },
        easeInQuart: function easeInQuart(t) {
          return t * t * t * t;
        },
        easeOutQuart: function easeOutQuart(t) {
          return -1 * ((t = t / 1 - 1) * t * t * t - 1);
        },
        easeInOutQuart: function easeInOutQuart(t) {
          if ((t /= 1 / 2) < 1) {
            return 1 / 2 * t * t * t * t;
          }

          return -1 / 2 * ((t -= 2) * t * t * t - 2);
        },
        easeInQuint: function easeInQuint(t) {
          return 1 * (t /= 1) * t * t * t * t;
        },
        easeOutQuint: function easeOutQuint(t) {
          return 1 * ((t = t / 1 - 1) * t * t * t * t + 1);
        },
        easeInOutQuint: function easeInOutQuint(t) {
          if ((t /= 1 / 2) < 1) {
            return 1 / 2 * t * t * t * t * t;
          }

          return 1 / 2 * ((t -= 2) * t * t * t * t + 2);
        },
        easeInSine: function easeInSine(t) {
          return -1 * Math.cos(t / 1 * (Math.PI / 2)) + 1;
        },
        easeOutSine: function easeOutSine(t) {
          return 1 * Math.sin(t / 1 * (Math.PI / 2));
        },
        easeInOutSine: function easeInOutSine(t) {
          return -1 / 2 * (Math.cos(Math.PI * t / 1) - 1);
        },
        easeInExpo: function easeInExpo(t) {
          return t === 0 ? 1 : 1 * Math.pow(2, 10 * (t / 1 - 1));
        },
        easeOutExpo: function easeOutExpo(t) {
          return t === 1 ? 1 : 1 * (-Math.pow(2, -10 * t / 1) + 1);
        },
        easeInOutExpo: function easeInOutExpo(t) {
          if (t === 0) {
            return 0;
          }

          if (t === 1) {
            return 1;
          }

          if ((t /= 1 / 2) < 1) {
            return 1 / 2 * Math.pow(2, 10 * (t - 1));
          }

          return 1 / 2 * (-Math.pow(2, -10 * --t) + 2);
        },
        easeInCirc: function easeInCirc(t) {
          if (t >= 1) {
            return t;
          }

          return -1 * (Math.sqrt(1 - (t /= 1) * t) - 1);
        },
        easeOutCirc: function easeOutCirc(t) {
          return 1 * Math.sqrt(1 - (t = t / 1 - 1) * t);
        },
        easeInOutCirc: function easeInOutCirc(t) {
          if ((t /= 1 / 2) < 1) {
            return -1 / 2 * (Math.sqrt(1 - t * t) - 1);
          }

          return 1 / 2 * (Math.sqrt(1 - (t -= 2) * t) + 1);
        },
        easeInElastic: function easeInElastic(t) {
          var s = 1.70158;
          var p = 0;
          var a = 1;

          if (t === 0) {
            return 0;
          }

          if ((t /= 1) === 1) {
            return 1;
          }

          if (!p) {
            p = 1 * 0.3;
          }

          if (a < Math.abs(1)) {
            a = 1;
            s = p / 4;
          } else {
            s = p / (2 * Math.PI) * Math.asin(1 / a);
          }

          return -(a * Math.pow(2, 10 * (t -= 1)) * Math.sin((t * 1 - s) * (2 * Math.PI) / p));
        },
        easeOutElastic: function easeOutElastic(t) {
          var s = 1.70158;
          var p = 0;
          var a = 1;

          if (t === 0) {
            return 0;
          }

          if ((t /= 1) === 1) {
            return 1;
          }

          if (!p) {
            p = 1 * 0.3;
          }

          if (a < Math.abs(1)) {
            a = 1;
            s = p / 4;
          } else {
            s = p / (2 * Math.PI) * Math.asin(1 / a);
          }

          return a * Math.pow(2, -10 * t) * Math.sin((t * 1 - s) * (2 * Math.PI) / p) + 1;
        },
        easeInOutElastic: function easeInOutElastic(t) {
          var s = 1.70158;
          var p = 0;
          var a = 1;

          if (t === 0) {
            return 0;
          }

          if ((t /= 1 / 2) === 2) {
            return 1;
          }

          if (!p) {
            p = 1 * (0.3 * 1.5);
          }

          if (a < Math.abs(1)) {
            a = 1;
            s = p / 4;
          } else {
            s = p / (2 * Math.PI) * Math.asin(1 / a);
          }

          if (t < 1) {
            return -0.5 * (a * Math.pow(2, 10 * (t -= 1)) * Math.sin((t * 1 - s) * (2 * Math.PI) / p));
          }

          return a * Math.pow(2, -10 * (t -= 1)) * Math.sin((t * 1 - s) * (2 * Math.PI) / p) * 0.5 + 1;
        },
        easeInBack: function easeInBack(t) {
          var s = 1.70158;
          return 1 * (t /= 1) * t * ((s + 1) * t - s);
        },
        easeOutBack: function easeOutBack(t) {
          var s = 1.70158;
          return 1 * ((t = t / 1 - 1) * t * ((s + 1) * t + s) + 1);
        },
        easeInOutBack: function easeInOutBack(t) {
          var s = 1.70158;

          if ((t /= 1 / 2) < 1) {
            return 1 / 2 * (t * t * (((s *= 1.525) + 1) * t - s));
          }

          return 1 / 2 * ((t -= 2) * t * (((s *= 1.525) + 1) * t + s) + 2);
        },
        easeInBounce: function easeInBounce(t) {
          return 1 - easingEffects.easeOutBounce(1 - t);
        },
        easeOutBounce: function easeOutBounce(t) {
          if ((t /= 1) < 1 / 2.75) {
            return 1 * (7.5625 * t * t);
          } else if (t < 2 / 2.75) {
            return 1 * (7.5625 * (t -= 1.5 / 2.75) * t + 0.75);
          } else if (t < 2.5 / 2.75) {
            return 1 * (7.5625 * (t -= 2.25 / 2.75) * t + 0.9375);
          }

          return 1 * (7.5625 * (t -= 2.625 / 2.75) * t + 0.984375);
        },
        easeInOutBounce: function easeInOutBounce(t) {
          if (t < 1 / 2) {
            return easingEffects.easeInBounce(t * 2) * 0.5;
          }

          return easingEffects.easeOutBounce(t * 2 - 1) * 0.5 + 1 * 0.5;
        }
      }; // Request animation polyfill - http://www.paulirish.com/2011/requestanimationframe-for-smart-animating/

      helpers.requestAnimFrame = function () {
        return window.requestAnimationFrame || window.webkitRequestAnimationFrame || window.mozRequestAnimationFrame || window.oRequestAnimationFrame || window.msRequestAnimationFrame || function (callback) {
          return window.setTimeout(callback, 1000 / 60);
        };
      }(); // -- DOM methods


      helpers.getRelativePosition = function (evt, chart) {
        var mouseX, mouseY;
        var e = evt.originalEvent || evt,
            canvas = evt.currentTarget || evt.srcElement,
            boundingRect = canvas.getBoundingClientRect();
        var touches = e.touches;

        if (touches && touches.length > 0) {
          mouseX = touches[0].clientX;
          mouseY = touches[0].clientY;
        } else {
          mouseX = e.clientX;
          mouseY = e.clientY;
        } // Scale mouse coordinates into canvas coordinates
        // by following the pattern laid out by 'jerryj' in the comments of
        // http://www.html5canvastutorials.com/advanced/html5-canvas-mouse-coordinates/


        var paddingLeft = parseFloat(helpers.getStyle(canvas, 'padding-left'));
        var paddingTop = parseFloat(helpers.getStyle(canvas, 'padding-top'));
        var paddingRight = parseFloat(helpers.getStyle(canvas, 'padding-right'));
        var paddingBottom = parseFloat(helpers.getStyle(canvas, 'padding-bottom'));
        var width = boundingRect.right - boundingRect.left - paddingLeft - paddingRight;
        var height = boundingRect.bottom - boundingRect.top - paddingTop - paddingBottom; // We divide by the current device pixel ratio, because the canvas is scaled up by that amount in each direction. However
        // the backend model is in unscaled coordinates. Since we are going to deal with our model coordinates, we go back here

        mouseX = Math.round((mouseX - boundingRect.left - paddingLeft) / width * canvas.width / chart.currentDevicePixelRatio);
        mouseY = Math.round((mouseY - boundingRect.top - paddingTop) / height * canvas.height / chart.currentDevicePixelRatio);
        return {
          x: mouseX,
          y: mouseY
        };
      };

      helpers.addEvent = function (node, eventType, method) {
        if (node.addEventListener) {
          node.addEventListener(eventType, method);
        } else if (node.attachEvent) {
          node.attachEvent('on' + eventType, method);
        } else {
          node['on' + eventType] = method;
        }
      };

      helpers.removeEvent = function (node, eventType, handler) {
        if (node.removeEventListener) {
          node.removeEventListener(eventType, handler, false);
        } else if (node.detachEvent) {
          node.detachEvent('on' + eventType, handler);
        } else {
          node['on' + eventType] = helpers.noop;
        }
      }; // Private helper function to convert max-width/max-height values that may be percentages into a number


      function parseMaxStyle(styleValue, node, parentProperty) {
        var valueInPixels;

        if (typeof styleValue === 'string') {
          valueInPixels = parseInt(styleValue, 10);

          if (styleValue.indexOf('%') !== -1) {
            // percentage * size in dimension
            valueInPixels = valueInPixels / 100 * node.parentNode[parentProperty];
          }
        } else {
          valueInPixels = styleValue;
        }

        return valueInPixels;
      }
      /**
       * Returns if the given value contains an effective constraint.
       * @private
       */


      function isConstrainedValue(value) {
        return value !== undefined && value !== null && value !== 'none';
      } // Private helper to get a constraint dimension
      // @param domNode : the node to check the constraint on
      // @param maxStyle : the style that defines the maximum for the direction we are using (maxWidth / maxHeight)
      // @param percentageProperty : property of parent to use when calculating width as a percentage
      // @see http://www.nathanaeljones.com/blog/2013/reading-max-width-cross-browser


      function getConstraintDimension(domNode, maxStyle, percentageProperty) {
        var view = document.defaultView;
        var parentNode = domNode.parentNode;
        var constrainedNode = view.getComputedStyle(domNode)[maxStyle];
        var constrainedContainer = view.getComputedStyle(parentNode)[maxStyle];
        var hasCNode = isConstrainedValue(constrainedNode);
        var hasCContainer = isConstrainedValue(constrainedContainer);
        var infinity = Number.POSITIVE_INFINITY;

        if (hasCNode || hasCContainer) {
          return Math.min(hasCNode ? parseMaxStyle(constrainedNode, domNode, percentageProperty) : infinity, hasCContainer ? parseMaxStyle(constrainedContainer, parentNode, percentageProperty) : infinity);
        }

        return 'none';
      } // returns Number or undefined if no constraint


      helpers.getConstraintWidth = function (domNode) {
        return getConstraintDimension(domNode, 'max-width', 'clientWidth');
      }; // returns Number or undefined if no constraint


      helpers.getConstraintHeight = function (domNode) {
        return getConstraintDimension(domNode, 'max-height', 'clientHeight');
      };

      helpers.getMaximumWidth = function (domNode) {
        var container = domNode.parentNode;
        var paddingLeft = parseInt(helpers.getStyle(container, 'padding-left'), 10);
        var paddingRight = parseInt(helpers.getStyle(container, 'padding-right'), 10);
        var w = container.clientWidth - paddingLeft - paddingRight;
        var cw = helpers.getConstraintWidth(domNode);
        return isNaN(cw) ? w : Math.min(w, cw);
      };

      helpers.getMaximumHeight = function (domNode) {
        var container = domNode.parentNode;
        var paddingTop = parseInt(helpers.getStyle(container, 'padding-top'), 10);
        var paddingBottom = parseInt(helpers.getStyle(container, 'padding-bottom'), 10);
        var h = container.clientHeight - paddingTop - paddingBottom;
        var ch = helpers.getConstraintHeight(domNode);
        return isNaN(ch) ? h : Math.min(h, ch);
      };

      helpers.getStyle = function (el, property) {
        return el.currentStyle ? el.currentStyle[property] : document.defaultView.getComputedStyle(el, null).getPropertyValue(property);
      };

      helpers.retinaScale = function (chart) {
        var pixelRatio = chart.currentDevicePixelRatio = window.devicePixelRatio || 1;

        if (pixelRatio === 1) {
          return;
        }

        var canvas = chart.canvas;
        var height = chart.height;
        var width = chart.width;
        canvas.height = height * pixelRatio;
        canvas.width = width * pixelRatio;
        chart.ctx.scale(pixelRatio, pixelRatio); // If no style has been set on the canvas, the render size is used as display size,
        // making the chart visually bigger, so let's enforce it to the "correct" values.
        // See https://github.com/chartjs/Chart.js/issues/3575

        canvas.style.height = height + 'px';
        canvas.style.width = width + 'px';
      }; // -- Canvas methods


      helpers.clear = function (chart) {
        chart.ctx.clearRect(0, 0, chart.width, chart.height);
      };

      helpers.fontString = function (pixelSize, fontStyle, fontFamily) {
        return fontStyle + ' ' + pixelSize + 'px ' + fontFamily;
      };

      helpers.longestText = function (ctx, font, arrayOfThings, cache) {
        cache = cache || {};
        var data = cache.data = cache.data || {};
        var gc = cache.garbageCollect = cache.garbageCollect || [];

        if (cache.font !== font) {
          data = cache.data = {};
          gc = cache.garbageCollect = [];
          cache.font = font;
        }

        ctx.font = font;
        var longest = 0;
        helpers.each(arrayOfThings, function (thing) {
          // Undefined strings and arrays should not be measured
          if (thing !== undefined && thing !== null && helpers.isArray(thing) !== true) {
            longest = helpers.measureText(ctx, data, gc, longest, thing);
          } else if (helpers.isArray(thing)) {
            // if it is an array lets measure each element
            // to do maybe simplify this function a bit so we can do this more recursively?
            helpers.each(thing, function (nestedThing) {
              // Undefined strings and arrays should not be measured
              if (nestedThing !== undefined && nestedThing !== null && !helpers.isArray(nestedThing)) {
                longest = helpers.measureText(ctx, data, gc, longest, nestedThing);
              }
            });
          }
        });
        var gcLen = gc.length / 2;

        if (gcLen > arrayOfThings.length) {
          for (var i = 0; i < gcLen; i++) {
            delete data[gc[i]];
          }

          gc.splice(0, gcLen);
        }

        return longest;
      };

      helpers.measureText = function (ctx, data, gc, longest, string) {
        var textWidth = data[string];

        if (!textWidth) {
          textWidth = data[string] = ctx.measureText(string).width;
          gc.push(string);
        }

        if (textWidth > longest) {
          longest = textWidth;
        }

        return longest;
      };

      helpers.numberOfLabelLines = function (arrayOfThings) {
        var numberOfLines = 1;
        helpers.each(arrayOfThings, function (thing) {
          if (helpers.isArray(thing)) {
            if (thing.length > numberOfLines) {
              numberOfLines = thing.length;
            }
          }
        });
        return numberOfLines;
      };

      helpers.drawRoundedRectangle = function (ctx, x, y, width, height, radius) {
        ctx.beginPath();
        ctx.moveTo(x + radius, y);
        ctx.lineTo(x + width - radius, y);
        ctx.quadraticCurveTo(x + width, y, x + width, y + radius);
        ctx.lineTo(x + width, y + height - radius);
        ctx.quadraticCurveTo(x + width, y + height, x + width - radius, y + height);
        ctx.lineTo(x + radius, y + height);
        ctx.quadraticCurveTo(x, y + height, x, y + height - radius);
        ctx.lineTo(x, y + radius);
        ctx.quadraticCurveTo(x, y, x + radius, y);
        ctx.closePath();
      };

      helpers.color = function (c) {
        if (!color) {
          console.error('Color.js not found!');
          return c;
        }
        /* global CanvasGradient */


        if (c instanceof CanvasGradient) {
          return color(Chart.defaults.global.defaultColor);
        }

        return color(c);
      };

      helpers.isArray = Array.isArray ? function (obj) {
        return Array.isArray(obj);
      } : function (obj) {
        return Object.prototype.toString.call(obj) === '[object Array]';
      }; // ! @see http://stackoverflow.com/a/14853974

      helpers.arrayEquals = function (a0, a1) {
        var i, ilen, v0, v1;

        if (!a0 || !a1 || a0.length !== a1.length) {
          return false;
        }

        for (i = 0, ilen = a0.length; i < ilen; ++i) {
          v0 = a0[i];
          v1 = a1[i];

          if (v0 instanceof Array && v1 instanceof Array) {
            if (!helpers.arrayEquals(v0, v1)) {
              return false;
            }
          } else if (v0 !== v1) {
            // NOTE: two different object instances will never be equal: {x:20} != {x:20}
            return false;
          }
        }

        return true;
      };

      helpers.callCallback = function (fn, args, _tArg) {
        if (fn && typeof fn.call === 'function') {
          fn.apply(_tArg, args);
        }
      };

      helpers.getHoverColor = function (colorValue) {
        /* global CanvasPattern */
        return colorValue instanceof CanvasPattern ? colorValue : helpers.color(colorValue).saturate(0.5).darken(0.1).rgbString();
      };
    };
    /***/

  },

  /***/
  "./node_modules/chart.js/src/core/core.interaction.js": function node_modulesChartJsSrcCoreCoreInteractionJs(module, exports, __webpack_require__) {
    "use strict";

    module.exports = function (Chart) {
      var helpers = Chart.helpers;
      /**
       * Helper function to get relative position for an event
       * @param {Event|IEvent} event - The event to get the position for
       * @param {Chart} chart - The chart
       * @returns {Point} the event position
       */

      function getRelativePosition(e, chart) {
        if (e["native"]) {
          return {
            x: e.x,
            y: e.y
          };
        }

        return helpers.getRelativePosition(e, chart);
      }
      /**
       * Helper function to traverse all of the visible elements in the chart
       * @param chart {chart} the chart
       * @param handler {Function} the callback to execute for each visible item
       */


      function parseVisibleItems(chart, handler) {
        var datasets = chart.data.datasets;
        var meta, i, j, ilen, jlen;

        for (i = 0, ilen = datasets.length; i < ilen; ++i) {
          if (!chart.isDatasetVisible(i)) {
            continue;
          }

          meta = chart.getDatasetMeta(i);

          for (j = 0, jlen = meta.data.length; j < jlen; ++j) {
            var element = meta.data[j];

            if (!element._view.skip) {
              handler(element);
            }
          }
        }
      }
      /**
       * Helper function to get the items that intersect the event position
       * @param items {ChartElement[]} elements to filter
       * @param position {Point} the point to be nearest to
       * @return {ChartElement[]} the nearest items
       */


      function getIntersectItems(chart, position) {
        var elements = [];
        parseVisibleItems(chart, function (element) {
          if (element.inRange(position.x, position.y)) {
            elements.push(element);
          }
        });
        return elements;
      }
      /**
       * Helper function to get the items nearest to the event position considering all visible items in teh chart
       * @param chart {Chart} the chart to look at elements from
       * @param position {Point} the point to be nearest to
       * @param intersect {Boolean} if true, only consider items that intersect the position
       * @param distanceMetric {Function} Optional function to provide the distance between
       * @return {ChartElement[]} the nearest items
       */


      function getNearestItems(chart, position, intersect, distanceMetric) {
        var minDistance = Number.POSITIVE_INFINITY;
        var nearestItems = [];

        if (!distanceMetric) {
          distanceMetric = helpers.distanceBetweenPoints;
        }

        parseVisibleItems(chart, function (element) {
          if (intersect && !element.inRange(position.x, position.y)) {
            return;
          }

          var center = element.getCenterPoint();
          var distance = distanceMetric(position, center);

          if (distance < minDistance) {
            nearestItems = [element];
            minDistance = distance;
          } else if (distance === minDistance) {
            // Can have multiple items at the same distance in which case we sort by size
            nearestItems.push(element);
          }
        });
        return nearestItems;
      }

      function indexMode(chart, e, options) {
        var position = getRelativePosition(e, chart.chart);

        var distanceMetric = function distanceMetric(pt1, pt2) {
          return Math.abs(pt1.x - pt2.x);
        };

        var items = options.intersect ? getIntersectItems(chart, position) : getNearestItems(chart, position, false, distanceMetric);
        var elements = [];

        if (!items.length) {
          return [];
        }

        chart.data.datasets.forEach(function (dataset, datasetIndex) {
          if (chart.isDatasetVisible(datasetIndex)) {
            var meta = chart.getDatasetMeta(datasetIndex),
                element = meta.data[items[0]._index]; // don't count items that are skipped (null data)

            if (element && !element._view.skip) {
              elements.push(element);
            }
          }
        });
        return elements;
      }
      /**
       * @interface IInteractionOptions
       */

      /**
       * If true, only consider items that intersect the point
       * @name IInterfaceOptions#boolean
       * @type Boolean
       */

      /**
       * Contains interaction related functions
       * @namespace Chart.Interaction
       */


      Chart.Interaction = {
        // Helper function for different modes
        modes: {
          single: function single(chart, e) {
            var position = getRelativePosition(e, chart.chart);
            var elements = [];
            parseVisibleItems(chart, function (element) {
              if (element.inRange(position.x, position.y)) {
                elements.push(element);
                return elements;
              }
            });
            return elements.slice(0, 1);
          },

          /**
           * @function Chart.Interaction.modes.label
           * @deprecated since version 2.4.0
           */
          label: indexMode,

          /**
           * Returns items at the same index. If the options.intersect parameter is true, we only return items if we intersect something
           * If the options.intersect mode is false, we find the nearest item and return the items at the same index as that item
           * @function Chart.Interaction.modes.index
           * @since v2.4.0
           * @param chart {chart} the chart we are returning items from
           * @param e {Event} the event we are find things at
           * @param options {IInteractionOptions} options to use during interaction
           * @return {Chart.Element[]} Array of elements that are under the point. If none are found, an empty array is returned
           */
          index: indexMode,

          /**
           * Returns items in the same dataset. If the options.intersect parameter is true, we only return items if we intersect something
           * If the options.intersect is false, we find the nearest item and return the items in that dataset
           * @function Chart.Interaction.modes.dataset
           * @param chart {chart} the chart we are returning items from
           * @param e {Event} the event we are find things at
           * @param options {IInteractionOptions} options to use during interaction
           * @return {Chart.Element[]} Array of elements that are under the point. If none are found, an empty array is returned
           */
          dataset: function dataset(chart, e, options) {
            var position = getRelativePosition(e, chart.chart);
            var items = options.intersect ? getIntersectItems(chart, position) : getNearestItems(chart, position, false);

            if (items.length > 0) {
              items = chart.getDatasetMeta(items[0]._datasetIndex).data;
            }

            return items;
          },

          /**
           * @function Chart.Interaction.modes.x-axis
           * @deprecated since version 2.4.0. Use index mode and intersect == true
           */
          'x-axis': function xAxis(chart, e) {
            return indexMode(chart, e, true);
          },

          /**
           * Point mode returns all elements that hit test based on the event position
           * of the event
           * @function Chart.Interaction.modes.intersect
           * @param chart {chart} the chart we are returning items from
           * @param e {Event} the event we are find things at
           * @return {Chart.Element[]} Array of elements that are under the point. If none are found, an empty array is returned
           */
          point: function point(chart, e) {
            var position = getRelativePosition(e, chart.chart);
            return getIntersectItems(chart, position);
          },

          /**
           * nearest mode returns the element closest to the point
           * @function Chart.Interaction.modes.intersect
           * @param chart {chart} the chart we are returning items from
           * @param e {Event} the event we are find things at
           * @param options {IInteractionOptions} options to use
           * @return {Chart.Element[]} Array of elements that are under the point. If none are found, an empty array is returned
           */
          nearest: function nearest(chart, e, options) {
            var position = getRelativePosition(e, chart.chart);
            var nearestItems = getNearestItems(chart, position, options.intersect); // We have multiple items at the same distance from the event. Now sort by smallest

            if (nearestItems.length > 1) {
              nearestItems.sort(function (a, b) {
                var sizeA = a.getArea();
                var sizeB = b.getArea();
                var ret = sizeA - sizeB;

                if (ret === 0) {
                  // if equal sort by dataset index
                  ret = a._datasetIndex - b._datasetIndex;
                }

                return ret;
              });
            } // Return only 1 item


            return nearestItems.slice(0, 1);
          },

          /**
           * x mode returns the elements that hit-test at the current x coordinate
           * @function Chart.Interaction.modes.x
           * @param chart {chart} the chart we are returning items from
           * @param e {Event} the event we are find things at
           * @param options {IInteractionOptions} options to use
           * @return {Chart.Element[]} Array of elements that are under the point. If none are found, an empty array is returned
           */
          x: function x(chart, e, options) {
            var position = getRelativePosition(e, chart.chart);
            var items = [];
            var intersectsItem = false;
            parseVisibleItems(chart, function (element) {
              if (element.inXRange(position.x)) {
                items.push(element);
              }

              if (element.inRange(position.x, position.y)) {
                intersectsItem = true;
              }
            }); // If we want to trigger on an intersect and we don't have any items
            // that intersect the position, return nothing

            if (options.intersect && !intersectsItem) {
              items = [];
            }

            return items;
          },

          /**
           * y mode returns the elements that hit-test at the current y coordinate
           * @function Chart.Interaction.modes.y
           * @param chart {chart} the chart we are returning items from
           * @param e {Event} the event we are find things at
           * @param options {IInteractionOptions} options to use
           * @return {Chart.Element[]} Array of elements that are under the point. If none are found, an empty array is returned
           */
          y: function y(chart, e, options) {
            var position = getRelativePosition(e, chart.chart);
            var items = [];
            var intersectsItem = false;
            parseVisibleItems(chart, function (element) {
              if (element.inYRange(position.y)) {
                items.push(element);
              }

              if (element.inRange(position.x, position.y)) {
                intersectsItem = true;
              }
            }); // If we want to trigger on an intersect and we don't have any items
            // that intersect the position, return nothing

            if (options.intersect && !intersectsItem) {
              items = [];
            }

            return items;
          }
        }
      };
    };
    /***/

  },

  /***/
  "./node_modules/chart.js/src/core/core.js": function node_modulesChartJsSrcCoreCoreJs(module, exports, __webpack_require__) {
    "use strict";

    module.exports = function () {
      // Occupy the global variable of Chart, and create a simple base class
      var Chart = function Chart(item, config) {
        this.controller = new Chart.Controller(item, config, this);
        return this.controller;
      }; // Globally expose the defaults to allow for user updating/changing


      Chart.defaults = {
        global: {
          responsive: true,
          responsiveAnimationDuration: 0,
          maintainAspectRatio: true,
          events: ['mousemove', 'mouseout', 'click', 'touchstart', 'touchmove'],
          hover: {
            onHover: null,
            mode: 'nearest',
            intersect: true,
            animationDuration: 400
          },
          onClick: null,
          defaultColor: 'rgba(0,0,0,0.1)',
          defaultFontColor: '#666',
          defaultFontFamily: "'Helvetica Neue', 'Helvetica', 'Arial', sans-serif",
          defaultFontSize: 12,
          defaultFontStyle: 'normal',
          showLines: true,
          // Element defaults defined in element extensions
          elements: {},
          // Legend callback string
          legendCallback: function legendCallback(chart) {
            var text = [];
            text.push('<ul class="' + chart.id + '-legend">');

            for (var i = 0; i < chart.data.datasets.length; i++) {
              text.push('<li><span style="background-color:' + chart.data.datasets[i].backgroundColor + '"></span>');

              if (chart.data.datasets[i].label) {
                text.push(chart.data.datasets[i].label);
              }

              text.push('</li>');
            }

            text.push('</ul>');
            return text.join('');
          }
        }
      };
      Chart.Chart = Chart;
      return Chart;
    };
    /***/

  },

  /***/
  "./node_modules/chart.js/src/core/core.layoutService.js": function node_modulesChartJsSrcCoreCoreLayoutServiceJs(module, exports, __webpack_require__) {
    "use strict";

    module.exports = function (Chart) {
      var helpers = Chart.helpers; // The layout service is very self explanatory.  It's responsible for the layout within a chart.
      // Scales, Legends and Plugins all rely on the layout service and can easily register to be placed anywhere they need
      // It is this service's responsibility of carrying out that layout.

      Chart.layoutService = {
        defaults: {},
        // Register a box to a chartInstance. A box is simply a reference to an object that requires layout. eg. Scales, Legend, Plugins.
        addBox: function addBox(chartInstance, box) {
          if (!chartInstance.boxes) {
            chartInstance.boxes = [];
          }

          chartInstance.boxes.push(box);
        },
        removeBox: function removeBox(chartInstance, box) {
          if (!chartInstance.boxes) {
            return;
          }

          chartInstance.boxes.splice(chartInstance.boxes.indexOf(box), 1);
        },
        // The most important function
        update: function update(chartInstance, width, height) {
          if (!chartInstance) {
            return;
          }

          var layoutOptions = chartInstance.options.layout;
          var padding = layoutOptions ? layoutOptions.padding : null;
          var leftPadding = 0;
          var rightPadding = 0;
          var topPadding = 0;
          var bottomPadding = 0;

          if (!isNaN(padding)) {
            // options.layout.padding is a number. assign to all
            leftPadding = padding;
            rightPadding = padding;
            topPadding = padding;
            bottomPadding = padding;
          } else {
            leftPadding = padding.left || 0;
            rightPadding = padding.right || 0;
            topPadding = padding.top || 0;
            bottomPadding = padding.bottom || 0;
          }

          var leftBoxes = helpers.where(chartInstance.boxes, function (box) {
            return box.options.position === 'left';
          });
          var rightBoxes = helpers.where(chartInstance.boxes, function (box) {
            return box.options.position === 'right';
          });
          var topBoxes = helpers.where(chartInstance.boxes, function (box) {
            return box.options.position === 'top';
          });
          var bottomBoxes = helpers.where(chartInstance.boxes, function (box) {
            return box.options.position === 'bottom';
          }); // Boxes that overlay the chartarea such as the radialLinear scale

          var chartAreaBoxes = helpers.where(chartInstance.boxes, function (box) {
            return box.options.position === 'chartArea';
          }); // Ensure that full width boxes are at the very top / bottom

          topBoxes.sort(function (a, b) {
            return (b.options.fullWidth ? 1 : 0) - (a.options.fullWidth ? 1 : 0);
          });
          bottomBoxes.sort(function (a, b) {
            return (a.options.fullWidth ? 1 : 0) - (b.options.fullWidth ? 1 : 0);
          }); // Essentially we now have any number of boxes on each of the 4 sides.
          // Our canvas looks like the following.
          // The areas L1 and L2 are the left axes. R1 is the right axis, T1 is the top axis and
          // B1 is the bottom axis
          // There are also 4 quadrant-like locations (left to right instead of clockwise) reserved for chart overlays
          // These locations are single-box locations only, when trying to register a chartArea location that is already taken,
          // an error will be thrown.
          //
          // |----------------------------------------------------|
          // |                  T1 (Full Width)                   |
          // |----------------------------------------------------|
          // |    |    |                 T2                  |    |
          // |    |----|-------------------------------------|----|
          // |    |    | C1 |                           | C2 |    |
          // |    |    |----|                           |----|    |
          // |    |    |                                     |    |
          // | L1 | L2 |           ChartArea (C0)            | R1 |
          // |    |    |                                     |    |
          // |    |    |----|                           |----|    |
          // |    |    | C3 |                           | C4 |    |
          // |    |----|-------------------------------------|----|
          // |    |    |                 B1                  |    |
          // |----------------------------------------------------|
          // |                  B2 (Full Width)                   |
          // |----------------------------------------------------|
          //
          // What we do to find the best sizing, we do the following
          // 1. Determine the minimum size of the chart area.
          // 2. Split the remaining width equally between each vertical axis
          // 3. Split the remaining height equally between each horizontal axis
          // 4. Give each layout the maximum size it can be. The layout will return it's minimum size
          // 5. Adjust the sizes of each axis based on it's minimum reported size.
          // 6. Refit each axis
          // 7. Position each axis in the final location
          // 8. Tell the chart the final location of the chart area
          // 9. Tell any axes that overlay the chart area the positions of the chart area
          // Step 1

          var chartWidth = width - leftPadding - rightPadding;
          var chartHeight = height - topPadding - bottomPadding;
          var chartAreaWidth = chartWidth / 2; // min 50%

          var chartAreaHeight = chartHeight / 2; // min 50%
          // Step 2

          var verticalBoxWidth = (width - chartAreaWidth) / (leftBoxes.length + rightBoxes.length); // Step 3

          var horizontalBoxHeight = (height - chartAreaHeight) / (topBoxes.length + bottomBoxes.length); // Step 4

          var maxChartAreaWidth = chartWidth;
          var maxChartAreaHeight = chartHeight;
          var minBoxSizes = [];

          function getMinimumBoxSize(box) {
            var minSize;
            var isHorizontal = box.isHorizontal();

            if (isHorizontal) {
              minSize = box.update(box.options.fullWidth ? chartWidth : maxChartAreaWidth, horizontalBoxHeight);
              maxChartAreaHeight -= minSize.height;
            } else {
              minSize = box.update(verticalBoxWidth, chartAreaHeight);
              maxChartAreaWidth -= minSize.width;
            }

            minBoxSizes.push({
              horizontal: isHorizontal,
              minSize: minSize,
              box: box
            });
          }

          helpers.each(leftBoxes.concat(rightBoxes, topBoxes, bottomBoxes), getMinimumBoxSize); // If a horizontal box has padding, we move the left boxes over to avoid ugly charts (see issue #2478)

          var maxHorizontalLeftPadding = 0;
          var maxHorizontalRightPadding = 0;
          var maxVerticalTopPadding = 0;
          var maxVerticalBottomPadding = 0;
          helpers.each(topBoxes.concat(bottomBoxes), function (horizontalBox) {
            if (horizontalBox.getPadding) {
              var boxPadding = horizontalBox.getPadding();
              maxHorizontalLeftPadding = Math.max(maxHorizontalLeftPadding, boxPadding.left);
              maxHorizontalRightPadding = Math.max(maxHorizontalRightPadding, boxPadding.right);
            }
          });
          helpers.each(leftBoxes.concat(rightBoxes), function (verticalBox) {
            if (verticalBox.getPadding) {
              var boxPadding = verticalBox.getPadding();
              maxVerticalTopPadding = Math.max(maxVerticalTopPadding, boxPadding.top);
              maxVerticalBottomPadding = Math.max(maxVerticalBottomPadding, boxPadding.bottom);
            }
          }); // At this point, maxChartAreaHeight and maxChartAreaWidth are the size the chart area could
          // be if the axes are drawn at their minimum sizes.
          // Steps 5 & 6

          var totalLeftBoxesWidth = leftPadding;
          var totalRightBoxesWidth = rightPadding;
          var totalTopBoxesHeight = topPadding;
          var totalBottomBoxesHeight = bottomPadding; // Function to fit a box

          function fitBox(box) {
            var minBoxSize = helpers.findNextWhere(minBoxSizes, function (minBox) {
              return minBox.box === box;
            });

            if (minBoxSize) {
              if (box.isHorizontal()) {
                var scaleMargin = {
                  left: Math.max(totalLeftBoxesWidth, maxHorizontalLeftPadding),
                  right: Math.max(totalRightBoxesWidth, maxHorizontalRightPadding),
                  top: 0,
                  bottom: 0
                }; // Don't use min size here because of label rotation. When the labels are rotated, their rotation highly depends
                // on the margin. Sometimes they need to increase in size slightly

                box.update(box.options.fullWidth ? chartWidth : maxChartAreaWidth, chartHeight / 2, scaleMargin);
              } else {
                box.update(minBoxSize.minSize.width, maxChartAreaHeight);
              }
            }
          } // Update, and calculate the left and right margins for the horizontal boxes


          helpers.each(leftBoxes.concat(rightBoxes), fitBox);
          helpers.each(leftBoxes, function (box) {
            totalLeftBoxesWidth += box.width;
          });
          helpers.each(rightBoxes, function (box) {
            totalRightBoxesWidth += box.width;
          }); // Set the Left and Right margins for the horizontal boxes

          helpers.each(topBoxes.concat(bottomBoxes), fitBox); // Figure out how much margin is on the top and bottom of the vertical boxes

          helpers.each(topBoxes, function (box) {
            totalTopBoxesHeight += box.height;
          });
          helpers.each(bottomBoxes, function (box) {
            totalBottomBoxesHeight += box.height;
          });

          function finalFitVerticalBox(box) {
            var minBoxSize = helpers.findNextWhere(minBoxSizes, function (minSize) {
              return minSize.box === box;
            });
            var scaleMargin = {
              left: 0,
              right: 0,
              top: totalTopBoxesHeight,
              bottom: totalBottomBoxesHeight
            };

            if (minBoxSize) {
              box.update(minBoxSize.minSize.width, maxChartAreaHeight, scaleMargin);
            }
          } // Let the left layout know the final margin


          helpers.each(leftBoxes.concat(rightBoxes), finalFitVerticalBox); // Recalculate because the size of each layout might have changed slightly due to the margins (label rotation for instance)

          totalLeftBoxesWidth = leftPadding;
          totalRightBoxesWidth = rightPadding;
          totalTopBoxesHeight = topPadding;
          totalBottomBoxesHeight = bottomPadding;
          helpers.each(leftBoxes, function (box) {
            totalLeftBoxesWidth += box.width;
          });
          helpers.each(rightBoxes, function (box) {
            totalRightBoxesWidth += box.width;
          });
          helpers.each(topBoxes, function (box) {
            totalTopBoxesHeight += box.height;
          });
          helpers.each(bottomBoxes, function (box) {
            totalBottomBoxesHeight += box.height;
          }); // We may be adding some padding to account for rotated x axis labels

          var leftPaddingAddition = Math.max(maxHorizontalLeftPadding - totalLeftBoxesWidth, 0);
          totalLeftBoxesWidth += leftPaddingAddition;
          totalRightBoxesWidth += Math.max(maxHorizontalRightPadding - totalRightBoxesWidth, 0);
          var topPaddingAddition = Math.max(maxVerticalTopPadding - totalTopBoxesHeight, 0);
          totalTopBoxesHeight += topPaddingAddition;
          totalBottomBoxesHeight += Math.max(maxVerticalBottomPadding - totalBottomBoxesHeight, 0); // Figure out if our chart area changed. This would occur if the dataset layout label rotation
          // changed due to the application of the margins in step 6. Since we can only get bigger, this is safe to do
          // without calling `fit` again

          var newMaxChartAreaHeight = height - totalTopBoxesHeight - totalBottomBoxesHeight;
          var newMaxChartAreaWidth = width - totalLeftBoxesWidth - totalRightBoxesWidth;

          if (newMaxChartAreaWidth !== maxChartAreaWidth || newMaxChartAreaHeight !== maxChartAreaHeight) {
            helpers.each(leftBoxes, function (box) {
              box.height = newMaxChartAreaHeight;
            });
            helpers.each(rightBoxes, function (box) {
              box.height = newMaxChartAreaHeight;
            });
            helpers.each(topBoxes, function (box) {
              if (!box.options.fullWidth) {
                box.width = newMaxChartAreaWidth;
              }
            });
            helpers.each(bottomBoxes, function (box) {
              if (!box.options.fullWidth) {
                box.width = newMaxChartAreaWidth;
              }
            });
            maxChartAreaHeight = newMaxChartAreaHeight;
            maxChartAreaWidth = newMaxChartAreaWidth;
          } // Step 7 - Position the boxes


          var left = leftPadding + leftPaddingAddition;
          var top = topPadding + topPaddingAddition;

          function placeBox(box) {
            if (box.isHorizontal()) {
              box.left = box.options.fullWidth ? leftPadding : totalLeftBoxesWidth;
              box.right = box.options.fullWidth ? width - rightPadding : totalLeftBoxesWidth + maxChartAreaWidth;
              box.top = top;
              box.bottom = top + box.height; // Move to next point

              top = box.bottom;
            } else {
              box.left = left;
              box.right = left + box.width;
              box.top = totalTopBoxesHeight;
              box.bottom = totalTopBoxesHeight + maxChartAreaHeight; // Move to next point

              left = box.right;
            }
          }

          helpers.each(leftBoxes.concat(topBoxes), placeBox); // Account for chart width and height

          left += maxChartAreaWidth;
          top += maxChartAreaHeight;
          helpers.each(rightBoxes, placeBox);
          helpers.each(bottomBoxes, placeBox); // Step 8

          chartInstance.chartArea = {
            left: totalLeftBoxesWidth,
            top: totalTopBoxesHeight,
            right: totalLeftBoxesWidth + maxChartAreaWidth,
            bottom: totalTopBoxesHeight + maxChartAreaHeight
          }; // Step 9

          helpers.each(chartAreaBoxes, function (box) {
            box.left = chartInstance.chartArea.left;
            box.top = chartInstance.chartArea.top;
            box.right = chartInstance.chartArea.right;
            box.bottom = chartInstance.chartArea.bottom;
            box.update(maxChartAreaWidth, maxChartAreaHeight);
          });
        }
      };
    };
    /***/

  },

  /***/
  "./node_modules/chart.js/src/core/core.legend.js": function node_modulesChartJsSrcCoreCoreLegendJs(module, exports, __webpack_require__) {
    "use strict";

    module.exports = function (Chart) {
      var helpers = Chart.helpers;
      var noop = helpers.noop;
      Chart.defaults.global.legend = {
        display: true,
        position: 'top',
        fullWidth: true,
        // marks that this box should take the full width of the canvas (pushing down other boxes)
        reverse: false,
        // a callback that will handle
        onClick: function onClick(e, legendItem) {
          var index = legendItem.datasetIndex;
          var ci = this.chart;
          var meta = ci.getDatasetMeta(index); // See controller.isDatasetVisible comment

          meta.hidden = meta.hidden === null ? !ci.data.datasets[index].hidden : null; // We hid a dataset ... rerender the chart

          ci.update();
        },
        onHover: null,
        labels: {
          boxWidth: 40,
          padding: 10,
          // Generates labels shown in the legend
          // Valid properties to return:
          // text : text to display
          // fillStyle : fill of coloured box
          // strokeStyle: stroke of coloured box
          // hidden : if this legend item refers to a hidden item
          // lineCap : cap style for line
          // lineDash
          // lineDashOffset :
          // lineJoin :
          // lineWidth :
          generateLabels: function generateLabels(chart) {
            var data = chart.data;
            return helpers.isArray(data.datasets) ? data.datasets.map(function (dataset, i) {
              return {
                text: dataset.label,
                fillStyle: !helpers.isArray(dataset.backgroundColor) ? dataset.backgroundColor : dataset.backgroundColor[0],
                hidden: !chart.isDatasetVisible(i),
                lineCap: dataset.borderCapStyle,
                lineDash: dataset.borderDash,
                lineDashOffset: dataset.borderDashOffset,
                lineJoin: dataset.borderJoinStyle,
                lineWidth: dataset.borderWidth,
                strokeStyle: dataset.borderColor,
                pointStyle: dataset.pointStyle,
                // Below is extra data used for toggling the datasets
                datasetIndex: i
              };
            }, this) : [];
          }
        }
      };
      /**
       * Helper function to get the box width based on the usePointStyle option
       * @param labelopts {Object} the label options on the legend
       * @param fontSize {Number} the label font size
       * @return {Number} width of the color box area
       */

      function getBoxWidth(labelOpts, fontSize) {
        return labelOpts.usePointStyle ? fontSize * Math.SQRT2 : labelOpts.boxWidth;
      }

      Chart.Legend = Chart.Element.extend({
        initialize: function initialize(config) {
          helpers.extend(this, config); // Contains hit boxes for each dataset (in dataset order)

          this.legendHitBoxes = []; // Are we in doughnut mode which has a different data type

          this.doughnutMode = false;
        },
        // These methods are ordered by lifecycle. Utilities then follow.
        // Any function defined here is inherited by all legend types.
        // Any function can be extended by the legend type
        beforeUpdate: noop,
        update: function update(maxWidth, maxHeight, margins) {
          var me = this; // Update Lifecycle - Probably don't want to ever extend or overwrite this function ;)

          me.beforeUpdate(); // Absorb the master measurements

          me.maxWidth = maxWidth;
          me.maxHeight = maxHeight;
          me.margins = margins; // Dimensions

          me.beforeSetDimensions();
          me.setDimensions();
          me.afterSetDimensions(); // Labels

          me.beforeBuildLabels();
          me.buildLabels();
          me.afterBuildLabels(); // Fit

          me.beforeFit();
          me.fit();
          me.afterFit(); //

          me.afterUpdate();
          return me.minSize;
        },
        afterUpdate: noop,
        //
        beforeSetDimensions: noop,
        setDimensions: function setDimensions() {
          var me = this; // Set the unconstrained dimension before label rotation

          if (me.isHorizontal()) {
            // Reset position before calculating rotation
            me.width = me.maxWidth;
            me.left = 0;
            me.right = me.width;
          } else {
            me.height = me.maxHeight; // Reset position before calculating rotation

            me.top = 0;
            me.bottom = me.height;
          } // Reset padding


          me.paddingLeft = 0;
          me.paddingTop = 0;
          me.paddingRight = 0;
          me.paddingBottom = 0; // Reset minSize

          me.minSize = {
            width: 0,
            height: 0
          };
        },
        afterSetDimensions: noop,
        //
        beforeBuildLabels: noop,
        buildLabels: function buildLabels() {
          var me = this;
          var labelOpts = me.options.labels;
          var legendItems = labelOpts.generateLabels.call(me, me.chart);

          if (labelOpts.filter) {
            legendItems = legendItems.filter(function (item) {
              return labelOpts.filter(item, me.chart.data);
            });
          }

          if (me.options.reverse) {
            legendItems.reverse();
          }

          me.legendItems = legendItems;
        },
        afterBuildLabels: noop,
        //
        beforeFit: noop,
        fit: function fit() {
          var me = this;
          var opts = me.options;
          var labelOpts = opts.labels;
          var display = opts.display;
          var ctx = me.ctx;
          var globalDefault = Chart.defaults.global,
              itemOrDefault = helpers.getValueOrDefault,
              fontSize = itemOrDefault(labelOpts.fontSize, globalDefault.defaultFontSize),
              fontStyle = itemOrDefault(labelOpts.fontStyle, globalDefault.defaultFontStyle),
              fontFamily = itemOrDefault(labelOpts.fontFamily, globalDefault.defaultFontFamily),
              labelFont = helpers.fontString(fontSize, fontStyle, fontFamily); // Reset hit boxes

          var hitboxes = me.legendHitBoxes = [];
          var minSize = me.minSize;
          var isHorizontal = me.isHorizontal();

          if (isHorizontal) {
            minSize.width = me.maxWidth; // fill all the width

            minSize.height = display ? 10 : 0;
          } else {
            minSize.width = display ? 10 : 0;
            minSize.height = me.maxHeight; // fill all the height
          } // Increase sizes here


          if (display) {
            ctx.font = labelFont;

            if (isHorizontal) {
              // Labels
              // Width of each line of legend boxes. Labels wrap onto multiple lines when there are too many to fit on one
              var lineWidths = me.lineWidths = [0];
              var totalHeight = me.legendItems.length ? fontSize + labelOpts.padding : 0;
              ctx.textAlign = 'left';
              ctx.textBaseline = 'top';
              helpers.each(me.legendItems, function (legendItem, i) {
                var boxWidth = getBoxWidth(labelOpts, fontSize);
                var width = boxWidth + fontSize / 2 + ctx.measureText(legendItem.text).width;

                if (lineWidths[lineWidths.length - 1] + width + labelOpts.padding >= me.width) {
                  totalHeight += fontSize + labelOpts.padding;
                  lineWidths[lineWidths.length] = me.left;
                } // Store the hitbox width and height here. Final position will be updated in `draw`


                hitboxes[i] = {
                  left: 0,
                  top: 0,
                  width: width,
                  height: fontSize
                };
                lineWidths[lineWidths.length - 1] += width + labelOpts.padding;
              });
              minSize.height += totalHeight;
            } else {
              var vPadding = labelOpts.padding;
              var columnWidths = me.columnWidths = [];
              var totalWidth = labelOpts.padding;
              var currentColWidth = 0;
              var currentColHeight = 0;
              var itemHeight = fontSize + vPadding;
              helpers.each(me.legendItems, function (legendItem, i) {
                var boxWidth = getBoxWidth(labelOpts, fontSize);
                var itemWidth = boxWidth + fontSize / 2 + ctx.measureText(legendItem.text).width; // If too tall, go to new column

                if (currentColHeight + itemHeight > minSize.height) {
                  totalWidth += currentColWidth + labelOpts.padding;
                  columnWidths.push(currentColWidth); // previous column width

                  currentColWidth = 0;
                  currentColHeight = 0;
                } // Get max width


                currentColWidth = Math.max(currentColWidth, itemWidth);
                currentColHeight += itemHeight; // Store the hitbox width and height here. Final position will be updated in `draw`

                hitboxes[i] = {
                  left: 0,
                  top: 0,
                  width: itemWidth,
                  height: fontSize
                };
              });
              totalWidth += currentColWidth;
              columnWidths.push(currentColWidth);
              minSize.width += totalWidth;
            }
          }

          me.width = minSize.width;
          me.height = minSize.height;
        },
        afterFit: noop,
        // Shared Methods
        isHorizontal: function isHorizontal() {
          return this.options.position === 'top' || this.options.position === 'bottom';
        },
        // Actually draw the legend on the canvas
        draw: function draw() {
          var me = this;
          var opts = me.options;
          var labelOpts = opts.labels;
          var globalDefault = Chart.defaults.global,
              lineDefault = globalDefault.elements.line,
              legendWidth = me.width,
              lineWidths = me.lineWidths;

          if (opts.display) {
            var ctx = me.ctx,
                cursor,
                itemOrDefault = helpers.getValueOrDefault,
                fontColor = itemOrDefault(labelOpts.fontColor, globalDefault.defaultFontColor),
                fontSize = itemOrDefault(labelOpts.fontSize, globalDefault.defaultFontSize),
                fontStyle = itemOrDefault(labelOpts.fontStyle, globalDefault.defaultFontStyle),
                fontFamily = itemOrDefault(labelOpts.fontFamily, globalDefault.defaultFontFamily),
                labelFont = helpers.fontString(fontSize, fontStyle, fontFamily); // Canvas setup

            ctx.textAlign = 'left';
            ctx.textBaseline = 'top';
            ctx.lineWidth = 0.5;
            ctx.strokeStyle = fontColor; // for strikethrough effect

            ctx.fillStyle = fontColor; // render in correct colour

            ctx.font = labelFont;
            var boxWidth = getBoxWidth(labelOpts, fontSize),
                hitboxes = me.legendHitBoxes; // current position

            var drawLegendBox = function drawLegendBox(x, y, legendItem) {
              if (isNaN(boxWidth) || boxWidth <= 0) {
                return;
              } // Set the ctx for the box


              ctx.save();
              ctx.fillStyle = itemOrDefault(legendItem.fillStyle, globalDefault.defaultColor);
              ctx.lineCap = itemOrDefault(legendItem.lineCap, lineDefault.borderCapStyle);
              ctx.lineDashOffset = itemOrDefault(legendItem.lineDashOffset, lineDefault.borderDashOffset);
              ctx.lineJoin = itemOrDefault(legendItem.lineJoin, lineDefault.borderJoinStyle);
              ctx.lineWidth = itemOrDefault(legendItem.lineWidth, lineDefault.borderWidth);
              ctx.strokeStyle = itemOrDefault(legendItem.strokeStyle, globalDefault.defaultColor);
              var isLineWidthZero = itemOrDefault(legendItem.lineWidth, lineDefault.borderWidth) === 0;

              if (ctx.setLineDash) {
                // IE 9 and 10 do not support line dash
                ctx.setLineDash(itemOrDefault(legendItem.lineDash, lineDefault.borderDash));
              }

              if (opts.labels && opts.labels.usePointStyle) {
                // Recalculate x and y for drawPoint() because its expecting
                // x and y to be center of figure (instead of top left)
                var radius = fontSize * Math.SQRT2 / 2;
                var offSet = radius / Math.SQRT2;
                var centerX = x + offSet;
                var centerY = y + offSet; // Draw pointStyle as legend symbol

                Chart.canvasHelpers.drawPoint(ctx, legendItem.pointStyle, radius, centerX, centerY);
              } else {
                // Draw box as legend symbol
                if (!isLineWidthZero) {
                  ctx.strokeRect(x, y, boxWidth, fontSize);
                }

                ctx.fillRect(x, y, boxWidth, fontSize);
              }

              ctx.restore();
            };

            var fillText = function fillText(x, y, legendItem, textWidth) {
              ctx.fillText(legendItem.text, boxWidth + fontSize / 2 + x, y);

              if (legendItem.hidden) {
                // Strikethrough the text if hidden
                ctx.beginPath();
                ctx.lineWidth = 2;
                ctx.moveTo(boxWidth + fontSize / 2 + x, y + fontSize / 2);
                ctx.lineTo(boxWidth + fontSize / 2 + x + textWidth, y + fontSize / 2);
                ctx.stroke();
              }
            }; // Horizontal


            var isHorizontal = me.isHorizontal();

            if (isHorizontal) {
              cursor = {
                x: me.left + (legendWidth - lineWidths[0]) / 2,
                y: me.top + labelOpts.padding,
                line: 0
              };
            } else {
              cursor = {
                x: me.left + labelOpts.padding,
                y: me.top + labelOpts.padding,
                line: 0
              };
            }

            var itemHeight = fontSize + labelOpts.padding;
            helpers.each(me.legendItems, function (legendItem, i) {
              var textWidth = ctx.measureText(legendItem.text).width,
                  width = boxWidth + fontSize / 2 + textWidth,
                  x = cursor.x,
                  y = cursor.y;

              if (isHorizontal) {
                if (x + width >= legendWidth) {
                  y = cursor.y += itemHeight;
                  cursor.line++;
                  x = cursor.x = me.left + (legendWidth - lineWidths[cursor.line]) / 2;
                }
              } else if (y + itemHeight > me.bottom) {
                x = cursor.x = x + me.columnWidths[cursor.line] + labelOpts.padding;
                y = cursor.y = me.top + labelOpts.padding;
                cursor.line++;
              }

              drawLegendBox(x, y, legendItem);
              hitboxes[i].left = x;
              hitboxes[i].top = y; // Fill the actual label

              fillText(x, y, legendItem, textWidth);

              if (isHorizontal) {
                cursor.x += width + labelOpts.padding;
              } else {
                cursor.y += itemHeight;
              }
            });
          }
        },

        /**
         * Handle an event
         * @private
         * @param {IEvent} event - The event to handle
         * @return {Boolean} true if a change occured
         */
        handleEvent: function handleEvent(e) {
          var me = this;
          var opts = me.options;
          var type = e.type === 'mouseup' ? 'click' : e.type;
          var changed = false;

          if (type === 'mousemove') {
            if (!opts.onHover) {
              return;
            }
          } else if (type === 'click') {
            if (!opts.onClick) {
              return;
            }
          } else {
            return;
          } // Chart event already has relative position in it


          var x = e.x,
              y = e.y;

          if (x >= me.left && x <= me.right && y >= me.top && y <= me.bottom) {
            // See if we are touching one of the dataset boxes
            var lh = me.legendHitBoxes;

            for (var i = 0; i < lh.length; ++i) {
              var hitBox = lh[i];

              if (x >= hitBox.left && x <= hitBox.left + hitBox.width && y >= hitBox.top && y <= hitBox.top + hitBox.height) {
                // Touching an element
                if (type === 'click') {
                  // use e.native for backwards compatibility
                  opts.onClick.call(me, e["native"], me.legendItems[i]);
                  changed = true;
                  break;
                } else if (type === 'mousemove') {
                  // use e.native for backwards compatibility
                  opts.onHover.call(me, e["native"], me.legendItems[i]);
                  changed = true;
                  break;
                }
              }
            }
          }

          return changed;
        }
      });

      function createNewLegendAndAttach(chartInstance, legendOpts) {
        var legend = new Chart.Legend({
          ctx: chartInstance.chart.ctx,
          options: legendOpts,
          chart: chartInstance
        });
        chartInstance.legend = legend;
        Chart.layoutService.addBox(chartInstance, legend);
      } // Register the legend plugin


      Chart.plugins.register({
        beforeInit: function beforeInit(chartInstance) {
          var legendOpts = chartInstance.options.legend;

          if (legendOpts) {
            createNewLegendAndAttach(chartInstance, legendOpts);
          }
        },
        beforeUpdate: function beforeUpdate(chartInstance) {
          var legendOpts = chartInstance.options.legend;

          if (legendOpts) {
            legendOpts = helpers.configMerge(Chart.defaults.global.legend, legendOpts);

            if (chartInstance.legend) {
              chartInstance.legend.options = legendOpts;
            } else {
              createNewLegendAndAttach(chartInstance, legendOpts);
            }
          } else {
            Chart.layoutService.removeBox(chartInstance, chartInstance.legend);
            delete chartInstance.legend;
          }
        },
        afterEvent: function afterEvent(chartInstance, e) {
          var legend = chartInstance.legend;

          if (legend) {
            legend.handleEvent(e);
          }
        }
      });
    };
    /***/

  },

  /***/
  "./node_modules/chart.js/src/core/core.plugin.js": function node_modulesChartJsSrcCoreCorePluginJs(module, exports, __webpack_require__) {
    "use strict";

    module.exports = function (Chart) {
      var helpers = Chart.helpers;
      Chart.defaults.global.plugins = {};
      /**
       * The plugin service singleton
       * @namespace Chart.plugins
       * @since 2.1.0
       */

      Chart.plugins = {
        /**
         * Globally registered plugins.
         * @private
         */
        _plugins: [],

        /**
         * This identifier is used to invalidate the descriptors cache attached to each chart
         * when a global plugin is registered or unregistered. In this case, the cache ID is
         * incremented and descriptors are regenerated during following API calls.
         * @private
         */
        _cacheId: 0,

        /**
         * Registers the given plugin(s) if not already registered.
         * @param {Array|Object} plugins plugin instance(s).
         */
        register: function register(plugins) {
          var p = this._plugins;
          [].concat(plugins).forEach(function (plugin) {
            if (p.indexOf(plugin) === -1) {
              p.push(plugin);
            }
          });
          this._cacheId++;
        },

        /**
         * Unregisters the given plugin(s) only if registered.
         * @param {Array|Object} plugins plugin instance(s).
         */
        unregister: function unregister(plugins) {
          var p = this._plugins;
          [].concat(plugins).forEach(function (plugin) {
            var idx = p.indexOf(plugin);

            if (idx !== -1) {
              p.splice(idx, 1);
            }
          });
          this._cacheId++;
        },

        /**
         * Remove all registered plugins.
         * @since 2.1.5
         */
        clear: function clear() {
          this._plugins = [];
          this._cacheId++;
        },

        /**
         * Returns the number of registered plugins?
         * @returns {Number}
         * @since 2.1.5
         */
        count: function count() {
          return this._plugins.length;
        },

        /**
         * Returns all registered plugin instances.
         * @returns {Array} array of plugin objects.
         * @since 2.1.5
         */
        getAll: function getAll() {
          return this._plugins;
        },

        /**
         * Calls enabled plugins for `chart` on the specified hook and with the given args.
         * This method immediately returns as soon as a plugin explicitly returns false. The
         * returned value can be used, for instance, to interrupt the current action.
         * @param {Object} chart - The chart instance for which plugins should be called.
         * @param {String} hook - The name of the plugin method to call (e.g. 'beforeUpdate').
         * @param {Array} [args] - Extra arguments to apply to the hook call.
         * @returns {Boolean} false if any of the plugins return false, else returns true.
         */
        notify: function notify(chart, hook, args) {
          var descriptors = this.descriptors(chart);
          var ilen = descriptors.length;
          var i, descriptor, plugin, params, method;

          for (i = 0; i < ilen; ++i) {
            descriptor = descriptors[i];
            plugin = descriptor.plugin;
            method = plugin[hook];

            if (typeof method === 'function') {
              params = [chart].concat(args || []);
              params.push(descriptor.options);

              if (method.apply(plugin, params) === false) {
                return false;
              }
            }
          }

          return true;
        },

        /**
         * Returns descriptors of enabled plugins for the given chart.
         * @returns {Array} [{ plugin, options }]
         * @private
         */
        descriptors: function descriptors(chart) {
          var cache = chart._plugins || (chart._plugins = {});

          if (cache.id === this._cacheId) {
            return cache.descriptors;
          }

          var plugins = [];
          var descriptors = [];
          var config = chart && chart.config || {};
          var defaults = Chart.defaults.global.plugins;
          var options = config.options && config.options.plugins || {};

          this._plugins.concat(config.plugins || []).forEach(function (plugin) {
            var idx = plugins.indexOf(plugin);

            if (idx !== -1) {
              return;
            }

            var id = plugin.id;
            var opts = options[id];

            if (opts === false) {
              return;
            }

            if (opts === true) {
              opts = helpers.clone(defaults[id]);
            }

            plugins.push(plugin);
            descriptors.push({
              plugin: plugin,
              options: opts || {}
            });
          });

          cache.descriptors = descriptors;
          cache.id = this._cacheId;
          return descriptors;
        }
      };
      /**
       * Plugin extension hooks.
       * @interface IPlugin
       * @since 2.1.0
       */

      /**
       * @method IPlugin#beforeInit
       * @desc Called before initializing `chart`.
       * @param {Chart.Controller} chart - The chart instance.
       * @param {Object} options - The plugin options.
       */

      /**
       * @method IPlugin#afterInit
       * @desc Called after `chart` has been initialized and before the first update.
       * @param {Chart.Controller} chart - The chart instance.
       * @param {Object} options - The plugin options.
       */

      /**
       * @method IPlugin#beforeUpdate
       * @desc Called before updating `chart`. If any plugin returns `false`, the update
       * is cancelled (and thus subsequent render(s)) until another `update` is triggered.
       * @param {Chart.Controller} chart - The chart instance.
       * @param {Object} options - The plugin options.
       * @returns {Boolean} `false` to cancel the chart update.
       */

      /**
       * @method IPlugin#afterUpdate
       * @desc Called after `chart` has been updated and before rendering. Note that this
       * hook will not be called if the chart update has been previously cancelled.
       * @param {Chart.Controller} chart - The chart instance.
       * @param {Object} options - The plugin options.
       */

      /**
       * @method IPlugin#beforeDatasetsUpdate
      	 * @desc Called before updating the `chart` datasets. If any plugin returns `false`,
       * the datasets update is cancelled until another `update` is triggered.
       * @param {Chart.Controller} chart - The chart instance.
       * @param {Object} options - The plugin options.
       * @returns {Boolean} false to cancel the datasets update.
       * @since version 2.1.5
       */

      /**
       * @method IPlugin#afterDatasetsUpdate
       * @desc Called after the `chart` datasets have been updated. Note that this hook
       * will not be called if the datasets update has been previously cancelled.
       * @param {Chart.Controller} chart - The chart instance.
       * @param {Object} options - The plugin options.
       * @since version 2.1.5
       */

      /**
       * @method IPlugin#beforeLayout
       * @desc Called before laying out `chart`. If any plugin returns `false`,
       * the layout update is cancelled until another `update` is triggered.
       * @param {Chart.Controller} chart - The chart instance.
       * @param {Object} options - The plugin options.
       * @returns {Boolean} `false` to cancel the chart layout.
       */

      /**
       * @method IPlugin#afterLayout
       * @desc Called after the `chart` has been layed out. Note that this hook will not
       * be called if the layout update has been previously cancelled.
       * @param {Chart.Controller} chart - The chart instance.
       * @param {Object} options - The plugin options.
       */

      /**
       * @method IPlugin#beforeRender
       * @desc Called before rendering `chart`. If any plugin returns `false`,
       * the rendering is cancelled until another `render` is triggered.
       * @param {Chart.Controller} chart - The chart instance.
       * @param {Object} options - The plugin options.
       * @returns {Boolean} `false` to cancel the chart rendering.
       */

      /**
       * @method IPlugin#afterRender
       * @desc Called after the `chart` has been fully rendered (and animation completed). Note
       * that this hook will not be called if the rendering has been previously cancelled.
       * @param {Chart.Controller} chart - The chart instance.
       * @param {Object} options - The plugin options.
       */

      /**
       * @method IPlugin#beforeDraw
       * @desc Called before drawing `chart` at every animation frame specified by the given
       * easing value. If any plugin returns `false`, the frame drawing is cancelled until
       * another `render` is triggered.
       * @param {Chart.Controller} chart - The chart instance.
       * @param {Number} easingValue - The current animation value, between 0.0 and 1.0.
       * @param {Object} options - The plugin options.
       * @returns {Boolean} `false` to cancel the chart drawing.
       */

      /**
       * @method IPlugin#afterDraw
       * @desc Called after the `chart` has been drawn for the specific easing value. Note
       * that this hook will not be called if the drawing has been previously cancelled.
       * @param {Chart.Controller} chart - The chart instance.
       * @param {Number} easingValue - The current animation value, between 0.0 and 1.0.
       * @param {Object} options - The plugin options.
       */

      /**
       * @method IPlugin#beforeDatasetsDraw
      	 * @desc Called before drawing the `chart` datasets. If any plugin returns `false`,
       * the datasets drawing is cancelled until another `render` is triggered.
       * @param {Chart.Controller} chart - The chart instance.
       * @param {Number} easingValue - The current animation value, between 0.0 and 1.0.
       * @param {Object} options - The plugin options.
       * @returns {Boolean} `false` to cancel the chart datasets drawing.
       */

      /**
       * @method IPlugin#afterDatasetsDraw
       * @desc Called after the `chart` datasets have been drawn. Note that this hook
       * will not be called if the datasets drawing has been previously cancelled.
       * @param {Chart.Controller} chart - The chart instance.
       * @param {Number} easingValue - The current animation value, between 0.0 and 1.0.
       * @param {Object} options - The plugin options.
       */

      /**
       * @method IPlugin#beforeEvent
      	 * @desc Called before processing the specified `event`. If any plugin returns `false`,
       * the event will be discarded.
       * @param {Chart.Controller} chart - The chart instance.
       * @param {IEvent} event - The event object.
       * @param {Object} options - The plugin options.
       */

      /**
       * @method IPlugin#afterEvent
       * @desc Called after the `event` has been consumed. Note that this hook
       * will not be called if the `event` has been previously discarded.
       * @param {Chart.Controller} chart - The chart instance.
       * @param {IEvent} event - The event object.
       * @param {Object} options - The plugin options.
       */

      /**
       * @method IPlugin#resize
       * @desc Called after the chart as been resized.
       * @param {Chart.Controller} chart - The chart instance.
       * @param {Number} size - The new canvas display size (eq. canvas.style width & height).
       * @param {Object} options - The plugin options.
       */

      /**
       * @method IPlugin#destroy
       * @desc Called after the chart as been destroyed.
       * @param {Chart.Controller} chart - The chart instance.
       * @param {Object} options - The plugin options.
       */

      /**
       * Provided for backward compatibility, use Chart.plugins instead
       * @namespace Chart.pluginService
       * @deprecated since version 2.1.5
       * @todo remove at version 3
       * @private
       */

      Chart.pluginService = Chart.plugins;
      /**
       * Provided for backward compatibility, inheriting from Chart.PlugingBase has no
       * effect, instead simply create/register plugins via plain JavaScript objects.
       * @interface Chart.PluginBase
       * @deprecated since version 2.5.0
       * @todo remove at version 3
       * @private
       */

      Chart.PluginBase = helpers.inherits({});
    };
    /***/

  },

  /***/
  "./node_modules/chart.js/src/core/core.scale.js": function node_modulesChartJsSrcCoreCoreScaleJs(module, exports, __webpack_require__) {
    "use strict";

    module.exports = function (Chart) {
      var helpers = Chart.helpers;
      Chart.defaults.scale = {
        display: true,
        position: 'left',
        // grid line settings
        gridLines: {
          display: true,
          color: 'rgba(0, 0, 0, 0.1)',
          lineWidth: 1,
          drawBorder: true,
          drawOnChartArea: true,
          drawTicks: true,
          tickMarkLength: 10,
          zeroLineWidth: 1,
          zeroLineColor: 'rgba(0,0,0,0.25)',
          offsetGridLines: false,
          borderDash: [],
          borderDashOffset: 0.0
        },
        // scale label
        scaleLabel: {
          // actual label
          labelString: '',
          // display property
          display: false
        },
        // label settings
        ticks: {
          beginAtZero: false,
          minRotation: 0,
          maxRotation: 50,
          mirror: false,
          padding: 0,
          reverse: false,
          display: true,
          autoSkip: true,
          autoSkipPadding: 0,
          labelOffset: 0,
          // We pass through arrays to be rendered as multiline labels, we convert Others to strings here.
          callback: Chart.Ticks.formatters.values
        }
      };

      function computeTextSize(context, tick, font) {
        return helpers.isArray(tick) ? helpers.longestText(context, font, tick) : context.measureText(tick).width;
      }

      function parseFontOptions(options) {
        var getValueOrDefault = helpers.getValueOrDefault;
        var globalDefaults = Chart.defaults.global;
        var size = getValueOrDefault(options.fontSize, globalDefaults.defaultFontSize);
        var style = getValueOrDefault(options.fontStyle, globalDefaults.defaultFontStyle);
        var family = getValueOrDefault(options.fontFamily, globalDefaults.defaultFontFamily);
        return {
          size: size,
          style: style,
          family: family,
          font: helpers.fontString(size, style, family)
        };
      }

      Chart.Scale = Chart.Element.extend({
        /**
         * Get the padding needed for the scale
         * @method getPadding
         * @private
         * @returns {Padding} the necessary padding
         */
        getPadding: function getPadding() {
          var me = this;
          return {
            left: me.paddingLeft || 0,
            top: me.paddingTop || 0,
            right: me.paddingRight || 0,
            bottom: me.paddingBottom || 0
          };
        },
        // These methods are ordered by lifecyle. Utilities then follow.
        // Any function defined here is inherited by all scale types.
        // Any function can be extended by the scale type
        beforeUpdate: function beforeUpdate() {
          helpers.callCallback(this.options.beforeUpdate, [this]);
        },
        update: function update(maxWidth, maxHeight, margins) {
          var me = this; // Update Lifecycle - Probably don't want to ever extend or overwrite this function ;)

          me.beforeUpdate(); // Absorb the master measurements

          me.maxWidth = maxWidth;
          me.maxHeight = maxHeight;
          me.margins = helpers.extend({
            left: 0,
            right: 0,
            top: 0,
            bottom: 0
          }, margins);
          me.longestTextCache = me.longestTextCache || {}; // Dimensions

          me.beforeSetDimensions();
          me.setDimensions();
          me.afterSetDimensions(); // Data min/max

          me.beforeDataLimits();
          me.determineDataLimits();
          me.afterDataLimits(); // Ticks

          me.beforeBuildTicks();
          me.buildTicks();
          me.afterBuildTicks();
          me.beforeTickToLabelConversion();
          me.convertTicksToLabels();
          me.afterTickToLabelConversion(); // Tick Rotation

          me.beforeCalculateTickRotation();
          me.calculateTickRotation();
          me.afterCalculateTickRotation(); // Fit

          me.beforeFit();
          me.fit();
          me.afterFit(); //

          me.afterUpdate();
          return me.minSize;
        },
        afterUpdate: function afterUpdate() {
          helpers.callCallback(this.options.afterUpdate, [this]);
        },
        //
        beforeSetDimensions: function beforeSetDimensions() {
          helpers.callCallback(this.options.beforeSetDimensions, [this]);
        },
        setDimensions: function setDimensions() {
          var me = this; // Set the unconstrained dimension before label rotation

          if (me.isHorizontal()) {
            // Reset position before calculating rotation
            me.width = me.maxWidth;
            me.left = 0;
            me.right = me.width;
          } else {
            me.height = me.maxHeight; // Reset position before calculating rotation

            me.top = 0;
            me.bottom = me.height;
          } // Reset padding


          me.paddingLeft = 0;
          me.paddingTop = 0;
          me.paddingRight = 0;
          me.paddingBottom = 0;
        },
        afterSetDimensions: function afterSetDimensions() {
          helpers.callCallback(this.options.afterSetDimensions, [this]);
        },
        // Data limits
        beforeDataLimits: function beforeDataLimits() {
          helpers.callCallback(this.options.beforeDataLimits, [this]);
        },
        determineDataLimits: helpers.noop,
        afterDataLimits: function afterDataLimits() {
          helpers.callCallback(this.options.afterDataLimits, [this]);
        },
        //
        beforeBuildTicks: function beforeBuildTicks() {
          helpers.callCallback(this.options.beforeBuildTicks, [this]);
        },
        buildTicks: helpers.noop,
        afterBuildTicks: function afterBuildTicks() {
          helpers.callCallback(this.options.afterBuildTicks, [this]);
        },
        beforeTickToLabelConversion: function beforeTickToLabelConversion() {
          helpers.callCallback(this.options.beforeTickToLabelConversion, [this]);
        },
        convertTicksToLabels: function convertTicksToLabels() {
          var me = this; // Convert ticks to strings

          var tickOpts = me.options.ticks;
          me.ticks = me.ticks.map(tickOpts.userCallback || tickOpts.callback);
        },
        afterTickToLabelConversion: function afterTickToLabelConversion() {
          helpers.callCallback(this.options.afterTickToLabelConversion, [this]);
        },
        //
        beforeCalculateTickRotation: function beforeCalculateTickRotation() {
          helpers.callCallback(this.options.beforeCalculateTickRotation, [this]);
        },
        calculateTickRotation: function calculateTickRotation() {
          var me = this;
          var context = me.ctx;
          var tickOpts = me.options.ticks; // Get the width of each grid by calculating the difference
          // between x offsets between 0 and 1.

          var tickFont = parseFontOptions(tickOpts);
          context.font = tickFont.font;
          var labelRotation = tickOpts.minRotation || 0;

          if (me.options.display && me.isHorizontal()) {
            var originalLabelWidth = helpers.longestText(context, tickFont.font, me.ticks, me.longestTextCache);
            var labelWidth = originalLabelWidth;
            var cosRotation;
            var sinRotation; // Allow 3 pixels x2 padding either side for label readability

            var tickWidth = me.getPixelForTick(1) - me.getPixelForTick(0) - 6; // Max label rotation can be set or default to 90 - also act as a loop counter

            while (labelWidth > tickWidth && labelRotation < tickOpts.maxRotation) {
              var angleRadians = helpers.toRadians(labelRotation);
              cosRotation = Math.cos(angleRadians);
              sinRotation = Math.sin(angleRadians);

              if (sinRotation * originalLabelWidth > me.maxHeight) {
                // go back one step
                labelRotation--;
                break;
              }

              labelRotation++;
              labelWidth = cosRotation * originalLabelWidth;
            }
          }

          me.labelRotation = labelRotation;
        },
        afterCalculateTickRotation: function afterCalculateTickRotation() {
          helpers.callCallback(this.options.afterCalculateTickRotation, [this]);
        },
        //
        beforeFit: function beforeFit() {
          helpers.callCallback(this.options.beforeFit, [this]);
        },
        fit: function fit() {
          var me = this; // Reset

          var minSize = me.minSize = {
            width: 0,
            height: 0
          };
          var opts = me.options;
          var tickOpts = opts.ticks;
          var scaleLabelOpts = opts.scaleLabel;
          var gridLineOpts = opts.gridLines;
          var display = opts.display;
          var isHorizontal = me.isHorizontal();
          var tickFont = parseFontOptions(tickOpts);
          var scaleLabelFontSize = parseFontOptions(scaleLabelOpts).size * 1.5;
          var tickMarkLength = opts.gridLines.tickMarkLength; // Width

          if (isHorizontal) {
            // subtract the margins to line up with the chartArea if we are a full width scale
            minSize.width = me.isFullWidth() ? me.maxWidth - me.margins.left - me.margins.right : me.maxWidth;
          } else {
            minSize.width = display && gridLineOpts.drawTicks ? tickMarkLength : 0;
          } // height


          if (isHorizontal) {
            minSize.height = display && gridLineOpts.drawTicks ? tickMarkLength : 0;
          } else {
            minSize.height = me.maxHeight; // fill all the height
          } // Are we showing a title for the scale?


          if (scaleLabelOpts.display && display) {
            if (isHorizontal) {
              minSize.height += scaleLabelFontSize;
            } else {
              minSize.width += scaleLabelFontSize;
            }
          } // Don't bother fitting the ticks if we are not showing them


          if (tickOpts.display && display) {
            var largestTextWidth = helpers.longestText(me.ctx, tickFont.font, me.ticks, me.longestTextCache);
            var tallestLabelHeightInLines = helpers.numberOfLabelLines(me.ticks);
            var lineSpace = tickFont.size * 0.5;

            if (isHorizontal) {
              // A horizontal axis is more constrained by the height.
              me.longestLabelWidth = largestTextWidth;
              var angleRadians = helpers.toRadians(me.labelRotation);
              var cosRotation = Math.cos(angleRadians);
              var sinRotation = Math.sin(angleRadians); // TODO - improve this calculation

              var labelHeight = sinRotation * largestTextWidth + tickFont.size * tallestLabelHeightInLines + lineSpace * tallestLabelHeightInLines;
              minSize.height = Math.min(me.maxHeight, minSize.height + labelHeight);
              me.ctx.font = tickFont.font;
              var firstTick = me.ticks[0];
              var firstLabelWidth = computeTextSize(me.ctx, firstTick, tickFont.font);
              var lastTick = me.ticks[me.ticks.length - 1];
              var lastLabelWidth = computeTextSize(me.ctx, lastTick, tickFont.font); // Ensure that our ticks are always inside the canvas. When rotated, ticks are right aligned which means that the right padding is dominated
              // by the font height

              if (me.labelRotation !== 0) {
                me.paddingLeft = opts.position === 'bottom' ? cosRotation * firstLabelWidth + 3 : cosRotation * lineSpace + 3; // add 3 px to move away from canvas edges

                me.paddingRight = opts.position === 'bottom' ? cosRotation * lineSpace + 3 : cosRotation * lastLabelWidth + 3;
              } else {
                me.paddingLeft = firstLabelWidth / 2 + 3; // add 3 px to move away from canvas edges

                me.paddingRight = lastLabelWidth / 2 + 3;
              }
            } else {
              // A vertical axis is more constrained by the width. Labels are the dominant factor here, so get that length first
              // Account for padding
              if (tickOpts.mirror) {
                largestTextWidth = 0;
              } else {
                largestTextWidth += me.options.ticks.padding;
              }

              minSize.width += largestTextWidth;
              me.paddingTop = tickFont.size / 2;
              me.paddingBottom = tickFont.size / 2;
            }
          }

          me.handleMargins();
          me.width = minSize.width;
          me.height = minSize.height;
        },

        /**
         * Handle margins and padding interactions
         * @private
         */
        handleMargins: function handleMargins() {
          var me = this;

          if (me.margins) {
            me.paddingLeft = Math.max(me.paddingLeft - me.margins.left, 0);
            me.paddingTop = Math.max(me.paddingTop - me.margins.top, 0);
            me.paddingRight = Math.max(me.paddingRight - me.margins.right, 0);
            me.paddingBottom = Math.max(me.paddingBottom - me.margins.bottom, 0);
          }
        },
        afterFit: function afterFit() {
          helpers.callCallback(this.options.afterFit, [this]);
        },
        // Shared Methods
        isHorizontal: function isHorizontal() {
          return this.options.position === 'top' || this.options.position === 'bottom';
        },
        isFullWidth: function isFullWidth() {
          return this.options.fullWidth;
        },
        // Get the correct value. NaN bad inputs, If the value type is object get the x or y based on whether we are horizontal or not
        getRightValue: function getRightValue(rawValue) {
          // Null and undefined values first
          if (rawValue === null || typeof rawValue === 'undefined') {
            return NaN;
          } // isNaN(object) returns true, so make sure NaN is checking for a number; Discard Infinite values


          if (typeof rawValue === 'number' && !isFinite(rawValue)) {
            return NaN;
          } // If it is in fact an object, dive in one more level


          if (typeof rawValue === 'object') {
            if (rawValue instanceof Date || rawValue.isValid) {
              return rawValue;
            }

            return this.getRightValue(this.isHorizontal() ? rawValue.x : rawValue.y);
          } // Value is good, return it


          return rawValue;
        },
        // Used to get the value to display in the tooltip for the data at the given index
        // function getLabelForIndex(index, datasetIndex)
        getLabelForIndex: helpers.noop,
        // Used to get data value locations.  Value can either be an index or a numerical value
        getPixelForValue: helpers.noop,
        // Used to get the data value from a given pixel. This is the inverse of getPixelForValue
        getValueForPixel: helpers.noop,
        // Used for tick location, should
        getPixelForTick: function getPixelForTick(index, includeOffset) {
          var me = this;

          if (me.isHorizontal()) {
            var innerWidth = me.width - (me.paddingLeft + me.paddingRight);
            var tickWidth = innerWidth / Math.max(me.ticks.length - (me.options.gridLines.offsetGridLines ? 0 : 1), 1);
            var pixel = tickWidth * index + me.paddingLeft;

            if (includeOffset) {
              pixel += tickWidth / 2;
            }

            var finalVal = me.left + Math.round(pixel);
            finalVal += me.isFullWidth() ? me.margins.left : 0;
            return finalVal;
          }

          var innerHeight = me.height - (me.paddingTop + me.paddingBottom);
          return me.top + index * (innerHeight / (me.ticks.length - 1));
        },
        // Utility for getting the pixel location of a percentage of scale
        getPixelForDecimal: function getPixelForDecimal(decimal
        /* , includeOffset*/
        ) {
          var me = this;

          if (me.isHorizontal()) {
            var innerWidth = me.width - (me.paddingLeft + me.paddingRight);
            var valueOffset = innerWidth * decimal + me.paddingLeft;
            var finalVal = me.left + Math.round(valueOffset);
            finalVal += me.isFullWidth() ? me.margins.left : 0;
            return finalVal;
          }

          return me.top + decimal * me.height;
        },
        getBasePixel: function getBasePixel() {
          return this.getPixelForValue(this.getBaseValue());
        },
        getBaseValue: function getBaseValue() {
          var me = this;
          var min = me.min;
          var max = me.max;
          return me.beginAtZero ? 0 : min < 0 && max < 0 ? max : min > 0 && max > 0 ? min : 0;
        },
        // Actually draw the scale on the canvas
        // @param {rectangle} chartArea : the area of the chart to draw full grid lines on
        draw: function draw(chartArea) {
          var me = this;
          var options = me.options;

          if (!options.display) {
            return;
          }

          var context = me.ctx;
          var globalDefaults = Chart.defaults.global;
          var optionTicks = options.ticks;
          var gridLines = options.gridLines;
          var scaleLabel = options.scaleLabel;
          var isRotated = me.labelRotation !== 0;
          var skipRatio;
          var useAutoskipper = optionTicks.autoSkip;
          var isHorizontal = me.isHorizontal(); // figure out the maximum number of gridlines to show

          var maxTicks;

          if (optionTicks.maxTicksLimit) {
            maxTicks = optionTicks.maxTicksLimit;
          }

          var tickFontColor = helpers.getValueOrDefault(optionTicks.fontColor, globalDefaults.defaultFontColor);
          var tickFont = parseFontOptions(optionTicks);
          var tl = gridLines.drawTicks ? gridLines.tickMarkLength : 0;
          var borderDash = helpers.getValueOrDefault(gridLines.borderDash, globalDefaults.borderDash);
          var borderDashOffset = helpers.getValueOrDefault(gridLines.borderDashOffset, globalDefaults.borderDashOffset);
          var scaleLabelFontColor = helpers.getValueOrDefault(scaleLabel.fontColor, globalDefaults.defaultFontColor);
          var scaleLabelFont = parseFontOptions(scaleLabel);
          var labelRotationRadians = helpers.toRadians(me.labelRotation);
          var cosRotation = Math.cos(labelRotationRadians);
          var longestRotatedLabel = me.longestLabelWidth * cosRotation; // Make sure we draw text in the correct color and font

          context.fillStyle = tickFontColor;
          var itemsToDraw = [];

          if (isHorizontal) {
            skipRatio = false; // Only calculate the skip ratio with the half width of longestRotateLabel if we got an actual rotation
            // See #2584

            if (isRotated) {
              longestRotatedLabel /= 2;
            }

            if ((longestRotatedLabel + optionTicks.autoSkipPadding) * me.ticks.length > me.width - (me.paddingLeft + me.paddingRight)) {
              skipRatio = 1 + Math.floor((longestRotatedLabel + optionTicks.autoSkipPadding) * me.ticks.length / (me.width - (me.paddingLeft + me.paddingRight)));
            } // if they defined a max number of optionTicks,
            // increase skipRatio until that number is met


            if (maxTicks && me.ticks.length > maxTicks) {
              while (!skipRatio || me.ticks.length / (skipRatio || 1) > maxTicks) {
                if (!skipRatio) {
                  skipRatio = 1;
                }

                skipRatio += 1;
              }
            }

            if (!useAutoskipper) {
              skipRatio = false;
            }
          }

          var xTickStart = options.position === 'right' ? me.left : me.right - tl;
          var xTickEnd = options.position === 'right' ? me.left + tl : me.right;
          var yTickStart = options.position === 'bottom' ? me.top : me.bottom - tl;
          var yTickEnd = options.position === 'bottom' ? me.top + tl : me.bottom;
          helpers.each(me.ticks, function (label, index) {
            // If the callback returned a null or undefined value, do not draw this line
            if (label === undefined || label === null) {
              return;
            }

            var isLastTick = me.ticks.length === index + 1; // Since we always show the last tick,we need may need to hide the last shown one before

            var shouldSkip = skipRatio > 1 && index % skipRatio > 0 || index % skipRatio === 0 && index + skipRatio >= me.ticks.length;

            if (shouldSkip && !isLastTick || label === undefined || label === null) {
              return;
            }

            var lineWidth, lineColor;

            if (index === (typeof me.zeroLineIndex !== 'undefined' ? me.zeroLineIndex : 0)) {
              // Draw the first index specially
              lineWidth = gridLines.zeroLineWidth;
              lineColor = gridLines.zeroLineColor;
            } else {
              lineWidth = helpers.getValueAtIndexOrDefault(gridLines.lineWidth, index);
              lineColor = helpers.getValueAtIndexOrDefault(gridLines.color, index);
            } // Common properties


            var tx1, ty1, tx2, ty2, x1, y1, x2, y2, labelX, labelY;
            var textAlign = 'middle';
            var textBaseline = 'middle';

            if (isHorizontal) {
              if (options.position === 'bottom') {
                // bottom
                textBaseline = !isRotated ? 'top' : 'middle';
                textAlign = !isRotated ? 'center' : 'right';
                labelY = me.top + tl;
              } else {
                // top
                textBaseline = !isRotated ? 'bottom' : 'middle';
                textAlign = !isRotated ? 'center' : 'left';
                labelY = me.bottom - tl;
              }

              var xLineValue = me.getPixelForTick(index) + helpers.aliasPixel(lineWidth); // xvalues for grid lines

              labelX = me.getPixelForTick(index, gridLines.offsetGridLines) + optionTicks.labelOffset; // x values for optionTicks (need to consider offsetLabel option)

              tx1 = tx2 = x1 = x2 = xLineValue;
              ty1 = yTickStart;
              ty2 = yTickEnd;
              y1 = chartArea.top;
              y2 = chartArea.bottom;
            } else {
              var isLeft = options.position === 'left';
              var tickPadding = optionTicks.padding;
              var labelXOffset;

              if (optionTicks.mirror) {
                textAlign = isLeft ? 'left' : 'right';
                labelXOffset = tickPadding;
              } else {
                textAlign = isLeft ? 'right' : 'left';
                labelXOffset = tl + tickPadding;
              }

              labelX = isLeft ? me.right - labelXOffset : me.left + labelXOffset;
              var yLineValue = me.getPixelForTick(index); // xvalues for grid lines

              yLineValue += helpers.aliasPixel(lineWidth);
              labelY = me.getPixelForTick(index, gridLines.offsetGridLines);
              tx1 = xTickStart;
              tx2 = xTickEnd;
              x1 = chartArea.left;
              x2 = chartArea.right;
              ty1 = ty2 = y1 = y2 = yLineValue;
            }

            itemsToDraw.push({
              tx1: tx1,
              ty1: ty1,
              tx2: tx2,
              ty2: ty2,
              x1: x1,
              y1: y1,
              x2: x2,
              y2: y2,
              labelX: labelX,
              labelY: labelY,
              glWidth: lineWidth,
              glColor: lineColor,
              glBorderDash: borderDash,
              glBorderDashOffset: borderDashOffset,
              rotation: -1 * labelRotationRadians,
              label: label,
              textBaseline: textBaseline,
              textAlign: textAlign
            });
          }); // Draw all of the tick labels, tick marks, and grid lines at the correct places

          helpers.each(itemsToDraw, function (itemToDraw) {
            if (gridLines.display) {
              context.save();
              context.lineWidth = itemToDraw.glWidth;
              context.strokeStyle = itemToDraw.glColor;

              if (context.setLineDash) {
                context.setLineDash(itemToDraw.glBorderDash);
                context.lineDashOffset = itemToDraw.glBorderDashOffset;
              }

              context.beginPath();

              if (gridLines.drawTicks) {
                context.moveTo(itemToDraw.tx1, itemToDraw.ty1);
                context.lineTo(itemToDraw.tx2, itemToDraw.ty2);
              }

              if (gridLines.drawOnChartArea) {
                context.moveTo(itemToDraw.x1, itemToDraw.y1);
                context.lineTo(itemToDraw.x2, itemToDraw.y2);
              }

              context.stroke();
              context.restore();
            }

            if (optionTicks.display) {
              context.save();
              context.translate(itemToDraw.labelX, itemToDraw.labelY);
              context.rotate(itemToDraw.rotation);
              context.font = tickFont.font;
              context.textBaseline = itemToDraw.textBaseline;
              context.textAlign = itemToDraw.textAlign;
              var label = itemToDraw.label;

              if (helpers.isArray(label)) {
                for (var i = 0, y = 0; i < label.length; ++i) {
                  // We just make sure the multiline element is a string here..
                  context.fillText('' + label[i], 0, y); // apply same lineSpacing as calculated @ L#320

                  y += tickFont.size * 1.5;
                }
              } else {
                context.fillText(label, 0, 0);
              }

              context.restore();
            }
          });

          if (scaleLabel.display) {
            // Draw the scale label
            var scaleLabelX;
            var scaleLabelY;
            var rotation = 0;

            if (isHorizontal) {
              scaleLabelX = me.left + (me.right - me.left) / 2; // midpoint of the width

              scaleLabelY = options.position === 'bottom' ? me.bottom - scaleLabelFont.size / 2 : me.top + scaleLabelFont.size / 2;
            } else {
              var isLeft = options.position === 'left';
              scaleLabelX = isLeft ? me.left + scaleLabelFont.size / 2 : me.right - scaleLabelFont.size / 2;
              scaleLabelY = me.top + (me.bottom - me.top) / 2;
              rotation = isLeft ? -0.5 * Math.PI : 0.5 * Math.PI;
            }

            context.save();
            context.translate(scaleLabelX, scaleLabelY);
            context.rotate(rotation);
            context.textAlign = 'center';
            context.textBaseline = 'middle';
            context.fillStyle = scaleLabelFontColor; // render in correct colour

            context.font = scaleLabelFont.font;
            context.fillText(scaleLabel.labelString, 0, 0);
            context.restore();
          }

          if (gridLines.drawBorder) {
            // Draw the line at the edge of the axis
            context.lineWidth = helpers.getValueAtIndexOrDefault(gridLines.lineWidth, 0);
            context.strokeStyle = helpers.getValueAtIndexOrDefault(gridLines.color, 0);
            var x1 = me.left,
                x2 = me.right,
                y1 = me.top,
                y2 = me.bottom;
            var aliasPixel = helpers.aliasPixel(context.lineWidth);

            if (isHorizontal) {
              y1 = y2 = options.position === 'top' ? me.bottom : me.top;
              y1 += aliasPixel;
              y2 += aliasPixel;
            } else {
              x1 = x2 = options.position === 'left' ? me.right : me.left;
              x1 += aliasPixel;
              x2 += aliasPixel;
            }

            context.beginPath();
            context.moveTo(x1, y1);
            context.lineTo(x2, y2);
            context.stroke();
          }
        }
      });
    };
    /***/

  },

  /***/
  "./node_modules/chart.js/src/core/core.scaleService.js": function node_modulesChartJsSrcCoreCoreScaleServiceJs(module, exports, __webpack_require__) {
    "use strict";

    module.exports = function (Chart) {
      var helpers = Chart.helpers;
      Chart.scaleService = {
        // Scale registration object. Extensions can register new scale types (such as log or DB scales) and then
        // use the new chart options to grab the correct scale
        constructors: {},
        // Use a registration function so that we can move to an ES6 map when we no longer need to support
        // old browsers
        // Scale config defaults
        defaults: {},
        registerScaleType: function registerScaleType(type, scaleConstructor, defaults) {
          this.constructors[type] = scaleConstructor;
          this.defaults[type] = helpers.clone(defaults);
        },
        getScaleConstructor: function getScaleConstructor(type) {
          return this.constructors.hasOwnProperty(type) ? this.constructors[type] : undefined;
        },
        getScaleDefaults: function getScaleDefaults(type) {
          // Return the scale defaults merged with the global settings so that we always use the latest ones
          return this.defaults.hasOwnProperty(type) ? helpers.scaleMerge(Chart.defaults.scale, this.defaults[type]) : {};
        },
        updateScaleDefaults: function updateScaleDefaults(type, additions) {
          var defaults = this.defaults;

          if (defaults.hasOwnProperty(type)) {
            defaults[type] = helpers.extend(defaults[type], additions);
          }
        },
        addScalesToLayout: function addScalesToLayout(chartInstance) {
          // Adds each scale to the chart.boxes array to be sized accordingly
          helpers.each(chartInstance.scales, function (scale) {
            Chart.layoutService.addBox(chartInstance, scale);
          });
        }
      };
    };
    /***/

  },

  /***/
  "./node_modules/chart.js/src/core/core.ticks.js": function node_modulesChartJsSrcCoreCoreTicksJs(module, exports, __webpack_require__) {
    "use strict";

    module.exports = function (Chart) {
      var helpers = Chart.helpers;
      /**
       * Namespace to hold static tick generation functions
       * @namespace Chart.Ticks
       */

      Chart.Ticks = {
        /**
         * Namespace to hold generators for different types of ticks
         * @namespace Chart.Ticks.generators
         */
        generators: {
          /**
           * Interface for the options provided to the numeric tick generator
           * @interface INumericTickGenerationOptions
           */

          /**
           * The maximum number of ticks to display
           * @name INumericTickGenerationOptions#maxTicks
           * @type Number
           */

          /**
           * The distance between each tick.
           * @name INumericTickGenerationOptions#stepSize
           * @type Number
           * @optional
           */

          /**
           * Forced minimum for the ticks. If not specified, the minimum of the data range is used to calculate the tick minimum
           * @name INumericTickGenerationOptions#min
           * @type Number
           * @optional
           */

          /**
           * The maximum value of the ticks. If not specified, the maximum of the data range is used to calculate the tick maximum
           * @name INumericTickGenerationOptions#max
           * @type Number
           * @optional
           */

          /**
           * Generate a set of linear ticks
           * @method Chart.Ticks.generators.linear
           * @param generationOptions {INumericTickGenerationOptions} the options used to generate the ticks
           * @param dataRange {IRange} the range of the data
           * @returns {Array<Number>} array of tick values
           */
          linear: function linear(generationOptions, dataRange) {
            var ticks = []; // To get a "nice" value for the tick spacing, we will use the appropriately named
            // "nice number" algorithm. See http://stackoverflow.com/questions/8506881/nice-label-algorithm-for-charts-with-minimum-ticks
            // for details.

            var spacing;

            if (generationOptions.stepSize && generationOptions.stepSize > 0) {
              spacing = generationOptions.stepSize;
            } else {
              var niceRange = helpers.niceNum(dataRange.max - dataRange.min, false);
              spacing = helpers.niceNum(niceRange / (generationOptions.maxTicks - 1), true);
            }

            var niceMin = Math.floor(dataRange.min / spacing) * spacing;
            var niceMax = Math.ceil(dataRange.max / spacing) * spacing; // If min, max and stepSize is set and they make an evenly spaced scale use it.

            if (generationOptions.min && generationOptions.max && generationOptions.stepSize) {
              // If very close to our whole number, use it.
              if (helpers.almostWhole((generationOptions.max - generationOptions.min) / generationOptions.stepSize, spacing / 1000)) {
                niceMin = generationOptions.min;
                niceMax = generationOptions.max;
              }
            }

            var numSpaces = (niceMax - niceMin) / spacing; // If very close to our rounded value, use it.

            if (helpers.almostEquals(numSpaces, Math.round(numSpaces), spacing / 1000)) {
              numSpaces = Math.round(numSpaces);
            } else {
              numSpaces = Math.ceil(numSpaces);
            } // Put the values into the ticks array


            ticks.push(generationOptions.min !== undefined ? generationOptions.min : niceMin);

            for (var j = 1; j < numSpaces; ++j) {
              ticks.push(niceMin + j * spacing);
            }

            ticks.push(generationOptions.max !== undefined ? generationOptions.max : niceMax);
            return ticks;
          },

          /**
           * Generate a set of logarithmic ticks
           * @method Chart.Ticks.generators.logarithmic
           * @param generationOptions {INumericTickGenerationOptions} the options used to generate the ticks
           * @param dataRange {IRange} the range of the data
           * @returns {Array<Number>} array of tick values
           */
          logarithmic: function logarithmic(generationOptions, dataRange) {
            var ticks = [];
            var getValueOrDefault = helpers.getValueOrDefault; // Figure out what the max number of ticks we can support it is based on the size of
            // the axis area. For now, we say that the minimum tick spacing in pixels must be 50
            // We also limit the maximum number of ticks to 11 which gives a nice 10 squares on
            // the graph

            var tickVal = getValueOrDefault(generationOptions.min, Math.pow(10, Math.floor(helpers.log10(dataRange.min))));
            var endExp = Math.floor(helpers.log10(dataRange.max));
            var endSignificand = Math.ceil(dataRange.max / Math.pow(10, endExp));
            var exp;
            var significand;

            if (tickVal === 0) {
              exp = Math.floor(helpers.log10(dataRange.minNotZero));
              significand = Math.floor(dataRange.minNotZero / Math.pow(10, exp));
              ticks.push(tickVal);
              tickVal = significand * Math.pow(10, exp);
            } else {
              exp = Math.floor(helpers.log10(tickVal));
              significand = Math.floor(tickVal / Math.pow(10, exp));
            }

            do {
              ticks.push(tickVal);
              ++significand;

              if (significand === 10) {
                significand = 1;
                ++exp;
              }

              tickVal = significand * Math.pow(10, exp);
            } while (exp < endExp || exp === endExp && significand < endSignificand);

            var lastTick = getValueOrDefault(generationOptions.max, tickVal);
            ticks.push(lastTick);
            return ticks;
          }
        },

        /**
         * Namespace to hold formatters for different types of ticks
         * @namespace Chart.Ticks.formatters
         */
        formatters: {
          /**
           * Formatter for value labels
           * @method Chart.Ticks.formatters.values
           * @param value the value to display
           * @return {String|Array} the label to display
           */
          values: function values(value) {
            return helpers.isArray(value) ? value : '' + value;
          },

          /**
           * Formatter for linear numeric ticks
           * @method Chart.Ticks.formatters.linear
           * @param tickValue {Number} the value to be formatted
           * @param index {Number} the position of the tickValue parameter in the ticks array
           * @param ticks {Array<Number>} the list of ticks being converted
           * @return {String} string representation of the tickValue parameter
           */
          linear: function linear(tickValue, index, ticks) {
            // If we have lots of ticks, don't use the ones
            var delta = ticks.length > 3 ? ticks[2] - ticks[1] : ticks[1] - ticks[0]; // If we have a number like 2.5 as the delta, figure out how many decimal places we need

            if (Math.abs(delta) > 1) {
              if (tickValue !== Math.floor(tickValue)) {
                // not an integer
                delta = tickValue - Math.floor(tickValue);
              }
            }

            var logDelta = helpers.log10(Math.abs(delta));
            var tickString = '';

            if (tickValue !== 0) {
              var numDecimal = -1 * Math.floor(logDelta);
              numDecimal = Math.max(Math.min(numDecimal, 20), 0); // toFixed has a max of 20 decimal places

              tickString = tickValue.toFixed(numDecimal);
            } else {
              tickString = '0'; // never show decimal places for 0
            }

            return tickString;
          },
          logarithmic: function logarithmic(tickValue, index, ticks) {
            var remain = tickValue / Math.pow(10, Math.floor(helpers.log10(tickValue)));

            if (tickValue === 0) {
              return '0';
            } else if (remain === 1 || remain === 2 || remain === 5 || index === 0 || index === ticks.length - 1) {
              return tickValue.toExponential();
            }

            return '';
          }
        }
      };
    };
    /***/

  },

  /***/
  "./node_modules/chart.js/src/core/core.title.js": function node_modulesChartJsSrcCoreCoreTitleJs(module, exports, __webpack_require__) {
    "use strict";

    module.exports = function (Chart) {
      var helpers = Chart.helpers;
      Chart.defaults.global.title = {
        display: false,
        position: 'top',
        fullWidth: true,
        // marks that this box should take the full width of the canvas (pushing down other boxes)
        fontStyle: 'bold',
        padding: 10,
        // actual title
        text: ''
      };
      var noop = helpers.noop;
      Chart.Title = Chart.Element.extend({
        initialize: function initialize(config) {
          var me = this;
          helpers.extend(me, config); // Contains hit boxes for each dataset (in dataset order)

          me.legendHitBoxes = [];
        },
        // These methods are ordered by lifecycle. Utilities then follow.
        beforeUpdate: noop,
        update: function update(maxWidth, maxHeight, margins) {
          var me = this; // Update Lifecycle - Probably don't want to ever extend or overwrite this function ;)

          me.beforeUpdate(); // Absorb the master measurements

          me.maxWidth = maxWidth;
          me.maxHeight = maxHeight;
          me.margins = margins; // Dimensions

          me.beforeSetDimensions();
          me.setDimensions();
          me.afterSetDimensions(); // Labels

          me.beforeBuildLabels();
          me.buildLabels();
          me.afterBuildLabels(); // Fit

          me.beforeFit();
          me.fit();
          me.afterFit(); //

          me.afterUpdate();
          return me.minSize;
        },
        afterUpdate: noop,
        //
        beforeSetDimensions: noop,
        setDimensions: function setDimensions() {
          var me = this; // Set the unconstrained dimension before label rotation

          if (me.isHorizontal()) {
            // Reset position before calculating rotation
            me.width = me.maxWidth;
            me.left = 0;
            me.right = me.width;
          } else {
            me.height = me.maxHeight; // Reset position before calculating rotation

            me.top = 0;
            me.bottom = me.height;
          } // Reset padding


          me.paddingLeft = 0;
          me.paddingTop = 0;
          me.paddingRight = 0;
          me.paddingBottom = 0; // Reset minSize

          me.minSize = {
            width: 0,
            height: 0
          };
        },
        afterSetDimensions: noop,
        //
        beforeBuildLabels: noop,
        buildLabels: noop,
        afterBuildLabels: noop,
        //
        beforeFit: noop,
        fit: function fit() {
          var me = this,
              valueOrDefault = helpers.getValueOrDefault,
              opts = me.options,
              globalDefaults = Chart.defaults.global,
              display = opts.display,
              fontSize = valueOrDefault(opts.fontSize, globalDefaults.defaultFontSize),
              minSize = me.minSize;

          if (me.isHorizontal()) {
            minSize.width = me.maxWidth; // fill all the width

            minSize.height = display ? fontSize + opts.padding * 2 : 0;
          } else {
            minSize.width = display ? fontSize + opts.padding * 2 : 0;
            minSize.height = me.maxHeight; // fill all the height
          }

          me.width = minSize.width;
          me.height = minSize.height;
        },
        afterFit: noop,
        // Shared Methods
        isHorizontal: function isHorizontal() {
          var pos = this.options.position;
          return pos === 'top' || pos === 'bottom';
        },
        // Actually draw the title block on the canvas
        draw: function draw() {
          var me = this,
              ctx = me.ctx,
              valueOrDefault = helpers.getValueOrDefault,
              opts = me.options,
              globalDefaults = Chart.defaults.global;

          if (opts.display) {
            var fontSize = valueOrDefault(opts.fontSize, globalDefaults.defaultFontSize),
                fontStyle = valueOrDefault(opts.fontStyle, globalDefaults.defaultFontStyle),
                fontFamily = valueOrDefault(opts.fontFamily, globalDefaults.defaultFontFamily),
                titleFont = helpers.fontString(fontSize, fontStyle, fontFamily),
                rotation = 0,
                titleX,
                titleY,
                top = me.top,
                left = me.left,
                bottom = me.bottom,
                right = me.right,
                maxWidth;
            ctx.fillStyle = valueOrDefault(opts.fontColor, globalDefaults.defaultFontColor); // render in correct colour

            ctx.font = titleFont; // Horizontal

            if (me.isHorizontal()) {
              titleX = left + (right - left) / 2; // midpoint of the width

              titleY = top + (bottom - top) / 2; // midpoint of the height

              maxWidth = right - left;
            } else {
              titleX = opts.position === 'left' ? left + fontSize / 2 : right - fontSize / 2;
              titleY = top + (bottom - top) / 2;
              maxWidth = bottom - top;
              rotation = Math.PI * (opts.position === 'left' ? -0.5 : 0.5);
            }

            ctx.save();
            ctx.translate(titleX, titleY);
            ctx.rotate(rotation);
            ctx.textAlign = 'center';
            ctx.textBaseline = 'middle';
            ctx.fillText(opts.text, 0, 0, maxWidth);
            ctx.restore();
          }
        }
      });

      function createNewTitleBlockAndAttach(chartInstance, titleOpts) {
        var title = new Chart.Title({
          ctx: chartInstance.chart.ctx,
          options: titleOpts,
          chart: chartInstance
        });
        chartInstance.titleBlock = title;
        Chart.layoutService.addBox(chartInstance, title);
      } // Register the title plugin


      Chart.plugins.register({
        beforeInit: function beforeInit(chartInstance) {
          var titleOpts = chartInstance.options.title;

          if (titleOpts) {
            createNewTitleBlockAndAttach(chartInstance, titleOpts);
          }
        },
        beforeUpdate: function beforeUpdate(chartInstance) {
          var titleOpts = chartInstance.options.title;

          if (titleOpts) {
            titleOpts = helpers.configMerge(Chart.defaults.global.title, titleOpts);

            if (chartInstance.titleBlock) {
              chartInstance.titleBlock.options = titleOpts;
            } else {
              createNewTitleBlockAndAttach(chartInstance, titleOpts);
            }
          } else {
            Chart.layoutService.removeBox(chartInstance, chartInstance.titleBlock);
            delete chartInstance.titleBlock;
          }
        }
      });
    };
    /***/

  },

  /***/
  "./node_modules/chart.js/src/core/core.tooltip.js": function node_modulesChartJsSrcCoreCoreTooltipJs(module, exports, __webpack_require__) {
    "use strict";

    module.exports = function (Chart) {
      var helpers = Chart.helpers;
      /**
      	 * Helper method to merge the opacity into a color
      	 */

      function mergeOpacity(colorString, opacity) {
        var color = helpers.color(colorString);
        return color.alpha(opacity * color.alpha()).rgbaString();
      }

      Chart.defaults.global.tooltips = {
        enabled: true,
        custom: null,
        mode: 'nearest',
        position: 'average',
        intersect: true,
        backgroundColor: 'rgba(0,0,0,0.8)',
        titleFontStyle: 'bold',
        titleSpacing: 2,
        titleMarginBottom: 6,
        titleFontColor: '#fff',
        titleAlign: 'left',
        bodySpacing: 2,
        bodyFontColor: '#fff',
        bodyAlign: 'left',
        footerFontStyle: 'bold',
        footerSpacing: 2,
        footerMarginTop: 6,
        footerFontColor: '#fff',
        footerAlign: 'left',
        yPadding: 6,
        xPadding: 6,
        caretSize: 5,
        cornerRadius: 6,
        multiKeyBackground: '#fff',
        displayColors: true,
        callbacks: {
          // Args are: (tooltipItems, data)
          beforeTitle: helpers.noop,
          title: function title(tooltipItems, data) {
            // Pick first xLabel for now
            var title = '';
            var labels = data.labels;
            var labelCount = labels ? labels.length : 0;

            if (tooltipItems.length > 0) {
              var item = tooltipItems[0];

              if (item.xLabel) {
                title = item.xLabel;
              } else if (labelCount > 0 && item.index < labelCount) {
                title = labels[item.index];
              }
            }

            return title;
          },
          afterTitle: helpers.noop,
          // Args are: (tooltipItems, data)
          beforeBody: helpers.noop,
          // Args are: (tooltipItem, data)
          beforeLabel: helpers.noop,
          label: function label(tooltipItem, data) {
            var datasetLabel = data.datasets[tooltipItem.datasetIndex].label || '';
            return datasetLabel + ': ' + tooltipItem.yLabel;
          },
          labelColor: function labelColor(tooltipItem, chartInstance) {
            var meta = chartInstance.getDatasetMeta(tooltipItem.datasetIndex);
            var activeElement = meta.data[tooltipItem.index];
            var view = activeElement._view;
            return {
              borderColor: view.borderColor,
              backgroundColor: view.backgroundColor
            };
          },
          afterLabel: helpers.noop,
          // Args are: (tooltipItems, data)
          afterBody: helpers.noop,
          // Args are: (tooltipItems, data)
          beforeFooter: helpers.noop,
          footer: helpers.noop,
          afterFooter: helpers.noop
        }
      }; // Helper to push or concat based on if the 2nd parameter is an array or not

      function pushOrConcat(base, toPush) {
        if (toPush) {
          if (helpers.isArray(toPush)) {
            // base = base.concat(toPush);
            Array.prototype.push.apply(base, toPush);
          } else {
            base.push(toPush);
          }
        }

        return base;
      } // Private helper to create a tooltip item model
      // @param element : the chart element (point, arc, bar) to create the tooltip item for
      // @return : new tooltip item


      function createTooltipItem(element) {
        var xScale = element._xScale;
        var yScale = element._yScale || element._scale; // handle radar || polarArea charts

        var index = element._index,
            datasetIndex = element._datasetIndex;
        return {
          xLabel: xScale ? xScale.getLabelForIndex(index, datasetIndex) : '',
          yLabel: yScale ? yScale.getLabelForIndex(index, datasetIndex) : '',
          index: index,
          datasetIndex: datasetIndex,
          x: element._model.x,
          y: element._model.y
        };
      }
      /**
       * Helper to get the reset model for the tooltip
       * @param tooltipOpts {Object} the tooltip options
       */


      function getBaseModel(tooltipOpts) {
        var globalDefaults = Chart.defaults.global;
        var getValueOrDefault = helpers.getValueOrDefault;
        return {
          // Positioning
          xPadding: tooltipOpts.xPadding,
          yPadding: tooltipOpts.yPadding,
          xAlign: tooltipOpts.xAlign,
          yAlign: tooltipOpts.yAlign,
          // Body
          bodyFontColor: tooltipOpts.bodyFontColor,
          _bodyFontFamily: getValueOrDefault(tooltipOpts.bodyFontFamily, globalDefaults.defaultFontFamily),
          _bodyFontStyle: getValueOrDefault(tooltipOpts.bodyFontStyle, globalDefaults.defaultFontStyle),
          _bodyAlign: tooltipOpts.bodyAlign,
          bodyFontSize: getValueOrDefault(tooltipOpts.bodyFontSize, globalDefaults.defaultFontSize),
          bodySpacing: tooltipOpts.bodySpacing,
          // Title
          titleFontColor: tooltipOpts.titleFontColor,
          _titleFontFamily: getValueOrDefault(tooltipOpts.titleFontFamily, globalDefaults.defaultFontFamily),
          _titleFontStyle: getValueOrDefault(tooltipOpts.titleFontStyle, globalDefaults.defaultFontStyle),
          titleFontSize: getValueOrDefault(tooltipOpts.titleFontSize, globalDefaults.defaultFontSize),
          _titleAlign: tooltipOpts.titleAlign,
          titleSpacing: tooltipOpts.titleSpacing,
          titleMarginBottom: tooltipOpts.titleMarginBottom,
          // Footer
          footerFontColor: tooltipOpts.footerFontColor,
          _footerFontFamily: getValueOrDefault(tooltipOpts.footerFontFamily, globalDefaults.defaultFontFamily),
          _footerFontStyle: getValueOrDefault(tooltipOpts.footerFontStyle, globalDefaults.defaultFontStyle),
          footerFontSize: getValueOrDefault(tooltipOpts.footerFontSize, globalDefaults.defaultFontSize),
          _footerAlign: tooltipOpts.footerAlign,
          footerSpacing: tooltipOpts.footerSpacing,
          footerMarginTop: tooltipOpts.footerMarginTop,
          // Appearance
          caretSize: tooltipOpts.caretSize,
          cornerRadius: tooltipOpts.cornerRadius,
          backgroundColor: tooltipOpts.backgroundColor,
          opacity: 0,
          legendColorBackground: tooltipOpts.multiKeyBackground,
          displayColors: tooltipOpts.displayColors
        };
      }
      /**
       * Get the size of the tooltip
       */


      function getTooltipSize(tooltip, model) {
        var ctx = tooltip._chart.ctx;
        var height = model.yPadding * 2; // Tooltip Padding

        var width = 0; // Count of all lines in the body

        var body = model.body;
        var combinedBodyLength = body.reduce(function (count, bodyItem) {
          return count + bodyItem.before.length + bodyItem.lines.length + bodyItem.after.length;
        }, 0);
        combinedBodyLength += model.beforeBody.length + model.afterBody.length;
        var titleLineCount = model.title.length;
        var footerLineCount = model.footer.length;
        var titleFontSize = model.titleFontSize,
            bodyFontSize = model.bodyFontSize,
            footerFontSize = model.footerFontSize;
        height += titleLineCount * titleFontSize; // Title Lines

        height += titleLineCount ? (titleLineCount - 1) * model.titleSpacing : 0; // Title Line Spacing

        height += titleLineCount ? model.titleMarginBottom : 0; // Title's bottom Margin

        height += combinedBodyLength * bodyFontSize; // Body Lines

        height += combinedBodyLength ? (combinedBodyLength - 1) * model.bodySpacing : 0; // Body Line Spacing

        height += footerLineCount ? model.footerMarginTop : 0; // Footer Margin

        height += footerLineCount * footerFontSize; // Footer Lines

        height += footerLineCount ? (footerLineCount - 1) * model.footerSpacing : 0; // Footer Line Spacing
        // Title width

        var widthPadding = 0;

        var maxLineWidth = function maxLineWidth(line) {
          width = Math.max(width, ctx.measureText(line).width + widthPadding);
        };

        ctx.font = helpers.fontString(titleFontSize, model._titleFontStyle, model._titleFontFamily);
        helpers.each(model.title, maxLineWidth); // Body width

        ctx.font = helpers.fontString(bodyFontSize, model._bodyFontStyle, model._bodyFontFamily);
        helpers.each(model.beforeBody.concat(model.afterBody), maxLineWidth); // Body lines may include some extra width due to the color box

        widthPadding = model.displayColors ? bodyFontSize + 2 : 0;
        helpers.each(body, function (bodyItem) {
          helpers.each(bodyItem.before, maxLineWidth);
          helpers.each(bodyItem.lines, maxLineWidth);
          helpers.each(bodyItem.after, maxLineWidth);
        }); // Reset back to 0

        widthPadding = 0; // Footer width

        ctx.font = helpers.fontString(footerFontSize, model._footerFontStyle, model._footerFontFamily);
        helpers.each(model.footer, maxLineWidth); // Add padding

        width += 2 * model.xPadding;
        return {
          width: width,
          height: height
        };
      }
      /**
       * Helper to get the alignment of a tooltip given the size
       */


      function determineAlignment(tooltip, size) {
        var model = tooltip._model;
        var chart = tooltip._chart;
        var chartArea = tooltip._chartInstance.chartArea;
        var xAlign = 'center';
        var yAlign = 'center';

        if (model.y < size.height) {
          yAlign = 'top';
        } else if (model.y > chart.height - size.height) {
          yAlign = 'bottom';
        }

        var lf, rf; // functions to determine left, right alignment

        var olf, orf; // functions to determine if left/right alignment causes tooltip to go outside chart

        var yf; // function to get the y alignment if the tooltip goes outside of the left or right edges

        var midX = (chartArea.left + chartArea.right) / 2;
        var midY = (chartArea.top + chartArea.bottom) / 2;

        if (yAlign === 'center') {
          lf = function lf(x) {
            return x <= midX;
          };

          rf = function rf(x) {
            return x > midX;
          };
        } else {
          lf = function lf(x) {
            return x <= size.width / 2;
          };

          rf = function rf(x) {
            return x >= chart.width - size.width / 2;
          };
        }

        olf = function olf(x) {
          return x + size.width > chart.width;
        };

        orf = function orf(x) {
          return x - size.width < 0;
        };

        yf = function yf(y) {
          return y <= midY ? 'top' : 'bottom';
        };

        if (lf(model.x)) {
          xAlign = 'left'; // Is tooltip too wide and goes over the right side of the chart.?

          if (olf(model.x)) {
            xAlign = 'center';
            yAlign = yf(model.y);
          }
        } else if (rf(model.x)) {
          xAlign = 'right'; // Is tooltip too wide and goes outside left edge of canvas?

          if (orf(model.x)) {
            xAlign = 'center';
            yAlign = yf(model.y);
          }
        }

        var opts = tooltip._options;
        return {
          xAlign: opts.xAlign ? opts.xAlign : xAlign,
          yAlign: opts.yAlign ? opts.yAlign : yAlign
        };
      }
      /**
       * @Helper to get the location a tooltip needs to be placed at given the initial position (via the vm) and the size and alignment
       */


      function getBackgroundPoint(vm, size, alignment) {
        // Background Position
        var x = vm.x;
        var y = vm.y;
        var caretSize = vm.caretSize,
            caretPadding = vm.caretPadding,
            cornerRadius = vm.cornerRadius,
            xAlign = alignment.xAlign,
            yAlign = alignment.yAlign,
            paddingAndSize = caretSize + caretPadding,
            radiusAndPadding = cornerRadius + caretPadding;

        if (xAlign === 'right') {
          x -= size.width;
        } else if (xAlign === 'center') {
          x -= size.width / 2;
        }

        if (yAlign === 'top') {
          y += paddingAndSize;
        } else if (yAlign === 'bottom') {
          y -= size.height + paddingAndSize;
        } else {
          y -= size.height / 2;
        }

        if (yAlign === 'center') {
          if (xAlign === 'left') {
            x += paddingAndSize;
          } else if (xAlign === 'right') {
            x -= paddingAndSize;
          }
        } else if (xAlign === 'left') {
          x -= radiusAndPadding;
        } else if (xAlign === 'right') {
          x += radiusAndPadding;
        }

        return {
          x: x,
          y: y
        };
      }

      Chart.Tooltip = Chart.Element.extend({
        initialize: function initialize() {
          this._model = getBaseModel(this._options);
        },
        // Get the title
        // Args are: (tooltipItem, data)
        getTitle: function getTitle() {
          var me = this;
          var opts = me._options;
          var callbacks = opts.callbacks;
          var beforeTitle = callbacks.beforeTitle.apply(me, arguments),
              title = callbacks.title.apply(me, arguments),
              afterTitle = callbacks.afterTitle.apply(me, arguments);
          var lines = [];
          lines = pushOrConcat(lines, beforeTitle);
          lines = pushOrConcat(lines, title);
          lines = pushOrConcat(lines, afterTitle);
          return lines;
        },
        // Args are: (tooltipItem, data)
        getBeforeBody: function getBeforeBody() {
          var lines = this._options.callbacks.beforeBody.apply(this, arguments);

          return helpers.isArray(lines) ? lines : lines !== undefined ? [lines] : [];
        },
        // Args are: (tooltipItem, data)
        getBody: function getBody(tooltipItems, data) {
          var me = this;
          var callbacks = me._options.callbacks;
          var bodyItems = [];
          helpers.each(tooltipItems, function (tooltipItem) {
            var bodyItem = {
              before: [],
              lines: [],
              after: []
            };
            pushOrConcat(bodyItem.before, callbacks.beforeLabel.call(me, tooltipItem, data));
            pushOrConcat(bodyItem.lines, callbacks.label.call(me, tooltipItem, data));
            pushOrConcat(bodyItem.after, callbacks.afterLabel.call(me, tooltipItem, data));
            bodyItems.push(bodyItem);
          });
          return bodyItems;
        },
        // Args are: (tooltipItem, data)
        getAfterBody: function getAfterBody() {
          var lines = this._options.callbacks.afterBody.apply(this, arguments);

          return helpers.isArray(lines) ? lines : lines !== undefined ? [lines] : [];
        },
        // Get the footer and beforeFooter and afterFooter lines
        // Args are: (tooltipItem, data)
        getFooter: function getFooter() {
          var me = this;
          var callbacks = me._options.callbacks;
          var beforeFooter = callbacks.beforeFooter.apply(me, arguments);
          var footer = callbacks.footer.apply(me, arguments);
          var afterFooter = callbacks.afterFooter.apply(me, arguments);
          var lines = [];
          lines = pushOrConcat(lines, beforeFooter);
          lines = pushOrConcat(lines, footer);
          lines = pushOrConcat(lines, afterFooter);
          return lines;
        },
        update: function update(changed) {
          var me = this;
          var opts = me._options; // Need to regenerate the model because its faster than using extend and it is necessary due to the optimization in Chart.Element.transition
          // that does _view = _model if ease === 1. This causes the 2nd tooltip update to set properties in both the view and model at the same time
          // which breaks any animations.

          var existingModel = me._model;
          var model = me._model = getBaseModel(opts);
          var active = me._active;
          var data = me._data;
          var chartInstance = me._chartInstance; // In the case where active.length === 0 we need to keep these at existing values for good animations

          var alignment = {
            xAlign: existingModel.xAlign,
            yAlign: existingModel.yAlign
          };
          var backgroundPoint = {
            x: existingModel.x,
            y: existingModel.y
          };
          var tooltipSize = {
            width: existingModel.width,
            height: existingModel.height
          };
          var tooltipPosition = {
            x: existingModel.caretX,
            y: existingModel.caretY
          };
          var i, len;

          if (active.length) {
            model.opacity = 1;
            var labelColors = [];
            tooltipPosition = Chart.Tooltip.positioners[opts.position](active, me._eventPosition);
            var tooltipItems = [];

            for (i = 0, len = active.length; i < len; ++i) {
              tooltipItems.push(createTooltipItem(active[i]));
            } // If the user provided a filter function, use it to modify the tooltip items


            if (opts.filter) {
              tooltipItems = tooltipItems.filter(function (a) {
                return opts.filter(a, data);
              });
            } // If the user provided a sorting function, use it to modify the tooltip items


            if (opts.itemSort) {
              tooltipItems = tooltipItems.sort(function (a, b) {
                return opts.itemSort(a, b, data);
              });
            } // Determine colors for boxes


            helpers.each(tooltipItems, function (tooltipItem) {
              labelColors.push(opts.callbacks.labelColor.call(me, tooltipItem, chartInstance));
            }); // Build the Text Lines

            model.title = me.getTitle(tooltipItems, data);
            model.beforeBody = me.getBeforeBody(tooltipItems, data);
            model.body = me.getBody(tooltipItems, data);
            model.afterBody = me.getAfterBody(tooltipItems, data);
            model.footer = me.getFooter(tooltipItems, data); // Initial positioning and colors

            model.x = Math.round(tooltipPosition.x);
            model.y = Math.round(tooltipPosition.y);
            model.caretPadding = helpers.getValueOrDefault(tooltipPosition.padding, 2);
            model.labelColors = labelColors; // data points

            model.dataPoints = tooltipItems; // We need to determine alignment of the tooltip

            tooltipSize = getTooltipSize(this, model);
            alignment = determineAlignment(this, tooltipSize); // Final Size and Position

            backgroundPoint = getBackgroundPoint(model, tooltipSize, alignment);
          } else {
            model.opacity = 0;
          }

          model.xAlign = alignment.xAlign;
          model.yAlign = alignment.yAlign;
          model.x = backgroundPoint.x;
          model.y = backgroundPoint.y;
          model.width = tooltipSize.width;
          model.height = tooltipSize.height; // Point where the caret on the tooltip points to

          model.caretX = tooltipPosition.x;
          model.caretY = tooltipPosition.y;
          me._model = model;

          if (changed && opts.custom) {
            opts.custom.call(me, model);
          }

          return me;
        },
        drawCaret: function drawCaret(tooltipPoint, size, opacity) {
          var vm = this._view;
          var ctx = this._chart.ctx;
          var x1, x2, x3;
          var y1, y2, y3;
          var caretSize = vm.caretSize;
          var cornerRadius = vm.cornerRadius;
          var xAlign = vm.xAlign,
              yAlign = vm.yAlign;
          var ptX = tooltipPoint.x,
              ptY = tooltipPoint.y;
          var width = size.width,
              height = size.height;

          if (yAlign === 'center') {
            // Left or right side
            if (xAlign === 'left') {
              x1 = ptX;
              x2 = x1 - caretSize;
              x3 = x1;
            } else {
              x1 = ptX + width;
              x2 = x1 + caretSize;
              x3 = x1;
            }

            y2 = ptY + height / 2;
            y1 = y2 - caretSize;
            y3 = y2 + caretSize;
          } else {
            if (xAlign === 'left') {
              x1 = ptX + cornerRadius;
              x2 = x1 + caretSize;
              x3 = x2 + caretSize;
            } else if (xAlign === 'right') {
              x1 = ptX + width - cornerRadius;
              x2 = x1 - caretSize;
              x3 = x2 - caretSize;
            } else {
              x2 = ptX + width / 2;
              x1 = x2 - caretSize;
              x3 = x2 + caretSize;
            }

            if (yAlign === 'top') {
              y1 = ptY;
              y2 = y1 - caretSize;
              y3 = y1;
            } else {
              y1 = ptY + height;
              y2 = y1 + caretSize;
              y3 = y1;
            }
          }

          ctx.fillStyle = mergeOpacity(vm.backgroundColor, opacity);
          ctx.beginPath();
          ctx.moveTo(x1, y1);
          ctx.lineTo(x2, y2);
          ctx.lineTo(x3, y3);
          ctx.closePath();
          ctx.fill();
        },
        drawTitle: function drawTitle(pt, vm, ctx, opacity) {
          var title = vm.title;

          if (title.length) {
            ctx.textAlign = vm._titleAlign;
            ctx.textBaseline = 'top';
            var titleFontSize = vm.titleFontSize,
                titleSpacing = vm.titleSpacing;
            ctx.fillStyle = mergeOpacity(vm.titleFontColor, opacity);
            ctx.font = helpers.fontString(titleFontSize, vm._titleFontStyle, vm._titleFontFamily);
            var i, len;

            for (i = 0, len = title.length; i < len; ++i) {
              ctx.fillText(title[i], pt.x, pt.y);
              pt.y += titleFontSize + titleSpacing; // Line Height and spacing

              if (i + 1 === title.length) {
                pt.y += vm.titleMarginBottom - titleSpacing; // If Last, add margin, remove spacing
              }
            }
          }
        },
        drawBody: function drawBody(pt, vm, ctx, opacity) {
          var bodyFontSize = vm.bodyFontSize;
          var bodySpacing = vm.bodySpacing;
          var body = vm.body;
          ctx.textAlign = vm._bodyAlign;
          ctx.textBaseline = 'top';
          var textColor = mergeOpacity(vm.bodyFontColor, opacity);
          ctx.fillStyle = textColor;
          ctx.font = helpers.fontString(bodyFontSize, vm._bodyFontStyle, vm._bodyFontFamily); // Before Body

          var xLinePadding = 0;

          var fillLineOfText = function fillLineOfText(line) {
            ctx.fillText(line, pt.x + xLinePadding, pt.y);
            pt.y += bodyFontSize + bodySpacing;
          }; // Before body lines


          helpers.each(vm.beforeBody, fillLineOfText);
          var drawColorBoxes = vm.displayColors;
          xLinePadding = drawColorBoxes ? bodyFontSize + 2 : 0; // Draw body lines now

          helpers.each(body, function (bodyItem, i) {
            helpers.each(bodyItem.before, fillLineOfText);
            helpers.each(bodyItem.lines, function (line) {
              // Draw Legend-like boxes if needed
              if (drawColorBoxes) {
                // Fill a white rect so that colours merge nicely if the opacity is < 1
                ctx.fillStyle = mergeOpacity(vm.legendColorBackground, opacity);
                ctx.fillRect(pt.x, pt.y, bodyFontSize, bodyFontSize); // Border

                ctx.strokeStyle = mergeOpacity(vm.labelColors[i].borderColor, opacity);
                ctx.strokeRect(pt.x, pt.y, bodyFontSize, bodyFontSize); // Inner square

                ctx.fillStyle = mergeOpacity(vm.labelColors[i].backgroundColor, opacity);
                ctx.fillRect(pt.x + 1, pt.y + 1, bodyFontSize - 2, bodyFontSize - 2);
                ctx.fillStyle = textColor;
              }

              fillLineOfText(line);
            });
            helpers.each(bodyItem.after, fillLineOfText);
          }); // Reset back to 0 for after body

          xLinePadding = 0; // After body lines

          helpers.each(vm.afterBody, fillLineOfText);
          pt.y -= bodySpacing; // Remove last body spacing
        },
        drawFooter: function drawFooter(pt, vm, ctx, opacity) {
          var footer = vm.footer;

          if (footer.length) {
            pt.y += vm.footerMarginTop;
            ctx.textAlign = vm._footerAlign;
            ctx.textBaseline = 'top';
            ctx.fillStyle = mergeOpacity(vm.footerFontColor, opacity);
            ctx.font = helpers.fontString(vm.footerFontSize, vm._footerFontStyle, vm._footerFontFamily);
            helpers.each(footer, function (line) {
              ctx.fillText(line, pt.x, pt.y);
              pt.y += vm.footerFontSize + vm.footerSpacing;
            });
          }
        },
        drawBackground: function drawBackground(pt, vm, ctx, tooltipSize, opacity) {
          ctx.fillStyle = mergeOpacity(vm.backgroundColor, opacity);
          helpers.drawRoundedRectangle(ctx, pt.x, pt.y, tooltipSize.width, tooltipSize.height, vm.cornerRadius);
          ctx.fill();
        },
        draw: function draw() {
          var ctx = this._chart.ctx;
          var vm = this._view;

          if (vm.opacity === 0) {
            return;
          }

          var tooltipSize = {
            width: vm.width,
            height: vm.height
          };
          var pt = {
            x: vm.x,
            y: vm.y
          }; // IE11/Edge does not like very small opacities, so snap to 0

          var opacity = Math.abs(vm.opacity < 1e-3) ? 0 : vm.opacity;

          if (this._options.enabled) {
            // Draw Background
            this.drawBackground(pt, vm, ctx, tooltipSize, opacity); // Draw Caret

            this.drawCaret(pt, tooltipSize, opacity); // Draw Title, Body, and Footer

            pt.x += vm.xPadding;
            pt.y += vm.yPadding; // Titles

            this.drawTitle(pt, vm, ctx, opacity); // Body

            this.drawBody(pt, vm, ctx, opacity); // Footer

            this.drawFooter(pt, vm, ctx, opacity);
          }
        },

        /**
         * Handle an event
         * @private
         * @param {IEvent} event - The event to handle
         * @returns {Boolean} true if the tooltip changed
         */
        handleEvent: function handleEvent(e) {
          var me = this;
          var options = me._options;
          var changed = false;
          me._lastActive = me._lastActive || []; // Find Active Elements for tooltips

          if (e.type === 'mouseout') {
            me._active = [];
          } else {
            me._active = me._chartInstance.getElementsAtEventForMode(e, options.mode, options);
          } // Remember Last Actives


          changed = !helpers.arrayEquals(me._active, me._lastActive);
          me._lastActive = me._active;

          if (options.enabled || options.custom) {
            me._eventPosition = {
              x: e.x,
              y: e.y
            };
            var model = me._model;
            me.update(true);
            me.pivot(); // See if our tooltip position changed

            changed |= model.x !== me._model.x || model.y !== me._model.y;
          }

          return changed;
        }
      });
      /**
       * @namespace Chart.Tooltip.positioners
       */

      Chart.Tooltip.positioners = {
        /**
         * Average mode places the tooltip at the average position of the elements shown
         * @function Chart.Tooltip.positioners.average
         * @param elements {ChartElement[]} the elements being displayed in the tooltip
         * @returns {Point} tooltip position
         */
        average: function average(elements) {
          if (!elements.length) {
            return false;
          }

          var i, len;
          var x = 0;
          var y = 0;
          var count = 0;

          for (i = 0, len = elements.length; i < len; ++i) {
            var el = elements[i];

            if (el && el.hasValue()) {
              var pos = el.tooltipPosition();
              x += pos.x;
              y += pos.y;
              ++count;
            }
          }

          return {
            x: Math.round(x / count),
            y: Math.round(y / count)
          };
        },

        /**
         * Gets the tooltip position nearest of the item nearest to the event position
         * @function Chart.Tooltip.positioners.nearest
         * @param elements {Chart.Element[]} the tooltip elements
         * @param eventPosition {Point} the position of the event in canvas coordinates
         * @returns {Point} the tooltip position
         */
        nearest: function nearest(elements, eventPosition) {
          var x = eventPosition.x;
          var y = eventPosition.y;
          var nearestElement;
          var minDistance = Number.POSITIVE_INFINITY;
          var i, len;

          for (i = 0, len = elements.length; i < len; ++i) {
            var el = elements[i];

            if (el && el.hasValue()) {
              var center = el.getCenterPoint();
              var d = helpers.distanceBetweenPoints(eventPosition, center);

              if (d < minDistance) {
                minDistance = d;
                nearestElement = el;
              }
            }
          }

          if (nearestElement) {
            var tp = nearestElement.tooltipPosition();
            x = tp.x;
            y = tp.y;
          }

          return {
            x: x,
            y: y
          };
        }
      };
    };
    /***/

  },

  /***/
  "./node_modules/chart.js/src/elements/element.arc.js": function node_modulesChartJsSrcElementsElementArcJs(module, exports, __webpack_require__) {
    "use strict";

    module.exports = function (Chart) {
      var helpers = Chart.helpers,
          globalOpts = Chart.defaults.global;
      globalOpts.elements.arc = {
        backgroundColor: globalOpts.defaultColor,
        borderColor: '#fff',
        borderWidth: 2
      };
      Chart.elements.Arc = Chart.Element.extend({
        inLabelRange: function inLabelRange(mouseX) {
          var vm = this._view;

          if (vm) {
            return Math.pow(mouseX - vm.x, 2) < Math.pow(vm.radius + vm.hoverRadius, 2);
          }

          return false;
        },
        inRange: function inRange(chartX, chartY) {
          var vm = this._view;

          if (vm) {
            var pointRelativePosition = helpers.getAngleFromPoint(vm, {
              x: chartX,
              y: chartY
            }),
                angle = pointRelativePosition.angle,
                distance = pointRelativePosition.distance; // Sanitise angle range

            var startAngle = vm.startAngle;
            var endAngle = vm.endAngle;

            while (endAngle < startAngle) {
              endAngle += 2.0 * Math.PI;
            }

            while (angle > endAngle) {
              angle -= 2.0 * Math.PI;
            }

            while (angle < startAngle) {
              angle += 2.0 * Math.PI;
            } // Check if within the range of the open/close angle


            var betweenAngles = angle >= startAngle && angle <= endAngle,
                withinRadius = distance >= vm.innerRadius && distance <= vm.outerRadius;
            return betweenAngles && withinRadius;
          }

          return false;
        },
        getCenterPoint: function getCenterPoint() {
          var vm = this._view;
          var halfAngle = (vm.startAngle + vm.endAngle) / 2;
          var halfRadius = (vm.innerRadius + vm.outerRadius) / 2;
          return {
            x: vm.x + Math.cos(halfAngle) * halfRadius,
            y: vm.y + Math.sin(halfAngle) * halfRadius
          };
        },
        getArea: function getArea() {
          var vm = this._view;
          return Math.PI * ((vm.endAngle - vm.startAngle) / (2 * Math.PI)) * (Math.pow(vm.outerRadius, 2) - Math.pow(vm.innerRadius, 2));
        },
        tooltipPosition: function tooltipPosition() {
          var vm = this._view;
          var centreAngle = vm.startAngle + (vm.endAngle - vm.startAngle) / 2,
              rangeFromCentre = (vm.outerRadius - vm.innerRadius) / 2 + vm.innerRadius;
          return {
            x: vm.x + Math.cos(centreAngle) * rangeFromCentre,
            y: vm.y + Math.sin(centreAngle) * rangeFromCentre
          };
        },
        draw: function draw() {
          var ctx = this._chart.ctx,
              vm = this._view,
              sA = vm.startAngle,
              eA = vm.endAngle;
          ctx.beginPath();
          ctx.arc(vm.x, vm.y, vm.outerRadius, sA, eA);
          ctx.arc(vm.x, vm.y, vm.innerRadius, eA, sA, true);
          ctx.closePath();
          ctx.strokeStyle = vm.borderColor;
          ctx.lineWidth = vm.borderWidth;
          ctx.fillStyle = vm.backgroundColor;
          ctx.fill();
          ctx.lineJoin = 'bevel';

          if (vm.borderWidth) {
            ctx.stroke();
          }
        }
      });
    };
    /***/

  },

  /***/
  "./node_modules/chart.js/src/elements/element.line.js": function node_modulesChartJsSrcElementsElementLineJs(module, exports, __webpack_require__) {
    "use strict";

    module.exports = function (Chart) {
      var helpers = Chart.helpers;
      var globalDefaults = Chart.defaults.global;
      Chart.defaults.global.elements.line = {
        tension: 0.4,
        backgroundColor: globalDefaults.defaultColor,
        borderWidth: 3,
        borderColor: globalDefaults.defaultColor,
        borderCapStyle: 'butt',
        borderDash: [],
        borderDashOffset: 0.0,
        borderJoinStyle: 'miter',
        capBezierPoints: true,
        fill: true // do we fill in the area between the line and its base axis

      };
      Chart.elements.Line = Chart.Element.extend({
        draw: function draw() {
          var me = this;
          var vm = me._view;
          var spanGaps = vm.spanGaps;
          var fillPoint = vm.scaleZero;
          var loop = me._loop; // Handle different fill modes for cartesian lines

          if (!loop) {
            if (vm.fill === 'top') {
              fillPoint = vm.scaleTop;
            } else if (vm.fill === 'bottom') {
              fillPoint = vm.scaleBottom;
            }
          }

          var ctx = me._chart.ctx;
          ctx.save(); // Helper function to draw a line to a point

          function lineToPoint(previousPoint, point) {
            var pointVM = point._view;

            if (point._view.steppedLine === true) {
              ctx.lineTo(pointVM.x, previousPoint._view.y);
              ctx.lineTo(pointVM.x, pointVM.y);
            } else if (point._view.tension === 0) {
              ctx.lineTo(pointVM.x, pointVM.y);
            } else {
              ctx.bezierCurveTo(previousPoint._view.controlPointNextX, previousPoint._view.controlPointNextY, pointVM.controlPointPreviousX, pointVM.controlPointPreviousY, pointVM.x, pointVM.y);
            }
          }

          var points = me._children.slice(); // clone array


          var lastDrawnIndex = -1; // If we are looping, adding the first point again

          if (loop && points.length) {
            points.push(points[0]);
          }

          var index, current, previous, currentVM; // Fill Line

          if (points.length && vm.fill) {
            ctx.beginPath();

            for (index = 0; index < points.length; ++index) {
              current = points[index];
              previous = helpers.previousItem(points, index);
              currentVM = current._view; // First point moves to it's starting position no matter what

              if (index === 0) {
                if (loop) {
                  ctx.moveTo(fillPoint.x, fillPoint.y);
                } else {
                  ctx.moveTo(currentVM.x, fillPoint);
                }

                if (!currentVM.skip) {
                  lastDrawnIndex = index;
                  ctx.lineTo(currentVM.x, currentVM.y);
                }
              } else {
                previous = lastDrawnIndex === -1 ? previous : points[lastDrawnIndex];

                if (currentVM.skip) {
                  // Only do this if this is the first point that is skipped
                  if (!spanGaps && lastDrawnIndex === index - 1) {
                    if (loop) {
                      ctx.lineTo(fillPoint.x, fillPoint.y);
                    } else {
                      ctx.lineTo(previous._view.x, fillPoint);
                    }
                  }
                } else {
                  if (lastDrawnIndex !== index - 1) {
                    // There was a gap and this is the first point after the gap. If we've never drawn a point, this is a special case.
                    // If the first data point is NaN, then there is no real gap to skip
                    if (spanGaps && lastDrawnIndex !== -1) {
                      // We are spanning the gap, so simple draw a line to this point
                      lineToPoint(previous, current);
                    } else if (loop) {
                      ctx.lineTo(currentVM.x, currentVM.y);
                    } else {
                      ctx.lineTo(currentVM.x, fillPoint);
                      ctx.lineTo(currentVM.x, currentVM.y);
                    }
                  } else {
                    // Line to next point
                    lineToPoint(previous, current);
                  }

                  lastDrawnIndex = index;
                }
              }
            }

            if (!loop && lastDrawnIndex !== -1) {
              ctx.lineTo(points[lastDrawnIndex]._view.x, fillPoint);
            }

            ctx.fillStyle = vm.backgroundColor || globalDefaults.defaultColor;
            ctx.closePath();
            ctx.fill();
          } // Stroke Line Options


          var globalOptionLineElements = globalDefaults.elements.line;
          ctx.lineCap = vm.borderCapStyle || globalOptionLineElements.borderCapStyle; // IE 9 and 10 do not support line dash

          if (ctx.setLineDash) {
            ctx.setLineDash(vm.borderDash || globalOptionLineElements.borderDash);
          }

          ctx.lineDashOffset = vm.borderDashOffset || globalOptionLineElements.borderDashOffset;
          ctx.lineJoin = vm.borderJoinStyle || globalOptionLineElements.borderJoinStyle;
          ctx.lineWidth = vm.borderWidth || globalOptionLineElements.borderWidth;
          ctx.strokeStyle = vm.borderColor || globalDefaults.defaultColor; // Stroke Line

          ctx.beginPath();
          lastDrawnIndex = -1;

          for (index = 0; index < points.length; ++index) {
            current = points[index];
            previous = helpers.previousItem(points, index);
            currentVM = current._view; // First point moves to it's starting position no matter what

            if (index === 0) {
              if (!currentVM.skip) {
                ctx.moveTo(currentVM.x, currentVM.y);
                lastDrawnIndex = index;
              }
            } else {
              previous = lastDrawnIndex === -1 ? previous : points[lastDrawnIndex];

              if (!currentVM.skip) {
                if (lastDrawnIndex !== index - 1 && !spanGaps || lastDrawnIndex === -1) {
                  // There was a gap and this is the first point after the gap
                  ctx.moveTo(currentVM.x, currentVM.y);
                } else {
                  // Line to next point
                  lineToPoint(previous, current);
                }

                lastDrawnIndex = index;
              }
            }
          }

          ctx.stroke();
          ctx.restore();
        }
      });
    };
    /***/

  },

  /***/
  "./node_modules/chart.js/src/elements/element.point.js": function node_modulesChartJsSrcElementsElementPointJs(module, exports, __webpack_require__) {
    "use strict";

    module.exports = function (Chart) {
      var helpers = Chart.helpers,
          globalOpts = Chart.defaults.global,
          defaultColor = globalOpts.defaultColor;
      globalOpts.elements.point = {
        radius: 3,
        pointStyle: 'circle',
        backgroundColor: defaultColor,
        borderWidth: 1,
        borderColor: defaultColor,
        // Hover
        hitRadius: 1,
        hoverRadius: 4,
        hoverBorderWidth: 1
      };

      function xRange(mouseX) {
        var vm = this._view;
        return vm ? Math.pow(mouseX - vm.x, 2) < Math.pow(vm.radius + vm.hitRadius, 2) : false;
      }

      function yRange(mouseY) {
        var vm = this._view;
        return vm ? Math.pow(mouseY - vm.y, 2) < Math.pow(vm.radius + vm.hitRadius, 2) : false;
      }

      Chart.elements.Point = Chart.Element.extend({
        inRange: function inRange(mouseX, mouseY) {
          var vm = this._view;
          return vm ? Math.pow(mouseX - vm.x, 2) + Math.pow(mouseY - vm.y, 2) < Math.pow(vm.hitRadius + vm.radius, 2) : false;
        },
        inLabelRange: xRange,
        inXRange: xRange,
        inYRange: yRange,
        getCenterPoint: function getCenterPoint() {
          var vm = this._view;
          return {
            x: vm.x,
            y: vm.y
          };
        },
        getArea: function getArea() {
          return Math.PI * Math.pow(this._view.radius, 2);
        },
        tooltipPosition: function tooltipPosition() {
          var vm = this._view;
          return {
            x: vm.x,
            y: vm.y,
            padding: vm.radius + vm.borderWidth
          };
        },
        draw: function draw(chartArea) {
          var vm = this._view;
          var model = this._model;
          var ctx = this._chart.ctx;
          var pointStyle = vm.pointStyle;
          var radius = vm.radius;
          var x = vm.x;
          var y = vm.y;
          var color = Chart.helpers.color;
          var errMargin = 1.01; // 1.01 is margin for Accumulated error. (Especially Edge, IE.)

          var ratio = 0;

          if (vm.skip) {
            return;
          }

          ctx.strokeStyle = vm.borderColor || defaultColor;
          ctx.lineWidth = helpers.getValueOrDefault(vm.borderWidth, globalOpts.elements.point.borderWidth);
          ctx.fillStyle = vm.backgroundColor || defaultColor; // Cliping for Points.
          // going out from inner charArea?

          if (chartArea !== undefined && (model.x < chartArea.left || chartArea.right * errMargin < model.x || model.y < chartArea.top || chartArea.bottom * errMargin < model.y)) {
            // Point fade out
            if (model.x < chartArea.left) {
              ratio = (x - model.x) / (chartArea.left - model.x);
            } else if (chartArea.right * errMargin < model.x) {
              ratio = (model.x - x) / (model.x - chartArea.right);
            } else if (model.y < chartArea.top) {
              ratio = (y - model.y) / (chartArea.top - model.y);
            } else if (chartArea.bottom * errMargin < model.y) {
              ratio = (model.y - y) / (model.y - chartArea.bottom);
            }

            ratio = Math.round(ratio * 100) / 100;
            ctx.strokeStyle = color(ctx.strokeStyle).alpha(ratio).rgbString();
            ctx.fillStyle = color(ctx.fillStyle).alpha(ratio).rgbString();
          }

          Chart.canvasHelpers.drawPoint(ctx, pointStyle, radius, x, y);
        }
      });
    };
    /***/

  },

  /***/
  "./node_modules/chart.js/src/elements/element.rectangle.js": function node_modulesChartJsSrcElementsElementRectangleJs(module, exports, __webpack_require__) {
    "use strict";

    module.exports = function (Chart) {
      var globalOpts = Chart.defaults.global;
      globalOpts.elements.rectangle = {
        backgroundColor: globalOpts.defaultColor,
        borderWidth: 0,
        borderColor: globalOpts.defaultColor,
        borderSkipped: 'bottom'
      };

      function isVertical(bar) {
        return bar._view.width !== undefined;
      }
      /**
       * Helper function to get the bounds of the bar regardless of the orientation
       * @private
       * @param bar {Chart.Element.Rectangle} the bar
       * @return {Bounds} bounds of the bar
       */


      function getBarBounds(bar) {
        var vm = bar._view;
        var x1, x2, y1, y2;

        if (isVertical(bar)) {
          // vertical
          var halfWidth = vm.width / 2;
          x1 = vm.x - halfWidth;
          x2 = vm.x + halfWidth;
          y1 = Math.min(vm.y, vm.base);
          y2 = Math.max(vm.y, vm.base);
        } else {
          // horizontal bar
          var halfHeight = vm.height / 2;
          x1 = Math.min(vm.x, vm.base);
          x2 = Math.max(vm.x, vm.base);
          y1 = vm.y - halfHeight;
          y2 = vm.y + halfHeight;
        }

        return {
          left: x1,
          top: y1,
          right: x2,
          bottom: y2
        };
      }

      Chart.elements.Rectangle = Chart.Element.extend({
        draw: function draw() {
          var ctx = this._chart.ctx;
          var vm = this._view;
          var left, right, top, bottom, signX, signY, borderSkipped;
          var borderWidth = vm.borderWidth;

          if (!vm.horizontal) {
            // bar
            left = vm.x - vm.width / 2;
            right = vm.x + vm.width / 2;
            top = vm.y;
            bottom = vm.base;
            signX = 1;
            signY = bottom > top ? 1 : -1;
            borderSkipped = vm.borderSkipped || 'bottom';
          } else {
            // horizontal bar
            left = vm.base;
            right = vm.x;
            top = vm.y - vm.height / 2;
            bottom = vm.y + vm.height / 2;
            signX = right > left ? 1 : -1;
            signY = 1;
            borderSkipped = vm.borderSkipped || 'left';
          } // Canvas doesn't allow us to stroke inside the width so we can
          // adjust the sizes to fit if we're setting a stroke on the line


          if (borderWidth) {
            // borderWidth shold be less than bar width and bar height.
            var barSize = Math.min(Math.abs(left - right), Math.abs(top - bottom));
            borderWidth = borderWidth > barSize ? barSize : borderWidth;
            var halfStroke = borderWidth / 2; // Adjust borderWidth when bar top position is near vm.base(zero).

            var borderLeft = left + (borderSkipped !== 'left' ? halfStroke * signX : 0);
            var borderRight = right + (borderSkipped !== 'right' ? -halfStroke * signX : 0);
            var borderTop = top + (borderSkipped !== 'top' ? halfStroke * signY : 0);
            var borderBottom = bottom + (borderSkipped !== 'bottom' ? -halfStroke * signY : 0); // not become a vertical line?

            if (borderLeft !== borderRight) {
              top = borderTop;
              bottom = borderBottom;
            } // not become a horizontal line?


            if (borderTop !== borderBottom) {
              left = borderLeft;
              right = borderRight;
            }
          }

          ctx.beginPath();
          ctx.fillStyle = vm.backgroundColor;
          ctx.strokeStyle = vm.borderColor;
          ctx.lineWidth = borderWidth; // Corner points, from bottom-left to bottom-right clockwise
          // | 1 2 |
          // | 0 3 |

          var corners = [[left, bottom], [left, top], [right, top], [right, bottom]]; // Find first (starting) corner with fallback to 'bottom'

          var borders = ['bottom', 'left', 'top', 'right'];
          var startCorner = borders.indexOf(borderSkipped, 0);

          if (startCorner === -1) {
            startCorner = 0;
          }

          function cornerAt(index) {
            return corners[(startCorner + index) % 4];
          } // Draw rectangle from 'startCorner'


          var corner = cornerAt(0);
          ctx.moveTo(corner[0], corner[1]);

          for (var i = 1; i < 4; i++) {
            corner = cornerAt(i);
            ctx.lineTo(corner[0], corner[1]);
          }

          ctx.fill();

          if (borderWidth) {
            ctx.stroke();
          }
        },
        height: function height() {
          var vm = this._view;
          return vm.base - vm.y;
        },
        inRange: function inRange(mouseX, mouseY) {
          var inRange = false;

          if (this._view) {
            var bounds = getBarBounds(this);
            inRange = mouseX >= bounds.left && mouseX <= bounds.right && mouseY >= bounds.top && mouseY <= bounds.bottom;
          }

          return inRange;
        },
        inLabelRange: function inLabelRange(mouseX, mouseY) {
          var me = this;

          if (!me._view) {
            return false;
          }

          var inRange = false;
          var bounds = getBarBounds(me);

          if (isVertical(me)) {
            inRange = mouseX >= bounds.left && mouseX <= bounds.right;
          } else {
            inRange = mouseY >= bounds.top && mouseY <= bounds.bottom;
          }

          return inRange;
        },
        inXRange: function inXRange(mouseX) {
          var bounds = getBarBounds(this);
          return mouseX >= bounds.left && mouseX <= bounds.right;
        },
        inYRange: function inYRange(mouseY) {
          var bounds = getBarBounds(this);
          return mouseY >= bounds.top && mouseY <= bounds.bottom;
        },
        getCenterPoint: function getCenterPoint() {
          var vm = this._view;
          var x, y;

          if (isVertical(this)) {
            x = vm.x;
            y = (vm.y + vm.base) / 2;
          } else {
            x = (vm.x + vm.base) / 2;
            y = vm.y;
          }

          return {
            x: x,
            y: y
          };
        },
        getArea: function getArea() {
          var vm = this._view;
          return vm.width * Math.abs(vm.y - vm.base);
        },
        tooltipPosition: function tooltipPosition() {
          var vm = this._view;
          return {
            x: vm.x,
            y: vm.y
          };
        }
      });
    };
    /***/

  },

  /***/
  "./node_modules/chart.js/src/platforms/platform.dom.js": function node_modulesChartJsSrcPlatformsPlatformDomJs(module, exports, __webpack_require__) {
    "use strict"; // Chart.Platform implementation for targeting a web browser

    module.exports = function (Chart) {
      var helpers = Chart.helpers; // DOM event types -> Chart.js event types.
      // Note: only events with different types are mapped.
      // https://developer.mozilla.org/en-US/docs/Web/Events

      var eventTypeMap = {
        // Touch events
        touchstart: 'mousedown',
        touchmove: 'mousemove',
        touchend: 'mouseup',
        // Pointer events
        pointerenter: 'mouseenter',
        pointerdown: 'mousedown',
        pointermove: 'mousemove',
        pointerup: 'mouseup',
        pointerleave: 'mouseout',
        pointerout: 'mouseout'
      };
      /**
       * The "used" size is the final value of a dimension property after all calculations have
       * been performed. This method uses the computed style of `element` but returns undefined
       * if the computed style is not expressed in pixels. That can happen in some cases where
       * `element` has a size relative to its parent and this last one is not yet displayed,
       * for example because of `display: none` on a parent node.
       * @see https://developer.mozilla.org/en-US/docs/Web/CSS/used_value
       * @returns {Number} Size in pixels or undefined if unknown.
       */

      function readUsedSize(element, property) {
        var value = helpers.getStyle(element, property);
        var matches = value && value.match(/(\d+)px/);
        return matches ? Number(matches[1]) : undefined;
      }
      /**
       * Initializes the canvas style and render size without modifying the canvas display size,
       * since responsiveness is handled by the controller.resize() method. The config is used
       * to determine the aspect ratio to apply in case no explicit height has been specified.
       */


      function initCanvas(canvas, config) {
        var style = canvas.style; // NOTE(SB) canvas.getAttribute('width') !== canvas.width: in the first case it
        // returns null or '' if no explicit value has been set to the canvas attribute.

        var renderHeight = canvas.getAttribute('height');
        var renderWidth = canvas.getAttribute('width'); // Chart.js modifies some canvas values that we want to restore on destroy

        canvas._chartjs = {
          initial: {
            height: renderHeight,
            width: renderWidth,
            style: {
              display: style.display,
              height: style.height,
              width: style.width
            }
          }
        }; // Force canvas to display as block to avoid extra space caused by inline
        // elements, which would interfere with the responsive resize process.
        // https://github.com/chartjs/Chart.js/issues/2538

        style.display = style.display || 'block';

        if (renderWidth === null || renderWidth === '') {
          var displayWidth = readUsedSize(canvas, 'width');

          if (displayWidth !== undefined) {
            canvas.width = displayWidth;
          }
        }

        if (renderHeight === null || renderHeight === '') {
          if (canvas.style.height === '') {
            // If no explicit render height and style height, let's apply the aspect ratio,
            // which one can be specified by the user but also by charts as default option
            // (i.e. options.aspectRatio). If not specified, use canvas aspect ratio of 2.
            canvas.height = canvas.width / (config.options.aspectRatio || 2);
          } else {
            var displayHeight = readUsedSize(canvas, 'height');

            if (displayWidth !== undefined) {
              canvas.height = displayHeight;
            }
          }
        }

        return canvas;
      }

      function createEvent(type, chart, x, y, _native) {
        return {
          type: type,
          chart: chart,
          "native": _native || null,
          x: x !== undefined ? x : null,
          y: y !== undefined ? y : null
        };
      }

      function fromNativeEvent(event, chart) {
        var type = eventTypeMap[event.type] || event.type;
        var pos = helpers.getRelativePosition(event, chart);
        return createEvent(type, chart, pos.x, pos.y, event);
      }

      function createResizer(handler) {
        var iframe = document.createElement('iframe');
        iframe.className = 'chartjs-hidden-iframe';
        iframe.style.cssText = 'display:block;' + 'overflow:hidden;' + 'border:0;' + 'margin:0;' + 'top:0;' + 'left:0;' + 'bottom:0;' + 'right:0;' + 'height:100%;' + 'width:100%;' + 'position:absolute;' + 'pointer-events:none;' + 'z-index:-1;'; // Prevent the iframe to gain focus on tab.
        // https://github.com/chartjs/Chart.js/issues/3090

        iframe.tabIndex = -1; // If the iframe is re-attached to the DOM, the resize listener is removed because the
        // content is reloaded, so make sure to install the handler after the iframe is loaded.
        // https://github.com/chartjs/Chart.js/issues/3521

        helpers.addEvent(iframe, 'load', function () {
          helpers.addEvent(iframe.contentWindow || iframe, 'resize', handler); // The iframe size might have changed while loading, which can also
          // happen if the size has been changed while detached from the DOM.

          handler();
        });
        return iframe;
      }

      function addResizeListener(node, listener, chart) {
        var stub = node._chartjs = {
          ticking: false
        }; // Throttle the callback notification until the next animation frame.

        var notify = function notify() {
          if (!stub.ticking) {
            stub.ticking = true;
            helpers.requestAnimFrame.call(window, function () {
              if (stub.resizer) {
                stub.ticking = false;
                return listener(createEvent('resize', chart));
              }
            });
          }
        }; // Let's keep track of this added iframe and thus avoid DOM query when removing it.


        stub.resizer = createResizer(notify);
        node.insertBefore(stub.resizer, node.firstChild);
      }

      function removeResizeListener(node) {
        if (!node || !node._chartjs) {
          return;
        }

        var resizer = node._chartjs.resizer;

        if (resizer) {
          resizer.parentNode.removeChild(resizer);
          node._chartjs.resizer = null;
        }

        delete node._chartjs;
      }

      return {
        acquireContext: function acquireContext(item, config) {
          if (typeof item === 'string') {
            item = document.getElementById(item);
          } else if (item.length) {
            // Support for array based queries (such as jQuery)
            item = item[0];
          }

          if (item && item.canvas) {
            // Support for any object associated to a canvas (including a context2d)
            item = item.canvas;
          }

          if (item instanceof HTMLCanvasElement) {
            // To prevent canvas fingerprinting, some add-ons undefine the getContext
            // method, for example: https://github.com/kkapsner/CanvasBlocker
            // https://github.com/chartjs/Chart.js/issues/2807
            var context = item.getContext && item.getContext('2d');

            if (context instanceof CanvasRenderingContext2D) {
              initCanvas(item, config);
              return context;
            }
          }

          return null;
        },
        releaseContext: function releaseContext(context) {
          var canvas = context.canvas;

          if (!canvas._chartjs) {
            return;
          }

          var initial = canvas._chartjs.initial;
          ['height', 'width'].forEach(function (prop) {
            var value = initial[prop];

            if (value === undefined || value === null) {
              canvas.removeAttribute(prop);
            } else {
              canvas.setAttribute(prop, value);
            }
          });
          helpers.each(initial.style || {}, function (value, key) {
            canvas.style[key] = value;
          }); // The canvas render size might have been changed (and thus the state stack discarded),
          // we can't use save() and restore() to restore the initial state. So make sure that at
          // least the canvas context is reset to the default state by setting the canvas width.
          // https://www.w3.org/TR/2011/WD-html5-20110525/the-canvas-element.html

          canvas.width = canvas.width;
          delete canvas._chartjs;
        },
        addEventListener: function addEventListener(chart, type, listener) {
          var canvas = chart.chart.canvas;

          if (type === 'resize') {
            // Note: the resize event is not supported on all browsers.
            addResizeListener(canvas.parentNode, listener, chart.chart);
            return;
          }

          var stub = listener._chartjs || (listener._chartjs = {});
          var proxies = stub.proxies || (stub.proxies = {});

          var proxy = proxies[chart.id + '_' + type] = function (event) {
            listener(fromNativeEvent(event, chart.chart));
          };

          helpers.addEvent(canvas, type, proxy);
        },
        removeEventListener: function removeEventListener(chart, type, listener) {
          var canvas = chart.chart.canvas;

          if (type === 'resize') {
            // Note: the resize event is not supported on all browsers.
            removeResizeListener(canvas.parentNode, listener);
            return;
          }

          var stub = listener._chartjs || {};
          var proxies = stub.proxies || {};
          var proxy = proxies[chart.id + '_' + type];

          if (!proxy) {
            return;
          }

          helpers.removeEvent(canvas, type, proxy);
        }
      };
    };
    /***/

  },

  /***/
  "./node_modules/chart.js/src/platforms/platform.js": function node_modulesChartJsSrcPlatformsPlatformJs(module, exports, __webpack_require__) {
    "use strict"; // By default, select the browser (DOM) platform.
    // @TODO Make possible to select another platform at build time.

    var implementation = __webpack_require__(
    /*! ./platform.dom.js */
    "./node_modules/chart.js/src/platforms/platform.dom.js");

    module.exports = function (Chart) {
      /**
       * @namespace Chart.platform
       * @see https://chartjs.gitbooks.io/proposals/content/Platform.html
       * @since 2.4.0
       */
      Chart.platform = {
        /**
         * Called at chart construction time, returns a context2d instance implementing
         * the [W3C Canvas 2D Context API standard]{@link https://www.w3.org/TR/2dcontext/}.
         * @param {*} item - The native item from which to acquire context (platform specific)
         * @param {Object} options - The chart options
         * @returns {CanvasRenderingContext2D} context2d instance
         */
        acquireContext: function acquireContext() {},

        /**
         * Called at chart destruction time, releases any resources associated to the context
         * previously returned by the acquireContext() method.
         * @param {CanvasRenderingContext2D} context - The context2d instance
         * @returns {Boolean} true if the method succeeded, else false
         */
        releaseContext: function releaseContext() {},

        /**
         * Registers the specified listener on the given chart.
         * @param {Chart} chart - Chart from which to listen for event
         * @param {String} type - The ({@link IEvent}) type to listen for
         * @param {Function} listener - Receives a notification (an object that implements
         * the {@link IEvent} interface) when an event of the specified type occurs.
         */
        addEventListener: function addEventListener() {},

        /**
         * Removes the specified listener previously registered with addEventListener.
         * @param {Chart} chart -Chart from which to remove the listener
         * @param {String} type - The ({@link IEvent}) type to remove
         * @param {Function} listener - The listener function to remove from the event target.
         */
        removeEventListener: function removeEventListener() {}
      };
      /**
       * @interface IPlatform
       * Allows abstracting platform dependencies away from the chart
       * @borrows Chart.platform.acquireContext as acquireContext
       * @borrows Chart.platform.releaseContext as releaseContext
       * @borrows Chart.platform.addEventListener as addEventListener
       * @borrows Chart.platform.removeEventListener as removeEventListener
       */

      /**
       * @interface IEvent
       * @prop {String} type - The event type name, possible values are:
       * 'contextmenu', 'mouseenter', 'mousedown', 'mousemove', 'mouseup', 'mouseout',
       * 'click', 'dblclick', 'keydown', 'keypress', 'keyup' and 'resize'
       * @prop {*} native - The original native event (null for emulated events, e.g. 'resize')
       * @prop {Number} x - The mouse x position, relative to the canvas (null for incompatible events)
       * @prop {Number} y - The mouse y position, relative to the canvas (null for incompatible events)
       */

      Chart.helpers.extend(Chart.platform, implementation(Chart));
    };
    /***/

  },

  /***/
  "./node_modules/chart.js/src/scales/scale.category.js": function node_modulesChartJsSrcScalesScaleCategoryJs(module, exports, __webpack_require__) {
    "use strict";

    module.exports = function (Chart) {
      var helpers = Chart.helpers; // Default config for a category scale

      var defaultConfig = {
        position: 'bottom'
      };
      var DatasetScale = Chart.Scale.extend({
        /**
        * Internal function to get the correct labels. If data.xLabels or data.yLabels are defined, use those
        * else fall back to data.labels
        * @private
        */
        getLabels: function getLabels() {
          var data = this.chart.data;
          return (this.isHorizontal() ? data.xLabels : data.yLabels) || data.labels;
        },
        // Implement this so that
        determineDataLimits: function determineDataLimits() {
          var me = this;
          var labels = me.getLabels();
          me.minIndex = 0;
          me.maxIndex = labels.length - 1;
          var findIndex;

          if (me.options.ticks.min !== undefined) {
            // user specified min value
            findIndex = helpers.indexOf(labels, me.options.ticks.min);
            me.minIndex = findIndex !== -1 ? findIndex : me.minIndex;
          }

          if (me.options.ticks.max !== undefined) {
            // user specified max value
            findIndex = helpers.indexOf(labels, me.options.ticks.max);
            me.maxIndex = findIndex !== -1 ? findIndex : me.maxIndex;
          }

          me.min = labels[me.minIndex];
          me.max = labels[me.maxIndex];
        },
        buildTicks: function buildTicks() {
          var me = this;
          var labels = me.getLabels(); // If we are viewing some subset of labels, slice the original array

          me.ticks = me.minIndex === 0 && me.maxIndex === labels.length - 1 ? labels : labels.slice(me.minIndex, me.maxIndex + 1);
        },
        getLabelForIndex: function getLabelForIndex(index, datasetIndex) {
          var me = this;
          var data = me.chart.data;
          var isHorizontal = me.isHorizontal();

          if (data.yLabels && !isHorizontal) {
            return me.getRightValue(data.datasets[datasetIndex].data[index]);
          }

          return me.ticks[index - me.minIndex];
        },
        // Used to get data value locations.  Value can either be an index or a numerical value
        getPixelForValue: function getPixelForValue(value, index, datasetIndex, includeOffset) {
          var me = this; // 1 is added because we need the length but we have the indexes

          var offsetAmt = Math.max(me.maxIndex + 1 - me.minIndex - (me.options.gridLines.offsetGridLines ? 0 : 1), 1);

          if (value !== undefined && isNaN(index)) {
            var labels = me.getLabels();
            var idx = labels.indexOf(value);
            index = idx !== -1 ? idx : index;
          }

          if (me.isHorizontal()) {
            var valueWidth = me.width / offsetAmt;
            var widthOffset = valueWidth * (index - me.minIndex);

            if (me.options.gridLines.offsetGridLines && includeOffset || me.maxIndex === me.minIndex && includeOffset) {
              widthOffset += valueWidth / 2;
            }

            return me.left + Math.round(widthOffset);
          }

          var valueHeight = me.height / offsetAmt;
          var heightOffset = valueHeight * (index - me.minIndex);

          if (me.options.gridLines.offsetGridLines && includeOffset) {
            heightOffset += valueHeight / 2;
          }

          return me.top + Math.round(heightOffset);
        },
        getPixelForTick: function getPixelForTick(index, includeOffset) {
          return this.getPixelForValue(this.ticks[index], index + this.minIndex, null, includeOffset);
        },
        getValueForPixel: function getValueForPixel(pixel) {
          var me = this;
          var value;
          var offsetAmt = Math.max(me.ticks.length - (me.options.gridLines.offsetGridLines ? 0 : 1), 1);
          var horz = me.isHorizontal();
          var valueDimension = (horz ? me.width : me.height) / offsetAmt;
          pixel -= horz ? me.left : me.top;

          if (me.options.gridLines.offsetGridLines) {
            pixel -= valueDimension / 2;
          }

          if (pixel <= 0) {
            value = 0;
          } else {
            value = Math.round(pixel / valueDimension);
          }

          return value;
        },
        getBasePixel: function getBasePixel() {
          return this.bottom;
        }
      });
      Chart.scaleService.registerScaleType('category', DatasetScale, defaultConfig);
    };
    /***/

  },

  /***/
  "./node_modules/chart.js/src/scales/scale.linear.js": function node_modulesChartJsSrcScalesScaleLinearJs(module, exports, __webpack_require__) {
    "use strict";

    module.exports = function (Chart) {
      var helpers = Chart.helpers;
      var defaultConfig = {
        position: 'left',
        ticks: {
          callback: Chart.Ticks.formatters.linear
        }
      };
      var LinearScale = Chart.LinearScaleBase.extend({
        determineDataLimits: function determineDataLimits() {
          var me = this;
          var opts = me.options;
          var chart = me.chart;
          var data = chart.data;
          var datasets = data.datasets;
          var isHorizontal = me.isHorizontal();

          function IDMatches(meta) {
            return isHorizontal ? meta.xAxisID === me.id : meta.yAxisID === me.id;
          } // First Calculate the range


          me.min = null;
          me.max = null;
          var hasStacks = opts.stacked;

          if (hasStacks === undefined) {
            helpers.each(datasets, function (dataset, datasetIndex) {
              if (hasStacks) {
                return;
              }

              var meta = chart.getDatasetMeta(datasetIndex);

              if (chart.isDatasetVisible(datasetIndex) && IDMatches(meta) && meta.stack !== undefined) {
                hasStacks = true;
              }
            });
          }

          if (opts.stacked || hasStacks) {
            var valuesPerStack = {};
            helpers.each(datasets, function (dataset, datasetIndex) {
              var meta = chart.getDatasetMeta(datasetIndex);
              var key = [// we have a separate stack for stack=undefined datasets when the opts.stacked is undefined
              meta.type, opts.stacked === undefined && meta.stack === undefined ? datasetIndex : '', meta.stack].join('.');

              if (valuesPerStack[key] === undefined) {
                valuesPerStack[key] = {
                  positiveValues: [],
                  negativeValues: []
                };
              } // Store these per type


              var positiveValues = valuesPerStack[key].positiveValues;
              var negativeValues = valuesPerStack[key].negativeValues;

              if (chart.isDatasetVisible(datasetIndex) && IDMatches(meta)) {
                helpers.each(dataset.data, function (rawValue, index) {
                  var value = +me.getRightValue(rawValue);

                  if (isNaN(value) || meta.data[index].hidden) {
                    return;
                  }

                  positiveValues[index] = positiveValues[index] || 0;
                  negativeValues[index] = negativeValues[index] || 0;

                  if (opts.relativePoints) {
                    positiveValues[index] = 100;
                  } else if (value < 0) {
                    negativeValues[index] += value;
                  } else {
                    positiveValues[index] += value;
                  }
                });
              }
            });
            helpers.each(valuesPerStack, function (valuesForType) {
              var values = valuesForType.positiveValues.concat(valuesForType.negativeValues);
              var minVal = helpers.min(values);
              var maxVal = helpers.max(values);
              me.min = me.min === null ? minVal : Math.min(me.min, minVal);
              me.max = me.max === null ? maxVal : Math.max(me.max, maxVal);
            });
          } else {
            helpers.each(datasets, function (dataset, datasetIndex) {
              var meta = chart.getDatasetMeta(datasetIndex);

              if (chart.isDatasetVisible(datasetIndex) && IDMatches(meta)) {
                helpers.each(dataset.data, function (rawValue, index) {
                  var value = +me.getRightValue(rawValue);

                  if (isNaN(value) || meta.data[index].hidden) {
                    return;
                  }

                  if (me.min === null) {
                    me.min = value;
                  } else if (value < me.min) {
                    me.min = value;
                  }

                  if (me.max === null) {
                    me.max = value;
                  } else if (value > me.max) {
                    me.max = value;
                  }
                });
              }
            });
          } // Common base implementation to handle ticks.min, ticks.max, ticks.beginAtZero


          this.handleTickRangeOptions();
        },
        getTickLimit: function getTickLimit() {
          var maxTicks;
          var me = this;
          var tickOpts = me.options.ticks;

          if (me.isHorizontal()) {
            maxTicks = Math.min(tickOpts.maxTicksLimit ? tickOpts.maxTicksLimit : 11, Math.ceil(me.width / 50));
          } else {
            // The factor of 2 used to scale the font size has been experimentally determined.
            var tickFontSize = helpers.getValueOrDefault(tickOpts.fontSize, Chart.defaults.global.defaultFontSize);
            maxTicks = Math.min(tickOpts.maxTicksLimit ? tickOpts.maxTicksLimit : 11, Math.ceil(me.height / (2 * tickFontSize)));
          }

          return maxTicks;
        },
        // Called after the ticks are built. We need
        handleDirectionalChanges: function handleDirectionalChanges() {
          if (!this.isHorizontal()) {
            // We are in a vertical orientation. The top value is the highest. So reverse the array
            this.ticks.reverse();
          }
        },
        getLabelForIndex: function getLabelForIndex(index, datasetIndex) {
          return +this.getRightValue(this.chart.data.datasets[datasetIndex].data[index]);
        },
        // Utils
        getPixelForValue: function getPixelForValue(value) {
          // This must be called after fit has been run so that
          // this.left, this.top, this.right, and this.bottom have been defined
          var me = this;
          var start = me.start;
          var rightValue = +me.getRightValue(value);
          var pixel;
          var range = me.end - start;

          if (me.isHorizontal()) {
            pixel = me.left + me.width / range * (rightValue - start);
            return Math.round(pixel);
          }

          pixel = me.bottom - me.height / range * (rightValue - start);
          return Math.round(pixel);
        },
        getValueForPixel: function getValueForPixel(pixel) {
          var me = this;
          var isHorizontal = me.isHorizontal();
          var innerDimension = isHorizontal ? me.width : me.height;
          var offset = (isHorizontal ? pixel - me.left : me.bottom - pixel) / innerDimension;
          return me.start + (me.end - me.start) * offset;
        },
        getPixelForTick: function getPixelForTick(index) {
          return this.getPixelForValue(this.ticksAsNumbers[index]);
        }
      });
      Chart.scaleService.registerScaleType('linear', LinearScale, defaultConfig);
    };
    /***/

  },

  /***/
  "./node_modules/chart.js/src/scales/scale.linearbase.js": function node_modulesChartJsSrcScalesScaleLinearbaseJs(module, exports, __webpack_require__) {
    "use strict";

    module.exports = function (Chart) {
      var helpers = Chart.helpers,
          noop = helpers.noop;
      Chart.LinearScaleBase = Chart.Scale.extend({
        handleTickRangeOptions: function handleTickRangeOptions() {
          var me = this;
          var opts = me.options;
          var tickOpts = opts.ticks; // If we are forcing it to begin at 0, but 0 will already be rendered on the chart,
          // do nothing since that would make the chart weird. If the user really wants a weird chart
          // axis, they can manually override it

          if (tickOpts.beginAtZero) {
            var minSign = helpers.sign(me.min);
            var maxSign = helpers.sign(me.max);

            if (minSign < 0 && maxSign < 0) {
              // move the top up to 0
              me.max = 0;
            } else if (minSign > 0 && maxSign > 0) {
              // move the bottom down to 0
              me.min = 0;
            }
          }

          if (tickOpts.min !== undefined) {
            me.min = tickOpts.min;
          } else if (tickOpts.suggestedMin !== undefined) {
            me.min = Math.min(me.min, tickOpts.suggestedMin);
          }

          if (tickOpts.max !== undefined) {
            me.max = tickOpts.max;
          } else if (tickOpts.suggestedMax !== undefined) {
            me.max = Math.max(me.max, tickOpts.suggestedMax);
          }

          if (me.min === me.max) {
            me.max++;

            if (!tickOpts.beginAtZero) {
              me.min--;
            }
          }
        },
        getTickLimit: noop,
        handleDirectionalChanges: noop,
        buildTicks: function buildTicks() {
          var me = this;
          var opts = me.options;
          var tickOpts = opts.ticks; // Figure out what the max number of ticks we can support it is based on the size of
          // the axis area. For now, we say that the minimum tick spacing in pixels must be 50
          // We also limit the maximum number of ticks to 11 which gives a nice 10 squares on
          // the graph. Make sure we always have at least 2 ticks

          var maxTicks = me.getTickLimit();
          maxTicks = Math.max(2, maxTicks);
          var numericGeneratorOptions = {
            maxTicks: maxTicks,
            min: tickOpts.min,
            max: tickOpts.max,
            stepSize: helpers.getValueOrDefault(tickOpts.fixedStepSize, tickOpts.stepSize)
          };
          var ticks = me.ticks = Chart.Ticks.generators.linear(numericGeneratorOptions, me);
          me.handleDirectionalChanges(); // At this point, we need to update our max and min given the tick values since we have expanded the
          // range of the scale

          me.max = helpers.max(ticks);
          me.min = helpers.min(ticks);

          if (tickOpts.reverse) {
            ticks.reverse();
            me.start = me.max;
            me.end = me.min;
          } else {
            me.start = me.min;
            me.end = me.max;
          }
        },
        convertTicksToLabels: function convertTicksToLabels() {
          var me = this;
          me.ticksAsNumbers = me.ticks.slice();
          me.zeroLineIndex = me.ticks.indexOf(0);
          Chart.Scale.prototype.convertTicksToLabels.call(me);
        }
      });
    };
    /***/

  },

  /***/
  "./node_modules/chart.js/src/scales/scale.logarithmic.js": function node_modulesChartJsSrcScalesScaleLogarithmicJs(module, exports, __webpack_require__) {
    "use strict";

    module.exports = function (Chart) {
      var helpers = Chart.helpers;
      var defaultConfig = {
        position: 'left',
        // label settings
        ticks: {
          callback: Chart.Ticks.formatters.logarithmic
        }
      };
      var LogarithmicScale = Chart.Scale.extend({
        determineDataLimits: function determineDataLimits() {
          var me = this;
          var opts = me.options;
          var tickOpts = opts.ticks;
          var chart = me.chart;
          var data = chart.data;
          var datasets = data.datasets;
          var getValueOrDefault = helpers.getValueOrDefault;
          var isHorizontal = me.isHorizontal();

          function IDMatches(meta) {
            return isHorizontal ? meta.xAxisID === me.id : meta.yAxisID === me.id;
          } // Calculate Range


          me.min = null;
          me.max = null;
          me.minNotZero = null;
          var hasStacks = opts.stacked;

          if (hasStacks === undefined) {
            helpers.each(datasets, function (dataset, datasetIndex) {
              if (hasStacks) {
                return;
              }

              var meta = chart.getDatasetMeta(datasetIndex);

              if (chart.isDatasetVisible(datasetIndex) && IDMatches(meta) && meta.stack !== undefined) {
                hasStacks = true;
              }
            });
          }

          if (opts.stacked || hasStacks) {
            var valuesPerStack = {};
            helpers.each(datasets, function (dataset, datasetIndex) {
              var meta = chart.getDatasetMeta(datasetIndex);
              var key = [// we have a separate stack for stack=undefined datasets when the opts.stacked is undefined
              meta.type, opts.stacked === undefined && meta.stack === undefined ? datasetIndex : '', meta.stack].join('.');

              if (chart.isDatasetVisible(datasetIndex) && IDMatches(meta)) {
                if (valuesPerStack[key] === undefined) {
                  valuesPerStack[key] = [];
                }

                helpers.each(dataset.data, function (rawValue, index) {
                  var values = valuesPerStack[key];
                  var value = +me.getRightValue(rawValue);

                  if (isNaN(value) || meta.data[index].hidden) {
                    return;
                  }

                  values[index] = values[index] || 0;

                  if (opts.relativePoints) {
                    values[index] = 100;
                  } else {
                    // Don't need to split positive and negative since the log scale can't handle a 0 crossing
                    values[index] += value;
                  }
                });
              }
            });
            helpers.each(valuesPerStack, function (valuesForType) {
              var minVal = helpers.min(valuesForType);
              var maxVal = helpers.max(valuesForType);
              me.min = me.min === null ? minVal : Math.min(me.min, minVal);
              me.max = me.max === null ? maxVal : Math.max(me.max, maxVal);
            });
          } else {
            helpers.each(datasets, function (dataset, datasetIndex) {
              var meta = chart.getDatasetMeta(datasetIndex);

              if (chart.isDatasetVisible(datasetIndex) && IDMatches(meta)) {
                helpers.each(dataset.data, function (rawValue, index) {
                  var value = +me.getRightValue(rawValue);

                  if (isNaN(value) || meta.data[index].hidden) {
                    return;
                  }

                  if (me.min === null) {
                    me.min = value;
                  } else if (value < me.min) {
                    me.min = value;
                  }

                  if (me.max === null) {
                    me.max = value;
                  } else if (value > me.max) {
                    me.max = value;
                  }

                  if (value !== 0 && (me.minNotZero === null || value < me.minNotZero)) {
                    me.minNotZero = value;
                  }
                });
              }
            });
          }

          me.min = getValueOrDefault(tickOpts.min, me.min);
          me.max = getValueOrDefault(tickOpts.max, me.max);

          if (me.min === me.max) {
            if (me.min !== 0 && me.min !== null) {
              me.min = Math.pow(10, Math.floor(helpers.log10(me.min)) - 1);
              me.max = Math.pow(10, Math.floor(helpers.log10(me.max)) + 1);
            } else {
              me.min = 1;
              me.max = 10;
            }
          }
        },
        buildTicks: function buildTicks() {
          var me = this;
          var opts = me.options;
          var tickOpts = opts.ticks;
          var generationOptions = {
            min: tickOpts.min,
            max: tickOpts.max
          };
          var ticks = me.ticks = Chart.Ticks.generators.logarithmic(generationOptions, me);

          if (!me.isHorizontal()) {
            // We are in a vertical orientation. The top value is the highest. So reverse the array
            ticks.reverse();
          } // At this point, we need to update our max and min given the tick values since we have expanded the
          // range of the scale


          me.max = helpers.max(ticks);
          me.min = helpers.min(ticks);

          if (tickOpts.reverse) {
            ticks.reverse();
            me.start = me.max;
            me.end = me.min;
          } else {
            me.start = me.min;
            me.end = me.max;
          }
        },
        convertTicksToLabels: function convertTicksToLabels() {
          this.tickValues = this.ticks.slice();
          Chart.Scale.prototype.convertTicksToLabels.call(this);
        },
        // Get the correct tooltip label
        getLabelForIndex: function getLabelForIndex(index, datasetIndex) {
          return +this.getRightValue(this.chart.data.datasets[datasetIndex].data[index]);
        },
        getPixelForTick: function getPixelForTick(index) {
          return this.getPixelForValue(this.tickValues[index]);
        },
        getPixelForValue: function getPixelForValue(value) {
          var me = this;
          var innerDimension;
          var pixel;
          var start = me.start;
          var newVal = +me.getRightValue(value);
          var range;
          var opts = me.options;
          var tickOpts = opts.ticks;

          if (me.isHorizontal()) {
            range = helpers.log10(me.end) - helpers.log10(start); // todo: if start === 0

            if (newVal === 0) {
              pixel = me.left;
            } else {
              innerDimension = me.width;
              pixel = me.left + innerDimension / range * (helpers.log10(newVal) - helpers.log10(start));
            }
          } else {
            // Bottom - top since pixels increase downward on a screen
            innerDimension = me.height;

            if (start === 0 && !tickOpts.reverse) {
              range = helpers.log10(me.end) - helpers.log10(me.minNotZero);

              if (newVal === start) {
                pixel = me.bottom;
              } else if (newVal === me.minNotZero) {
                pixel = me.bottom - innerDimension * 0.02;
              } else {
                pixel = me.bottom - innerDimension * 0.02 - innerDimension * 0.98 / range * (helpers.log10(newVal) - helpers.log10(me.minNotZero));
              }
            } else if (me.end === 0 && tickOpts.reverse) {
              range = helpers.log10(me.start) - helpers.log10(me.minNotZero);

              if (newVal === me.end) {
                pixel = me.top;
              } else if (newVal === me.minNotZero) {
                pixel = me.top + innerDimension * 0.02;
              } else {
                pixel = me.top + innerDimension * 0.02 + innerDimension * 0.98 / range * (helpers.log10(newVal) - helpers.log10(me.minNotZero));
              }
            } else {
              range = helpers.log10(me.end) - helpers.log10(start);
              innerDimension = me.height;
              pixel = me.bottom - innerDimension / range * (helpers.log10(newVal) - helpers.log10(start));
            }
          }

          return pixel;
        },
        getValueForPixel: function getValueForPixel(pixel) {
          var me = this;
          var range = helpers.log10(me.end) - helpers.log10(me.start);
          var value, innerDimension;

          if (me.isHorizontal()) {
            innerDimension = me.width;
            value = me.start * Math.pow(10, (pixel - me.left) * range / innerDimension);
          } else {
            // todo: if start === 0
            innerDimension = me.height;
            value = Math.pow(10, (me.bottom - pixel) * range / innerDimension) / me.start;
          }

          return value;
        }
      });
      Chart.scaleService.registerScaleType('logarithmic', LogarithmicScale, defaultConfig);
    };
    /***/

  },

  /***/
  "./node_modules/chart.js/src/scales/scale.radialLinear.js": function node_modulesChartJsSrcScalesScaleRadialLinearJs(module, exports, __webpack_require__) {
    "use strict";

    module.exports = function (Chart) {
      var helpers = Chart.helpers;
      var globalDefaults = Chart.defaults.global;
      var defaultConfig = {
        display: true,
        // Boolean - Whether to animate scaling the chart from the centre
        animate: true,
        lineArc: false,
        position: 'chartArea',
        angleLines: {
          display: true,
          color: 'rgba(0, 0, 0, 0.1)',
          lineWidth: 1
        },
        // label settings
        ticks: {
          // Boolean - Show a backdrop to the scale label
          showLabelBackdrop: true,
          // String - The colour of the label backdrop
          backdropColor: 'rgba(255,255,255,0.75)',
          // Number - The backdrop padding above & below the label in pixels
          backdropPaddingY: 2,
          // Number - The backdrop padding to the side of the label in pixels
          backdropPaddingX: 2,
          callback: Chart.Ticks.formatters.linear
        },
        pointLabels: {
          // Number - Point label font size in pixels
          fontSize: 10,
          // Function - Used to convert point labels
          callback: function callback(label) {
            return label;
          }
        }
      };

      function getValueCount(scale) {
        return !scale.options.lineArc ? scale.chart.data.labels.length : 0;
      }

      function getPointLabelFontOptions(scale) {
        var pointLabelOptions = scale.options.pointLabels;
        var fontSize = helpers.getValueOrDefault(pointLabelOptions.fontSize, globalDefaults.defaultFontSize);
        var fontStyle = helpers.getValueOrDefault(pointLabelOptions.fontStyle, globalDefaults.defaultFontStyle);
        var fontFamily = helpers.getValueOrDefault(pointLabelOptions.fontFamily, globalDefaults.defaultFontFamily);
        var font = helpers.fontString(fontSize, fontStyle, fontFamily);
        return {
          size: fontSize,
          style: fontStyle,
          family: fontFamily,
          font: font
        };
      }

      function measureLabelSize(ctx, fontSize, label) {
        if (helpers.isArray(label)) {
          return {
            w: helpers.longestText(ctx, ctx.font, label),
            h: label.length * fontSize + (label.length - 1) * 1.5 * fontSize
          };
        }

        return {
          w: ctx.measureText(label).width,
          h: fontSize
        };
      }

      function determineLimits(angle, pos, size, min, max) {
        if (angle === min || angle === max) {
          return {
            start: pos - size / 2,
            end: pos + size / 2
          };
        } else if (angle < min || angle > max) {
          return {
            start: pos - size - 5,
            end: pos
          };
        }

        return {
          start: pos,
          end: pos + size + 5
        };
      }
      /**
       * Helper function to fit a radial linear scale with point labels
       */


      function fitWithPointLabels(scale) {
        /*
         * Right, this is really confusing and there is a lot of maths going on here
         * The gist of the problem is here: https://gist.github.com/nnnick/696cc9c55f4b0beb8fe9
         *
         * Reaction: https://dl.dropboxusercontent.com/u/34601363/toomuchscience.gif
         *
         * Solution:
         *
         * We assume the radius of the polygon is half the size of the canvas at first
         * at each index we check if the text overlaps.
         *
         * Where it does, we store that angle and that index.
         *
         * After finding the largest index and angle we calculate how much we need to remove
         * from the shape radius to move the point inwards by that x.
         *
         * We average the left and right distances to get the maximum shape radius that can fit in the box
         * along with labels.
         *
         * Once we have that, we can find the centre point for the chart, by taking the x text protrusion
         * on each side, removing that from the size, halving it and adding the left x protrusion width.
         *
         * This will mean we have a shape fitted to the canvas, as large as it can be with the labels
         * and position it in the most space efficient manner
         *
         * https://dl.dropboxusercontent.com/u/34601363/yeahscience.gif
         */
        var plFont = getPointLabelFontOptions(scale); // Get maximum radius of the polygon. Either half the height (minus the text width) or half the width.
        // Use this to calculate the offset + change. - Make sure L/R protrusion is at least 0 to stop issues with centre points

        var largestPossibleRadius = Math.min(scale.height / 2, scale.width / 2);
        var furthestLimits = {
          l: scale.width,
          r: 0,
          t: scale.height,
          b: 0
        };
        var furthestAngles = {};
        var i;
        var textSize;
        var pointPosition;
        scale.ctx.font = plFont.font;
        scale._pointLabelSizes = [];
        var valueCount = getValueCount(scale);

        for (i = 0; i < valueCount; i++) {
          pointPosition = scale.getPointPosition(i, largestPossibleRadius);
          textSize = measureLabelSize(scale.ctx, plFont.size, scale.pointLabels[i] || '');
          scale._pointLabelSizes[i] = textSize; // Add quarter circle to make degree 0 mean top of circle

          var angleRadians = scale.getIndexAngle(i);
          var angle = helpers.toDegrees(angleRadians) % 360;
          var hLimits = determineLimits(angle, pointPosition.x, textSize.w, 0, 180);
          var vLimits = determineLimits(angle, pointPosition.y, textSize.h, 90, 270);

          if (hLimits.start < furthestLimits.l) {
            furthestLimits.l = hLimits.start;
            furthestAngles.l = angleRadians;
          }

          if (hLimits.end > furthestLimits.r) {
            furthestLimits.r = hLimits.end;
            furthestAngles.r = angleRadians;
          }

          if (vLimits.start < furthestLimits.t) {
            furthestLimits.t = vLimits.start;
            furthestAngles.t = angleRadians;
          }

          if (vLimits.end > furthestLimits.b) {
            furthestLimits.b = vLimits.end;
            furthestAngles.b = angleRadians;
          }
        }

        scale.setReductions(largestPossibleRadius, furthestLimits, furthestAngles);
      }
      /**
       * Helper function to fit a radial linear scale with no point labels
       */


      function _fit(scale) {
        var largestPossibleRadius = Math.min(scale.height / 2, scale.width / 2);
        scale.drawingArea = Math.round(largestPossibleRadius);
        scale.setCenterPoint(0, 0, 0, 0);
      }

      function getTextAlignForAngle(angle) {
        if (angle === 0 || angle === 180) {
          return 'center';
        } else if (angle < 180) {
          return 'left';
        }

        return 'right';
      }

      function fillText(ctx, text, position, fontSize) {
        if (helpers.isArray(text)) {
          var y = position.y;
          var spacing = 1.5 * fontSize;

          for (var i = 0; i < text.length; ++i) {
            ctx.fillText(text[i], position.x, y);
            y += spacing;
          }
        } else {
          ctx.fillText(text, position.x, position.y);
        }
      }

      function adjustPointPositionForLabelHeight(angle, textSize, position) {
        if (angle === 90 || angle === 270) {
          position.y -= textSize.h / 2;
        } else if (angle > 270 || angle < 90) {
          position.y -= textSize.h;
        }
      }

      function drawPointLabels(scale) {
        var ctx = scale.ctx;
        var getValueOrDefault = helpers.getValueOrDefault;
        var opts = scale.options;
        var angleLineOpts = opts.angleLines;
        var pointLabelOpts = opts.pointLabels;
        ctx.lineWidth = angleLineOpts.lineWidth;
        ctx.strokeStyle = angleLineOpts.color;
        var outerDistance = scale.getDistanceFromCenterForValue(opts.reverse ? scale.min : scale.max); // Point Label Font

        var plFont = getPointLabelFontOptions(scale);
        ctx.textBaseline = 'top';

        for (var i = getValueCount(scale) - 1; i >= 0; i--) {
          if (angleLineOpts.display) {
            var outerPosition = scale.getPointPosition(i, outerDistance);
            ctx.beginPath();
            ctx.moveTo(scale.xCenter, scale.yCenter);
            ctx.lineTo(outerPosition.x, outerPosition.y);
            ctx.stroke();
            ctx.closePath();
          } // Extra 3px out for some label spacing


          var pointLabelPosition = scale.getPointPosition(i, outerDistance + 5); // Keep this in loop since we may support array properties here

          var pointLabelFontColor = getValueOrDefault(pointLabelOpts.fontColor, globalDefaults.defaultFontColor);
          ctx.font = plFont.font;
          ctx.fillStyle = pointLabelFontColor;
          var angleRadians = scale.getIndexAngle(i);
          var angle = helpers.toDegrees(angleRadians);
          ctx.textAlign = getTextAlignForAngle(angle);
          adjustPointPositionForLabelHeight(angle, scale._pointLabelSizes[i], pointLabelPosition);
          fillText(ctx, scale.pointLabels[i] || '', pointLabelPosition, plFont.size);
        }
      }

      function drawRadiusLine(scale, gridLineOpts, radius, index) {
        var ctx = scale.ctx;
        ctx.strokeStyle = helpers.getValueAtIndexOrDefault(gridLineOpts.color, index - 1);
        ctx.lineWidth = helpers.getValueAtIndexOrDefault(gridLineOpts.lineWidth, index - 1);

        if (scale.options.lineArc) {
          // Draw circular arcs between the points
          ctx.beginPath();
          ctx.arc(scale.xCenter, scale.yCenter, radius, 0, Math.PI * 2);
          ctx.closePath();
          ctx.stroke();
        } else {
          // Draw straight lines connecting each index
          var valueCount = getValueCount(scale);

          if (valueCount === 0) {
            return;
          }

          ctx.beginPath();
          var pointPosition = scale.getPointPosition(0, radius);
          ctx.moveTo(pointPosition.x, pointPosition.y);

          for (var i = 1; i < valueCount; i++) {
            pointPosition = scale.getPointPosition(i, radius);
            ctx.lineTo(pointPosition.x, pointPosition.y);
          }

          ctx.closePath();
          ctx.stroke();
        }
      }

      function numberOrZero(param) {
        return helpers.isNumber(param) ? param : 0;
      }

      var LinearRadialScale = Chart.LinearScaleBase.extend({
        setDimensions: function setDimensions() {
          var me = this;
          var opts = me.options;
          var tickOpts = opts.ticks; // Set the unconstrained dimension before label rotation

          me.width = me.maxWidth;
          me.height = me.maxHeight;
          me.xCenter = Math.round(me.width / 2);
          me.yCenter = Math.round(me.height / 2);
          var minSize = helpers.min([me.height, me.width]);
          var tickFontSize = helpers.getValueOrDefault(tickOpts.fontSize, globalDefaults.defaultFontSize);
          me.drawingArea = opts.display ? minSize / 2 - (tickFontSize / 2 + tickOpts.backdropPaddingY) : minSize / 2;
        },
        determineDataLimits: function determineDataLimits() {
          var me = this;
          var chart = me.chart;
          var min = Number.POSITIVE_INFINITY;
          var max = Number.NEGATIVE_INFINITY;
          helpers.each(chart.data.datasets, function (dataset, datasetIndex) {
            if (chart.isDatasetVisible(datasetIndex)) {
              var meta = chart.getDatasetMeta(datasetIndex);
              helpers.each(dataset.data, function (rawValue, index) {
                var value = +me.getRightValue(rawValue);

                if (isNaN(value) || meta.data[index].hidden) {
                  return;
                }

                min = Math.min(value, min);
                max = Math.max(value, max);
              });
            }
          });
          me.min = min === Number.POSITIVE_INFINITY ? 0 : min;
          me.max = max === Number.NEGATIVE_INFINITY ? 0 : max; // Common base implementation to handle ticks.min, ticks.max, ticks.beginAtZero

          me.handleTickRangeOptions();
        },
        getTickLimit: function getTickLimit() {
          var tickOpts = this.options.ticks;
          var tickFontSize = helpers.getValueOrDefault(tickOpts.fontSize, globalDefaults.defaultFontSize);
          return Math.min(tickOpts.maxTicksLimit ? tickOpts.maxTicksLimit : 11, Math.ceil(this.drawingArea / (1.5 * tickFontSize)));
        },
        convertTicksToLabels: function convertTicksToLabels() {
          var me = this;
          Chart.LinearScaleBase.prototype.convertTicksToLabels.call(me); // Point labels

          me.pointLabels = me.chart.data.labels.map(me.options.pointLabels.callback, me);
        },
        getLabelForIndex: function getLabelForIndex(index, datasetIndex) {
          return +this.getRightValue(this.chart.data.datasets[datasetIndex].data[index]);
        },
        fit: function fit() {
          if (this.options.lineArc) {
            _fit(this);
          } else {
            fitWithPointLabels(this);
          }
        },

        /**
         * Set radius reductions and determine new radius and center point
         * @private
         */
        setReductions: function setReductions(largestPossibleRadius, furthestLimits, furthestAngles) {
          var me = this;
          var radiusReductionLeft = furthestLimits.l / Math.sin(furthestAngles.l);
          var radiusReductionRight = Math.max(furthestLimits.r - me.width, 0) / Math.sin(furthestAngles.r);
          var radiusReductionTop = -furthestLimits.t / Math.cos(furthestAngles.t);
          var radiusReductionBottom = -Math.max(furthestLimits.b - me.height, 0) / Math.cos(furthestAngles.b);
          radiusReductionLeft = numberOrZero(radiusReductionLeft);
          radiusReductionRight = numberOrZero(radiusReductionRight);
          radiusReductionTop = numberOrZero(radiusReductionTop);
          radiusReductionBottom = numberOrZero(radiusReductionBottom);
          me.drawingArea = Math.min(Math.round(largestPossibleRadius - (radiusReductionLeft + radiusReductionRight) / 2), Math.round(largestPossibleRadius - (radiusReductionTop + radiusReductionBottom) / 2));
          me.setCenterPoint(radiusReductionLeft, radiusReductionRight, radiusReductionTop, radiusReductionBottom);
        },
        setCenterPoint: function setCenterPoint(leftMovement, rightMovement, topMovement, bottomMovement) {
          var me = this;
          var maxRight = me.width - rightMovement - me.drawingArea,
              maxLeft = leftMovement + me.drawingArea,
              maxTop = topMovement + me.drawingArea,
              maxBottom = me.height - bottomMovement - me.drawingArea;
          me.xCenter = Math.round((maxLeft + maxRight) / 2 + me.left);
          me.yCenter = Math.round((maxTop + maxBottom) / 2 + me.top);
        },
        getIndexAngle: function getIndexAngle(index) {
          var angleMultiplier = Math.PI * 2 / getValueCount(this);
          var startAngle = this.chart.options && this.chart.options.startAngle ? this.chart.options.startAngle : 0;
          var startAngleRadians = startAngle * Math.PI * 2 / 360; // Start from the top instead of right, so remove a quarter of the circle

          return index * angleMultiplier + startAngleRadians;
        },
        getDistanceFromCenterForValue: function getDistanceFromCenterForValue(value) {
          var me = this;

          if (value === null) {
            return 0; // null always in center
          } // Take into account half font size + the yPadding of the top value


          var scalingFactor = me.drawingArea / (me.max - me.min);

          if (me.options.reverse) {
            return (me.max - value) * scalingFactor;
          }

          return (value - me.min) * scalingFactor;
        },
        getPointPosition: function getPointPosition(index, distanceFromCenter) {
          var me = this;
          var thisAngle = me.getIndexAngle(index) - Math.PI / 2;
          return {
            x: Math.round(Math.cos(thisAngle) * distanceFromCenter) + me.xCenter,
            y: Math.round(Math.sin(thisAngle) * distanceFromCenter) + me.yCenter
          };
        },
        getPointPositionForValue: function getPointPositionForValue(index, value) {
          return this.getPointPosition(index, this.getDistanceFromCenterForValue(value));
        },
        getBasePosition: function getBasePosition() {
          var me = this;
          var min = me.min;
          var max = me.max;
          return me.getPointPositionForValue(0, me.beginAtZero ? 0 : min < 0 && max < 0 ? max : min > 0 && max > 0 ? min : 0);
        },
        draw: function draw() {
          var me = this;
          var opts = me.options;
          var gridLineOpts = opts.gridLines;
          var tickOpts = opts.ticks;
          var getValueOrDefault = helpers.getValueOrDefault;

          if (opts.display) {
            var ctx = me.ctx; // Tick Font

            var tickFontSize = getValueOrDefault(tickOpts.fontSize, globalDefaults.defaultFontSize);
            var tickFontStyle = getValueOrDefault(tickOpts.fontStyle, globalDefaults.defaultFontStyle);
            var tickFontFamily = getValueOrDefault(tickOpts.fontFamily, globalDefaults.defaultFontFamily);
            var tickLabelFont = helpers.fontString(tickFontSize, tickFontStyle, tickFontFamily);
            helpers.each(me.ticks, function (label, index) {
              // Don't draw a centre value (if it is minimum)
              if (index > 0 || opts.reverse) {
                var yCenterOffset = me.getDistanceFromCenterForValue(me.ticksAsNumbers[index]);
                var yHeight = me.yCenter - yCenterOffset; // Draw circular lines around the scale

                if (gridLineOpts.display && index !== 0) {
                  drawRadiusLine(me, gridLineOpts, yCenterOffset, index);
                }

                if (tickOpts.display) {
                  var tickFontColor = getValueOrDefault(tickOpts.fontColor, globalDefaults.defaultFontColor);
                  ctx.font = tickLabelFont;

                  if (tickOpts.showLabelBackdrop) {
                    var labelWidth = ctx.measureText(label).width;
                    ctx.fillStyle = tickOpts.backdropColor;
                    ctx.fillRect(me.xCenter - labelWidth / 2 - tickOpts.backdropPaddingX, yHeight - tickFontSize / 2 - tickOpts.backdropPaddingY, labelWidth + tickOpts.backdropPaddingX * 2, tickFontSize + tickOpts.backdropPaddingY * 2);
                  }

                  ctx.textAlign = 'center';
                  ctx.textBaseline = 'middle';
                  ctx.fillStyle = tickFontColor;
                  ctx.fillText(label, me.xCenter, yHeight);
                }
              }
            });

            if (!opts.lineArc) {
              drawPointLabels(me);
            }
          }
        }
      });
      Chart.scaleService.registerScaleType('radialLinear', LinearRadialScale, defaultConfig);
    };
    /***/

  },

  /***/
  "./node_modules/chart.js/src/scales/scale.time.js": function node_modulesChartJsSrcScalesScaleTimeJs(module, exports, __webpack_require__) {
    "use strict";
    /* global window: false */

    var moment = __webpack_require__(
    /*! moment */
    "./node_modules/moment/moment.js");

    moment = typeof moment === 'function' ? moment : window.moment;

    module.exports = function (Chart) {
      var helpers = Chart.helpers;
      var time = {
        units: [{
          name: 'millisecond',
          steps: [1, 2, 5, 10, 20, 50, 100, 250, 500]
        }, {
          name: 'second',
          steps: [1, 2, 5, 10, 30]
        }, {
          name: 'minute',
          steps: [1, 2, 5, 10, 30]
        }, {
          name: 'hour',
          steps: [1, 2, 3, 6, 12]
        }, {
          name: 'day',
          steps: [1, 2, 5]
        }, {
          name: 'week',
          maxStep: 4
        }, {
          name: 'month',
          maxStep: 3
        }, {
          name: 'quarter',
          maxStep: 4
        }, {
          name: 'year',
          maxStep: false
        }]
      };
      var defaultConfig = {
        position: 'bottom',
        time: {
          parser: false,
          // false == a pattern string from http://momentjs.com/docs/#/parsing/string-format/ or a custom callback that converts its argument to a moment
          format: false,
          // DEPRECATED false == date objects, moment object, callback or a pattern string from http://momentjs.com/docs/#/parsing/string-format/
          unit: false,
          // false == automatic or override with week, month, year, etc.
          round: false,
          // none, or override with week, month, year, etc.
          displayFormat: false,
          // DEPRECATED
          isoWeekday: false,
          // override week start day - see http://momentjs.com/docs/#/get-set/iso-weekday/
          minUnit: 'millisecond',
          // defaults to unit's corresponding unitFormat below or override using pattern string from http://momentjs.com/docs/#/displaying/format/
          displayFormats: {
            millisecond: 'h:mm:ss.SSS a',
            // 11:20:01.123 AM,
            second: 'h:mm:ss a',
            // 11:20:01 AM
            minute: 'h:mm:ss a',
            // 11:20:01 AM
            hour: 'MMM D, hA',
            // Sept 4, 5PM
            day: 'll',
            // Sep 4 2015
            week: 'll',
            // Week 46, or maybe "[W]WW - YYYY" ?
            month: 'MMM YYYY',
            // Sept 2015
            quarter: '[Q]Q - YYYY',
            // Q3
            year: 'YYYY' // 2015

          }
        },
        ticks: {
          autoSkip: false
        }
      };
      var TimeScale = Chart.Scale.extend({
        initialize: function initialize() {
          if (!moment) {
            throw new Error('Chart.js - Moment.js could not be found! You must include it before Chart.js to use the time scale. Download at https://momentjs.com');
          }

          Chart.Scale.prototype.initialize.call(this);
        },
        getLabelMoment: function getLabelMoment(datasetIndex, index) {
          if (datasetIndex === null || index === null) {
            return null;
          }

          if (typeof this.labelMoments[datasetIndex] !== 'undefined') {
            return this.labelMoments[datasetIndex][index];
          }

          return null;
        },
        getLabelDiff: function getLabelDiff(datasetIndex, index) {
          var me = this;

          if (datasetIndex === null || index === null) {
            return null;
          }

          if (me.labelDiffs === undefined) {
            me.buildLabelDiffs();
          }

          if (typeof me.labelDiffs[datasetIndex] !== 'undefined') {
            return me.labelDiffs[datasetIndex][index];
          }

          return null;
        },
        getMomentStartOf: function getMomentStartOf(tick) {
          var me = this;

          if (me.options.time.unit === 'week' && me.options.time.isoWeekday !== false) {
            return tick.clone().startOf('isoWeek').isoWeekday(me.options.time.isoWeekday);
          }

          return tick.clone().startOf(me.tickUnit);
        },
        determineDataLimits: function determineDataLimits() {
          var me = this;
          me.labelMoments = []; // Only parse these once. If the dataset does not have data as x,y pairs, we will use
          // these

          var scaleLabelMoments = [];

          if (me.chart.data.labels && me.chart.data.labels.length > 0) {
            helpers.each(me.chart.data.labels, function (label) {
              var labelMoment = me.parseTime(label);

              if (labelMoment.isValid()) {
                if (me.options.time.round) {
                  labelMoment.startOf(me.options.time.round);
                }

                scaleLabelMoments.push(labelMoment);
              }
            }, me);
            me.firstTick = moment.min.call(me, scaleLabelMoments);
            me.lastTick = moment.max.call(me, scaleLabelMoments);
          } else {
            me.firstTick = null;
            me.lastTick = null;
          }

          helpers.each(me.chart.data.datasets, function (dataset, datasetIndex) {
            var momentsForDataset = [];
            var datasetVisible = me.chart.isDatasetVisible(datasetIndex);

            if (typeof dataset.data[0] === 'object' && dataset.data[0] !== null) {
              helpers.each(dataset.data, function (value) {
                var labelMoment = me.parseTime(me.getRightValue(value));

                if (labelMoment.isValid()) {
                  if (me.options.time.round) {
                    labelMoment.startOf(me.options.time.round);
                  }

                  momentsForDataset.push(labelMoment);

                  if (datasetVisible) {
                    // May have gone outside the scale ranges, make sure we keep the first and last ticks updated
                    me.firstTick = me.firstTick !== null ? moment.min(me.firstTick, labelMoment) : labelMoment;
                    me.lastTick = me.lastTick !== null ? moment.max(me.lastTick, labelMoment) : labelMoment;
                  }
                }
              }, me);
            } else {
              // We have no labels. Use the ones from the scale
              momentsForDataset = scaleLabelMoments;
            }

            me.labelMoments.push(momentsForDataset);
          }, me); // Set these after we've done all the data

          if (me.options.time.min) {
            me.firstTick = me.parseTime(me.options.time.min);
          }

          if (me.options.time.max) {
            me.lastTick = me.parseTime(me.options.time.max);
          } // We will modify these, so clone for later


          me.firstTick = (me.firstTick || moment()).clone();
          me.lastTick = (me.lastTick || moment()).clone();
        },
        buildLabelDiffs: function buildLabelDiffs() {
          var me = this;
          me.labelDiffs = [];
          var scaleLabelDiffs = []; // Parse common labels once

          if (me.chart.data.labels && me.chart.data.labels.length > 0) {
            helpers.each(me.chart.data.labels, function (label) {
              var labelMoment = me.parseTime(label);

              if (labelMoment.isValid()) {
                if (me.options.time.round) {
                  labelMoment.startOf(me.options.time.round);
                }

                scaleLabelDiffs.push(labelMoment.diff(me.firstTick, me.tickUnit, true));
              }
            }, me);
          }

          helpers.each(me.chart.data.datasets, function (dataset) {
            var diffsForDataset = [];

            if (typeof dataset.data[0] === 'object' && dataset.data[0] !== null) {
              helpers.each(dataset.data, function (value) {
                var labelMoment = me.parseTime(me.getRightValue(value));

                if (labelMoment.isValid()) {
                  if (me.options.time.round) {
                    labelMoment.startOf(me.options.time.round);
                  }

                  diffsForDataset.push(labelMoment.diff(me.firstTick, me.tickUnit, true));
                }
              }, me);
            } else {
              // We have no labels. Use common ones
              diffsForDataset = scaleLabelDiffs;
            }

            me.labelDiffs.push(diffsForDataset);
          }, me);
        },
        buildTicks: function buildTicks() {
          var me = this;
          me.ctx.save();
          var tickFontSize = helpers.getValueOrDefault(me.options.ticks.fontSize, Chart.defaults.global.defaultFontSize);
          var tickFontStyle = helpers.getValueOrDefault(me.options.ticks.fontStyle, Chart.defaults.global.defaultFontStyle);
          var tickFontFamily = helpers.getValueOrDefault(me.options.ticks.fontFamily, Chart.defaults.global.defaultFontFamily);
          var tickLabelFont = helpers.fontString(tickFontSize, tickFontStyle, tickFontFamily);
          me.ctx.font = tickLabelFont;
          me.ticks = [];
          me.unitScale = 1; // How much we scale the unit by, ie 2 means 2x unit per step

          me.scaleSizeInUnits = 0; // How large the scale is in the base unit (seconds, minutes, etc)
          // Set unit override if applicable

          if (me.options.time.unit) {
            me.tickUnit = me.options.time.unit || 'day';
            me.displayFormat = me.options.time.displayFormats[me.tickUnit];
            me.scaleSizeInUnits = me.lastTick.diff(me.firstTick, me.tickUnit, true);
            me.unitScale = helpers.getValueOrDefault(me.options.time.unitStepSize, 1);
          } else {
            // Determine the smallest needed unit of the time
            var innerWidth = me.isHorizontal() ? me.width : me.height; // Crude approximation of what the label length might be

            var tempFirstLabel = me.tickFormatFunction(me.firstTick, 0, []);
            var tickLabelWidth = me.ctx.measureText(tempFirstLabel).width;
            var cosRotation = Math.cos(helpers.toRadians(me.options.ticks.maxRotation));
            var sinRotation = Math.sin(helpers.toRadians(me.options.ticks.maxRotation));
            tickLabelWidth = tickLabelWidth * cosRotation + tickFontSize * sinRotation;
            var labelCapacity = innerWidth / tickLabelWidth; // Start as small as possible

            me.tickUnit = me.options.time.minUnit;
            me.scaleSizeInUnits = me.lastTick.diff(me.firstTick, me.tickUnit, true);
            me.displayFormat = me.options.time.displayFormats[me.tickUnit];
            var unitDefinitionIndex = 0;
            var unitDefinition = time.units[unitDefinitionIndex]; // While we aren't ideal and we don't have units left

            while (unitDefinitionIndex < time.units.length) {
              // Can we scale this unit. If `false` we can scale infinitely
              me.unitScale = 1;

              if (helpers.isArray(unitDefinition.steps) && Math.ceil(me.scaleSizeInUnits / labelCapacity) < helpers.max(unitDefinition.steps)) {
                // Use one of the predefined steps
                for (var idx = 0; idx < unitDefinition.steps.length; ++idx) {
                  if (unitDefinition.steps[idx] >= Math.ceil(me.scaleSizeInUnits / labelCapacity)) {
                    me.unitScale = helpers.getValueOrDefault(me.options.time.unitStepSize, unitDefinition.steps[idx]);
                    break;
                  }
                }

                break;
              } else if (unitDefinition.maxStep === false || Math.ceil(me.scaleSizeInUnits / labelCapacity) < unitDefinition.maxStep) {
                // We have a max step. Scale this unit
                me.unitScale = helpers.getValueOrDefault(me.options.time.unitStepSize, Math.ceil(me.scaleSizeInUnits / labelCapacity));
                break;
              } else {
                // Move to the next unit up
                ++unitDefinitionIndex;
                unitDefinition = time.units[unitDefinitionIndex];
                me.tickUnit = unitDefinition.name;
                var leadingUnitBuffer = me.firstTick.diff(me.getMomentStartOf(me.firstTick), me.tickUnit, true);
                var trailingUnitBuffer = me.getMomentStartOf(me.lastTick.clone().add(1, me.tickUnit)).diff(me.lastTick, me.tickUnit, true);
                me.scaleSizeInUnits = me.lastTick.diff(me.firstTick, me.tickUnit, true) + leadingUnitBuffer + trailingUnitBuffer;
                me.displayFormat = me.options.time.displayFormats[unitDefinition.name];
              }
            }
          }

          var roundedStart; // Only round the first tick if we have no hard minimum

          if (!me.options.time.min) {
            me.firstTick = me.getMomentStartOf(me.firstTick);
            roundedStart = me.firstTick;
          } else {
            roundedStart = me.getMomentStartOf(me.firstTick);
          } // Only round the last tick if we have no hard maximum


          if (!me.options.time.max) {
            var roundedEnd = me.getMomentStartOf(me.lastTick);
            var delta = roundedEnd.diff(me.lastTick, me.tickUnit, true);

            if (delta < 0) {
              // Do not use end of because we need me to be in the next time unit
              me.lastTick = me.getMomentStartOf(me.lastTick.add(1, me.tickUnit));
            } else if (delta >= 0) {
              me.lastTick = roundedEnd;
            }

            me.scaleSizeInUnits = me.lastTick.diff(me.firstTick, me.tickUnit, true);
          } // Tick displayFormat override


          if (me.options.time.displayFormat) {
            me.displayFormat = me.options.time.displayFormat;
          } // first tick. will have been rounded correctly if options.time.min is not specified


          me.ticks.push(me.firstTick.clone()); // For every unit in between the first and last moment, create a moment and add it to the ticks tick

          for (var i = me.unitScale; i <= me.scaleSizeInUnits; i += me.unitScale) {
            var newTick = roundedStart.clone().add(i, me.tickUnit); // Are we greater than the max time

            if (me.options.time.max && newTick.diff(me.lastTick, me.tickUnit, true) >= 0) {
              break;
            }

            me.ticks.push(newTick);
          } // Always show the right tick


          var diff = me.ticks[me.ticks.length - 1].diff(me.lastTick, me.tickUnit);

          if (diff !== 0 || me.scaleSizeInUnits === 0) {
            // this is a weird case. If the <max> option is the same as the end option, we can't just diff the times because the tick was created from the roundedStart
            // but the last tick was not rounded.
            if (me.options.time.max) {
              me.ticks.push(me.lastTick.clone());
              me.scaleSizeInUnits = me.lastTick.diff(me.ticks[0], me.tickUnit, true);
            } else {
              me.ticks.push(me.lastTick.clone());
              me.scaleSizeInUnits = me.lastTick.diff(me.firstTick, me.tickUnit, true);
            }
          }

          me.ctx.restore(); // Invalidate label diffs cache

          me.labelDiffs = undefined;
        },
        // Get tooltip label
        getLabelForIndex: function getLabelForIndex(index, datasetIndex) {
          var me = this;
          var label = me.chart.data.labels && index < me.chart.data.labels.length ? me.chart.data.labels[index] : '';
          var value = me.chart.data.datasets[datasetIndex].data[index];

          if (value !== null && typeof value === 'object') {
            label = me.getRightValue(value);
          } // Format nicely


          if (me.options.time.tooltipFormat) {
            label = me.parseTime(label).format(me.options.time.tooltipFormat);
          }

          return label;
        },
        // Function to format an individual tick mark
        tickFormatFunction: function tickFormatFunction(tick, index, ticks) {
          var formattedTick = tick.format(this.displayFormat);
          var tickOpts = this.options.ticks;
          var callback = helpers.getValueOrDefault(tickOpts.callback, tickOpts.userCallback);

          if (callback) {
            return callback(formattedTick, index, ticks);
          }

          return formattedTick;
        },
        convertTicksToLabels: function convertTicksToLabels() {
          var me = this;
          me.tickMoments = me.ticks;
          me.ticks = me.ticks.map(me.tickFormatFunction, me);
        },
        getPixelForValue: function getPixelForValue(value, index, datasetIndex) {
          var me = this;
          var offset = null;

          if (index !== undefined && datasetIndex !== undefined) {
            offset = me.getLabelDiff(datasetIndex, index);
          }

          if (offset === null) {
            if (!value || !value.isValid) {
              // not already a moment object
              value = me.parseTime(me.getRightValue(value));
            }

            if (value && value.isValid && value.isValid()) {
              offset = value.diff(me.firstTick, me.tickUnit, true);
            }
          }

          if (offset !== null) {
            var decimal = offset !== 0 ? offset / me.scaleSizeInUnits : offset;

            if (me.isHorizontal()) {
              var valueOffset = me.width * decimal;
              return me.left + Math.round(valueOffset);
            }

            var heightOffset = me.height * decimal;
            return me.top + Math.round(heightOffset);
          }
        },
        getPixelForTick: function getPixelForTick(index) {
          return this.getPixelForValue(this.tickMoments[index], null, null);
        },
        getValueForPixel: function getValueForPixel(pixel) {
          var me = this;
          var innerDimension = me.isHorizontal() ? me.width : me.height;
          var offset = (pixel - (me.isHorizontal() ? me.left : me.top)) / innerDimension;
          offset *= me.scaleSizeInUnits;
          return me.firstTick.clone().add(moment.duration(offset, me.tickUnit).asSeconds(), 'seconds');
        },
        parseTime: function parseTime(label) {
          var me = this;

          if (typeof me.options.time.parser === 'string') {
            return moment(label, me.options.time.parser);
          }

          if (typeof me.options.time.parser === 'function') {
            return me.options.time.parser(label);
          } // Date objects


          if (typeof label.getMonth === 'function' || typeof label === 'number') {
            return moment(label);
          } // Moment support


          if (label.isValid && label.isValid()) {
            return label;
          } // Custom parsing (return an instance of moment)


          if (typeof me.options.time.format !== 'string' && me.options.time.format.call) {
            console.warn('options.time.format is deprecated and replaced by options.time.parser. See http://nnnick.github.io/Chart.js/docs-v2/#scales-time-scale');
            return me.options.time.format(label);
          } // Moment format parsing


          return moment(label, me.options.time.format);
        }
      });
      Chart.scaleService.registerScaleType('time', TimeScale, defaultConfig);
    };
    /***/

  },

  /***/
  "./node_modules/chartjs-color-string/color-string.js": function node_modulesChartjsColorStringColorStringJs(module, exports, __webpack_require__) {
    /* MIT license */
    var colorNames = __webpack_require__(
    /*! color-name */
    "./node_modules/color-name/index.js");

    module.exports = {
      getRgba: getRgba,
      getHsla: getHsla,
      getRgb: getRgb,
      getHsl: getHsl,
      getHwb: getHwb,
      getAlpha: getAlpha,
      hexString: hexString,
      rgbString: rgbString,
      rgbaString: rgbaString,
      percentString: percentString,
      percentaString: percentaString,
      hslString: hslString,
      hslaString: hslaString,
      hwbString: hwbString,
      keyword: keyword
    };

    function getRgba(string) {
      if (!string) {
        return;
      }

      var abbr = /^#([a-fA-F0-9]{3,4})$/i,
          hex = /^#([a-fA-F0-9]{6}([a-fA-F0-9]{2})?)$/i,
          rgba = /^rgba?\(\s*([+-]?\d+)\s*,\s*([+-]?\d+)\s*,\s*([+-]?\d+)\s*(?:,\s*([+-]?[\d\.]+)\s*)?\)$/i,
          per = /^rgba?\(\s*([+-]?[\d\.]+)\%\s*,\s*([+-]?[\d\.]+)\%\s*,\s*([+-]?[\d\.]+)\%\s*(?:,\s*([+-]?[\d\.]+)\s*)?\)$/i,
          keyword = /(\w+)/;
      var rgb = [0, 0, 0],
          a = 1,
          match = string.match(abbr),
          hexAlpha = "";

      if (match) {
        match = match[1];
        hexAlpha = match[3];

        for (var i = 0; i < rgb.length; i++) {
          rgb[i] = parseInt(match[i] + match[i], 16);
        }

        if (hexAlpha) {
          a = Math.round(parseInt(hexAlpha + hexAlpha, 16) / 255 * 100) / 100;
        }
      } else if (match = string.match(hex)) {
        hexAlpha = match[2];
        match = match[1];

        for (var i = 0; i < rgb.length; i++) {
          rgb[i] = parseInt(match.slice(i * 2, i * 2 + 2), 16);
        }

        if (hexAlpha) {
          a = Math.round(parseInt(hexAlpha, 16) / 255 * 100) / 100;
        }
      } else if (match = string.match(rgba)) {
        for (var i = 0; i < rgb.length; i++) {
          rgb[i] = parseInt(match[i + 1]);
        }

        a = parseFloat(match[4]);
      } else if (match = string.match(per)) {
        for (var i = 0; i < rgb.length; i++) {
          rgb[i] = Math.round(parseFloat(match[i + 1]) * 2.55);
        }

        a = parseFloat(match[4]);
      } else if (match = string.match(keyword)) {
        if (match[1] == "transparent") {
          return [0, 0, 0, 0];
        }

        rgb = colorNames[match[1]];

        if (!rgb) {
          return;
        }
      }

      for (var i = 0; i < rgb.length; i++) {
        rgb[i] = scale(rgb[i], 0, 255);
      }

      if (!a && a != 0) {
        a = 1;
      } else {
        a = scale(a, 0, 1);
      }

      rgb[3] = a;
      return rgb;
    }

    function getHsla(string) {
      if (!string) {
        return;
      }

      var hsl = /^hsla?\(\s*([+-]?\d+)(?:deg)?\s*,\s*([+-]?[\d\.]+)%\s*,\s*([+-]?[\d\.]+)%\s*(?:,\s*([+-]?[\d\.]+)\s*)?\)/;
      var match = string.match(hsl);

      if (match) {
        var alpha = parseFloat(match[4]);
        var h = scale(parseInt(match[1]), 0, 360),
            s = scale(parseFloat(match[2]), 0, 100),
            l = scale(parseFloat(match[3]), 0, 100),
            a = scale(isNaN(alpha) ? 1 : alpha, 0, 1);
        return [h, s, l, a];
      }
    }

    function getHwb(string) {
      if (!string) {
        return;
      }

      var hwb = /^hwb\(\s*([+-]?\d+)(?:deg)?\s*,\s*([+-]?[\d\.]+)%\s*,\s*([+-]?[\d\.]+)%\s*(?:,\s*([+-]?[\d\.]+)\s*)?\)/;
      var match = string.match(hwb);

      if (match) {
        var alpha = parseFloat(match[4]);
        var h = scale(parseInt(match[1]), 0, 360),
            w = scale(parseFloat(match[2]), 0, 100),
            b = scale(parseFloat(match[3]), 0, 100),
            a = scale(isNaN(alpha) ? 1 : alpha, 0, 1);
        return [h, w, b, a];
      }
    }

    function getRgb(string) {
      var rgba = getRgba(string);
      return rgba && rgba.slice(0, 3);
    }

    function getHsl(string) {
      var hsla = getHsla(string);
      return hsla && hsla.slice(0, 3);
    }

    function getAlpha(string) {
      var vals = getRgba(string);

      if (vals) {
        return vals[3];
      } else if (vals = getHsla(string)) {
        return vals[3];
      } else if (vals = getHwb(string)) {
        return vals[3];
      }
    } // generators


    function hexString(rgba, a) {
      var a = a !== undefined && rgba.length === 3 ? a : rgba[3];
      return "#" + hexDouble(rgba[0]) + hexDouble(rgba[1]) + hexDouble(rgba[2]) + (a >= 0 && a < 1 ? hexDouble(Math.round(a * 255)) : "");
    }

    function rgbString(rgba, alpha) {
      if (alpha < 1 || rgba[3] && rgba[3] < 1) {
        return rgbaString(rgba, alpha);
      }

      return "rgb(" + rgba[0] + ", " + rgba[1] + ", " + rgba[2] + ")";
    }

    function rgbaString(rgba, alpha) {
      if (alpha === undefined) {
        alpha = rgba[3] !== undefined ? rgba[3] : 1;
      }

      return "rgba(" + rgba[0] + ", " + rgba[1] + ", " + rgba[2] + ", " + alpha + ")";
    }

    function percentString(rgba, alpha) {
      if (alpha < 1 || rgba[3] && rgba[3] < 1) {
        return percentaString(rgba, alpha);
      }

      var r = Math.round(rgba[0] / 255 * 100),
          g = Math.round(rgba[1] / 255 * 100),
          b = Math.round(rgba[2] / 255 * 100);
      return "rgb(" + r + "%, " + g + "%, " + b + "%)";
    }

    function percentaString(rgba, alpha) {
      var r = Math.round(rgba[0] / 255 * 100),
          g = Math.round(rgba[1] / 255 * 100),
          b = Math.round(rgba[2] / 255 * 100);
      return "rgba(" + r + "%, " + g + "%, " + b + "%, " + (alpha || rgba[3] || 1) + ")";
    }

    function hslString(hsla, alpha) {
      if (alpha < 1 || hsla[3] && hsla[3] < 1) {
        return hslaString(hsla, alpha);
      }

      return "hsl(" + hsla[0] + ", " + hsla[1] + "%, " + hsla[2] + "%)";
    }

    function hslaString(hsla, alpha) {
      if (alpha === undefined) {
        alpha = hsla[3] !== undefined ? hsla[3] : 1;
      }

      return "hsla(" + hsla[0] + ", " + hsla[1] + "%, " + hsla[2] + "%, " + alpha + ")";
    } // hwb is a bit different than rgb(a) & hsl(a) since there is no alpha specific syntax
    // (hwb have alpha optional & 1 is default value)


    function hwbString(hwb, alpha) {
      if (alpha === undefined) {
        alpha = hwb[3] !== undefined ? hwb[3] : 1;
      }

      return "hwb(" + hwb[0] + ", " + hwb[1] + "%, " + hwb[2] + "%" + (alpha !== undefined && alpha !== 1 ? ", " + alpha : "") + ")";
    }

    function keyword(rgb) {
      return reverseNames[rgb.slice(0, 3)];
    } // helpers


    function scale(num, min, max) {
      return Math.min(Math.max(min, num), max);
    }

    function hexDouble(num) {
      var str = num.toString(16).toUpperCase();
      return str.length < 2 ? "0" + str : str;
    } //create a list of reverse color names


    var reverseNames = {};

    for (var name in colorNames) {
      reverseNames[colorNames[name]] = name;
    }
    /***/

  },

  /***/
  "./node_modules/chartjs-color/index.js": function node_modulesChartjsColorIndexJs(module, exports, __webpack_require__) {
    /* MIT license */
    var convert = __webpack_require__(
    /*! color-convert */
    "./node_modules/color-convert/index.js");

    var string = __webpack_require__(
    /*! chartjs-color-string */
    "./node_modules/chartjs-color-string/color-string.js");

    var Color = function Color(obj) {
      if (obj instanceof Color) {
        return obj;
      }

      if (!(this instanceof Color)) {
        return new Color(obj);
      }

      this.valid = false;
      this.values = {
        rgb: [0, 0, 0],
        hsl: [0, 0, 0],
        hsv: [0, 0, 0],
        hwb: [0, 0, 0],
        cmyk: [0, 0, 0, 0],
        alpha: 1
      }; // parse Color() argument

      var vals;

      if (typeof obj === 'string') {
        vals = string.getRgba(obj);

        if (vals) {
          this.setValues('rgb', vals);
        } else if (vals = string.getHsla(obj)) {
          this.setValues('hsl', vals);
        } else if (vals = string.getHwb(obj)) {
          this.setValues('hwb', vals);
        }
      } else if (typeof obj === 'object') {
        vals = obj;

        if (vals.r !== undefined || vals.red !== undefined) {
          this.setValues('rgb', vals);
        } else if (vals.l !== undefined || vals.lightness !== undefined) {
          this.setValues('hsl', vals);
        } else if (vals.v !== undefined || vals.value !== undefined) {
          this.setValues('hsv', vals);
        } else if (vals.w !== undefined || vals.whiteness !== undefined) {
          this.setValues('hwb', vals);
        } else if (vals.c !== undefined || vals.cyan !== undefined) {
          this.setValues('cmyk', vals);
        }
      }
    };

    Color.prototype = {
      isValid: function isValid() {
        return this.valid;
      },
      rgb: function rgb() {
        return this.setSpace('rgb', arguments);
      },
      hsl: function hsl() {
        return this.setSpace('hsl', arguments);
      },
      hsv: function hsv() {
        return this.setSpace('hsv', arguments);
      },
      hwb: function hwb() {
        return this.setSpace('hwb', arguments);
      },
      cmyk: function cmyk() {
        return this.setSpace('cmyk', arguments);
      },
      rgbArray: function rgbArray() {
        return this.values.rgb;
      },
      hslArray: function hslArray() {
        return this.values.hsl;
      },
      hsvArray: function hsvArray() {
        return this.values.hsv;
      },
      hwbArray: function hwbArray() {
        var values = this.values;

        if (values.alpha !== 1) {
          return values.hwb.concat([values.alpha]);
        }

        return values.hwb;
      },
      cmykArray: function cmykArray() {
        return this.values.cmyk;
      },
      rgbaArray: function rgbaArray() {
        var values = this.values;
        return values.rgb.concat([values.alpha]);
      },
      hslaArray: function hslaArray() {
        var values = this.values;
        return values.hsl.concat([values.alpha]);
      },
      alpha: function alpha(val) {
        if (val === undefined) {
          return this.values.alpha;
        }

        this.setValues('alpha', val);
        return this;
      },
      red: function red(val) {
        return this.setChannel('rgb', 0, val);
      },
      green: function green(val) {
        return this.setChannel('rgb', 1, val);
      },
      blue: function blue(val) {
        return this.setChannel('rgb', 2, val);
      },
      hue: function hue(val) {
        if (val) {
          val %= 360;
          val = val < 0 ? 360 + val : val;
        }

        return this.setChannel('hsl', 0, val);
      },
      saturation: function saturation(val) {
        return this.setChannel('hsl', 1, val);
      },
      lightness: function lightness(val) {
        return this.setChannel('hsl', 2, val);
      },
      saturationv: function saturationv(val) {
        return this.setChannel('hsv', 1, val);
      },
      whiteness: function whiteness(val) {
        return this.setChannel('hwb', 1, val);
      },
      blackness: function blackness(val) {
        return this.setChannel('hwb', 2, val);
      },
      value: function value(val) {
        return this.setChannel('hsv', 2, val);
      },
      cyan: function cyan(val) {
        return this.setChannel('cmyk', 0, val);
      },
      magenta: function magenta(val) {
        return this.setChannel('cmyk', 1, val);
      },
      yellow: function yellow(val) {
        return this.setChannel('cmyk', 2, val);
      },
      black: function black(val) {
        return this.setChannel('cmyk', 3, val);
      },
      hexString: function hexString() {
        return string.hexString(this.values.rgb);
      },
      rgbString: function rgbString() {
        return string.rgbString(this.values.rgb, this.values.alpha);
      },
      rgbaString: function rgbaString() {
        return string.rgbaString(this.values.rgb, this.values.alpha);
      },
      percentString: function percentString() {
        return string.percentString(this.values.rgb, this.values.alpha);
      },
      hslString: function hslString() {
        return string.hslString(this.values.hsl, this.values.alpha);
      },
      hslaString: function hslaString() {
        return string.hslaString(this.values.hsl, this.values.alpha);
      },
      hwbString: function hwbString() {
        return string.hwbString(this.values.hwb, this.values.alpha);
      },
      keyword: function keyword() {
        return string.keyword(this.values.rgb, this.values.alpha);
      },
      rgbNumber: function rgbNumber() {
        var rgb = this.values.rgb;
        return rgb[0] << 16 | rgb[1] << 8 | rgb[2];
      },
      luminosity: function luminosity() {
        // http://www.w3.org/TR/WCAG20/#relativeluminancedef
        var rgb = this.values.rgb;
        var lum = [];

        for (var i = 0; i < rgb.length; i++) {
          var chan = rgb[i] / 255;
          lum[i] = chan <= 0.03928 ? chan / 12.92 : Math.pow((chan + 0.055) / 1.055, 2.4);
        }

        return 0.2126 * lum[0] + 0.7152 * lum[1] + 0.0722 * lum[2];
      },
      contrast: function contrast(color2) {
        // http://www.w3.org/TR/WCAG20/#contrast-ratiodef
        var lum1 = this.luminosity();
        var lum2 = color2.luminosity();

        if (lum1 > lum2) {
          return (lum1 + 0.05) / (lum2 + 0.05);
        }

        return (lum2 + 0.05) / (lum1 + 0.05);
      },
      level: function level(color2) {
        var contrastRatio = this.contrast(color2);

        if (contrastRatio >= 7.1) {
          return 'AAA';
        }

        return contrastRatio >= 4.5 ? 'AA' : '';
      },
      dark: function dark() {
        // YIQ equation from http://24ways.org/2010/calculating-color-contrast
        var rgb = this.values.rgb;
        var yiq = (rgb[0] * 299 + rgb[1] * 587 + rgb[2] * 114) / 1000;
        return yiq < 128;
      },
      light: function light() {
        return !this.dark();
      },
      negate: function negate() {
        var rgb = [];

        for (var i = 0; i < 3; i++) {
          rgb[i] = 255 - this.values.rgb[i];
        }

        this.setValues('rgb', rgb);
        return this;
      },
      lighten: function lighten(ratio) {
        var hsl = this.values.hsl;
        hsl[2] += hsl[2] * ratio;
        this.setValues('hsl', hsl);
        return this;
      },
      darken: function darken(ratio) {
        var hsl = this.values.hsl;
        hsl[2] -= hsl[2] * ratio;
        this.setValues('hsl', hsl);
        return this;
      },
      saturate: function saturate(ratio) {
        var hsl = this.values.hsl;
        hsl[1] += hsl[1] * ratio;
        this.setValues('hsl', hsl);
        return this;
      },
      desaturate: function desaturate(ratio) {
        var hsl = this.values.hsl;
        hsl[1] -= hsl[1] * ratio;
        this.setValues('hsl', hsl);
        return this;
      },
      whiten: function whiten(ratio) {
        var hwb = this.values.hwb;
        hwb[1] += hwb[1] * ratio;
        this.setValues('hwb', hwb);
        return this;
      },
      blacken: function blacken(ratio) {
        var hwb = this.values.hwb;
        hwb[2] += hwb[2] * ratio;
        this.setValues('hwb', hwb);
        return this;
      },
      greyscale: function greyscale() {
        var rgb = this.values.rgb; // http://en.wikipedia.org/wiki/Grayscale#Converting_color_to_grayscale

        var val = rgb[0] * 0.3 + rgb[1] * 0.59 + rgb[2] * 0.11;
        this.setValues('rgb', [val, val, val]);
        return this;
      },
      clearer: function clearer(ratio) {
        var alpha = this.values.alpha;
        this.setValues('alpha', alpha - alpha * ratio);
        return this;
      },
      opaquer: function opaquer(ratio) {
        var alpha = this.values.alpha;
        this.setValues('alpha', alpha + alpha * ratio);
        return this;
      },
      rotate: function rotate(degrees) {
        var hsl = this.values.hsl;
        var hue = (hsl[0] + degrees) % 360;
        hsl[0] = hue < 0 ? 360 + hue : hue;
        this.setValues('hsl', hsl);
        return this;
      },

      /**
       * Ported from sass implementation in C
       * https://github.com/sass/libsass/blob/0e6b4a2850092356aa3ece07c6b249f0221caced/functions.cpp#L209
       */
      mix: function mix(mixinColor, weight) {
        var color1 = this;
        var color2 = mixinColor;
        var p = weight === undefined ? 0.5 : weight;
        var w = 2 * p - 1;
        var a = color1.alpha() - color2.alpha();
        var w1 = ((w * a === -1 ? w : (w + a) / (1 + w * a)) + 1) / 2.0;
        var w2 = 1 - w1;
        return this.rgb(w1 * color1.red() + w2 * color2.red(), w1 * color1.green() + w2 * color2.green(), w1 * color1.blue() + w2 * color2.blue()).alpha(color1.alpha() * p + color2.alpha() * (1 - p));
      },
      toJSON: function toJSON() {
        return this.rgb();
      },
      clone: function clone() {
        // NOTE(SB): using node-clone creates a dependency to Buffer when using browserify,
        // making the final build way to big to embed in Chart.js. So let's do it manually,
        // assuming that values to clone are 1 dimension arrays containing only numbers,
        // except 'alpha' which is a number.
        var result = new Color();
        var source = this.values;
        var target = result.values;
        var value, type;

        for (var prop in source) {
          if (source.hasOwnProperty(prop)) {
            value = source[prop];
            type = {}.toString.call(value);

            if (type === '[object Array]') {
              target[prop] = value.slice(0);
            } else if (type === '[object Number]') {
              target[prop] = value;
            } else {
              console.error('unexpected color value:', value);
            }
          }
        }

        return result;
      }
    };
    Color.prototype.spaces = {
      rgb: ['red', 'green', 'blue'],
      hsl: ['hue', 'saturation', 'lightness'],
      hsv: ['hue', 'saturation', 'value'],
      hwb: ['hue', 'whiteness', 'blackness'],
      cmyk: ['cyan', 'magenta', 'yellow', 'black']
    };
    Color.prototype.maxes = {
      rgb: [255, 255, 255],
      hsl: [360, 100, 100],
      hsv: [360, 100, 100],
      hwb: [360, 100, 100],
      cmyk: [100, 100, 100, 100]
    };

    Color.prototype.getValues = function (space) {
      var values = this.values;
      var vals = {};

      for (var i = 0; i < space.length; i++) {
        vals[space.charAt(i)] = values[space][i];
      }

      if (values.alpha !== 1) {
        vals.a = values.alpha;
      } // {r: 255, g: 255, b: 255, a: 0.4}


      return vals;
    };

    Color.prototype.setValues = function (space, vals) {
      var values = this.values;
      var spaces = this.spaces;
      var maxes = this.maxes;
      var alpha = 1;
      var i;
      this.valid = true;

      if (space === 'alpha') {
        alpha = vals;
      } else if (vals.length) {
        // [10, 10, 10]
        values[space] = vals.slice(0, space.length);
        alpha = vals[space.length];
      } else if (vals[space.charAt(0)] !== undefined) {
        // {r: 10, g: 10, b: 10}
        for (i = 0; i < space.length; i++) {
          values[space][i] = vals[space.charAt(i)];
        }

        alpha = vals.a;
      } else if (vals[spaces[space][0]] !== undefined) {
        // {red: 10, green: 10, blue: 10}
        var chans = spaces[space];

        for (i = 0; i < space.length; i++) {
          values[space][i] = vals[chans[i]];
        }

        alpha = vals.alpha;
      }

      values.alpha = Math.max(0, Math.min(1, alpha === undefined ? values.alpha : alpha));

      if (space === 'alpha') {
        return false;
      }

      var capped; // cap values of the space prior converting all values

      for (i = 0; i < space.length; i++) {
        capped = Math.max(0, Math.min(maxes[space][i], values[space][i]));
        values[space][i] = Math.round(capped);
      } // convert to all the other color spaces


      for (var sname in spaces) {
        if (sname !== space) {
          values[sname] = convert[space][sname](values[space]);
        }
      }

      return true;
    };

    Color.prototype.setSpace = function (space, args) {
      var vals = args[0];

      if (vals === undefined) {
        // color.rgb()
        return this.getValues(space);
      } // color.rgb(10, 10, 10)


      if (typeof vals === 'number') {
        vals = Array.prototype.slice.call(args);
      }

      this.setValues(space, vals);
      return this;
    };

    Color.prototype.setChannel = function (space, index, val) {
      var svalues = this.values[space];

      if (val === undefined) {
        // color.red()
        return svalues[index];
      } else if (val === svalues[index]) {
        // color.red(color.red())
        return this;
      } // color.red(100)


      svalues[index] = val;
      this.setValues(space, svalues);
      return this;
    };

    if (typeof window !== 'undefined') {
      window.Color = Color;
    }

    module.exports = Color;
    /***/
  },

  /***/
  "./node_modules/color-convert/conversions.js": function node_modulesColorConvertConversionsJs(module, exports, __webpack_require__) {
    /* MIT license */
    var cssKeywords = __webpack_require__(
    /*! color-name */
    "./node_modules/color-convert/node_modules/color-name/index.js"); // NOTE: conversions should only return primitive values (i.e. arrays, or
    //       values that give correct `typeof` results).
    //       do not use box values types (i.e. Number(), String(), etc.)


    var reverseKeywords = {};

    for (var key in cssKeywords) {
      if (cssKeywords.hasOwnProperty(key)) {
        reverseKeywords[cssKeywords[key]] = key;
      }
    }

    var convert = module.exports = {
      rgb: {
        channels: 3,
        labels: 'rgb'
      },
      hsl: {
        channels: 3,
        labels: 'hsl'
      },
      hsv: {
        channels: 3,
        labels: 'hsv'
      },
      hwb: {
        channels: 3,
        labels: 'hwb'
      },
      cmyk: {
        channels: 4,
        labels: 'cmyk'
      },
      xyz: {
        channels: 3,
        labels: 'xyz'
      },
      lab: {
        channels: 3,
        labels: 'lab'
      },
      lch: {
        channels: 3,
        labels: 'lch'
      },
      hex: {
        channels: 1,
        labels: ['hex']
      },
      keyword: {
        channels: 1,
        labels: ['keyword']
      },
      ansi16: {
        channels: 1,
        labels: ['ansi16']
      },
      ansi256: {
        channels: 1,
        labels: ['ansi256']
      },
      hcg: {
        channels: 3,
        labels: ['h', 'c', 'g']
      },
      apple: {
        channels: 3,
        labels: ['r16', 'g16', 'b16']
      },
      gray: {
        channels: 1,
        labels: ['gray']
      }
    }; // hide .channels and .labels properties

    for (var model in convert) {
      if (convert.hasOwnProperty(model)) {
        if (!('channels' in convert[model])) {
          throw new Error('missing channels property: ' + model);
        }

        if (!('labels' in convert[model])) {
          throw new Error('missing channel labels property: ' + model);
        }

        if (convert[model].labels.length !== convert[model].channels) {
          throw new Error('channel and label counts mismatch: ' + model);
        }

        var channels = convert[model].channels;
        var labels = convert[model].labels;
        delete convert[model].channels;
        delete convert[model].labels;
        Object.defineProperty(convert[model], 'channels', {
          value: channels
        });
        Object.defineProperty(convert[model], 'labels', {
          value: labels
        });
      }
    }

    convert.rgb.hsl = function (rgb) {
      var r = rgb[0] / 255;
      var g = rgb[1] / 255;
      var b = rgb[2] / 255;
      var min = Math.min(r, g, b);
      var max = Math.max(r, g, b);
      var delta = max - min;
      var h;
      var s;
      var l;

      if (max === min) {
        h = 0;
      } else if (r === max) {
        h = (g - b) / delta;
      } else if (g === max) {
        h = 2 + (b - r) / delta;
      } else if (b === max) {
        h = 4 + (r - g) / delta;
      }

      h = Math.min(h * 60, 360);

      if (h < 0) {
        h += 360;
      }

      l = (min + max) / 2;

      if (max === min) {
        s = 0;
      } else if (l <= 0.5) {
        s = delta / (max + min);
      } else {
        s = delta / (2 - max - min);
      }

      return [h, s * 100, l * 100];
    };

    convert.rgb.hsv = function (rgb) {
      var rdif;
      var gdif;
      var bdif;
      var h;
      var s;
      var r = rgb[0] / 255;
      var g = rgb[1] / 255;
      var b = rgb[2] / 255;
      var v = Math.max(r, g, b);
      var diff = v - Math.min(r, g, b);

      var diffc = function diffc(c) {
        return (v - c) / 6 / diff + 1 / 2;
      };

      if (diff === 0) {
        h = s = 0;
      } else {
        s = diff / v;
        rdif = diffc(r);
        gdif = diffc(g);
        bdif = diffc(b);

        if (r === v) {
          h = bdif - gdif;
        } else if (g === v) {
          h = 1 / 3 + rdif - bdif;
        } else if (b === v) {
          h = 2 / 3 + gdif - rdif;
        }

        if (h < 0) {
          h += 1;
        } else if (h > 1) {
          h -= 1;
        }
      }

      return [h * 360, s * 100, v * 100];
    };

    convert.rgb.hwb = function (rgb) {
      var r = rgb[0];
      var g = rgb[1];
      var b = rgb[2];
      var h = convert.rgb.hsl(rgb)[0];
      var w = 1 / 255 * Math.min(r, Math.min(g, b));
      b = 1 - 1 / 255 * Math.max(r, Math.max(g, b));
      return [h, w * 100, b * 100];
    };

    convert.rgb.cmyk = function (rgb) {
      var r = rgb[0] / 255;
      var g = rgb[1] / 255;
      var b = rgb[2] / 255;
      var c;
      var m;
      var y;
      var k;
      k = Math.min(1 - r, 1 - g, 1 - b);
      c = (1 - r - k) / (1 - k) || 0;
      m = (1 - g - k) / (1 - k) || 0;
      y = (1 - b - k) / (1 - k) || 0;
      return [c * 100, m * 100, y * 100, k * 100];
    };
    /**
     * See https://en.m.wikipedia.org/wiki/Euclidean_distance#Squared_Euclidean_distance
     * */


    function comparativeDistance(x, y) {
      return Math.pow(x[0] - y[0], 2) + Math.pow(x[1] - y[1], 2) + Math.pow(x[2] - y[2], 2);
    }

    convert.rgb.keyword = function (rgb) {
      var reversed = reverseKeywords[rgb];

      if (reversed) {
        return reversed;
      }

      var currentClosestDistance = Infinity;
      var currentClosestKeyword;

      for (var keyword in cssKeywords) {
        if (cssKeywords.hasOwnProperty(keyword)) {
          var value = cssKeywords[keyword]; // Compute comparative distance

          var distance = comparativeDistance(rgb, value); // Check if its less, if so set as closest

          if (distance < currentClosestDistance) {
            currentClosestDistance = distance;
            currentClosestKeyword = keyword;
          }
        }
      }

      return currentClosestKeyword;
    };

    convert.keyword.rgb = function (keyword) {
      return cssKeywords[keyword];
    };

    convert.rgb.xyz = function (rgb) {
      var r = rgb[0] / 255;
      var g = rgb[1] / 255;
      var b = rgb[2] / 255; // assume sRGB

      r = r > 0.04045 ? Math.pow((r + 0.055) / 1.055, 2.4) : r / 12.92;
      g = g > 0.04045 ? Math.pow((g + 0.055) / 1.055, 2.4) : g / 12.92;
      b = b > 0.04045 ? Math.pow((b + 0.055) / 1.055, 2.4) : b / 12.92;
      var x = r * 0.4124 + g * 0.3576 + b * 0.1805;
      var y = r * 0.2126 + g * 0.7152 + b * 0.0722;
      var z = r * 0.0193 + g * 0.1192 + b * 0.9505;
      return [x * 100, y * 100, z * 100];
    };

    convert.rgb.lab = function (rgb) {
      var xyz = convert.rgb.xyz(rgb);
      var x = xyz[0];
      var y = xyz[1];
      var z = xyz[2];
      var l;
      var a;
      var b;
      x /= 95.047;
      y /= 100;
      z /= 108.883;
      x = x > 0.008856 ? Math.pow(x, 1 / 3) : 7.787 * x + 16 / 116;
      y = y > 0.008856 ? Math.pow(y, 1 / 3) : 7.787 * y + 16 / 116;
      z = z > 0.008856 ? Math.pow(z, 1 / 3) : 7.787 * z + 16 / 116;
      l = 116 * y - 16;
      a = 500 * (x - y);
      b = 200 * (y - z);
      return [l, a, b];
    };

    convert.hsl.rgb = function (hsl) {
      var h = hsl[0] / 360;
      var s = hsl[1] / 100;
      var l = hsl[2] / 100;
      var t1;
      var t2;
      var t3;
      var rgb;
      var val;

      if (s === 0) {
        val = l * 255;
        return [val, val, val];
      }

      if (l < 0.5) {
        t2 = l * (1 + s);
      } else {
        t2 = l + s - l * s;
      }

      t1 = 2 * l - t2;
      rgb = [0, 0, 0];

      for (var i = 0; i < 3; i++) {
        t3 = h + 1 / 3 * -(i - 1);

        if (t3 < 0) {
          t3++;
        }

        if (t3 > 1) {
          t3--;
        }

        if (6 * t3 < 1) {
          val = t1 + (t2 - t1) * 6 * t3;
        } else if (2 * t3 < 1) {
          val = t2;
        } else if (3 * t3 < 2) {
          val = t1 + (t2 - t1) * (2 / 3 - t3) * 6;
        } else {
          val = t1;
        }

        rgb[i] = val * 255;
      }

      return rgb;
    };

    convert.hsl.hsv = function (hsl) {
      var h = hsl[0];
      var s = hsl[1] / 100;
      var l = hsl[2] / 100;
      var smin = s;
      var lmin = Math.max(l, 0.01);
      var sv;
      var v;
      l *= 2;
      s *= l <= 1 ? l : 2 - l;
      smin *= lmin <= 1 ? lmin : 2 - lmin;
      v = (l + s) / 2;
      sv = l === 0 ? 2 * smin / (lmin + smin) : 2 * s / (l + s);
      return [h, sv * 100, v * 100];
    };

    convert.hsv.rgb = function (hsv) {
      var h = hsv[0] / 60;
      var s = hsv[1] / 100;
      var v = hsv[2] / 100;
      var hi = Math.floor(h) % 6;
      var f = h - Math.floor(h);
      var p = 255 * v * (1 - s);
      var q = 255 * v * (1 - s * f);
      var t = 255 * v * (1 - s * (1 - f));
      v *= 255;

      switch (hi) {
        case 0:
          return [v, t, p];

        case 1:
          return [q, v, p];

        case 2:
          return [p, v, t];

        case 3:
          return [p, q, v];

        case 4:
          return [t, p, v];

        case 5:
          return [v, p, q];
      }
    };

    convert.hsv.hsl = function (hsv) {
      var h = hsv[0];
      var s = hsv[1] / 100;
      var v = hsv[2] / 100;
      var vmin = Math.max(v, 0.01);
      var lmin;
      var sl;
      var l;
      l = (2 - s) * v;
      lmin = (2 - s) * vmin;
      sl = s * vmin;
      sl /= lmin <= 1 ? lmin : 2 - lmin;
      sl = sl || 0;
      l /= 2;
      return [h, sl * 100, l * 100];
    }; // http://dev.w3.org/csswg/css-color/#hwb-to-rgb


    convert.hwb.rgb = function (hwb) {
      var h = hwb[0] / 360;
      var wh = hwb[1] / 100;
      var bl = hwb[2] / 100;
      var ratio = wh + bl;
      var i;
      var v;
      var f;
      var n; // wh + bl cant be > 1

      if (ratio > 1) {
        wh /= ratio;
        bl /= ratio;
      }

      i = Math.floor(6 * h);
      v = 1 - bl;
      f = 6 * h - i;

      if ((i & 0x01) !== 0) {
        f = 1 - f;
      }

      n = wh + f * (v - wh); // linear interpolation

      var r;
      var g;
      var b;

      switch (i) {
        default:
        case 6:
        case 0:
          r = v;
          g = n;
          b = wh;
          break;

        case 1:
          r = n;
          g = v;
          b = wh;
          break;

        case 2:
          r = wh;
          g = v;
          b = n;
          break;

        case 3:
          r = wh;
          g = n;
          b = v;
          break;

        case 4:
          r = n;
          g = wh;
          b = v;
          break;

        case 5:
          r = v;
          g = wh;
          b = n;
          break;
      }

      return [r * 255, g * 255, b * 255];
    };

    convert.cmyk.rgb = function (cmyk) {
      var c = cmyk[0] / 100;
      var m = cmyk[1] / 100;
      var y = cmyk[2] / 100;
      var k = cmyk[3] / 100;
      var r;
      var g;
      var b;
      r = 1 - Math.min(1, c * (1 - k) + k);
      g = 1 - Math.min(1, m * (1 - k) + k);
      b = 1 - Math.min(1, y * (1 - k) + k);
      return [r * 255, g * 255, b * 255];
    };

    convert.xyz.rgb = function (xyz) {
      var x = xyz[0] / 100;
      var y = xyz[1] / 100;
      var z = xyz[2] / 100;
      var r;
      var g;
      var b;
      r = x * 3.2406 + y * -1.5372 + z * -0.4986;
      g = x * -0.9689 + y * 1.8758 + z * 0.0415;
      b = x * 0.0557 + y * -0.2040 + z * 1.0570; // assume sRGB

      r = r > 0.0031308 ? 1.055 * Math.pow(r, 1.0 / 2.4) - 0.055 : r * 12.92;
      g = g > 0.0031308 ? 1.055 * Math.pow(g, 1.0 / 2.4) - 0.055 : g * 12.92;
      b = b > 0.0031308 ? 1.055 * Math.pow(b, 1.0 / 2.4) - 0.055 : b * 12.92;
      r = Math.min(Math.max(0, r), 1);
      g = Math.min(Math.max(0, g), 1);
      b = Math.min(Math.max(0, b), 1);
      return [r * 255, g * 255, b * 255];
    };

    convert.xyz.lab = function (xyz) {
      var x = xyz[0];
      var y = xyz[1];
      var z = xyz[2];
      var l;
      var a;
      var b;
      x /= 95.047;
      y /= 100;
      z /= 108.883;
      x = x > 0.008856 ? Math.pow(x, 1 / 3) : 7.787 * x + 16 / 116;
      y = y > 0.008856 ? Math.pow(y, 1 / 3) : 7.787 * y + 16 / 116;
      z = z > 0.008856 ? Math.pow(z, 1 / 3) : 7.787 * z + 16 / 116;
      l = 116 * y - 16;
      a = 500 * (x - y);
      b = 200 * (y - z);
      return [l, a, b];
    };

    convert.lab.xyz = function (lab) {
      var l = lab[0];
      var a = lab[1];
      var b = lab[2];
      var x;
      var y;
      var z;
      y = (l + 16) / 116;
      x = a / 500 + y;
      z = y - b / 200;
      var y2 = Math.pow(y, 3);
      var x2 = Math.pow(x, 3);
      var z2 = Math.pow(z, 3);
      y = y2 > 0.008856 ? y2 : (y - 16 / 116) / 7.787;
      x = x2 > 0.008856 ? x2 : (x - 16 / 116) / 7.787;
      z = z2 > 0.008856 ? z2 : (z - 16 / 116) / 7.787;
      x *= 95.047;
      y *= 100;
      z *= 108.883;
      return [x, y, z];
    };

    convert.lab.lch = function (lab) {
      var l = lab[0];
      var a = lab[1];
      var b = lab[2];
      var hr;
      var h;
      var c;
      hr = Math.atan2(b, a);
      h = hr * 360 / 2 / Math.PI;

      if (h < 0) {
        h += 360;
      }

      c = Math.sqrt(a * a + b * b);
      return [l, c, h];
    };

    convert.lch.lab = function (lch) {
      var l = lch[0];
      var c = lch[1];
      var h = lch[2];
      var a;
      var b;
      var hr;
      hr = h / 360 * 2 * Math.PI;
      a = c * Math.cos(hr);
      b = c * Math.sin(hr);
      return [l, a, b];
    };

    convert.rgb.ansi16 = function (args) {
      var r = args[0];
      var g = args[1];
      var b = args[2];
      var value = 1 in arguments ? arguments[1] : convert.rgb.hsv(args)[2]; // hsv -> ansi16 optimization

      value = Math.round(value / 50);

      if (value === 0) {
        return 30;
      }

      var ansi = 30 + (Math.round(b / 255) << 2 | Math.round(g / 255) << 1 | Math.round(r / 255));

      if (value === 2) {
        ansi += 60;
      }

      return ansi;
    };

    convert.hsv.ansi16 = function (args) {
      // optimization here; we already know the value and don't need to get
      // it converted for us.
      return convert.rgb.ansi16(convert.hsv.rgb(args), args[2]);
    };

    convert.rgb.ansi256 = function (args) {
      var r = args[0];
      var g = args[1];
      var b = args[2]; // we use the extended greyscale palette here, with the exception of
      // black and white. normal palette only has 4 greyscale shades.

      if (r === g && g === b) {
        if (r < 8) {
          return 16;
        }

        if (r > 248) {
          return 231;
        }

        return Math.round((r - 8) / 247 * 24) + 232;
      }

      var ansi = 16 + 36 * Math.round(r / 255 * 5) + 6 * Math.round(g / 255 * 5) + Math.round(b / 255 * 5);
      return ansi;
    };

    convert.ansi16.rgb = function (args) {
      var color = args % 10; // handle greyscale

      if (color === 0 || color === 7) {
        if (args > 50) {
          color += 3.5;
        }

        color = color / 10.5 * 255;
        return [color, color, color];
      }

      var mult = (~~(args > 50) + 1) * 0.5;
      var r = (color & 1) * mult * 255;
      var g = (color >> 1 & 1) * mult * 255;
      var b = (color >> 2 & 1) * mult * 255;
      return [r, g, b];
    };

    convert.ansi256.rgb = function (args) {
      // handle greyscale
      if (args >= 232) {
        var c = (args - 232) * 10 + 8;
        return [c, c, c];
      }

      args -= 16;
      var rem;
      var r = Math.floor(args / 36) / 5 * 255;
      var g = Math.floor((rem = args % 36) / 6) / 5 * 255;
      var b = rem % 6 / 5 * 255;
      return [r, g, b];
    };

    convert.rgb.hex = function (args) {
      var integer = ((Math.round(args[0]) & 0xFF) << 16) + ((Math.round(args[1]) & 0xFF) << 8) + (Math.round(args[2]) & 0xFF);
      var string = integer.toString(16).toUpperCase();
      return '000000'.substring(string.length) + string;
    };

    convert.hex.rgb = function (args) {
      var match = args.toString(16).match(/[a-f0-9]{6}|[a-f0-9]{3}/i);

      if (!match) {
        return [0, 0, 0];
      }

      var colorString = match[0];

      if (match[0].length === 3) {
        colorString = colorString.split('').map(function (_char) {
          return _char + _char;
        }).join('');
      }

      var integer = parseInt(colorString, 16);
      var r = integer >> 16 & 0xFF;
      var g = integer >> 8 & 0xFF;
      var b = integer & 0xFF;
      return [r, g, b];
    };

    convert.rgb.hcg = function (rgb) {
      var r = rgb[0] / 255;
      var g = rgb[1] / 255;
      var b = rgb[2] / 255;
      var max = Math.max(Math.max(r, g), b);
      var min = Math.min(Math.min(r, g), b);
      var chroma = max - min;
      var grayscale;
      var hue;

      if (chroma < 1) {
        grayscale = min / (1 - chroma);
      } else {
        grayscale = 0;
      }

      if (chroma <= 0) {
        hue = 0;
      } else if (max === r) {
        hue = (g - b) / chroma % 6;
      } else if (max === g) {
        hue = 2 + (b - r) / chroma;
      } else {
        hue = 4 + (r - g) / chroma + 4;
      }

      hue /= 6;
      hue %= 1;
      return [hue * 360, chroma * 100, grayscale * 100];
    };

    convert.hsl.hcg = function (hsl) {
      var s = hsl[1] / 100;
      var l = hsl[2] / 100;
      var c = 1;
      var f = 0;

      if (l < 0.5) {
        c = 2.0 * s * l;
      } else {
        c = 2.0 * s * (1.0 - l);
      }

      if (c < 1.0) {
        f = (l - 0.5 * c) / (1.0 - c);
      }

      return [hsl[0], c * 100, f * 100];
    };

    convert.hsv.hcg = function (hsv) {
      var s = hsv[1] / 100;
      var v = hsv[2] / 100;
      var c = s * v;
      var f = 0;

      if (c < 1.0) {
        f = (v - c) / (1 - c);
      }

      return [hsv[0], c * 100, f * 100];
    };

    convert.hcg.rgb = function (hcg) {
      var h = hcg[0] / 360;
      var c = hcg[1] / 100;
      var g = hcg[2] / 100;

      if (c === 0.0) {
        return [g * 255, g * 255, g * 255];
      }

      var pure = [0, 0, 0];
      var hi = h % 1 * 6;
      var v = hi % 1;
      var w = 1 - v;
      var mg = 0;

      switch (Math.floor(hi)) {
        case 0:
          pure[0] = 1;
          pure[1] = v;
          pure[2] = 0;
          break;

        case 1:
          pure[0] = w;
          pure[1] = 1;
          pure[2] = 0;
          break;

        case 2:
          pure[0] = 0;
          pure[1] = 1;
          pure[2] = v;
          break;

        case 3:
          pure[0] = 0;
          pure[1] = w;
          pure[2] = 1;
          break;

        case 4:
          pure[0] = v;
          pure[1] = 0;
          pure[2] = 1;
          break;

        default:
          pure[0] = 1;
          pure[1] = 0;
          pure[2] = w;
      }

      mg = (1.0 - c) * g;
      return [(c * pure[0] + mg) * 255, (c * pure[1] + mg) * 255, (c * pure[2] + mg) * 255];
    };

    convert.hcg.hsv = function (hcg) {
      var c = hcg[1] / 100;
      var g = hcg[2] / 100;
      var v = c + g * (1.0 - c);
      var f = 0;

      if (v > 0.0) {
        f = c / v;
      }

      return [hcg[0], f * 100, v * 100];
    };

    convert.hcg.hsl = function (hcg) {
      var c = hcg[1] / 100;
      var g = hcg[2] / 100;
      var l = g * (1.0 - c) + 0.5 * c;
      var s = 0;

      if (l > 0.0 && l < 0.5) {
        s = c / (2 * l);
      } else if (l >= 0.5 && l < 1.0) {
        s = c / (2 * (1 - l));
      }

      return [hcg[0], s * 100, l * 100];
    };

    convert.hcg.hwb = function (hcg) {
      var c = hcg[1] / 100;
      var g = hcg[2] / 100;
      var v = c + g * (1.0 - c);
      return [hcg[0], (v - c) * 100, (1 - v) * 100];
    };

    convert.hwb.hcg = function (hwb) {
      var w = hwb[1] / 100;
      var b = hwb[2] / 100;
      var v = 1 - b;
      var c = v - w;
      var g = 0;

      if (c < 1) {
        g = (v - c) / (1 - c);
      }

      return [hwb[0], c * 100, g * 100];
    };

    convert.apple.rgb = function (apple) {
      return [apple[0] / 65535 * 255, apple[1] / 65535 * 255, apple[2] / 65535 * 255];
    };

    convert.rgb.apple = function (rgb) {
      return [rgb[0] / 255 * 65535, rgb[1] / 255 * 65535, rgb[2] / 255 * 65535];
    };

    convert.gray.rgb = function (args) {
      return [args[0] / 100 * 255, args[0] / 100 * 255, args[0] / 100 * 255];
    };

    convert.gray.hsl = convert.gray.hsv = function (args) {
      return [0, 0, args[0]];
    };

    convert.gray.hwb = function (gray) {
      return [0, 100, gray[0]];
    };

    convert.gray.cmyk = function (gray) {
      return [0, 0, 0, gray[0]];
    };

    convert.gray.lab = function (gray) {
      return [gray[0], 0, 0];
    };

    convert.gray.hex = function (gray) {
      var val = Math.round(gray[0] / 100 * 255) & 0xFF;
      var integer = (val << 16) + (val << 8) + val;
      var string = integer.toString(16).toUpperCase();
      return '000000'.substring(string.length) + string;
    };

    convert.rgb.gray = function (rgb) {
      var val = (rgb[0] + rgb[1] + rgb[2]) / 3;
      return [val / 255 * 100];
    };
    /***/

  },

  /***/
  "./node_modules/color-convert/index.js": function node_modulesColorConvertIndexJs(module, exports, __webpack_require__) {
    var conversions = __webpack_require__(
    /*! ./conversions */
    "./node_modules/color-convert/conversions.js");

    var route = __webpack_require__(
    /*! ./route */
    "./node_modules/color-convert/route.js");

    var convert = {};
    var models = Object.keys(conversions);

    function wrapRaw(fn) {
      var wrappedFn = function wrappedFn(args) {
        if (args === undefined || args === null) {
          return args;
        }

        if (arguments.length > 1) {
          args = Array.prototype.slice.call(arguments);
        }

        return fn(args);
      }; // preserve .conversion property if there is one


      if ('conversion' in fn) {
        wrappedFn.conversion = fn.conversion;
      }

      return wrappedFn;
    }

    function wrapRounded(fn) {
      var wrappedFn = function wrappedFn(args) {
        if (args === undefined || args === null) {
          return args;
        }

        if (arguments.length > 1) {
          args = Array.prototype.slice.call(arguments);
        }

        var result = fn(args); // we're assuming the result is an array here.
        // see notice in conversions.js; don't use box types
        // in conversion functions.

        if (typeof result === 'object') {
          for (var len = result.length, i = 0; i < len; i++) {
            result[i] = Math.round(result[i]);
          }
        }

        return result;
      }; // preserve .conversion property if there is one


      if ('conversion' in fn) {
        wrappedFn.conversion = fn.conversion;
      }

      return wrappedFn;
    }

    models.forEach(function (fromModel) {
      convert[fromModel] = {};
      Object.defineProperty(convert[fromModel], 'channels', {
        value: conversions[fromModel].channels
      });
      Object.defineProperty(convert[fromModel], 'labels', {
        value: conversions[fromModel].labels
      });
      var routes = route(fromModel);
      var routeModels = Object.keys(routes);
      routeModels.forEach(function (toModel) {
        var fn = routes[toModel];
        convert[fromModel][toModel] = wrapRounded(fn);
        convert[fromModel][toModel].raw = wrapRaw(fn);
      });
    });
    module.exports = convert;
    /***/
  },

  /***/
  "./node_modules/color-convert/node_modules/color-name/index.js": function node_modulesColorConvertNode_modulesColorNameIndexJs(module, exports, __webpack_require__) {
    "use strict";

    module.exports = {
      "aliceblue": [240, 248, 255],
      "antiquewhite": [250, 235, 215],
      "aqua": [0, 255, 255],
      "aquamarine": [127, 255, 212],
      "azure": [240, 255, 255],
      "beige": [245, 245, 220],
      "bisque": [255, 228, 196],
      "black": [0, 0, 0],
      "blanchedalmond": [255, 235, 205],
      "blue": [0, 0, 255],
      "blueviolet": [138, 43, 226],
      "brown": [165, 42, 42],
      "burlywood": [222, 184, 135],
      "cadetblue": [95, 158, 160],
      "chartreuse": [127, 255, 0],
      "chocolate": [210, 105, 30],
      "coral": [255, 127, 80],
      "cornflowerblue": [100, 149, 237],
      "cornsilk": [255, 248, 220],
      "crimson": [220, 20, 60],
      "cyan": [0, 255, 255],
      "darkblue": [0, 0, 139],
      "darkcyan": [0, 139, 139],
      "darkgoldenrod": [184, 134, 11],
      "darkgray": [169, 169, 169],
      "darkgreen": [0, 100, 0],
      "darkgrey": [169, 169, 169],
      "darkkhaki": [189, 183, 107],
      "darkmagenta": [139, 0, 139],
      "darkolivegreen": [85, 107, 47],
      "darkorange": [255, 140, 0],
      "darkorchid": [153, 50, 204],
      "darkred": [139, 0, 0],
      "darksalmon": [233, 150, 122],
      "darkseagreen": [143, 188, 143],
      "darkslateblue": [72, 61, 139],
      "darkslategray": [47, 79, 79],
      "darkslategrey": [47, 79, 79],
      "darkturquoise": [0, 206, 209],
      "darkviolet": [148, 0, 211],
      "deeppink": [255, 20, 147],
      "deepskyblue": [0, 191, 255],
      "dimgray": [105, 105, 105],
      "dimgrey": [105, 105, 105],
      "dodgerblue": [30, 144, 255],
      "firebrick": [178, 34, 34],
      "floralwhite": [255, 250, 240],
      "forestgreen": [34, 139, 34],
      "fuchsia": [255, 0, 255],
      "gainsboro": [220, 220, 220],
      "ghostwhite": [248, 248, 255],
      "gold": [255, 215, 0],
      "goldenrod": [218, 165, 32],
      "gray": [128, 128, 128],
      "green": [0, 128, 0],
      "greenyellow": [173, 255, 47],
      "grey": [128, 128, 128],
      "honeydew": [240, 255, 240],
      "hotpink": [255, 105, 180],
      "indianred": [205, 92, 92],
      "indigo": [75, 0, 130],
      "ivory": [255, 255, 240],
      "khaki": [240, 230, 140],
      "lavender": [230, 230, 250],
      "lavenderblush": [255, 240, 245],
      "lawngreen": [124, 252, 0],
      "lemonchiffon": [255, 250, 205],
      "lightblue": [173, 216, 230],
      "lightcoral": [240, 128, 128],
      "lightcyan": [224, 255, 255],
      "lightgoldenrodyellow": [250, 250, 210],
      "lightgray": [211, 211, 211],
      "lightgreen": [144, 238, 144],
      "lightgrey": [211, 211, 211],
      "lightpink": [255, 182, 193],
      "lightsalmon": [255, 160, 122],
      "lightseagreen": [32, 178, 170],
      "lightskyblue": [135, 206, 250],
      "lightslategray": [119, 136, 153],
      "lightslategrey": [119, 136, 153],
      "lightsteelblue": [176, 196, 222],
      "lightyellow": [255, 255, 224],
      "lime": [0, 255, 0],
      "limegreen": [50, 205, 50],
      "linen": [250, 240, 230],
      "magenta": [255, 0, 255],
      "maroon": [128, 0, 0],
      "mediumaquamarine": [102, 205, 170],
      "mediumblue": [0, 0, 205],
      "mediumorchid": [186, 85, 211],
      "mediumpurple": [147, 112, 219],
      "mediumseagreen": [60, 179, 113],
      "mediumslateblue": [123, 104, 238],
      "mediumspringgreen": [0, 250, 154],
      "mediumturquoise": [72, 209, 204],
      "mediumvioletred": [199, 21, 133],
      "midnightblue": [25, 25, 112],
      "mintcream": [245, 255, 250],
      "mistyrose": [255, 228, 225],
      "moccasin": [255, 228, 181],
      "navajowhite": [255, 222, 173],
      "navy": [0, 0, 128],
      "oldlace": [253, 245, 230],
      "olive": [128, 128, 0],
      "olivedrab": [107, 142, 35],
      "orange": [255, 165, 0],
      "orangered": [255, 69, 0],
      "orchid": [218, 112, 214],
      "palegoldenrod": [238, 232, 170],
      "palegreen": [152, 251, 152],
      "paleturquoise": [175, 238, 238],
      "palevioletred": [219, 112, 147],
      "papayawhip": [255, 239, 213],
      "peachpuff": [255, 218, 185],
      "peru": [205, 133, 63],
      "pink": [255, 192, 203],
      "plum": [221, 160, 221],
      "powderblue": [176, 224, 230],
      "purple": [128, 0, 128],
      "rebeccapurple": [102, 51, 153],
      "red": [255, 0, 0],
      "rosybrown": [188, 143, 143],
      "royalblue": [65, 105, 225],
      "saddlebrown": [139, 69, 19],
      "salmon": [250, 128, 114],
      "sandybrown": [244, 164, 96],
      "seagreen": [46, 139, 87],
      "seashell": [255, 245, 238],
      "sienna": [160, 82, 45],
      "silver": [192, 192, 192],
      "skyblue": [135, 206, 235],
      "slateblue": [106, 90, 205],
      "slategray": [112, 128, 144],
      "slategrey": [112, 128, 144],
      "snow": [255, 250, 250],
      "springgreen": [0, 255, 127],
      "steelblue": [70, 130, 180],
      "tan": [210, 180, 140],
      "teal": [0, 128, 128],
      "thistle": [216, 191, 216],
      "tomato": [255, 99, 71],
      "turquoise": [64, 224, 208],
      "violet": [238, 130, 238],
      "wheat": [245, 222, 179],
      "white": [255, 255, 255],
      "whitesmoke": [245, 245, 245],
      "yellow": [255, 255, 0],
      "yellowgreen": [154, 205, 50]
    };
    /***/
  },

  /***/
  "./node_modules/color-convert/route.js": function node_modulesColorConvertRouteJs(module, exports, __webpack_require__) {
    var conversions = __webpack_require__(
    /*! ./conversions */
    "./node_modules/color-convert/conversions.js");
    /*
    	this function routes a model to all other models.
    
    	all functions that are routed have a property `.conversion` attached
    	to the returned synthetic function. This property is an array
    	of strings, each with the steps in between the 'from' and 'to'
    	color models (inclusive).
    
    	conversions that are not possible simply are not included.
    */


    function buildGraph() {
      var graph = {}; // https://jsperf.com/object-keys-vs-for-in-with-closure/3

      var models = Object.keys(conversions);

      for (var len = models.length, i = 0; i < len; i++) {
        graph[models[i]] = {
          // http://jsperf.com/1-vs-infinity
          // micro-opt, but this is simple.
          distance: -1,
          parent: null
        };
      }

      return graph;
    } // https://en.wikipedia.org/wiki/Breadth-first_search


    function deriveBFS(fromModel) {
      var graph = buildGraph();
      var queue = [fromModel]; // unshift -> queue -> pop

      graph[fromModel].distance = 0;

      while (queue.length) {
        var current = queue.pop();
        var adjacents = Object.keys(conversions[current]);

        for (var len = adjacents.length, i = 0; i < len; i++) {
          var adjacent = adjacents[i];
          var node = graph[adjacent];

          if (node.distance === -1) {
            node.distance = graph[current].distance + 1;
            node.parent = current;
            queue.unshift(adjacent);
          }
        }
      }

      return graph;
    }

    function link(from, to) {
      return function (args) {
        return to(from(args));
      };
    }

    function wrapConversion(toModel, graph) {
      var path = [graph[toModel].parent, toModel];
      var fn = conversions[graph[toModel].parent][toModel];
      var cur = graph[toModel].parent;

      while (graph[cur].parent) {
        path.unshift(graph[cur].parent);
        fn = link(conversions[graph[cur].parent][cur], fn);
        cur = graph[cur].parent;
      }

      fn.conversion = path;
      return fn;
    }

    module.exports = function (fromModel) {
      var graph = deriveBFS(fromModel);
      var conversion = {};
      var models = Object.keys(graph);

      for (var len = models.length, i = 0; i < len; i++) {
        var toModel = models[i];
        var node = graph[toModel];

        if (node.parent === null) {
          // no possible conversion, or this node is the source model.
          continue;
        }

        conversion[toModel] = wrapConversion(toModel, graph);
      }

      return conversion;
    };
    /***/

  },

  /***/
  "./node_modules/color-name/index.js": function node_modulesColorNameIndexJs(module, exports, __webpack_require__) {
    "use strict";

    module.exports = {
      "aliceblue": [240, 248, 255],
      "antiquewhite": [250, 235, 215],
      "aqua": [0, 255, 255],
      "aquamarine": [127, 255, 212],
      "azure": [240, 255, 255],
      "beige": [245, 245, 220],
      "bisque": [255, 228, 196],
      "black": [0, 0, 0],
      "blanchedalmond": [255, 235, 205],
      "blue": [0, 0, 255],
      "blueviolet": [138, 43, 226],
      "brown": [165, 42, 42],
      "burlywood": [222, 184, 135],
      "cadetblue": [95, 158, 160],
      "chartreuse": [127, 255, 0],
      "chocolate": [210, 105, 30],
      "coral": [255, 127, 80],
      "cornflowerblue": [100, 149, 237],
      "cornsilk": [255, 248, 220],
      "crimson": [220, 20, 60],
      "cyan": [0, 255, 255],
      "darkblue": [0, 0, 139],
      "darkcyan": [0, 139, 139],
      "darkgoldenrod": [184, 134, 11],
      "darkgray": [169, 169, 169],
      "darkgreen": [0, 100, 0],
      "darkgrey": [169, 169, 169],
      "darkkhaki": [189, 183, 107],
      "darkmagenta": [139, 0, 139],
      "darkolivegreen": [85, 107, 47],
      "darkorange": [255, 140, 0],
      "darkorchid": [153, 50, 204],
      "darkred": [139, 0, 0],
      "darksalmon": [233, 150, 122],
      "darkseagreen": [143, 188, 143],
      "darkslateblue": [72, 61, 139],
      "darkslategray": [47, 79, 79],
      "darkslategrey": [47, 79, 79],
      "darkturquoise": [0, 206, 209],
      "darkviolet": [148, 0, 211],
      "deeppink": [255, 20, 147],
      "deepskyblue": [0, 191, 255],
      "dimgray": [105, 105, 105],
      "dimgrey": [105, 105, 105],
      "dodgerblue": [30, 144, 255],
      "firebrick": [178, 34, 34],
      "floralwhite": [255, 250, 240],
      "forestgreen": [34, 139, 34],
      "fuchsia": [255, 0, 255],
      "gainsboro": [220, 220, 220],
      "ghostwhite": [248, 248, 255],
      "gold": [255, 215, 0],
      "goldenrod": [218, 165, 32],
      "gray": [128, 128, 128],
      "green": [0, 128, 0],
      "greenyellow": [173, 255, 47],
      "grey": [128, 128, 128],
      "honeydew": [240, 255, 240],
      "hotpink": [255, 105, 180],
      "indianred": [205, 92, 92],
      "indigo": [75, 0, 130],
      "ivory": [255, 255, 240],
      "khaki": [240, 230, 140],
      "lavender": [230, 230, 250],
      "lavenderblush": [255, 240, 245],
      "lawngreen": [124, 252, 0],
      "lemonchiffon": [255, 250, 205],
      "lightblue": [173, 216, 230],
      "lightcoral": [240, 128, 128],
      "lightcyan": [224, 255, 255],
      "lightgoldenrodyellow": [250, 250, 210],
      "lightgray": [211, 211, 211],
      "lightgreen": [144, 238, 144],
      "lightgrey": [211, 211, 211],
      "lightpink": [255, 182, 193],
      "lightsalmon": [255, 160, 122],
      "lightseagreen": [32, 178, 170],
      "lightskyblue": [135, 206, 250],
      "lightslategray": [119, 136, 153],
      "lightslategrey": [119, 136, 153],
      "lightsteelblue": [176, 196, 222],
      "lightyellow": [255, 255, 224],
      "lime": [0, 255, 0],
      "limegreen": [50, 205, 50],
      "linen": [250, 240, 230],
      "magenta": [255, 0, 255],
      "maroon": [128, 0, 0],
      "mediumaquamarine": [102, 205, 170],
      "mediumblue": [0, 0, 205],
      "mediumorchid": [186, 85, 211],
      "mediumpurple": [147, 112, 219],
      "mediumseagreen": [60, 179, 113],
      "mediumslateblue": [123, 104, 238],
      "mediumspringgreen": [0, 250, 154],
      "mediumturquoise": [72, 209, 204],
      "mediumvioletred": [199, 21, 133],
      "midnightblue": [25, 25, 112],
      "mintcream": [245, 255, 250],
      "mistyrose": [255, 228, 225],
      "moccasin": [255, 228, 181],
      "navajowhite": [255, 222, 173],
      "navy": [0, 0, 128],
      "oldlace": [253, 245, 230],
      "olive": [128, 128, 0],
      "olivedrab": [107, 142, 35],
      "orange": [255, 165, 0],
      "orangered": [255, 69, 0],
      "orchid": [218, 112, 214],
      "palegoldenrod": [238, 232, 170],
      "palegreen": [152, 251, 152],
      "paleturquoise": [175, 238, 238],
      "palevioletred": [219, 112, 147],
      "papayawhip": [255, 239, 213],
      "peachpuff": [255, 218, 185],
      "peru": [205, 133, 63],
      "pink": [255, 192, 203],
      "plum": [221, 160, 221],
      "powderblue": [176, 224, 230],
      "purple": [128, 0, 128],
      "rebeccapurple": [102, 51, 153],
      "red": [255, 0, 0],
      "rosybrown": [188, 143, 143],
      "royalblue": [65, 105, 225],
      "saddlebrown": [139, 69, 19],
      "salmon": [250, 128, 114],
      "sandybrown": [244, 164, 96],
      "seagreen": [46, 139, 87],
      "seashell": [255, 245, 238],
      "sienna": [160, 82, 45],
      "silver": [192, 192, 192],
      "skyblue": [135, 206, 235],
      "slateblue": [106, 90, 205],
      "slategray": [112, 128, 144],
      "slategrey": [112, 128, 144],
      "snow": [255, 250, 250],
      "springgreen": [0, 255, 127],
      "steelblue": [70, 130, 180],
      "tan": [210, 180, 140],
      "teal": [0, 128, 128],
      "thistle": [216, 191, 216],
      "tomato": [255, 99, 71],
      "turquoise": [64, 224, 208],
      "violet": [238, 130, 238],
      "wheat": [245, 222, 179],
      "white": [255, 255, 255],
      "whitesmoke": [245, 245, 245],
      "yellow": [255, 255, 0],
      "yellowgreen": [154, 205, 50]
    };
    /***/
  },

  /***/
  "./node_modules/lodash/lodash.js": function node_modulesLodashLodashJs(module, exports, __webpack_require__) {
    /* WEBPACK VAR INJECTION */
    (function (module) {
      var __WEBPACK_AMD_DEFINE_RESULT__;
      /**
      * @license
      * Lodash <https://lodash.com/>
      * Copyright OpenJS Foundation and other contributors <https://openjsf.org/>
      * Released under MIT license <https://lodash.com/license>
      * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
      * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
      */


      ;
      (function () {
        /** Used as a safe reference for `undefined` in pre-ES5 environments. */
        var undefined;
        /** Used as the semantic version number. */

        var VERSION = '4.17.21';
        /** Used as the size to enable large array optimizations. */

        var LARGE_ARRAY_SIZE = 200;
        /** Error message constants. */

        var CORE_ERROR_TEXT = 'Unsupported core-js use. Try https://npms.io/search?q=ponyfill.',
            FUNC_ERROR_TEXT = 'Expected a function',
            INVALID_TEMPL_VAR_ERROR_TEXT = 'Invalid `variable` option passed into `_.template`';
        /** Used to stand-in for `undefined` hash values. */

        var HASH_UNDEFINED = '__lodash_hash_undefined__';
        /** Used as the maximum memoize cache size. */

        var MAX_MEMOIZE_SIZE = 500;
        /** Used as the internal argument placeholder. */

        var PLACEHOLDER = '__lodash_placeholder__';
        /** Used to compose bitmasks for cloning. */

        var CLONE_DEEP_FLAG = 1,
            CLONE_FLAT_FLAG = 2,
            CLONE_SYMBOLS_FLAG = 4;
        /** Used to compose bitmasks for value comparisons. */

        var COMPARE_PARTIAL_FLAG = 1,
            COMPARE_UNORDERED_FLAG = 2;
        /** Used to compose bitmasks for function metadata. */

        var WRAP_BIND_FLAG = 1,
            WRAP_BIND_KEY_FLAG = 2,
            WRAP_CURRY_BOUND_FLAG = 4,
            WRAP_CURRY_FLAG = 8,
            WRAP_CURRY_RIGHT_FLAG = 16,
            WRAP_PARTIAL_FLAG = 32,
            WRAP_PARTIAL_RIGHT_FLAG = 64,
            WRAP_ARY_FLAG = 128,
            WRAP_REARG_FLAG = 256,
            WRAP_FLIP_FLAG = 512;
        /** Used as default options for `_.truncate`. */

        var DEFAULT_TRUNC_LENGTH = 30,
            DEFAULT_TRUNC_OMISSION = '...';
        /** Used to detect hot functions by number of calls within a span of milliseconds. */

        var HOT_COUNT = 800,
            HOT_SPAN = 16;
        /** Used to indicate the type of lazy iteratees. */

        var LAZY_FILTER_FLAG = 1,
            LAZY_MAP_FLAG = 2,
            LAZY_WHILE_FLAG = 3;
        /** Used as references for various `Number` constants. */

        var INFINITY = 1 / 0,
            MAX_SAFE_INTEGER = 9007199254740991,
            MAX_INTEGER = 1.7976931348623157e+308,
            NAN = 0 / 0;
        /** Used as references for the maximum length and index of an array. */

        var MAX_ARRAY_LENGTH = 4294967295,
            MAX_ARRAY_INDEX = MAX_ARRAY_LENGTH - 1,
            HALF_MAX_ARRAY_LENGTH = MAX_ARRAY_LENGTH >>> 1;
        /** Used to associate wrap methods with their bit flags. */

        var wrapFlags = [['ary', WRAP_ARY_FLAG], ['bind', WRAP_BIND_FLAG], ['bindKey', WRAP_BIND_KEY_FLAG], ['curry', WRAP_CURRY_FLAG], ['curryRight', WRAP_CURRY_RIGHT_FLAG], ['flip', WRAP_FLIP_FLAG], ['partial', WRAP_PARTIAL_FLAG], ['partialRight', WRAP_PARTIAL_RIGHT_FLAG], ['rearg', WRAP_REARG_FLAG]];
        /** `Object#toString` result references. */

        var argsTag = '[object Arguments]',
            arrayTag = '[object Array]',
            asyncTag = '[object AsyncFunction]',
            boolTag = '[object Boolean]',
            dateTag = '[object Date]',
            domExcTag = '[object DOMException]',
            errorTag = '[object Error]',
            funcTag = '[object Function]',
            genTag = '[object GeneratorFunction]',
            mapTag = '[object Map]',
            numberTag = '[object Number]',
            nullTag = '[object Null]',
            objectTag = '[object Object]',
            promiseTag = '[object Promise]',
            proxyTag = '[object Proxy]',
            regexpTag = '[object RegExp]',
            setTag = '[object Set]',
            stringTag = '[object String]',
            symbolTag = '[object Symbol]',
            undefinedTag = '[object Undefined]',
            weakMapTag = '[object WeakMap]',
            weakSetTag = '[object WeakSet]';
        var arrayBufferTag = '[object ArrayBuffer]',
            dataViewTag = '[object DataView]',
            float32Tag = '[object Float32Array]',
            float64Tag = '[object Float64Array]',
            int8Tag = '[object Int8Array]',
            int16Tag = '[object Int16Array]',
            int32Tag = '[object Int32Array]',
            uint8Tag = '[object Uint8Array]',
            uint8ClampedTag = '[object Uint8ClampedArray]',
            uint16Tag = '[object Uint16Array]',
            uint32Tag = '[object Uint32Array]';
        /** Used to match empty string literals in compiled template source. */

        var reEmptyStringLeading = /\b__p \+= '';/g,
            reEmptyStringMiddle = /\b(__p \+=) '' \+/g,
            reEmptyStringTrailing = /(__e\(.*?\)|\b__t\)) \+\n'';/g;
        /** Used to match HTML entities and HTML characters. */

        var reEscapedHtml = /&(?:amp|lt|gt|quot|#39);/g,
            reUnescapedHtml = /[&<>"']/g,
            reHasEscapedHtml = RegExp(reEscapedHtml.source),
            reHasUnescapedHtml = RegExp(reUnescapedHtml.source);
        /** Used to match template delimiters. */

        var reEscape = /<%-([\s\S]+?)%>/g,
            reEvaluate = /<%([\s\S]+?)%>/g,
            reInterpolate = /<%=([\s\S]+?)%>/g;
        /** Used to match property names within property paths. */

        var reIsDeepProp = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,
            reIsPlainProp = /^\w*$/,
            rePropName = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g;
        /**
         * Used to match `RegExp`
         * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).
         */

        var reRegExpChar = /[\\^$.*+?()[\]{}|]/g,
            reHasRegExpChar = RegExp(reRegExpChar.source);
        /** Used to match leading whitespace. */

        var reTrimStart = /^\s+/;
        /** Used to match a single whitespace character. */

        var reWhitespace = /\s/;
        /** Used to match wrap detail comments. */

        var reWrapComment = /\{(?:\n\/\* \[wrapped with .+\] \*\/)?\n?/,
            reWrapDetails = /\{\n\/\* \[wrapped with (.+)\] \*/,
            reSplitDetails = /,? & /;
        /** Used to match words composed of alphanumeric characters. */

        var reAsciiWord = /[^\x00-\x2f\x3a-\x40\x5b-\x60\x7b-\x7f]+/g;
        /**
         * Used to validate the `validate` option in `_.template` variable.
         *
         * Forbids characters which could potentially change the meaning of the function argument definition:
         * - "()," (modification of function parameters)
         * - "=" (default value)
         * - "[]{}" (destructuring of function parameters)
         * - "/" (beginning of a comment)
         * - whitespace
         */

        var reForbiddenIdentifierChars = /[()=,{}\[\]\/\s]/;
        /** Used to match backslashes in property paths. */

        var reEscapeChar = /\\(\\)?/g;
        /**
         * Used to match
         * [ES template delimiters](http://ecma-international.org/ecma-262/7.0/#sec-template-literal-lexical-components).
         */

        var reEsTemplate = /\$\{([^\\}]*(?:\\.[^\\}]*)*)\}/g;
        /** Used to match `RegExp` flags from their coerced string values. */

        var reFlags = /\w*$/;
        /** Used to detect bad signed hexadecimal string values. */

        var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;
        /** Used to detect binary string values. */

        var reIsBinary = /^0b[01]+$/i;
        /** Used to detect host constructors (Safari). */

        var reIsHostCtor = /^\[object .+?Constructor\]$/;
        /** Used to detect octal string values. */

        var reIsOctal = /^0o[0-7]+$/i;
        /** Used to detect unsigned integer values. */

        var reIsUint = /^(?:0|[1-9]\d*)$/;
        /** Used to match Latin Unicode letters (excluding mathematical operators). */

        var reLatin = /[\xc0-\xd6\xd8-\xf6\xf8-\xff\u0100-\u017f]/g;
        /** Used to ensure capturing order of template delimiters. */

        var reNoMatch = /($^)/;
        /** Used to match unescaped characters in compiled string literals. */

        var reUnescapedString = /['\n\r\u2028\u2029\\]/g;
        /** Used to compose unicode character classes. */

        var rsAstralRange = "\\ud800-\\udfff",
            rsComboMarksRange = "\\u0300-\\u036f",
            reComboHalfMarksRange = "\\ufe20-\\ufe2f",
            rsComboSymbolsRange = "\\u20d0-\\u20ff",
            rsComboRange = rsComboMarksRange + reComboHalfMarksRange + rsComboSymbolsRange,
            rsDingbatRange = "\\u2700-\\u27bf",
            rsLowerRange = 'a-z\\xdf-\\xf6\\xf8-\\xff',
            rsMathOpRange = '\\xac\\xb1\\xd7\\xf7',
            rsNonCharRange = '\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf',
            rsPunctuationRange = "\\u2000-\\u206f",
            rsSpaceRange = " \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000",
            rsUpperRange = 'A-Z\\xc0-\\xd6\\xd8-\\xde',
            rsVarRange = "\\ufe0e\\ufe0f",
            rsBreakRange = rsMathOpRange + rsNonCharRange + rsPunctuationRange + rsSpaceRange;
        /** Used to compose unicode capture groups. */

        var rsApos = "['\u2019]",
            rsAstral = '[' + rsAstralRange + ']',
            rsBreak = '[' + rsBreakRange + ']',
            rsCombo = '[' + rsComboRange + ']',
            rsDigits = '\\d+',
            rsDingbat = '[' + rsDingbatRange + ']',
            rsLower = '[' + rsLowerRange + ']',
            rsMisc = '[^' + rsAstralRange + rsBreakRange + rsDigits + rsDingbatRange + rsLowerRange + rsUpperRange + ']',
            rsFitz = "\\ud83c[\\udffb-\\udfff]",
            rsModifier = '(?:' + rsCombo + '|' + rsFitz + ')',
            rsNonAstral = '[^' + rsAstralRange + ']',
            rsRegional = "(?:\\ud83c[\\udde6-\\uddff]){2}",
            rsSurrPair = "[\\ud800-\\udbff][\\udc00-\\udfff]",
            rsUpper = '[' + rsUpperRange + ']',
            rsZWJ = "\\u200d";
        /** Used to compose unicode regexes. */

        var rsMiscLower = '(?:' + rsLower + '|' + rsMisc + ')',
            rsMiscUpper = '(?:' + rsUpper + '|' + rsMisc + ')',
            rsOptContrLower = '(?:' + rsApos + '(?:d|ll|m|re|s|t|ve))?',
            rsOptContrUpper = '(?:' + rsApos + '(?:D|LL|M|RE|S|T|VE))?',
            reOptMod = rsModifier + '?',
            rsOptVar = '[' + rsVarRange + ']?',
            rsOptJoin = '(?:' + rsZWJ + '(?:' + [rsNonAstral, rsRegional, rsSurrPair].join('|') + ')' + rsOptVar + reOptMod + ')*',
            rsOrdLower = '\\d*(?:1st|2nd|3rd|(?![123])\\dth)(?=\\b|[A-Z_])',
            rsOrdUpper = '\\d*(?:1ST|2ND|3RD|(?![123])\\dTH)(?=\\b|[a-z_])',
            rsSeq = rsOptVar + reOptMod + rsOptJoin,
            rsEmoji = '(?:' + [rsDingbat, rsRegional, rsSurrPair].join('|') + ')' + rsSeq,
            rsSymbol = '(?:' + [rsNonAstral + rsCombo + '?', rsCombo, rsRegional, rsSurrPair, rsAstral].join('|') + ')';
        /** Used to match apostrophes. */

        var reApos = RegExp(rsApos, 'g');
        /**
         * Used to match [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks) and
         * [combining diacritical marks for symbols](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks_for_Symbols).
         */

        var reComboMark = RegExp(rsCombo, 'g');
        /** Used to match [string symbols](https://mathiasbynens.be/notes/javascript-unicode). */

        var reUnicode = RegExp(rsFitz + '(?=' + rsFitz + ')|' + rsSymbol + rsSeq, 'g');
        /** Used to match complex or compound words. */

        var reUnicodeWord = RegExp([rsUpper + '?' + rsLower + '+' + rsOptContrLower + '(?=' + [rsBreak, rsUpper, '$'].join('|') + ')', rsMiscUpper + '+' + rsOptContrUpper + '(?=' + [rsBreak, rsUpper + rsMiscLower, '$'].join('|') + ')', rsUpper + '?' + rsMiscLower + '+' + rsOptContrLower, rsUpper + '+' + rsOptContrUpper, rsOrdUpper, rsOrdLower, rsDigits, rsEmoji].join('|'), 'g');
        /** Used to detect strings with [zero-width joiners or code points from the astral planes](http://eev.ee/blog/2015/09/12/dark-corners-of-unicode/). */

        var reHasUnicode = RegExp('[' + rsZWJ + rsAstralRange + rsComboRange + rsVarRange + ']');
        /** Used to detect strings that need a more robust regexp to match words. */

        var reHasUnicodeWord = /[a-z][A-Z]|[A-Z]{2}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/;
        /** Used to assign default `context` object properties. */

        var contextProps = ['Array', 'Buffer', 'DataView', 'Date', 'Error', 'Float32Array', 'Float64Array', 'Function', 'Int8Array', 'Int16Array', 'Int32Array', 'Map', 'Math', 'Object', 'Promise', 'RegExp', 'Set', 'String', 'Symbol', 'TypeError', 'Uint8Array', 'Uint8ClampedArray', 'Uint16Array', 'Uint32Array', 'WeakMap', '_', 'clearTimeout', 'isFinite', 'parseInt', 'setTimeout'];
        /** Used to make template sourceURLs easier to identify. */

        var templateCounter = -1;
        /** Used to identify `toStringTag` values of typed arrays. */

        var typedArrayTags = {};
        typedArrayTags[float32Tag] = typedArrayTags[float64Tag] = typedArrayTags[int8Tag] = typedArrayTags[int16Tag] = typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] = typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] = typedArrayTags[uint32Tag] = true;
        typedArrayTags[argsTag] = typedArrayTags[arrayTag] = typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] = typedArrayTags[dataViewTag] = typedArrayTags[dateTag] = typedArrayTags[errorTag] = typedArrayTags[funcTag] = typedArrayTags[mapTag] = typedArrayTags[numberTag] = typedArrayTags[objectTag] = typedArrayTags[regexpTag] = typedArrayTags[setTag] = typedArrayTags[stringTag] = typedArrayTags[weakMapTag] = false;
        /** Used to identify `toStringTag` values supported by `_.clone`. */

        var cloneableTags = {};
        cloneableTags[argsTag] = cloneableTags[arrayTag] = cloneableTags[arrayBufferTag] = cloneableTags[dataViewTag] = cloneableTags[boolTag] = cloneableTags[dateTag] = cloneableTags[float32Tag] = cloneableTags[float64Tag] = cloneableTags[int8Tag] = cloneableTags[int16Tag] = cloneableTags[int32Tag] = cloneableTags[mapTag] = cloneableTags[numberTag] = cloneableTags[objectTag] = cloneableTags[regexpTag] = cloneableTags[setTag] = cloneableTags[stringTag] = cloneableTags[symbolTag] = cloneableTags[uint8Tag] = cloneableTags[uint8ClampedTag] = cloneableTags[uint16Tag] = cloneableTags[uint32Tag] = true;
        cloneableTags[errorTag] = cloneableTags[funcTag] = cloneableTags[weakMapTag] = false;
        /** Used to map Latin Unicode letters to basic Latin letters. */

        var deburredLetters = {
          // Latin-1 Supplement block.
          '\xc0': 'A',
          '\xc1': 'A',
          '\xc2': 'A',
          '\xc3': 'A',
          '\xc4': 'A',
          '\xc5': 'A',
          '\xe0': 'a',
          '\xe1': 'a',
          '\xe2': 'a',
          '\xe3': 'a',
          '\xe4': 'a',
          '\xe5': 'a',
          '\xc7': 'C',
          '\xe7': 'c',
          '\xd0': 'D',
          '\xf0': 'd',
          '\xc8': 'E',
          '\xc9': 'E',
          '\xca': 'E',
          '\xcb': 'E',
          '\xe8': 'e',
          '\xe9': 'e',
          '\xea': 'e',
          '\xeb': 'e',
          '\xcc': 'I',
          '\xcd': 'I',
          '\xce': 'I',
          '\xcf': 'I',
          '\xec': 'i',
          '\xed': 'i',
          '\xee': 'i',
          '\xef': 'i',
          '\xd1': 'N',
          '\xf1': 'n',
          '\xd2': 'O',
          '\xd3': 'O',
          '\xd4': 'O',
          '\xd5': 'O',
          '\xd6': 'O',
          '\xd8': 'O',
          '\xf2': 'o',
          '\xf3': 'o',
          '\xf4': 'o',
          '\xf5': 'o',
          '\xf6': 'o',
          '\xf8': 'o',
          '\xd9': 'U',
          '\xda': 'U',
          '\xdb': 'U',
          '\xdc': 'U',
          '\xf9': 'u',
          '\xfa': 'u',
          '\xfb': 'u',
          '\xfc': 'u',
          '\xdd': 'Y',
          '\xfd': 'y',
          '\xff': 'y',
          '\xc6': 'Ae',
          '\xe6': 'ae',
          '\xde': 'Th',
          '\xfe': 'th',
          '\xdf': 'ss',
          // Latin Extended-A block.
          "\u0100": 'A',
          "\u0102": 'A',
          "\u0104": 'A',
          "\u0101": 'a',
          "\u0103": 'a',
          "\u0105": 'a',
          "\u0106": 'C',
          "\u0108": 'C',
          "\u010A": 'C',
          "\u010C": 'C',
          "\u0107": 'c',
          "\u0109": 'c',
          "\u010B": 'c',
          "\u010D": 'c',
          "\u010E": 'D',
          "\u0110": 'D',
          "\u010F": 'd',
          "\u0111": 'd',
          "\u0112": 'E',
          "\u0114": 'E',
          "\u0116": 'E',
          "\u0118": 'E',
          "\u011A": 'E',
          "\u0113": 'e',
          "\u0115": 'e',
          "\u0117": 'e',
          "\u0119": 'e',
          "\u011B": 'e',
          "\u011C": 'G',
          "\u011E": 'G',
          "\u0120": 'G',
          "\u0122": 'G',
          "\u011D": 'g',
          "\u011F": 'g',
          "\u0121": 'g',
          "\u0123": 'g',
          "\u0124": 'H',
          "\u0126": 'H',
          "\u0125": 'h',
          "\u0127": 'h',
          "\u0128": 'I',
          "\u012A": 'I',
          "\u012C": 'I',
          "\u012E": 'I',
          "\u0130": 'I',
          "\u0129": 'i',
          "\u012B": 'i',
          "\u012D": 'i',
          "\u012F": 'i',
          "\u0131": 'i',
          "\u0134": 'J',
          "\u0135": 'j',
          "\u0136": 'K',
          "\u0137": 'k',
          "\u0138": 'k',
          "\u0139": 'L',
          "\u013B": 'L',
          "\u013D": 'L',
          "\u013F": 'L',
          "\u0141": 'L',
          "\u013A": 'l',
          "\u013C": 'l',
          "\u013E": 'l',
          "\u0140": 'l',
          "\u0142": 'l',
          "\u0143": 'N',
          "\u0145": 'N',
          "\u0147": 'N',
          "\u014A": 'N',
          "\u0144": 'n',
          "\u0146": 'n',
          "\u0148": 'n',
          "\u014B": 'n',
          "\u014C": 'O',
          "\u014E": 'O',
          "\u0150": 'O',
          "\u014D": 'o',
          "\u014F": 'o',
          "\u0151": 'o',
          "\u0154": 'R',
          "\u0156": 'R',
          "\u0158": 'R',
          "\u0155": 'r',
          "\u0157": 'r',
          "\u0159": 'r',
          "\u015A": 'S',
          "\u015C": 'S',
          "\u015E": 'S',
          "\u0160": 'S',
          "\u015B": 's',
          "\u015D": 's',
          "\u015F": 's',
          "\u0161": 's',
          "\u0162": 'T',
          "\u0164": 'T',
          "\u0166": 'T',
          "\u0163": 't',
          "\u0165": 't',
          "\u0167": 't',
          "\u0168": 'U',
          "\u016A": 'U',
          "\u016C": 'U',
          "\u016E": 'U',
          "\u0170": 'U',
          "\u0172": 'U',
          "\u0169": 'u',
          "\u016B": 'u',
          "\u016D": 'u',
          "\u016F": 'u',
          "\u0171": 'u',
          "\u0173": 'u',
          "\u0174": 'W',
          "\u0175": 'w',
          "\u0176": 'Y',
          "\u0177": 'y',
          "\u0178": 'Y',
          "\u0179": 'Z',
          "\u017B": 'Z',
          "\u017D": 'Z',
          "\u017A": 'z',
          "\u017C": 'z',
          "\u017E": 'z',
          "\u0132": 'IJ',
          "\u0133": 'ij',
          "\u0152": 'Oe',
          "\u0153": 'oe',
          "\u0149": "'n",
          "\u017F": 's'
        };
        /** Used to map characters to HTML entities. */

        var htmlEscapes = {
          '&': '&amp;',
          '<': '&lt;',
          '>': '&gt;',
          '"': '&quot;',
          "'": '&#39;'
        };
        /** Used to map HTML entities to characters. */

        var htmlUnescapes = {
          '&amp;': '&',
          '&lt;': '<',
          '&gt;': '>',
          '&quot;': '"',
          '&#39;': "'"
        };
        /** Used to escape characters for inclusion in compiled string literals. */

        var stringEscapes = {
          '\\': '\\',
          "'": "'",
          '\n': 'n',
          '\r': 'r',
          "\u2028": 'u2028',
          "\u2029": 'u2029'
        };
        /** Built-in method references without a dependency on `root`. */

        var freeParseFloat = parseFloat,
            freeParseInt = parseInt;
        /** Detect free variable `global` from Node.js. */

        var freeGlobal = typeof global == 'object' && global && global.Object === Object && global;
        /** Detect free variable `self`. */

        var freeSelf = typeof self == 'object' && self && self.Object === Object && self;
        /** Used as a reference to the global object. */

        var root = freeGlobal || freeSelf || Function('return this')();
        /** Detect free variable `exports`. */

        var freeExports = true && exports && !exports.nodeType && exports;
        /** Detect free variable `module`. */

        var freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;
        /** Detect the popular CommonJS extension `module.exports`. */

        var moduleExports = freeModule && freeModule.exports === freeExports;
        /** Detect free variable `process` from Node.js. */

        var freeProcess = moduleExports && freeGlobal.process;
        /** Used to access faster Node.js helpers. */

        var nodeUtil = function () {
          try {
            // Use `util.types` for Node.js 10+.
            var types = freeModule && freeModule.require && freeModule.require('util').types;

            if (types) {
              return types;
            } // Legacy `process.binding('util')` for Node.js < 10.


            return freeProcess && freeProcess.binding && freeProcess.binding('util');
          } catch (e) {}
        }();
        /* Node.js helper references. */


        var nodeIsArrayBuffer = nodeUtil && nodeUtil.isArrayBuffer,
            nodeIsDate = nodeUtil && nodeUtil.isDate,
            nodeIsMap = nodeUtil && nodeUtil.isMap,
            nodeIsRegExp = nodeUtil && nodeUtil.isRegExp,
            nodeIsSet = nodeUtil && nodeUtil.isSet,
            nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;
        /*--------------------------------------------------------------------------*/

        /**
         * A faster alternative to `Function#apply`, this function invokes `func`
         * with the `this` binding of `thisArg` and the arguments of `args`.
         *
         * @private
         * @param {Function} func The function to invoke.
         * @param {*} thisArg The `this` binding of `func`.
         * @param {Array} args The arguments to invoke `func` with.
         * @returns {*} Returns the result of `func`.
         */

        function apply(func, thisArg, args) {
          switch (args.length) {
            case 0:
              return func.call(thisArg);

            case 1:
              return func.call(thisArg, args[0]);

            case 2:
              return func.call(thisArg, args[0], args[1]);

            case 3:
              return func.call(thisArg, args[0], args[1], args[2]);
          }

          return func.apply(thisArg, args);
        }
        /**
         * A specialized version of `baseAggregator` for arrays.
         *
         * @private
         * @param {Array} [array] The array to iterate over.
         * @param {Function} setter The function to set `accumulator` values.
         * @param {Function} iteratee The iteratee to transform keys.
         * @param {Object} accumulator The initial aggregated object.
         * @returns {Function} Returns `accumulator`.
         */


        function arrayAggregator(array, setter, iteratee, accumulator) {
          var index = -1,
              length = array == null ? 0 : array.length;

          while (++index < length) {
            var value = array[index];
            setter(accumulator, value, iteratee(value), array);
          }

          return accumulator;
        }
        /**
         * A specialized version of `_.forEach` for arrays without support for
         * iteratee shorthands.
         *
         * @private
         * @param {Array} [array] The array to iterate over.
         * @param {Function} iteratee The function invoked per iteration.
         * @returns {Array} Returns `array`.
         */


        function arrayEach(array, iteratee) {
          var index = -1,
              length = array == null ? 0 : array.length;

          while (++index < length) {
            if (iteratee(array[index], index, array) === false) {
              break;
            }
          }

          return array;
        }
        /**
         * A specialized version of `_.forEachRight` for arrays without support for
         * iteratee shorthands.
         *
         * @private
         * @param {Array} [array] The array to iterate over.
         * @param {Function} iteratee The function invoked per iteration.
         * @returns {Array} Returns `array`.
         */


        function arrayEachRight(array, iteratee) {
          var length = array == null ? 0 : array.length;

          while (length--) {
            if (iteratee(array[length], length, array) === false) {
              break;
            }
          }

          return array;
        }
        /**
         * A specialized version of `_.every` for arrays without support for
         * iteratee shorthands.
         *
         * @private
         * @param {Array} [array] The array to iterate over.
         * @param {Function} predicate The function invoked per iteration.
         * @returns {boolean} Returns `true` if all elements pass the predicate check,
         *  else `false`.
         */


        function arrayEvery(array, predicate) {
          var index = -1,
              length = array == null ? 0 : array.length;

          while (++index < length) {
            if (!predicate(array[index], index, array)) {
              return false;
            }
          }

          return true;
        }
        /**
         * A specialized version of `_.filter` for arrays without support for
         * iteratee shorthands.
         *
         * @private
         * @param {Array} [array] The array to iterate over.
         * @param {Function} predicate The function invoked per iteration.
         * @returns {Array} Returns the new filtered array.
         */


        function arrayFilter(array, predicate) {
          var index = -1,
              length = array == null ? 0 : array.length,
              resIndex = 0,
              result = [];

          while (++index < length) {
            var value = array[index];

            if (predicate(value, index, array)) {
              result[resIndex++] = value;
            }
          }

          return result;
        }
        /**
         * A specialized version of `_.includes` for arrays without support for
         * specifying an index to search from.
         *
         * @private
         * @param {Array} [array] The array to inspect.
         * @param {*} target The value to search for.
         * @returns {boolean} Returns `true` if `target` is found, else `false`.
         */


        function arrayIncludes(array, value) {
          var length = array == null ? 0 : array.length;
          return !!length && baseIndexOf(array, value, 0) > -1;
        }
        /**
         * This function is like `arrayIncludes` except that it accepts a comparator.
         *
         * @private
         * @param {Array} [array] The array to inspect.
         * @param {*} target The value to search for.
         * @param {Function} comparator The comparator invoked per element.
         * @returns {boolean} Returns `true` if `target` is found, else `false`.
         */


        function arrayIncludesWith(array, value, comparator) {
          var index = -1,
              length = array == null ? 0 : array.length;

          while (++index < length) {
            if (comparator(value, array[index])) {
              return true;
            }
          }

          return false;
        }
        /**
         * A specialized version of `_.map` for arrays without support for iteratee
         * shorthands.
         *
         * @private
         * @param {Array} [array] The array to iterate over.
         * @param {Function} iteratee The function invoked per iteration.
         * @returns {Array} Returns the new mapped array.
         */


        function arrayMap(array, iteratee) {
          var index = -1,
              length = array == null ? 0 : array.length,
              result = Array(length);

          while (++index < length) {
            result[index] = iteratee(array[index], index, array);
          }

          return result;
        }
        /**
         * Appends the elements of `values` to `array`.
         *
         * @private
         * @param {Array} array The array to modify.
         * @param {Array} values The values to append.
         * @returns {Array} Returns `array`.
         */


        function arrayPush(array, values) {
          var index = -1,
              length = values.length,
              offset = array.length;

          while (++index < length) {
            array[offset + index] = values[index];
          }

          return array;
        }
        /**
         * A specialized version of `_.reduce` for arrays without support for
         * iteratee shorthands.
         *
         * @private
         * @param {Array} [array] The array to iterate over.
         * @param {Function} iteratee The function invoked per iteration.
         * @param {*} [accumulator] The initial value.
         * @param {boolean} [initAccum] Specify using the first element of `array` as
         *  the initial value.
         * @returns {*} Returns the accumulated value.
         */


        function arrayReduce(array, iteratee, accumulator, initAccum) {
          var index = -1,
              length = array == null ? 0 : array.length;

          if (initAccum && length) {
            accumulator = array[++index];
          }

          while (++index < length) {
            accumulator = iteratee(accumulator, array[index], index, array);
          }

          return accumulator;
        }
        /**
         * A specialized version of `_.reduceRight` for arrays without support for
         * iteratee shorthands.
         *
         * @private
         * @param {Array} [array] The array to iterate over.
         * @param {Function} iteratee The function invoked per iteration.
         * @param {*} [accumulator] The initial value.
         * @param {boolean} [initAccum] Specify using the last element of `array` as
         *  the initial value.
         * @returns {*} Returns the accumulated value.
         */


        function arrayReduceRight(array, iteratee, accumulator, initAccum) {
          var length = array == null ? 0 : array.length;

          if (initAccum && length) {
            accumulator = array[--length];
          }

          while (length--) {
            accumulator = iteratee(accumulator, array[length], length, array);
          }

          return accumulator;
        }
        /**
         * A specialized version of `_.some` for arrays without support for iteratee
         * shorthands.
         *
         * @private
         * @param {Array} [array] The array to iterate over.
         * @param {Function} predicate The function invoked per iteration.
         * @returns {boolean} Returns `true` if any element passes the predicate check,
         *  else `false`.
         */


        function arraySome(array, predicate) {
          var index = -1,
              length = array == null ? 0 : array.length;

          while (++index < length) {
            if (predicate(array[index], index, array)) {
              return true;
            }
          }

          return false;
        }
        /**
         * Gets the size of an ASCII `string`.
         *
         * @private
         * @param {string} string The string inspect.
         * @returns {number} Returns the string size.
         */


        var asciiSize = baseProperty('length');
        /**
         * Converts an ASCII `string` to an array.
         *
         * @private
         * @param {string} string The string to convert.
         * @returns {Array} Returns the converted array.
         */

        function asciiToArray(string) {
          return string.split('');
        }
        /**
         * Splits an ASCII `string` into an array of its words.
         *
         * @private
         * @param {string} The string to inspect.
         * @returns {Array} Returns the words of `string`.
         */


        function asciiWords(string) {
          return string.match(reAsciiWord) || [];
        }
        /**
         * The base implementation of methods like `_.findKey` and `_.findLastKey`,
         * without support for iteratee shorthands, which iterates over `collection`
         * using `eachFunc`.
         *
         * @private
         * @param {Array|Object} collection The collection to inspect.
         * @param {Function} predicate The function invoked per iteration.
         * @param {Function} eachFunc The function to iterate over `collection`.
         * @returns {*} Returns the found element or its key, else `undefined`.
         */


        function baseFindKey(collection, predicate, eachFunc) {
          var result;
          eachFunc(collection, function (value, key, collection) {
            if (predicate(value, key, collection)) {
              result = key;
              return false;
            }
          });
          return result;
        }
        /**
         * The base implementation of `_.findIndex` and `_.findLastIndex` without
         * support for iteratee shorthands.
         *
         * @private
         * @param {Array} array The array to inspect.
         * @param {Function} predicate The function invoked per iteration.
         * @param {number} fromIndex The index to search from.
         * @param {boolean} [fromRight] Specify iterating from right to left.
         * @returns {number} Returns the index of the matched value, else `-1`.
         */


        function baseFindIndex(array, predicate, fromIndex, fromRight) {
          var length = array.length,
              index = fromIndex + (fromRight ? 1 : -1);

          while (fromRight ? index-- : ++index < length) {
            if (predicate(array[index], index, array)) {
              return index;
            }
          }

          return -1;
        }
        /**
         * The base implementation of `_.indexOf` without `fromIndex` bounds checks.
         *
         * @private
         * @param {Array} array The array to inspect.
         * @param {*} value The value to search for.
         * @param {number} fromIndex The index to search from.
         * @returns {number} Returns the index of the matched value, else `-1`.
         */


        function baseIndexOf(array, value, fromIndex) {
          return value === value ? strictIndexOf(array, value, fromIndex) : baseFindIndex(array, baseIsNaN, fromIndex);
        }
        /**
         * This function is like `baseIndexOf` except that it accepts a comparator.
         *
         * @private
         * @param {Array} array The array to inspect.
         * @param {*} value The value to search for.
         * @param {number} fromIndex The index to search from.
         * @param {Function} comparator The comparator invoked per element.
         * @returns {number} Returns the index of the matched value, else `-1`.
         */


        function baseIndexOfWith(array, value, fromIndex, comparator) {
          var index = fromIndex - 1,
              length = array.length;

          while (++index < length) {
            if (comparator(array[index], value)) {
              return index;
            }
          }

          return -1;
        }
        /**
         * The base implementation of `_.isNaN` without support for number objects.
         *
         * @private
         * @param {*} value The value to check.
         * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.
         */


        function baseIsNaN(value) {
          return value !== value;
        }
        /**
         * The base implementation of `_.mean` and `_.meanBy` without support for
         * iteratee shorthands.
         *
         * @private
         * @param {Array} array The array to iterate over.
         * @param {Function} iteratee The function invoked per iteration.
         * @returns {number} Returns the mean.
         */


        function baseMean(array, iteratee) {
          var length = array == null ? 0 : array.length;
          return length ? baseSum(array, iteratee) / length : NAN;
        }
        /**
         * The base implementation of `_.property` without support for deep paths.
         *
         * @private
         * @param {string} key The key of the property to get.
         * @returns {Function} Returns the new accessor function.
         */


        function baseProperty(key) {
          return function (object) {
            return object == null ? undefined : object[key];
          };
        }
        /**
         * The base implementation of `_.propertyOf` without support for deep paths.
         *
         * @private
         * @param {Object} object The object to query.
         * @returns {Function} Returns the new accessor function.
         */


        function basePropertyOf(object) {
          return function (key) {
            return object == null ? undefined : object[key];
          };
        }
        /**
         * The base implementation of `_.reduce` and `_.reduceRight`, without support
         * for iteratee shorthands, which iterates over `collection` using `eachFunc`.
         *
         * @private
         * @param {Array|Object} collection The collection to iterate over.
         * @param {Function} iteratee The function invoked per iteration.
         * @param {*} accumulator The initial value.
         * @param {boolean} initAccum Specify using the first or last element of
         *  `collection` as the initial value.
         * @param {Function} eachFunc The function to iterate over `collection`.
         * @returns {*} Returns the accumulated value.
         */


        function baseReduce(collection, iteratee, accumulator, initAccum, eachFunc) {
          eachFunc(collection, function (value, index, collection) {
            accumulator = initAccum ? (initAccum = false, value) : iteratee(accumulator, value, index, collection);
          });
          return accumulator;
        }
        /**
         * The base implementation of `_.sortBy` which uses `comparer` to define the
         * sort order of `array` and replaces criteria objects with their corresponding
         * values.
         *
         * @private
         * @param {Array} array The array to sort.
         * @param {Function} comparer The function to define sort order.
         * @returns {Array} Returns `array`.
         */


        function baseSortBy(array, comparer) {
          var length = array.length;
          array.sort(comparer);

          while (length--) {
            array[length] = array[length].value;
          }

          return array;
        }
        /**
         * The base implementation of `_.sum` and `_.sumBy` without support for
         * iteratee shorthands.
         *
         * @private
         * @param {Array} array The array to iterate over.
         * @param {Function} iteratee The function invoked per iteration.
         * @returns {number} Returns the sum.
         */


        function baseSum(array, iteratee) {
          var result,
              index = -1,
              length = array.length;

          while (++index < length) {
            var current = iteratee(array[index]);

            if (current !== undefined) {
              result = result === undefined ? current : result + current;
            }
          }

          return result;
        }
        /**
         * The base implementation of `_.times` without support for iteratee shorthands
         * or max array length checks.
         *
         * @private
         * @param {number} n The number of times to invoke `iteratee`.
         * @param {Function} iteratee The function invoked per iteration.
         * @returns {Array} Returns the array of results.
         */


        function baseTimes(n, iteratee) {
          var index = -1,
              result = Array(n);

          while (++index < n) {
            result[index] = iteratee(index);
          }

          return result;
        }
        /**
         * The base implementation of `_.toPairs` and `_.toPairsIn` which creates an array
         * of key-value pairs for `object` corresponding to the property names of `props`.
         *
         * @private
         * @param {Object} object The object to query.
         * @param {Array} props The property names to get values for.
         * @returns {Object} Returns the key-value pairs.
         */


        function baseToPairs(object, props) {
          return arrayMap(props, function (key) {
            return [key, object[key]];
          });
        }
        /**
         * The base implementation of `_.trim`.
         *
         * @private
         * @param {string} string The string to trim.
         * @returns {string} Returns the trimmed string.
         */


        function baseTrim(string) {
          return string ? string.slice(0, trimmedEndIndex(string) + 1).replace(reTrimStart, '') : string;
        }
        /**
         * The base implementation of `_.unary` without support for storing metadata.
         *
         * @private
         * @param {Function} func The function to cap arguments for.
         * @returns {Function} Returns the new capped function.
         */


        function baseUnary(func) {
          return function (value) {
            return func(value);
          };
        }
        /**
         * The base implementation of `_.values` and `_.valuesIn` which creates an
         * array of `object` property values corresponding to the property names
         * of `props`.
         *
         * @private
         * @param {Object} object The object to query.
         * @param {Array} props The property names to get values for.
         * @returns {Object} Returns the array of property values.
         */


        function baseValues(object, props) {
          return arrayMap(props, function (key) {
            return object[key];
          });
        }
        /**
         * Checks if a `cache` value for `key` exists.
         *
         * @private
         * @param {Object} cache The cache to query.
         * @param {string} key The key of the entry to check.
         * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
         */


        function cacheHas(cache, key) {
          return cache.has(key);
        }
        /**
         * Used by `_.trim` and `_.trimStart` to get the index of the first string symbol
         * that is not found in the character symbols.
         *
         * @private
         * @param {Array} strSymbols The string symbols to inspect.
         * @param {Array} chrSymbols The character symbols to find.
         * @returns {number} Returns the index of the first unmatched string symbol.
         */


        function charsStartIndex(strSymbols, chrSymbols) {
          var index = -1,
              length = strSymbols.length;

          while (++index < length && baseIndexOf(chrSymbols, strSymbols[index], 0) > -1) {}

          return index;
        }
        /**
         * Used by `_.trim` and `_.trimEnd` to get the index of the last string symbol
         * that is not found in the character symbols.
         *
         * @private
         * @param {Array} strSymbols The string symbols to inspect.
         * @param {Array} chrSymbols The character symbols to find.
         * @returns {number} Returns the index of the last unmatched string symbol.
         */


        function charsEndIndex(strSymbols, chrSymbols) {
          var index = strSymbols.length;

          while (index-- && baseIndexOf(chrSymbols, strSymbols[index], 0) > -1) {}

          return index;
        }
        /**
         * Gets the number of `placeholder` occurrences in `array`.
         *
         * @private
         * @param {Array} array The array to inspect.
         * @param {*} placeholder The placeholder to search for.
         * @returns {number} Returns the placeholder count.
         */


        function countHolders(array, placeholder) {
          var length = array.length,
              result = 0;

          while (length--) {
            if (array[length] === placeholder) {
              ++result;
            }
          }

          return result;
        }
        /**
         * Used by `_.deburr` to convert Latin-1 Supplement and Latin Extended-A
         * letters to basic Latin letters.
         *
         * @private
         * @param {string} letter The matched letter to deburr.
         * @returns {string} Returns the deburred letter.
         */


        var deburrLetter = basePropertyOf(deburredLetters);
        /**
         * Used by `_.escape` to convert characters to HTML entities.
         *
         * @private
         * @param {string} chr The matched character to escape.
         * @returns {string} Returns the escaped character.
         */

        var escapeHtmlChar = basePropertyOf(htmlEscapes);
        /**
         * Used by `_.template` to escape characters for inclusion in compiled string literals.
         *
         * @private
         * @param {string} chr The matched character to escape.
         * @returns {string} Returns the escaped character.
         */

        function escapeStringChar(chr) {
          return '\\' + stringEscapes[chr];
        }
        /**
         * Gets the value at `key` of `object`.
         *
         * @private
         * @param {Object} [object] The object to query.
         * @param {string} key The key of the property to get.
         * @returns {*} Returns the property value.
         */


        function getValue(object, key) {
          return object == null ? undefined : object[key];
        }
        /**
         * Checks if `string` contains Unicode symbols.
         *
         * @private
         * @param {string} string The string to inspect.
         * @returns {boolean} Returns `true` if a symbol is found, else `false`.
         */


        function hasUnicode(string) {
          return reHasUnicode.test(string);
        }
        /**
         * Checks if `string` contains a word composed of Unicode symbols.
         *
         * @private
         * @param {string} string The string to inspect.
         * @returns {boolean} Returns `true` if a word is found, else `false`.
         */


        function hasUnicodeWord(string) {
          return reHasUnicodeWord.test(string);
        }
        /**
         * Converts `iterator` to an array.
         *
         * @private
         * @param {Object} iterator The iterator to convert.
         * @returns {Array} Returns the converted array.
         */


        function iteratorToArray(iterator) {
          var data,
              result = [];

          while (!(data = iterator.next()).done) {
            result.push(data.value);
          }

          return result;
        }
        /**
         * Converts `map` to its key-value pairs.
         *
         * @private
         * @param {Object} map The map to convert.
         * @returns {Array} Returns the key-value pairs.
         */


        function mapToArray(map) {
          var index = -1,
              result = Array(map.size);
          map.forEach(function (value, key) {
            result[++index] = [key, value];
          });
          return result;
        }
        /**
         * Creates a unary function that invokes `func` with its argument transformed.
         *
         * @private
         * @param {Function} func The function to wrap.
         * @param {Function} transform The argument transform.
         * @returns {Function} Returns the new function.
         */


        function overArg(func, transform) {
          return function (arg) {
            return func(transform(arg));
          };
        }
        /**
         * Replaces all `placeholder` elements in `array` with an internal placeholder
         * and returns an array of their indexes.
         *
         * @private
         * @param {Array} array The array to modify.
         * @param {*} placeholder The placeholder to replace.
         * @returns {Array} Returns the new array of placeholder indexes.
         */


        function replaceHolders(array, placeholder) {
          var index = -1,
              length = array.length,
              resIndex = 0,
              result = [];

          while (++index < length) {
            var value = array[index];

            if (value === placeholder || value === PLACEHOLDER) {
              array[index] = PLACEHOLDER;
              result[resIndex++] = index;
            }
          }

          return result;
        }
        /**
         * Converts `set` to an array of its values.
         *
         * @private
         * @param {Object} set The set to convert.
         * @returns {Array} Returns the values.
         */


        function setToArray(set) {
          var index = -1,
              result = Array(set.size);
          set.forEach(function (value) {
            result[++index] = value;
          });
          return result;
        }
        /**
         * Converts `set` to its value-value pairs.
         *
         * @private
         * @param {Object} set The set to convert.
         * @returns {Array} Returns the value-value pairs.
         */


        function setToPairs(set) {
          var index = -1,
              result = Array(set.size);
          set.forEach(function (value) {
            result[++index] = [value, value];
          });
          return result;
        }
        /**
         * A specialized version of `_.indexOf` which performs strict equality
         * comparisons of values, i.e. `===`.
         *
         * @private
         * @param {Array} array The array to inspect.
         * @param {*} value The value to search for.
         * @param {number} fromIndex The index to search from.
         * @returns {number} Returns the index of the matched value, else `-1`.
         */


        function strictIndexOf(array, value, fromIndex) {
          var index = fromIndex - 1,
              length = array.length;

          while (++index < length) {
            if (array[index] === value) {
              return index;
            }
          }

          return -1;
        }
        /**
         * A specialized version of `_.lastIndexOf` which performs strict equality
         * comparisons of values, i.e. `===`.
         *
         * @private
         * @param {Array} array The array to inspect.
         * @param {*} value The value to search for.
         * @param {number} fromIndex The index to search from.
         * @returns {number} Returns the index of the matched value, else `-1`.
         */


        function strictLastIndexOf(array, value, fromIndex) {
          var index = fromIndex + 1;

          while (index--) {
            if (array[index] === value) {
              return index;
            }
          }

          return index;
        }
        /**
         * Gets the number of symbols in `string`.
         *
         * @private
         * @param {string} string The string to inspect.
         * @returns {number} Returns the string size.
         */


        function stringSize(string) {
          return hasUnicode(string) ? unicodeSize(string) : asciiSize(string);
        }
        /**
         * Converts `string` to an array.
         *
         * @private
         * @param {string} string The string to convert.
         * @returns {Array} Returns the converted array.
         */


        function stringToArray(string) {
          return hasUnicode(string) ? unicodeToArray(string) : asciiToArray(string);
        }
        /**
         * Used by `_.trim` and `_.trimEnd` to get the index of the last non-whitespace
         * character of `string`.
         *
         * @private
         * @param {string} string The string to inspect.
         * @returns {number} Returns the index of the last non-whitespace character.
         */


        function trimmedEndIndex(string) {
          var index = string.length;

          while (index-- && reWhitespace.test(string.charAt(index))) {}

          return index;
        }
        /**
         * Used by `_.unescape` to convert HTML entities to characters.
         *
         * @private
         * @param {string} chr The matched character to unescape.
         * @returns {string} Returns the unescaped character.
         */


        var unescapeHtmlChar = basePropertyOf(htmlUnescapes);
        /**
         * Gets the size of a Unicode `string`.
         *
         * @private
         * @param {string} string The string inspect.
         * @returns {number} Returns the string size.
         */

        function unicodeSize(string) {
          var result = reUnicode.lastIndex = 0;

          while (reUnicode.test(string)) {
            ++result;
          }

          return result;
        }
        /**
         * Converts a Unicode `string` to an array.
         *
         * @private
         * @param {string} string The string to convert.
         * @returns {Array} Returns the converted array.
         */


        function unicodeToArray(string) {
          return string.match(reUnicode) || [];
        }
        /**
         * Splits a Unicode `string` into an array of its words.
         *
         * @private
         * @param {string} The string to inspect.
         * @returns {Array} Returns the words of `string`.
         */


        function unicodeWords(string) {
          return string.match(reUnicodeWord) || [];
        }
        /*--------------------------------------------------------------------------*/

        /**
         * Create a new pristine `lodash` function using the `context` object.
         *
         * @static
         * @memberOf _
         * @since 1.1.0
         * @category Util
         * @param {Object} [context=root] The context object.
         * @returns {Function} Returns a new `lodash` function.
         * @example
         *
         * _.mixin({ 'foo': _.constant('foo') });
         *
         * var lodash = _.runInContext();
         * lodash.mixin({ 'bar': lodash.constant('bar') });
         *
         * _.isFunction(_.foo);
         * // => true
         * _.isFunction(_.bar);
         * // => false
         *
         * lodash.isFunction(lodash.foo);
         * // => false
         * lodash.isFunction(lodash.bar);
         * // => true
         *
         * // Create a suped-up `defer` in Node.js.
         * var defer = _.runInContext({ 'setTimeout': setImmediate }).defer;
         */


        var runInContext = function runInContext(context) {
          context = context == null ? root : _.defaults(root.Object(), context, _.pick(root, contextProps));
          /** Built-in constructor references. */

          var Array = context.Array,
              Date = context.Date,
              Error = context.Error,
              Function = context.Function,
              Math = context.Math,
              Object = context.Object,
              RegExp = context.RegExp,
              String = context.String,
              TypeError = context.TypeError;
          /** Used for built-in method references. */

          var arrayProto = Array.prototype,
              funcProto = Function.prototype,
              objectProto = Object.prototype;
          /** Used to detect overreaching core-js shims. */

          var coreJsData = context['__core-js_shared__'];
          /** Used to resolve the decompiled source of functions. */

          var funcToString = funcProto.toString;
          /** Used to check objects for own properties. */

          var hasOwnProperty = objectProto.hasOwnProperty;
          /** Used to generate unique IDs. */

          var idCounter = 0;
          /** Used to detect methods masquerading as native. */

          var maskSrcKey = function () {
            var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');
            return uid ? 'Symbol(src)_1.' + uid : '';
          }();
          /**
           * Used to resolve the
           * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
           * of values.
           */


          var nativeObjectToString = objectProto.toString;
          /** Used to infer the `Object` constructor. */

          var objectCtorString = funcToString.call(Object);
          /** Used to restore the original `_` reference in `_.noConflict`. */

          var oldDash = root._;
          /** Used to detect if a method is native. */

          var reIsNative = RegExp('^' + funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\$&').replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$');
          /** Built-in value references. */

          var Buffer = moduleExports ? context.Buffer : undefined,
              Symbol = context.Symbol,
              Uint8Array = context.Uint8Array,
              allocUnsafe = Buffer ? Buffer.allocUnsafe : undefined,
              getPrototype = overArg(Object.getPrototypeOf, Object),
              objectCreate = Object.create,
              propertyIsEnumerable = objectProto.propertyIsEnumerable,
              splice = arrayProto.splice,
              spreadableSymbol = Symbol ? Symbol.isConcatSpreadable : undefined,
              symIterator = Symbol ? Symbol.iterator : undefined,
              symToStringTag = Symbol ? Symbol.toStringTag : undefined;

          var defineProperty = function () {
            try {
              var func = getNative(Object, 'defineProperty');
              func({}, '', {});
              return func;
            } catch (e) {}
          }();
          /** Mocked built-ins. */


          var ctxClearTimeout = context.clearTimeout !== root.clearTimeout && context.clearTimeout,
              ctxNow = Date && Date.now !== root.Date.now && Date.now,
              ctxSetTimeout = context.setTimeout !== root.setTimeout && context.setTimeout;
          /* Built-in method references for those with the same name as other `lodash` methods. */

          var nativeCeil = Math.ceil,
              nativeFloor = Math.floor,
              nativeGetSymbols = Object.getOwnPropertySymbols,
              nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined,
              nativeIsFinite = context.isFinite,
              nativeJoin = arrayProto.join,
              nativeKeys = overArg(Object.keys, Object),
              nativeMax = Math.max,
              nativeMin = Math.min,
              nativeNow = Date.now,
              nativeParseInt = context.parseInt,
              nativeRandom = Math.random,
              nativeReverse = arrayProto.reverse;
          /* Built-in method references that are verified to be native. */

          var DataView = getNative(context, 'DataView'),
              Map = getNative(context, 'Map'),
              Promise = getNative(context, 'Promise'),
              Set = getNative(context, 'Set'),
              WeakMap = getNative(context, 'WeakMap'),
              nativeCreate = getNative(Object, 'create');
          /** Used to store function metadata. */

          var metaMap = WeakMap && new WeakMap();
          /** Used to lookup unminified function names. */

          var realNames = {};
          /** Used to detect maps, sets, and weakmaps. */

          var dataViewCtorString = toSource(DataView),
              mapCtorString = toSource(Map),
              promiseCtorString = toSource(Promise),
              setCtorString = toSource(Set),
              weakMapCtorString = toSource(WeakMap);
          /** Used to convert symbols to primitives and strings. */

          var symbolProto = Symbol ? Symbol.prototype : undefined,
              symbolValueOf = symbolProto ? symbolProto.valueOf : undefined,
              symbolToString = symbolProto ? symbolProto.toString : undefined;
          /*------------------------------------------------------------------------*/

          /**
           * Creates a `lodash` object which wraps `value` to enable implicit method
           * chain sequences. Methods that operate on and return arrays, collections,
           * and functions can be chained together. Methods that retrieve a single value
           * or may return a primitive value will automatically end the chain sequence
           * and return the unwrapped value. Otherwise, the value must be unwrapped
           * with `_#value`.
           *
           * Explicit chain sequences, which must be unwrapped with `_#value`, may be
           * enabled using `_.chain`.
           *
           * The execution of chained methods is lazy, that is, it's deferred until
           * `_#value` is implicitly or explicitly called.
           *
           * Lazy evaluation allows several methods to support shortcut fusion.
           * Shortcut fusion is an optimization to merge iteratee calls; this avoids
           * the creation of intermediate arrays and can greatly reduce the number of
           * iteratee executions. Sections of a chain sequence qualify for shortcut
           * fusion if the section is applied to an array and iteratees accept only
           * one argument. The heuristic for whether a section qualifies for shortcut
           * fusion is subject to change.
           *
           * Chaining is supported in custom builds as long as the `_#value` method is
           * directly or indirectly included in the build.
           *
           * In addition to lodash methods, wrappers have `Array` and `String` methods.
           *
           * The wrapper `Array` methods are:
           * `concat`, `join`, `pop`, `push`, `shift`, `sort`, `splice`, and `unshift`
           *
           * The wrapper `String` methods are:
           * `replace` and `split`
           *
           * The wrapper methods that support shortcut fusion are:
           * `at`, `compact`, `drop`, `dropRight`, `dropWhile`, `filter`, `find`,
           * `findLast`, `head`, `initial`, `last`, `map`, `reject`, `reverse`, `slice`,
           * `tail`, `take`, `takeRight`, `takeRightWhile`, `takeWhile`, and `toArray`
           *
           * The chainable wrapper methods are:
           * `after`, `ary`, `assign`, `assignIn`, `assignInWith`, `assignWith`, `at`,
           * `before`, `bind`, `bindAll`, `bindKey`, `castArray`, `chain`, `chunk`,
           * `commit`, `compact`, `concat`, `conforms`, `constant`, `countBy`, `create`,
           * `curry`, `debounce`, `defaults`, `defaultsDeep`, `defer`, `delay`,
           * `difference`, `differenceBy`, `differenceWith`, `drop`, `dropRight`,
           * `dropRightWhile`, `dropWhile`, `extend`, `extendWith`, `fill`, `filter`,
           * `flatMap`, `flatMapDeep`, `flatMapDepth`, `flatten`, `flattenDeep`,
           * `flattenDepth`, `flip`, `flow`, `flowRight`, `fromPairs`, `functions`,
           * `functionsIn`, `groupBy`, `initial`, `intersection`, `intersectionBy`,
           * `intersectionWith`, `invert`, `invertBy`, `invokeMap`, `iteratee`, `keyBy`,
           * `keys`, `keysIn`, `map`, `mapKeys`, `mapValues`, `matches`, `matchesProperty`,
           * `memoize`, `merge`, `mergeWith`, `method`, `methodOf`, `mixin`, `negate`,
           * `nthArg`, `omit`, `omitBy`, `once`, `orderBy`, `over`, `overArgs`,
           * `overEvery`, `overSome`, `partial`, `partialRight`, `partition`, `pick`,
           * `pickBy`, `plant`, `property`, `propertyOf`, `pull`, `pullAll`, `pullAllBy`,
           * `pullAllWith`, `pullAt`, `push`, `range`, `rangeRight`, `rearg`, `reject`,
           * `remove`, `rest`, `reverse`, `sampleSize`, `set`, `setWith`, `shuffle`,
           * `slice`, `sort`, `sortBy`, `splice`, `spread`, `tail`, `take`, `takeRight`,
           * `takeRightWhile`, `takeWhile`, `tap`, `throttle`, `thru`, `toArray`,
           * `toPairs`, `toPairsIn`, `toPath`, `toPlainObject`, `transform`, `unary`,
           * `union`, `unionBy`, `unionWith`, `uniq`, `uniqBy`, `uniqWith`, `unset`,
           * `unshift`, `unzip`, `unzipWith`, `update`, `updateWith`, `values`,
           * `valuesIn`, `without`, `wrap`, `xor`, `xorBy`, `xorWith`, `zip`,
           * `zipObject`, `zipObjectDeep`, and `zipWith`
           *
           * The wrapper methods that are **not** chainable by default are:
           * `add`, `attempt`, `camelCase`, `capitalize`, `ceil`, `clamp`, `clone`,
           * `cloneDeep`, `cloneDeepWith`, `cloneWith`, `conformsTo`, `deburr`,
           * `defaultTo`, `divide`, `each`, `eachRight`, `endsWith`, `eq`, `escape`,
           * `escapeRegExp`, `every`, `find`, `findIndex`, `findKey`, `findLast`,
           * `findLastIndex`, `findLastKey`, `first`, `floor`, `forEach`, `forEachRight`,
           * `forIn`, `forInRight`, `forOwn`, `forOwnRight`, `get`, `gt`, `gte`, `has`,
           * `hasIn`, `head`, `identity`, `includes`, `indexOf`, `inRange`, `invoke`,
           * `isArguments`, `isArray`, `isArrayBuffer`, `isArrayLike`, `isArrayLikeObject`,
           * `isBoolean`, `isBuffer`, `isDate`, `isElement`, `isEmpty`, `isEqual`,
           * `isEqualWith`, `isError`, `isFinite`, `isFunction`, `isInteger`, `isLength`,
           * `isMap`, `isMatch`, `isMatchWith`, `isNaN`, `isNative`, `isNil`, `isNull`,
           * `isNumber`, `isObject`, `isObjectLike`, `isPlainObject`, `isRegExp`,
           * `isSafeInteger`, `isSet`, `isString`, `isUndefined`, `isTypedArray`,
           * `isWeakMap`, `isWeakSet`, `join`, `kebabCase`, `last`, `lastIndexOf`,
           * `lowerCase`, `lowerFirst`, `lt`, `lte`, `max`, `maxBy`, `mean`, `meanBy`,
           * `min`, `minBy`, `multiply`, `noConflict`, `noop`, `now`, `nth`, `pad`,
           * `padEnd`, `padStart`, `parseInt`, `pop`, `random`, `reduce`, `reduceRight`,
           * `repeat`, `result`, `round`, `runInContext`, `sample`, `shift`, `size`,
           * `snakeCase`, `some`, `sortedIndex`, `sortedIndexBy`, `sortedLastIndex`,
           * `sortedLastIndexBy`, `startCase`, `startsWith`, `stubArray`, `stubFalse`,
           * `stubObject`, `stubString`, `stubTrue`, `subtract`, `sum`, `sumBy`,
           * `template`, `times`, `toFinite`, `toInteger`, `toJSON`, `toLength`,
           * `toLower`, `toNumber`, `toSafeInteger`, `toString`, `toUpper`, `trim`,
           * `trimEnd`, `trimStart`, `truncate`, `unescape`, `uniqueId`, `upperCase`,
           * `upperFirst`, `value`, and `words`
           *
           * @name _
           * @constructor
           * @category Seq
           * @param {*} value The value to wrap in a `lodash` instance.
           * @returns {Object} Returns the new `lodash` wrapper instance.
           * @example
           *
           * function square(n) {
           *   return n * n;
           * }
           *
           * var wrapped = _([1, 2, 3]);
           *
           * // Returns an unwrapped value.
           * wrapped.reduce(_.add);
           * // => 6
           *
           * // Returns a wrapped value.
           * var squares = wrapped.map(square);
           *
           * _.isArray(squares);
           * // => false
           *
           * _.isArray(squares.value());
           * // => true
           */

          function lodash(value) {
            if (isObjectLike(value) && !isArray(value) && !(value instanceof LazyWrapper)) {
              if (value instanceof LodashWrapper) {
                return value;
              }

              if (hasOwnProperty.call(value, '__wrapped__')) {
                return wrapperClone(value);
              }
            }

            return new LodashWrapper(value);
          }
          /**
           * The base implementation of `_.create` without support for assigning
           * properties to the created object.
           *
           * @private
           * @param {Object} proto The object to inherit from.
           * @returns {Object} Returns the new object.
           */


          var baseCreate = function () {
            function object() {}

            return function (proto) {
              if (!isObject(proto)) {
                return {};
              }

              if (objectCreate) {
                return objectCreate(proto);
              }

              object.prototype = proto;
              var result = new object();
              object.prototype = undefined;
              return result;
            };
          }();
          /**
           * The function whose prototype chain sequence wrappers inherit from.
           *
           * @private
           */


          function baseLodash() {// No operation performed.
          }
          /**
           * The base constructor for creating `lodash` wrapper objects.
           *
           * @private
           * @param {*} value The value to wrap.
           * @param {boolean} [chainAll] Enable explicit method chain sequences.
           */


          function LodashWrapper(value, chainAll) {
            this.__wrapped__ = value;
            this.__actions__ = [];
            this.__chain__ = !!chainAll;
            this.__index__ = 0;
            this.__values__ = undefined;
          }
          /**
           * By default, the template delimiters used by lodash are like those in
           * embedded Ruby (ERB) as well as ES2015 template strings. Change the
           * following template settings to use alternative delimiters.
           *
           * @static
           * @memberOf _
           * @type {Object}
           */


          lodash.templateSettings = {
            /**
             * Used to detect `data` property values to be HTML-escaped.
             *
             * @memberOf _.templateSettings
             * @type {RegExp}
             */
            'escape': reEscape,

            /**
             * Used to detect code to be evaluated.
             *
             * @memberOf _.templateSettings
             * @type {RegExp}
             */
            'evaluate': reEvaluate,

            /**
             * Used to detect `data` property values to inject.
             *
             * @memberOf _.templateSettings
             * @type {RegExp}
             */
            'interpolate': reInterpolate,

            /**
             * Used to reference the data object in the template text.
             *
             * @memberOf _.templateSettings
             * @type {string}
             */
            'variable': '',

            /**
             * Used to import variables into the compiled template.
             *
             * @memberOf _.templateSettings
             * @type {Object}
             */
            'imports': {
              /**
               * A reference to the `lodash` function.
               *
               * @memberOf _.templateSettings.imports
               * @type {Function}
               */
              '_': lodash
            }
          }; // Ensure wrappers are instances of `baseLodash`.

          lodash.prototype = baseLodash.prototype;
          lodash.prototype.constructor = lodash;
          LodashWrapper.prototype = baseCreate(baseLodash.prototype);
          LodashWrapper.prototype.constructor = LodashWrapper;
          /*------------------------------------------------------------------------*/

          /**
           * Creates a lazy wrapper object which wraps `value` to enable lazy evaluation.
           *
           * @private
           * @constructor
           * @param {*} value The value to wrap.
           */

          function LazyWrapper(value) {
            this.__wrapped__ = value;
            this.__actions__ = [];
            this.__dir__ = 1;
            this.__filtered__ = false;
            this.__iteratees__ = [];
            this.__takeCount__ = MAX_ARRAY_LENGTH;
            this.__views__ = [];
          }
          /**
           * Creates a clone of the lazy wrapper object.
           *
           * @private
           * @name clone
           * @memberOf LazyWrapper
           * @returns {Object} Returns the cloned `LazyWrapper` object.
           */


          function lazyClone() {
            var result = new LazyWrapper(this.__wrapped__);
            result.__actions__ = copyArray(this.__actions__);
            result.__dir__ = this.__dir__;
            result.__filtered__ = this.__filtered__;
            result.__iteratees__ = copyArray(this.__iteratees__);
            result.__takeCount__ = this.__takeCount__;
            result.__views__ = copyArray(this.__views__);
            return result;
          }
          /**
           * Reverses the direction of lazy iteration.
           *
           * @private
           * @name reverse
           * @memberOf LazyWrapper
           * @returns {Object} Returns the new reversed `LazyWrapper` object.
           */


          function lazyReverse() {
            if (this.__filtered__) {
              var result = new LazyWrapper(this);
              result.__dir__ = -1;
              result.__filtered__ = true;
            } else {
              result = this.clone();
              result.__dir__ *= -1;
            }

            return result;
          }
          /**
           * Extracts the unwrapped value from its lazy wrapper.
           *
           * @private
           * @name value
           * @memberOf LazyWrapper
           * @returns {*} Returns the unwrapped value.
           */


          function lazyValue() {
            var array = this.__wrapped__.value(),
                dir = this.__dir__,
                isArr = isArray(array),
                isRight = dir < 0,
                arrLength = isArr ? array.length : 0,
                view = getView(0, arrLength, this.__views__),
                start = view.start,
                end = view.end,
                length = end - start,
                index = isRight ? end : start - 1,
                iteratees = this.__iteratees__,
                iterLength = iteratees.length,
                resIndex = 0,
                takeCount = nativeMin(length, this.__takeCount__);

            if (!isArr || !isRight && arrLength == length && takeCount == length) {
              return baseWrapperValue(array, this.__actions__);
            }

            var result = [];

            outer: while (length-- && resIndex < takeCount) {
              index += dir;
              var iterIndex = -1,
                  value = array[index];

              while (++iterIndex < iterLength) {
                var data = iteratees[iterIndex],
                    iteratee = data.iteratee,
                    type = data.type,
                    computed = iteratee(value);

                if (type == LAZY_MAP_FLAG) {
                  value = computed;
                } else if (!computed) {
                  if (type == LAZY_FILTER_FLAG) {
                    continue outer;
                  } else {
                    break outer;
                  }
                }
              }

              result[resIndex++] = value;
            }

            return result;
          } // Ensure `LazyWrapper` is an instance of `baseLodash`.


          LazyWrapper.prototype = baseCreate(baseLodash.prototype);
          LazyWrapper.prototype.constructor = LazyWrapper;
          /*------------------------------------------------------------------------*/

          /**
           * Creates a hash object.
           *
           * @private
           * @constructor
           * @param {Array} [entries] The key-value pairs to cache.
           */

          function Hash(entries) {
            var index = -1,
                length = entries == null ? 0 : entries.length;
            this.clear();

            while (++index < length) {
              var entry = entries[index];
              this.set(entry[0], entry[1]);
            }
          }
          /**
           * Removes all key-value entries from the hash.
           *
           * @private
           * @name clear
           * @memberOf Hash
           */


          function hashClear() {
            this.__data__ = nativeCreate ? nativeCreate(null) : {};
            this.size = 0;
          }
          /**
           * Removes `key` and its value from the hash.
           *
           * @private
           * @name delete
           * @memberOf Hash
           * @param {Object} hash The hash to modify.
           * @param {string} key The key of the value to remove.
           * @returns {boolean} Returns `true` if the entry was removed, else `false`.
           */


          function hashDelete(key) {
            var result = this.has(key) && delete this.__data__[key];
            this.size -= result ? 1 : 0;
            return result;
          }
          /**
           * Gets the hash value for `key`.
           *
           * @private
           * @name get
           * @memberOf Hash
           * @param {string} key The key of the value to get.
           * @returns {*} Returns the entry value.
           */


          function hashGet(key) {
            var data = this.__data__;

            if (nativeCreate) {
              var result = data[key];
              return result === HASH_UNDEFINED ? undefined : result;
            }

            return hasOwnProperty.call(data, key) ? data[key] : undefined;
          }
          /**
           * Checks if a hash value for `key` exists.
           *
           * @private
           * @name has
           * @memberOf Hash
           * @param {string} key The key of the entry to check.
           * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
           */


          function hashHas(key) {
            var data = this.__data__;
            return nativeCreate ? data[key] !== undefined : hasOwnProperty.call(data, key);
          }
          /**
           * Sets the hash `key` to `value`.
           *
           * @private
           * @name set
           * @memberOf Hash
           * @param {string} key The key of the value to set.
           * @param {*} value The value to set.
           * @returns {Object} Returns the hash instance.
           */


          function hashSet(key, value) {
            var data = this.__data__;
            this.size += this.has(key) ? 0 : 1;
            data[key] = nativeCreate && value === undefined ? HASH_UNDEFINED : value;
            return this;
          } // Add methods to `Hash`.


          Hash.prototype.clear = hashClear;
          Hash.prototype['delete'] = hashDelete;
          Hash.prototype.get = hashGet;
          Hash.prototype.has = hashHas;
          Hash.prototype.set = hashSet;
          /*------------------------------------------------------------------------*/

          /**
           * Creates an list cache object.
           *
           * @private
           * @constructor
           * @param {Array} [entries] The key-value pairs to cache.
           */

          function ListCache(entries) {
            var index = -1,
                length = entries == null ? 0 : entries.length;
            this.clear();

            while (++index < length) {
              var entry = entries[index];
              this.set(entry[0], entry[1]);
            }
          }
          /**
           * Removes all key-value entries from the list cache.
           *
           * @private
           * @name clear
           * @memberOf ListCache
           */


          function listCacheClear() {
            this.__data__ = [];
            this.size = 0;
          }
          /**
           * Removes `key` and its value from the list cache.
           *
           * @private
           * @name delete
           * @memberOf ListCache
           * @param {string} key The key of the value to remove.
           * @returns {boolean} Returns `true` if the entry was removed, else `false`.
           */


          function listCacheDelete(key) {
            var data = this.__data__,
                index = assocIndexOf(data, key);

            if (index < 0) {
              return false;
            }

            var lastIndex = data.length - 1;

            if (index == lastIndex) {
              data.pop();
            } else {
              splice.call(data, index, 1);
            }

            --this.size;
            return true;
          }
          /**
           * Gets the list cache value for `key`.
           *
           * @private
           * @name get
           * @memberOf ListCache
           * @param {string} key The key of the value to get.
           * @returns {*} Returns the entry value.
           */


          function listCacheGet(key) {
            var data = this.__data__,
                index = assocIndexOf(data, key);
            return index < 0 ? undefined : data[index][1];
          }
          /**
           * Checks if a list cache value for `key` exists.
           *
           * @private
           * @name has
           * @memberOf ListCache
           * @param {string} key The key of the entry to check.
           * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
           */


          function listCacheHas(key) {
            return assocIndexOf(this.__data__, key) > -1;
          }
          /**
           * Sets the list cache `key` to `value`.
           *
           * @private
           * @name set
           * @memberOf ListCache
           * @param {string} key The key of the value to set.
           * @param {*} value The value to set.
           * @returns {Object} Returns the list cache instance.
           */


          function listCacheSet(key, value) {
            var data = this.__data__,
                index = assocIndexOf(data, key);

            if (index < 0) {
              ++this.size;
              data.push([key, value]);
            } else {
              data[index][1] = value;
            }

            return this;
          } // Add methods to `ListCache`.


          ListCache.prototype.clear = listCacheClear;
          ListCache.prototype['delete'] = listCacheDelete;
          ListCache.prototype.get = listCacheGet;
          ListCache.prototype.has = listCacheHas;
          ListCache.prototype.set = listCacheSet;
          /*------------------------------------------------------------------------*/

          /**
           * Creates a map cache object to store key-value pairs.
           *
           * @private
           * @constructor
           * @param {Array} [entries] The key-value pairs to cache.
           */

          function MapCache(entries) {
            var index = -1,
                length = entries == null ? 0 : entries.length;
            this.clear();

            while (++index < length) {
              var entry = entries[index];
              this.set(entry[0], entry[1]);
            }
          }
          /**
           * Removes all key-value entries from the map.
           *
           * @private
           * @name clear
           * @memberOf MapCache
           */


          function mapCacheClear() {
            this.size = 0;
            this.__data__ = {
              'hash': new Hash(),
              'map': new (Map || ListCache)(),
              'string': new Hash()
            };
          }
          /**
           * Removes `key` and its value from the map.
           *
           * @private
           * @name delete
           * @memberOf MapCache
           * @param {string} key The key of the value to remove.
           * @returns {boolean} Returns `true` if the entry was removed, else `false`.
           */


          function mapCacheDelete(key) {
            var result = getMapData(this, key)['delete'](key);
            this.size -= result ? 1 : 0;
            return result;
          }
          /**
           * Gets the map value for `key`.
           *
           * @private
           * @name get
           * @memberOf MapCache
           * @param {string} key The key of the value to get.
           * @returns {*} Returns the entry value.
           */


          function mapCacheGet(key) {
            return getMapData(this, key).get(key);
          }
          /**
           * Checks if a map value for `key` exists.
           *
           * @private
           * @name has
           * @memberOf MapCache
           * @param {string} key The key of the entry to check.
           * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
           */


          function mapCacheHas(key) {
            return getMapData(this, key).has(key);
          }
          /**
           * Sets the map `key` to `value`.
           *
           * @private
           * @name set
           * @memberOf MapCache
           * @param {string} key The key of the value to set.
           * @param {*} value The value to set.
           * @returns {Object} Returns the map cache instance.
           */


          function mapCacheSet(key, value) {
            var data = getMapData(this, key),
                size = data.size;
            data.set(key, value);
            this.size += data.size == size ? 0 : 1;
            return this;
          } // Add methods to `MapCache`.


          MapCache.prototype.clear = mapCacheClear;
          MapCache.prototype['delete'] = mapCacheDelete;
          MapCache.prototype.get = mapCacheGet;
          MapCache.prototype.has = mapCacheHas;
          MapCache.prototype.set = mapCacheSet;
          /*------------------------------------------------------------------------*/

          /**
           *
           * Creates an array cache object to store unique values.
           *
           * @private
           * @constructor
           * @param {Array} [values] The values to cache.
           */

          function SetCache(values) {
            var index = -1,
                length = values == null ? 0 : values.length;
            this.__data__ = new MapCache();

            while (++index < length) {
              this.add(values[index]);
            }
          }
          /**
           * Adds `value` to the array cache.
           *
           * @private
           * @name add
           * @memberOf SetCache
           * @alias push
           * @param {*} value The value to cache.
           * @returns {Object} Returns the cache instance.
           */


          function setCacheAdd(value) {
            this.__data__.set(value, HASH_UNDEFINED);

            return this;
          }
          /**
           * Checks if `value` is in the array cache.
           *
           * @private
           * @name has
           * @memberOf SetCache
           * @param {*} value The value to search for.
           * @returns {number} Returns `true` if `value` is found, else `false`.
           */


          function setCacheHas(value) {
            return this.__data__.has(value);
          } // Add methods to `SetCache`.


          SetCache.prototype.add = SetCache.prototype.push = setCacheAdd;
          SetCache.prototype.has = setCacheHas;
          /*------------------------------------------------------------------------*/

          /**
           * Creates a stack cache object to store key-value pairs.
           *
           * @private
           * @constructor
           * @param {Array} [entries] The key-value pairs to cache.
           */

          function Stack(entries) {
            var data = this.__data__ = new ListCache(entries);
            this.size = data.size;
          }
          /**
           * Removes all key-value entries from the stack.
           *
           * @private
           * @name clear
           * @memberOf Stack
           */


          function stackClear() {
            this.__data__ = new ListCache();
            this.size = 0;
          }
          /**
           * Removes `key` and its value from the stack.
           *
           * @private
           * @name delete
           * @memberOf Stack
           * @param {string} key The key of the value to remove.
           * @returns {boolean} Returns `true` if the entry was removed, else `false`.
           */


          function stackDelete(key) {
            var data = this.__data__,
                result = data['delete'](key);
            this.size = data.size;
            return result;
          }
          /**
           * Gets the stack value for `key`.
           *
           * @private
           * @name get
           * @memberOf Stack
           * @param {string} key The key of the value to get.
           * @returns {*} Returns the entry value.
           */


          function stackGet(key) {
            return this.__data__.get(key);
          }
          /**
           * Checks if a stack value for `key` exists.
           *
           * @private
           * @name has
           * @memberOf Stack
           * @param {string} key The key of the entry to check.
           * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
           */


          function stackHas(key) {
            return this.__data__.has(key);
          }
          /**
           * Sets the stack `key` to `value`.
           *
           * @private
           * @name set
           * @memberOf Stack
           * @param {string} key The key of the value to set.
           * @param {*} value The value to set.
           * @returns {Object} Returns the stack cache instance.
           */


          function stackSet(key, value) {
            var data = this.__data__;

            if (data instanceof ListCache) {
              var pairs = data.__data__;

              if (!Map || pairs.length < LARGE_ARRAY_SIZE - 1) {
                pairs.push([key, value]);
                this.size = ++data.size;
                return this;
              }

              data = this.__data__ = new MapCache(pairs);
            }

            data.set(key, value);
            this.size = data.size;
            return this;
          } // Add methods to `Stack`.


          Stack.prototype.clear = stackClear;
          Stack.prototype['delete'] = stackDelete;
          Stack.prototype.get = stackGet;
          Stack.prototype.has = stackHas;
          Stack.prototype.set = stackSet;
          /*------------------------------------------------------------------------*/

          /**
           * Creates an array of the enumerable property names of the array-like `value`.
           *
           * @private
           * @param {*} value The value to query.
           * @param {boolean} inherited Specify returning inherited property names.
           * @returns {Array} Returns the array of property names.
           */

          function arrayLikeKeys(value, inherited) {
            var isArr = isArray(value),
                isArg = !isArr && isArguments(value),
                isBuff = !isArr && !isArg && isBuffer(value),
                isType = !isArr && !isArg && !isBuff && isTypedArray(value),
                skipIndexes = isArr || isArg || isBuff || isType,
                result = skipIndexes ? baseTimes(value.length, String) : [],
                length = result.length;

            for (var key in value) {
              if ((inherited || hasOwnProperty.call(value, key)) && !(skipIndexes && ( // Safari 9 has enumerable `arguments.length` in strict mode.
              key == 'length' || isBuff && (key == 'offset' || key == 'parent') || isType && (key == 'buffer' || key == 'byteLength' || key == 'byteOffset') || // Skip index properties.
              isIndex(key, length)))) {
                result.push(key);
              }
            }

            return result;
          }
          /**
           * A specialized version of `_.sample` for arrays.
           *
           * @private
           * @param {Array} array The array to sample.
           * @returns {*} Returns the random element.
           */


          function arraySample(array) {
            var length = array.length;
            return length ? array[baseRandom(0, length - 1)] : undefined;
          }
          /**
           * A specialized version of `_.sampleSize` for arrays.
           *
           * @private
           * @param {Array} array The array to sample.
           * @param {number} n The number of elements to sample.
           * @returns {Array} Returns the random elements.
           */


          function arraySampleSize(array, n) {
            return shuffleSelf(copyArray(array), baseClamp(n, 0, array.length));
          }
          /**
           * A specialized version of `_.shuffle` for arrays.
           *
           * @private
           * @param {Array} array The array to shuffle.
           * @returns {Array} Returns the new shuffled array.
           */


          function arrayShuffle(array) {
            return shuffleSelf(copyArray(array));
          }
          /**
           * This function is like `assignValue` except that it doesn't assign
           * `undefined` values.
           *
           * @private
           * @param {Object} object The object to modify.
           * @param {string} key The key of the property to assign.
           * @param {*} value The value to assign.
           */


          function assignMergeValue(object, key, value) {
            if (value !== undefined && !eq(object[key], value) || value === undefined && !(key in object)) {
              baseAssignValue(object, key, value);
            }
          }
          /**
           * Assigns `value` to `key` of `object` if the existing value is not equivalent
           * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
           * for equality comparisons.
           *
           * @private
           * @param {Object} object The object to modify.
           * @param {string} key The key of the property to assign.
           * @param {*} value The value to assign.
           */


          function assignValue(object, key, value) {
            var objValue = object[key];

            if (!(hasOwnProperty.call(object, key) && eq(objValue, value)) || value === undefined && !(key in object)) {
              baseAssignValue(object, key, value);
            }
          }
          /**
           * Gets the index at which the `key` is found in `array` of key-value pairs.
           *
           * @private
           * @param {Array} array The array to inspect.
           * @param {*} key The key to search for.
           * @returns {number} Returns the index of the matched value, else `-1`.
           */


          function assocIndexOf(array, key) {
            var length = array.length;

            while (length--) {
              if (eq(array[length][0], key)) {
                return length;
              }
            }

            return -1;
          }
          /**
           * Aggregates elements of `collection` on `accumulator` with keys transformed
           * by `iteratee` and values set by `setter`.
           *
           * @private
           * @param {Array|Object} collection The collection to iterate over.
           * @param {Function} setter The function to set `accumulator` values.
           * @param {Function} iteratee The iteratee to transform keys.
           * @param {Object} accumulator The initial aggregated object.
           * @returns {Function} Returns `accumulator`.
           */


          function baseAggregator(collection, setter, iteratee, accumulator) {
            baseEach(collection, function (value, key, collection) {
              setter(accumulator, value, iteratee(value), collection);
            });
            return accumulator;
          }
          /**
           * The base implementation of `_.assign` without support for multiple sources
           * or `customizer` functions.
           *
           * @private
           * @param {Object} object The destination object.
           * @param {Object} source The source object.
           * @returns {Object} Returns `object`.
           */


          function baseAssign(object, source) {
            return object && copyObject(source, keys(source), object);
          }
          /**
           * The base implementation of `_.assignIn` without support for multiple sources
           * or `customizer` functions.
           *
           * @private
           * @param {Object} object The destination object.
           * @param {Object} source The source object.
           * @returns {Object} Returns `object`.
           */


          function baseAssignIn(object, source) {
            return object && copyObject(source, keysIn(source), object);
          }
          /**
           * The base implementation of `assignValue` and `assignMergeValue` without
           * value checks.
           *
           * @private
           * @param {Object} object The object to modify.
           * @param {string} key The key of the property to assign.
           * @param {*} value The value to assign.
           */


          function baseAssignValue(object, key, value) {
            if (key == '__proto__' && defineProperty) {
              defineProperty(object, key, {
                'configurable': true,
                'enumerable': true,
                'value': value,
                'writable': true
              });
            } else {
              object[key] = value;
            }
          }
          /**
           * The base implementation of `_.at` without support for individual paths.
           *
           * @private
           * @param {Object} object The object to iterate over.
           * @param {string[]} paths The property paths to pick.
           * @returns {Array} Returns the picked elements.
           */


          function baseAt(object, paths) {
            var index = -1,
                length = paths.length,
                result = Array(length),
                skip = object == null;

            while (++index < length) {
              result[index] = skip ? undefined : get(object, paths[index]);
            }

            return result;
          }
          /**
           * The base implementation of `_.clamp` which doesn't coerce arguments.
           *
           * @private
           * @param {number} number The number to clamp.
           * @param {number} [lower] The lower bound.
           * @param {number} upper The upper bound.
           * @returns {number} Returns the clamped number.
           */


          function baseClamp(number, lower, upper) {
            if (number === number) {
              if (upper !== undefined) {
                number = number <= upper ? number : upper;
              }

              if (lower !== undefined) {
                number = number >= lower ? number : lower;
              }
            }

            return number;
          }
          /**
           * The base implementation of `_.clone` and `_.cloneDeep` which tracks
           * traversed objects.
           *
           * @private
           * @param {*} value The value to clone.
           * @param {boolean} bitmask The bitmask flags.
           *  1 - Deep clone
           *  2 - Flatten inherited properties
           *  4 - Clone symbols
           * @param {Function} [customizer] The function to customize cloning.
           * @param {string} [key] The key of `value`.
           * @param {Object} [object] The parent object of `value`.
           * @param {Object} [stack] Tracks traversed objects and their clone counterparts.
           * @returns {*} Returns the cloned value.
           */


          function baseClone(value, bitmask, customizer, key, object, stack) {
            var result,
                isDeep = bitmask & CLONE_DEEP_FLAG,
                isFlat = bitmask & CLONE_FLAT_FLAG,
                isFull = bitmask & CLONE_SYMBOLS_FLAG;

            if (customizer) {
              result = object ? customizer(value, key, object, stack) : customizer(value);
            }

            if (result !== undefined) {
              return result;
            }

            if (!isObject(value)) {
              return value;
            }

            var isArr = isArray(value);

            if (isArr) {
              result = initCloneArray(value);

              if (!isDeep) {
                return copyArray(value, result);
              }
            } else {
              var tag = getTag(value),
                  isFunc = tag == funcTag || tag == genTag;

              if (isBuffer(value)) {
                return cloneBuffer(value, isDeep);
              }

              if (tag == objectTag || tag == argsTag || isFunc && !object) {
                result = isFlat || isFunc ? {} : initCloneObject(value);

                if (!isDeep) {
                  return isFlat ? copySymbolsIn(value, baseAssignIn(result, value)) : copySymbols(value, baseAssign(result, value));
                }
              } else {
                if (!cloneableTags[tag]) {
                  return object ? value : {};
                }

                result = initCloneByTag(value, tag, isDeep);
              }
            } // Check for circular references and return its corresponding clone.


            stack || (stack = new Stack());
            var stacked = stack.get(value);

            if (stacked) {
              return stacked;
            }

            stack.set(value, result);

            if (isSet(value)) {
              value.forEach(function (subValue) {
                result.add(baseClone(subValue, bitmask, customizer, subValue, value, stack));
              });
            } else if (isMap(value)) {
              value.forEach(function (subValue, key) {
                result.set(key, baseClone(subValue, bitmask, customizer, key, value, stack));
              });
            }

            var keysFunc = isFull ? isFlat ? getAllKeysIn : getAllKeys : isFlat ? keysIn : keys;
            var props = isArr ? undefined : keysFunc(value);
            arrayEach(props || value, function (subValue, key) {
              if (props) {
                key = subValue;
                subValue = value[key];
              } // Recursively populate clone (susceptible to call stack limits).


              assignValue(result, key, baseClone(subValue, bitmask, customizer, key, value, stack));
            });
            return result;
          }
          /**
           * The base implementation of `_.conforms` which doesn't clone `source`.
           *
           * @private
           * @param {Object} source The object of property predicates to conform to.
           * @returns {Function} Returns the new spec function.
           */


          function baseConforms(source) {
            var props = keys(source);
            return function (object) {
              return baseConformsTo(object, source, props);
            };
          }
          /**
           * The base implementation of `_.conformsTo` which accepts `props` to check.
           *
           * @private
           * @param {Object} object The object to inspect.
           * @param {Object} source The object of property predicates to conform to.
           * @returns {boolean} Returns `true` if `object` conforms, else `false`.
           */


          function baseConformsTo(object, source, props) {
            var length = props.length;

            if (object == null) {
              return !length;
            }

            object = Object(object);

            while (length--) {
              var key = props[length],
                  predicate = source[key],
                  value = object[key];

              if (value === undefined && !(key in object) || !predicate(value)) {
                return false;
              }
            }

            return true;
          }
          /**
           * The base implementation of `_.delay` and `_.defer` which accepts `args`
           * to provide to `func`.
           *
           * @private
           * @param {Function} func The function to delay.
           * @param {number} wait The number of milliseconds to delay invocation.
           * @param {Array} args The arguments to provide to `func`.
           * @returns {number|Object} Returns the timer id or timeout object.
           */


          function baseDelay(func, wait, args) {
            if (typeof func != 'function') {
              throw new TypeError(FUNC_ERROR_TEXT);
            }

            return setTimeout(function () {
              func.apply(undefined, args);
            }, wait);
          }
          /**
           * The base implementation of methods like `_.difference` without support
           * for excluding multiple arrays or iteratee shorthands.
           *
           * @private
           * @param {Array} array The array to inspect.
           * @param {Array} values The values to exclude.
           * @param {Function} [iteratee] The iteratee invoked per element.
           * @param {Function} [comparator] The comparator invoked per element.
           * @returns {Array} Returns the new array of filtered values.
           */


          function baseDifference(array, values, iteratee, comparator) {
            var index = -1,
                includes = arrayIncludes,
                isCommon = true,
                length = array.length,
                result = [],
                valuesLength = values.length;

            if (!length) {
              return result;
            }

            if (iteratee) {
              values = arrayMap(values, baseUnary(iteratee));
            }

            if (comparator) {
              includes = arrayIncludesWith;
              isCommon = false;
            } else if (values.length >= LARGE_ARRAY_SIZE) {
              includes = cacheHas;
              isCommon = false;
              values = new SetCache(values);
            }

            outer: while (++index < length) {
              var value = array[index],
                  computed = iteratee == null ? value : iteratee(value);
              value = comparator || value !== 0 ? value : 0;

              if (isCommon && computed === computed) {
                var valuesIndex = valuesLength;

                while (valuesIndex--) {
                  if (values[valuesIndex] === computed) {
                    continue outer;
                  }
                }

                result.push(value);
              } else if (!includes(values, computed, comparator)) {
                result.push(value);
              }
            }

            return result;
          }
          /**
           * The base implementation of `_.forEach` without support for iteratee shorthands.
           *
           * @private
           * @param {Array|Object} collection The collection to iterate over.
           * @param {Function} iteratee The function invoked per iteration.
           * @returns {Array|Object} Returns `collection`.
           */


          var baseEach = createBaseEach(baseForOwn);
          /**
           * The base implementation of `_.forEachRight` without support for iteratee shorthands.
           *
           * @private
           * @param {Array|Object} collection The collection to iterate over.
           * @param {Function} iteratee The function invoked per iteration.
           * @returns {Array|Object} Returns `collection`.
           */

          var baseEachRight = createBaseEach(baseForOwnRight, true);
          /**
           * The base implementation of `_.every` without support for iteratee shorthands.
           *
           * @private
           * @param {Array|Object} collection The collection to iterate over.
           * @param {Function} predicate The function invoked per iteration.
           * @returns {boolean} Returns `true` if all elements pass the predicate check,
           *  else `false`
           */

          function baseEvery(collection, predicate) {
            var result = true;
            baseEach(collection, function (value, index, collection) {
              result = !!predicate(value, index, collection);
              return result;
            });
            return result;
          }
          /**
           * The base implementation of methods like `_.max` and `_.min` which accepts a
           * `comparator` to determine the extremum value.
           *
           * @private
           * @param {Array} array The array to iterate over.
           * @param {Function} iteratee The iteratee invoked per iteration.
           * @param {Function} comparator The comparator used to compare values.
           * @returns {*} Returns the extremum value.
           */


          function baseExtremum(array, iteratee, comparator) {
            var index = -1,
                length = array.length;

            while (++index < length) {
              var value = array[index],
                  current = iteratee(value);

              if (current != null && (computed === undefined ? current === current && !isSymbol(current) : comparator(current, computed))) {
                var computed = current,
                    result = value;
              }
            }

            return result;
          }
          /**
           * The base implementation of `_.fill` without an iteratee call guard.
           *
           * @private
           * @param {Array} array The array to fill.
           * @param {*} value The value to fill `array` with.
           * @param {number} [start=0] The start position.
           * @param {number} [end=array.length] The end position.
           * @returns {Array} Returns `array`.
           */


          function baseFill(array, value, start, end) {
            var length = array.length;
            start = toInteger(start);

            if (start < 0) {
              start = -start > length ? 0 : length + start;
            }

            end = end === undefined || end > length ? length : toInteger(end);

            if (end < 0) {
              end += length;
            }

            end = start > end ? 0 : toLength(end);

            while (start < end) {
              array[start++] = value;
            }

            return array;
          }
          /**
           * The base implementation of `_.filter` without support for iteratee shorthands.
           *
           * @private
           * @param {Array|Object} collection The collection to iterate over.
           * @param {Function} predicate The function invoked per iteration.
           * @returns {Array} Returns the new filtered array.
           */


          function baseFilter(collection, predicate) {
            var result = [];
            baseEach(collection, function (value, index, collection) {
              if (predicate(value, index, collection)) {
                result.push(value);
              }
            });
            return result;
          }
          /**
           * The base implementation of `_.flatten` with support for restricting flattening.
           *
           * @private
           * @param {Array} array The array to flatten.
           * @param {number} depth The maximum recursion depth.
           * @param {boolean} [predicate=isFlattenable] The function invoked per iteration.
           * @param {boolean} [isStrict] Restrict to values that pass `predicate` checks.
           * @param {Array} [result=[]] The initial result value.
           * @returns {Array} Returns the new flattened array.
           */


          function baseFlatten(array, depth, predicate, isStrict, result) {
            var index = -1,
                length = array.length;
            predicate || (predicate = isFlattenable);
            result || (result = []);

            while (++index < length) {
              var value = array[index];

              if (depth > 0 && predicate(value)) {
                if (depth > 1) {
                  // Recursively flatten arrays (susceptible to call stack limits).
                  baseFlatten(value, depth - 1, predicate, isStrict, result);
                } else {
                  arrayPush(result, value);
                }
              } else if (!isStrict) {
                result[result.length] = value;
              }
            }

            return result;
          }
          /**
           * The base implementation of `baseForOwn` which iterates over `object`
           * properties returned by `keysFunc` and invokes `iteratee` for each property.
           * Iteratee functions may exit iteration early by explicitly returning `false`.
           *
           * @private
           * @param {Object} object The object to iterate over.
           * @param {Function} iteratee The function invoked per iteration.
           * @param {Function} keysFunc The function to get the keys of `object`.
           * @returns {Object} Returns `object`.
           */


          var baseFor = createBaseFor();
          /**
           * This function is like `baseFor` except that it iterates over properties
           * in the opposite order.
           *
           * @private
           * @param {Object} object The object to iterate over.
           * @param {Function} iteratee The function invoked per iteration.
           * @param {Function} keysFunc The function to get the keys of `object`.
           * @returns {Object} Returns `object`.
           */

          var baseForRight = createBaseFor(true);
          /**
           * The base implementation of `_.forOwn` without support for iteratee shorthands.
           *
           * @private
           * @param {Object} object The object to iterate over.
           * @param {Function} iteratee The function invoked per iteration.
           * @returns {Object} Returns `object`.
           */

          function baseForOwn(object, iteratee) {
            return object && baseFor(object, iteratee, keys);
          }
          /**
           * The base implementation of `_.forOwnRight` without support for iteratee shorthands.
           *
           * @private
           * @param {Object} object The object to iterate over.
           * @param {Function} iteratee The function invoked per iteration.
           * @returns {Object} Returns `object`.
           */


          function baseForOwnRight(object, iteratee) {
            return object && baseForRight(object, iteratee, keys);
          }
          /**
           * The base implementation of `_.functions` which creates an array of
           * `object` function property names filtered from `props`.
           *
           * @private
           * @param {Object} object The object to inspect.
           * @param {Array} props The property names to filter.
           * @returns {Array} Returns the function names.
           */


          function baseFunctions(object, props) {
            return arrayFilter(props, function (key) {
              return isFunction(object[key]);
            });
          }
          /**
           * The base implementation of `_.get` without support for default values.
           *
           * @private
           * @param {Object} object The object to query.
           * @param {Array|string} path The path of the property to get.
           * @returns {*} Returns the resolved value.
           */


          function baseGet(object, path) {
            path = castPath(path, object);
            var index = 0,
                length = path.length;

            while (object != null && index < length) {
              object = object[toKey(path[index++])];
            }

            return index && index == length ? object : undefined;
          }
          /**
           * The base implementation of `getAllKeys` and `getAllKeysIn` which uses
           * `keysFunc` and `symbolsFunc` to get the enumerable property names and
           * symbols of `object`.
           *
           * @private
           * @param {Object} object The object to query.
           * @param {Function} keysFunc The function to get the keys of `object`.
           * @param {Function} symbolsFunc The function to get the symbols of `object`.
           * @returns {Array} Returns the array of property names and symbols.
           */


          function baseGetAllKeys(object, keysFunc, symbolsFunc) {
            var result = keysFunc(object);
            return isArray(object) ? result : arrayPush(result, symbolsFunc(object));
          }
          /**
           * The base implementation of `getTag` without fallbacks for buggy environments.
           *
           * @private
           * @param {*} value The value to query.
           * @returns {string} Returns the `toStringTag`.
           */


          function baseGetTag(value) {
            if (value == null) {
              return value === undefined ? undefinedTag : nullTag;
            }

            return symToStringTag && symToStringTag in Object(value) ? getRawTag(value) : objectToString(value);
          }
          /**
           * The base implementation of `_.gt` which doesn't coerce arguments.
           *
           * @private
           * @param {*} value The value to compare.
           * @param {*} other The other value to compare.
           * @returns {boolean} Returns `true` if `value` is greater than `other`,
           *  else `false`.
           */


          function baseGt(value, other) {
            return value > other;
          }
          /**
           * The base implementation of `_.has` without support for deep paths.
           *
           * @private
           * @param {Object} [object] The object to query.
           * @param {Array|string} key The key to check.
           * @returns {boolean} Returns `true` if `key` exists, else `false`.
           */


          function baseHas(object, key) {
            return object != null && hasOwnProperty.call(object, key);
          }
          /**
           * The base implementation of `_.hasIn` without support for deep paths.
           *
           * @private
           * @param {Object} [object] The object to query.
           * @param {Array|string} key The key to check.
           * @returns {boolean} Returns `true` if `key` exists, else `false`.
           */


          function baseHasIn(object, key) {
            return object != null && key in Object(object);
          }
          /**
           * The base implementation of `_.inRange` which doesn't coerce arguments.
           *
           * @private
           * @param {number} number The number to check.
           * @param {number} start The start of the range.
           * @param {number} end The end of the range.
           * @returns {boolean} Returns `true` if `number` is in the range, else `false`.
           */


          function baseInRange(number, start, end) {
            return number >= nativeMin(start, end) && number < nativeMax(start, end);
          }
          /**
           * The base implementation of methods like `_.intersection`, without support
           * for iteratee shorthands, that accepts an array of arrays to inspect.
           *
           * @private
           * @param {Array} arrays The arrays to inspect.
           * @param {Function} [iteratee] The iteratee invoked per element.
           * @param {Function} [comparator] The comparator invoked per element.
           * @returns {Array} Returns the new array of shared values.
           */


          function baseIntersection(arrays, iteratee, comparator) {
            var includes = comparator ? arrayIncludesWith : arrayIncludes,
                length = arrays[0].length,
                othLength = arrays.length,
                othIndex = othLength,
                caches = Array(othLength),
                maxLength = Infinity,
                result = [];

            while (othIndex--) {
              var array = arrays[othIndex];

              if (othIndex && iteratee) {
                array = arrayMap(array, baseUnary(iteratee));
              }

              maxLength = nativeMin(array.length, maxLength);
              caches[othIndex] = !comparator && (iteratee || length >= 120 && array.length >= 120) ? new SetCache(othIndex && array) : undefined;
            }

            array = arrays[0];
            var index = -1,
                seen = caches[0];

            outer: while (++index < length && result.length < maxLength) {
              var value = array[index],
                  computed = iteratee ? iteratee(value) : value;
              value = comparator || value !== 0 ? value : 0;

              if (!(seen ? cacheHas(seen, computed) : includes(result, computed, comparator))) {
                othIndex = othLength;

                while (--othIndex) {
                  var cache = caches[othIndex];

                  if (!(cache ? cacheHas(cache, computed) : includes(arrays[othIndex], computed, comparator))) {
                    continue outer;
                  }
                }

                if (seen) {
                  seen.push(computed);
                }

                result.push(value);
              }
            }

            return result;
          }
          /**
           * The base implementation of `_.invert` and `_.invertBy` which inverts
           * `object` with values transformed by `iteratee` and set by `setter`.
           *
           * @private
           * @param {Object} object The object to iterate over.
           * @param {Function} setter The function to set `accumulator` values.
           * @param {Function} iteratee The iteratee to transform values.
           * @param {Object} accumulator The initial inverted object.
           * @returns {Function} Returns `accumulator`.
           */


          function baseInverter(object, setter, iteratee, accumulator) {
            baseForOwn(object, function (value, key, object) {
              setter(accumulator, iteratee(value), key, object);
            });
            return accumulator;
          }
          /**
           * The base implementation of `_.invoke` without support for individual
           * method arguments.
           *
           * @private
           * @param {Object} object The object to query.
           * @param {Array|string} path The path of the method to invoke.
           * @param {Array} args The arguments to invoke the method with.
           * @returns {*} Returns the result of the invoked method.
           */


          function baseInvoke(object, path, args) {
            path = castPath(path, object);
            object = parent(object, path);
            var func = object == null ? object : object[toKey(last(path))];
            return func == null ? undefined : apply(func, object, args);
          }
          /**
           * The base implementation of `_.isArguments`.
           *
           * @private
           * @param {*} value The value to check.
           * @returns {boolean} Returns `true` if `value` is an `arguments` object,
           */


          function baseIsArguments(value) {
            return isObjectLike(value) && baseGetTag(value) == argsTag;
          }
          /**
           * The base implementation of `_.isArrayBuffer` without Node.js optimizations.
           *
           * @private
           * @param {*} value The value to check.
           * @returns {boolean} Returns `true` if `value` is an array buffer, else `false`.
           */


          function baseIsArrayBuffer(value) {
            return isObjectLike(value) && baseGetTag(value) == arrayBufferTag;
          }
          /**
           * The base implementation of `_.isDate` without Node.js optimizations.
           *
           * @private
           * @param {*} value The value to check.
           * @returns {boolean} Returns `true` if `value` is a date object, else `false`.
           */


          function baseIsDate(value) {
            return isObjectLike(value) && baseGetTag(value) == dateTag;
          }
          /**
           * The base implementation of `_.isEqual` which supports partial comparisons
           * and tracks traversed objects.
           *
           * @private
           * @param {*} value The value to compare.
           * @param {*} other The other value to compare.
           * @param {boolean} bitmask The bitmask flags.
           *  1 - Unordered comparison
           *  2 - Partial comparison
           * @param {Function} [customizer] The function to customize comparisons.
           * @param {Object} [stack] Tracks traversed `value` and `other` objects.
           * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
           */


          function baseIsEqual(value, other, bitmask, customizer, stack) {
            if (value === other) {
              return true;
            }

            if (value == null || other == null || !isObjectLike(value) && !isObjectLike(other)) {
              return value !== value && other !== other;
            }

            return baseIsEqualDeep(value, other, bitmask, customizer, baseIsEqual, stack);
          }
          /**
           * A specialized version of `baseIsEqual` for arrays and objects which performs
           * deep comparisons and tracks traversed objects enabling objects with circular
           * references to be compared.
           *
           * @private
           * @param {Object} object The object to compare.
           * @param {Object} other The other object to compare.
           * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
           * @param {Function} customizer The function to customize comparisons.
           * @param {Function} equalFunc The function to determine equivalents of values.
           * @param {Object} [stack] Tracks traversed `object` and `other` objects.
           * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
           */


          function baseIsEqualDeep(object, other, bitmask, customizer, equalFunc, stack) {
            var objIsArr = isArray(object),
                othIsArr = isArray(other),
                objTag = objIsArr ? arrayTag : getTag(object),
                othTag = othIsArr ? arrayTag : getTag(other);
            objTag = objTag == argsTag ? objectTag : objTag;
            othTag = othTag == argsTag ? objectTag : othTag;
            var objIsObj = objTag == objectTag,
                othIsObj = othTag == objectTag,
                isSameTag = objTag == othTag;

            if (isSameTag && isBuffer(object)) {
              if (!isBuffer(other)) {
                return false;
              }

              objIsArr = true;
              objIsObj = false;
            }

            if (isSameTag && !objIsObj) {
              stack || (stack = new Stack());
              return objIsArr || isTypedArray(object) ? equalArrays(object, other, bitmask, customizer, equalFunc, stack) : equalByTag(object, other, objTag, bitmask, customizer, equalFunc, stack);
            }

            if (!(bitmask & COMPARE_PARTIAL_FLAG)) {
              var objIsWrapped = objIsObj && hasOwnProperty.call(object, '__wrapped__'),
                  othIsWrapped = othIsObj && hasOwnProperty.call(other, '__wrapped__');

              if (objIsWrapped || othIsWrapped) {
                var objUnwrapped = objIsWrapped ? object.value() : object,
                    othUnwrapped = othIsWrapped ? other.value() : other;
                stack || (stack = new Stack());
                return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);
              }
            }

            if (!isSameTag) {
              return false;
            }

            stack || (stack = new Stack());
            return equalObjects(object, other, bitmask, customizer, equalFunc, stack);
          }
          /**
           * The base implementation of `_.isMap` without Node.js optimizations.
           *
           * @private
           * @param {*} value The value to check.
           * @returns {boolean} Returns `true` if `value` is a map, else `false`.
           */


          function baseIsMap(value) {
            return isObjectLike(value) && getTag(value) == mapTag;
          }
          /**
           * The base implementation of `_.isMatch` without support for iteratee shorthands.
           *
           * @private
           * @param {Object} object The object to inspect.
           * @param {Object} source The object of property values to match.
           * @param {Array} matchData The property names, values, and compare flags to match.
           * @param {Function} [customizer] The function to customize comparisons.
           * @returns {boolean} Returns `true` if `object` is a match, else `false`.
           */


          function baseIsMatch(object, source, matchData, customizer) {
            var index = matchData.length,
                length = index,
                noCustomizer = !customizer;

            if (object == null) {
              return !length;
            }

            object = Object(object);

            while (index--) {
              var data = matchData[index];

              if (noCustomizer && data[2] ? data[1] !== object[data[0]] : !(data[0] in object)) {
                return false;
              }
            }

            while (++index < length) {
              data = matchData[index];
              var key = data[0],
                  objValue = object[key],
                  srcValue = data[1];

              if (noCustomizer && data[2]) {
                if (objValue === undefined && !(key in object)) {
                  return false;
                }
              } else {
                var stack = new Stack();

                if (customizer) {
                  var result = customizer(objValue, srcValue, key, object, source, stack);
                }

                if (!(result === undefined ? baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG, customizer, stack) : result)) {
                  return false;
                }
              }
            }

            return true;
          }
          /**
           * The base implementation of `_.isNative` without bad shim checks.
           *
           * @private
           * @param {*} value The value to check.
           * @returns {boolean} Returns `true` if `value` is a native function,
           *  else `false`.
           */


          function baseIsNative(value) {
            if (!isObject(value) || isMasked(value)) {
              return false;
            }

            var pattern = isFunction(value) ? reIsNative : reIsHostCtor;
            return pattern.test(toSource(value));
          }
          /**
           * The base implementation of `_.isRegExp` without Node.js optimizations.
           *
           * @private
           * @param {*} value The value to check.
           * @returns {boolean} Returns `true` if `value` is a regexp, else `false`.
           */


          function baseIsRegExp(value) {
            return isObjectLike(value) && baseGetTag(value) == regexpTag;
          }
          /**
           * The base implementation of `_.isSet` without Node.js optimizations.
           *
           * @private
           * @param {*} value The value to check.
           * @returns {boolean} Returns `true` if `value` is a set, else `false`.
           */


          function baseIsSet(value) {
            return isObjectLike(value) && getTag(value) == setTag;
          }
          /**
           * The base implementation of `_.isTypedArray` without Node.js optimizations.
           *
           * @private
           * @param {*} value The value to check.
           * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
           */


          function baseIsTypedArray(value) {
            return isObjectLike(value) && isLength(value.length) && !!typedArrayTags[baseGetTag(value)];
          }
          /**
           * The base implementation of `_.iteratee`.
           *
           * @private
           * @param {*} [value=_.identity] The value to convert to an iteratee.
           * @returns {Function} Returns the iteratee.
           */


          function baseIteratee(value) {
            // Don't store the `typeof` result in a variable to avoid a JIT bug in Safari 9.
            // See https://bugs.webkit.org/show_bug.cgi?id=156034 for more details.
            if (typeof value == 'function') {
              return value;
            }

            if (value == null) {
              return identity;
            }

            if (typeof value == 'object') {
              return isArray(value) ? baseMatchesProperty(value[0], value[1]) : baseMatches(value);
            }

            return property(value);
          }
          /**
           * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.
           *
           * @private
           * @param {Object} object The object to query.
           * @returns {Array} Returns the array of property names.
           */


          function baseKeys(object) {
            if (!isPrototype(object)) {
              return nativeKeys(object);
            }

            var result = [];

            for (var key in Object(object)) {
              if (hasOwnProperty.call(object, key) && key != 'constructor') {
                result.push(key);
              }
            }

            return result;
          }
          /**
           * The base implementation of `_.keysIn` which doesn't treat sparse arrays as dense.
           *
           * @private
           * @param {Object} object The object to query.
           * @returns {Array} Returns the array of property names.
           */


          function baseKeysIn(object) {
            if (!isObject(object)) {
              return nativeKeysIn(object);
            }

            var isProto = isPrototype(object),
                result = [];

            for (var key in object) {
              if (!(key == 'constructor' && (isProto || !hasOwnProperty.call(object, key)))) {
                result.push(key);
              }
            }

            return result;
          }
          /**
           * The base implementation of `_.lt` which doesn't coerce arguments.
           *
           * @private
           * @param {*} value The value to compare.
           * @param {*} other The other value to compare.
           * @returns {boolean} Returns `true` if `value` is less than `other`,
           *  else `false`.
           */


          function baseLt(value, other) {
            return value < other;
          }
          /**
           * The base implementation of `_.map` without support for iteratee shorthands.
           *
           * @private
           * @param {Array|Object} collection The collection to iterate over.
           * @param {Function} iteratee The function invoked per iteration.
           * @returns {Array} Returns the new mapped array.
           */


          function baseMap(collection, iteratee) {
            var index = -1,
                result = isArrayLike(collection) ? Array(collection.length) : [];
            baseEach(collection, function (value, key, collection) {
              result[++index] = iteratee(value, key, collection);
            });
            return result;
          }
          /**
           * The base implementation of `_.matches` which doesn't clone `source`.
           *
           * @private
           * @param {Object} source The object of property values to match.
           * @returns {Function} Returns the new spec function.
           */


          function baseMatches(source) {
            var matchData = getMatchData(source);

            if (matchData.length == 1 && matchData[0][2]) {
              return matchesStrictComparable(matchData[0][0], matchData[0][1]);
            }

            return function (object) {
              return object === source || baseIsMatch(object, source, matchData);
            };
          }
          /**
           * The base implementation of `_.matchesProperty` which doesn't clone `srcValue`.
           *
           * @private
           * @param {string} path The path of the property to get.
           * @param {*} srcValue The value to match.
           * @returns {Function} Returns the new spec function.
           */


          function baseMatchesProperty(path, srcValue) {
            if (isKey(path) && isStrictComparable(srcValue)) {
              return matchesStrictComparable(toKey(path), srcValue);
            }

            return function (object) {
              var objValue = get(object, path);
              return objValue === undefined && objValue === srcValue ? hasIn(object, path) : baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG);
            };
          }
          /**
           * The base implementation of `_.merge` without support for multiple sources.
           *
           * @private
           * @param {Object} object The destination object.
           * @param {Object} source The source object.
           * @param {number} srcIndex The index of `source`.
           * @param {Function} [customizer] The function to customize merged values.
           * @param {Object} [stack] Tracks traversed source values and their merged
           *  counterparts.
           */


          function baseMerge(object, source, srcIndex, customizer, stack) {
            if (object === source) {
              return;
            }

            baseFor(source, function (srcValue, key) {
              stack || (stack = new Stack());

              if (isObject(srcValue)) {
                baseMergeDeep(object, source, key, srcIndex, baseMerge, customizer, stack);
              } else {
                var newValue = customizer ? customizer(safeGet(object, key), srcValue, key + '', object, source, stack) : undefined;

                if (newValue === undefined) {
                  newValue = srcValue;
                }

                assignMergeValue(object, key, newValue);
              }
            }, keysIn);
          }
          /**
           * A specialized version of `baseMerge` for arrays and objects which performs
           * deep merges and tracks traversed objects enabling objects with circular
           * references to be merged.
           *
           * @private
           * @param {Object} object The destination object.
           * @param {Object} source The source object.
           * @param {string} key The key of the value to merge.
           * @param {number} srcIndex The index of `source`.
           * @param {Function} mergeFunc The function to merge values.
           * @param {Function} [customizer] The function to customize assigned values.
           * @param {Object} [stack] Tracks traversed source values and their merged
           *  counterparts.
           */


          function baseMergeDeep(object, source, key, srcIndex, mergeFunc, customizer, stack) {
            var objValue = safeGet(object, key),
                srcValue = safeGet(source, key),
                stacked = stack.get(srcValue);

            if (stacked) {
              assignMergeValue(object, key, stacked);
              return;
            }

            var newValue = customizer ? customizer(objValue, srcValue, key + '', object, source, stack) : undefined;
            var isCommon = newValue === undefined;

            if (isCommon) {
              var isArr = isArray(srcValue),
                  isBuff = !isArr && isBuffer(srcValue),
                  isTyped = !isArr && !isBuff && isTypedArray(srcValue);
              newValue = srcValue;

              if (isArr || isBuff || isTyped) {
                if (isArray(objValue)) {
                  newValue = objValue;
                } else if (isArrayLikeObject(objValue)) {
                  newValue = copyArray(objValue);
                } else if (isBuff) {
                  isCommon = false;
                  newValue = cloneBuffer(srcValue, true);
                } else if (isTyped) {
                  isCommon = false;
                  newValue = cloneTypedArray(srcValue, true);
                } else {
                  newValue = [];
                }
              } else if (isPlainObject(srcValue) || isArguments(srcValue)) {
                newValue = objValue;

                if (isArguments(objValue)) {
                  newValue = toPlainObject(objValue);
                } else if (!isObject(objValue) || isFunction(objValue)) {
                  newValue = initCloneObject(srcValue);
                }
              } else {
                isCommon = false;
              }
            }

            if (isCommon) {
              // Recursively merge objects and arrays (susceptible to call stack limits).
              stack.set(srcValue, newValue);
              mergeFunc(newValue, srcValue, srcIndex, customizer, stack);
              stack['delete'](srcValue);
            }

            assignMergeValue(object, key, newValue);
          }
          /**
           * The base implementation of `_.nth` which doesn't coerce arguments.
           *
           * @private
           * @param {Array} array The array to query.
           * @param {number} n The index of the element to return.
           * @returns {*} Returns the nth element of `array`.
           */


          function baseNth(array, n) {
            var length = array.length;

            if (!length) {
              return;
            }

            n += n < 0 ? length : 0;
            return isIndex(n, length) ? array[n] : undefined;
          }
          /**
           * The base implementation of `_.orderBy` without param guards.
           *
           * @private
           * @param {Array|Object} collection The collection to iterate over.
           * @param {Function[]|Object[]|string[]} iteratees The iteratees to sort by.
           * @param {string[]} orders The sort orders of `iteratees`.
           * @returns {Array} Returns the new sorted array.
           */


          function baseOrderBy(collection, iteratees, orders) {
            if (iteratees.length) {
              iteratees = arrayMap(iteratees, function (iteratee) {
                if (isArray(iteratee)) {
                  return function (value) {
                    return baseGet(value, iteratee.length === 1 ? iteratee[0] : iteratee);
                  };
                }

                return iteratee;
              });
            } else {
              iteratees = [identity];
            }

            var index = -1;
            iteratees = arrayMap(iteratees, baseUnary(getIteratee()));
            var result = baseMap(collection, function (value, key, collection) {
              var criteria = arrayMap(iteratees, function (iteratee) {
                return iteratee(value);
              });
              return {
                'criteria': criteria,
                'index': ++index,
                'value': value
              };
            });
            return baseSortBy(result, function (object, other) {
              return compareMultiple(object, other, orders);
            });
          }
          /**
           * The base implementation of `_.pick` without support for individual
           * property identifiers.
           *
           * @private
           * @param {Object} object The source object.
           * @param {string[]} paths The property paths to pick.
           * @returns {Object} Returns the new object.
           */


          function basePick(object, paths) {
            return basePickBy(object, paths, function (value, path) {
              return hasIn(object, path);
            });
          }
          /**
           * The base implementation of  `_.pickBy` without support for iteratee shorthands.
           *
           * @private
           * @param {Object} object The source object.
           * @param {string[]} paths The property paths to pick.
           * @param {Function} predicate The function invoked per property.
           * @returns {Object} Returns the new object.
           */


          function basePickBy(object, paths, predicate) {
            var index = -1,
                length = paths.length,
                result = {};

            while (++index < length) {
              var path = paths[index],
                  value = baseGet(object, path);

              if (predicate(value, path)) {
                baseSet(result, castPath(path, object), value);
              }
            }

            return result;
          }
          /**
           * A specialized version of `baseProperty` which supports deep paths.
           *
           * @private
           * @param {Array|string} path The path of the property to get.
           * @returns {Function} Returns the new accessor function.
           */


          function basePropertyDeep(path) {
            return function (object) {
              return baseGet(object, path);
            };
          }
          /**
           * The base implementation of `_.pullAllBy` without support for iteratee
           * shorthands.
           *
           * @private
           * @param {Array} array The array to modify.
           * @param {Array} values The values to remove.
           * @param {Function} [iteratee] The iteratee invoked per element.
           * @param {Function} [comparator] The comparator invoked per element.
           * @returns {Array} Returns `array`.
           */


          function basePullAll(array, values, iteratee, comparator) {
            var indexOf = comparator ? baseIndexOfWith : baseIndexOf,
                index = -1,
                length = values.length,
                seen = array;

            if (array === values) {
              values = copyArray(values);
            }

            if (iteratee) {
              seen = arrayMap(array, baseUnary(iteratee));
            }

            while (++index < length) {
              var fromIndex = 0,
                  value = values[index],
                  computed = iteratee ? iteratee(value) : value;

              while ((fromIndex = indexOf(seen, computed, fromIndex, comparator)) > -1) {
                if (seen !== array) {
                  splice.call(seen, fromIndex, 1);
                }

                splice.call(array, fromIndex, 1);
              }
            }

            return array;
          }
          /**
           * The base implementation of `_.pullAt` without support for individual
           * indexes or capturing the removed elements.
           *
           * @private
           * @param {Array} array The array to modify.
           * @param {number[]} indexes The indexes of elements to remove.
           * @returns {Array} Returns `array`.
           */


          function basePullAt(array, indexes) {
            var length = array ? indexes.length : 0,
                lastIndex = length - 1;

            while (length--) {
              var index = indexes[length];

              if (length == lastIndex || index !== previous) {
                var previous = index;

                if (isIndex(index)) {
                  splice.call(array, index, 1);
                } else {
                  baseUnset(array, index);
                }
              }
            }

            return array;
          }
          /**
           * The base implementation of `_.random` without support for returning
           * floating-point numbers.
           *
           * @private
           * @param {number} lower The lower bound.
           * @param {number} upper The upper bound.
           * @returns {number} Returns the random number.
           */


          function baseRandom(lower, upper) {
            return lower + nativeFloor(nativeRandom() * (upper - lower + 1));
          }
          /**
           * The base implementation of `_.range` and `_.rangeRight` which doesn't
           * coerce arguments.
           *
           * @private
           * @param {number} start The start of the range.
           * @param {number} end The end of the range.
           * @param {number} step The value to increment or decrement by.
           * @param {boolean} [fromRight] Specify iterating from right to left.
           * @returns {Array} Returns the range of numbers.
           */


          function baseRange(start, end, step, fromRight) {
            var index = -1,
                length = nativeMax(nativeCeil((end - start) / (step || 1)), 0),
                result = Array(length);

            while (length--) {
              result[fromRight ? length : ++index] = start;
              start += step;
            }

            return result;
          }
          /**
           * The base implementation of `_.repeat` which doesn't coerce arguments.
           *
           * @private
           * @param {string} string The string to repeat.
           * @param {number} n The number of times to repeat the string.
           * @returns {string} Returns the repeated string.
           */


          function baseRepeat(string, n) {
            var result = '';

            if (!string || n < 1 || n > MAX_SAFE_INTEGER) {
              return result;
            } // Leverage the exponentiation by squaring algorithm for a faster repeat.
            // See https://en.wikipedia.org/wiki/Exponentiation_by_squaring for more details.


            do {
              if (n % 2) {
                result += string;
              }

              n = nativeFloor(n / 2);

              if (n) {
                string += string;
              }
            } while (n);

            return result;
          }
          /**
           * The base implementation of `_.rest` which doesn't validate or coerce arguments.
           *
           * @private
           * @param {Function} func The function to apply a rest parameter to.
           * @param {number} [start=func.length-1] The start position of the rest parameter.
           * @returns {Function} Returns the new function.
           */


          function baseRest(func, start) {
            return setToString(overRest(func, start, identity), func + '');
          }
          /**
           * The base implementation of `_.sample`.
           *
           * @private
           * @param {Array|Object} collection The collection to sample.
           * @returns {*} Returns the random element.
           */


          function baseSample(collection) {
            return arraySample(values(collection));
          }
          /**
           * The base implementation of `_.sampleSize` without param guards.
           *
           * @private
           * @param {Array|Object} collection The collection to sample.
           * @param {number} n The number of elements to sample.
           * @returns {Array} Returns the random elements.
           */


          function baseSampleSize(collection, n) {
            var array = values(collection);
            return shuffleSelf(array, baseClamp(n, 0, array.length));
          }
          /**
           * The base implementation of `_.set`.
           *
           * @private
           * @param {Object} object The object to modify.
           * @param {Array|string} path The path of the property to set.
           * @param {*} value The value to set.
           * @param {Function} [customizer] The function to customize path creation.
           * @returns {Object} Returns `object`.
           */


          function baseSet(object, path, value, customizer) {
            if (!isObject(object)) {
              return object;
            }

            path = castPath(path, object);
            var index = -1,
                length = path.length,
                lastIndex = length - 1,
                nested = object;

            while (nested != null && ++index < length) {
              var key = toKey(path[index]),
                  newValue = value;

              if (key === '__proto__' || key === 'constructor' || key === 'prototype') {
                return object;
              }

              if (index != lastIndex) {
                var objValue = nested[key];
                newValue = customizer ? customizer(objValue, key, nested) : undefined;

                if (newValue === undefined) {
                  newValue = isObject(objValue) ? objValue : isIndex(path[index + 1]) ? [] : {};
                }
              }

              assignValue(nested, key, newValue);
              nested = nested[key];
            }

            return object;
          }
          /**
           * The base implementation of `setData` without support for hot loop shorting.
           *
           * @private
           * @param {Function} func The function to associate metadata with.
           * @param {*} data The metadata.
           * @returns {Function} Returns `func`.
           */


          var baseSetData = !metaMap ? identity : function (func, data) {
            metaMap.set(func, data);
            return func;
          };
          /**
           * The base implementation of `setToString` without support for hot loop shorting.
           *
           * @private
           * @param {Function} func The function to modify.
           * @param {Function} string The `toString` result.
           * @returns {Function} Returns `func`.
           */

          var baseSetToString = !defineProperty ? identity : function (func, string) {
            return defineProperty(func, 'toString', {
              'configurable': true,
              'enumerable': false,
              'value': constant(string),
              'writable': true
            });
          };
          /**
           * The base implementation of `_.shuffle`.
           *
           * @private
           * @param {Array|Object} collection The collection to shuffle.
           * @returns {Array} Returns the new shuffled array.
           */

          function baseShuffle(collection) {
            return shuffleSelf(values(collection));
          }
          /**
           * The base implementation of `_.slice` without an iteratee call guard.
           *
           * @private
           * @param {Array} array The array to slice.
           * @param {number} [start=0] The start position.
           * @param {number} [end=array.length] The end position.
           * @returns {Array} Returns the slice of `array`.
           */


          function baseSlice(array, start, end) {
            var index = -1,
                length = array.length;

            if (start < 0) {
              start = -start > length ? 0 : length + start;
            }

            end = end > length ? length : end;

            if (end < 0) {
              end += length;
            }

            length = start > end ? 0 : end - start >>> 0;
            start >>>= 0;
            var result = Array(length);

            while (++index < length) {
              result[index] = array[index + start];
            }

            return result;
          }
          /**
           * The base implementation of `_.some` without support for iteratee shorthands.
           *
           * @private
           * @param {Array|Object} collection The collection to iterate over.
           * @param {Function} predicate The function invoked per iteration.
           * @returns {boolean} Returns `true` if any element passes the predicate check,
           *  else `false`.
           */


          function baseSome(collection, predicate) {
            var result;
            baseEach(collection, function (value, index, collection) {
              result = predicate(value, index, collection);
              return !result;
            });
            return !!result;
          }
          /**
           * The base implementation of `_.sortedIndex` and `_.sortedLastIndex` which
           * performs a binary search of `array` to determine the index at which `value`
           * should be inserted into `array` in order to maintain its sort order.
           *
           * @private
           * @param {Array} array The sorted array to inspect.
           * @param {*} value The value to evaluate.
           * @param {boolean} [retHighest] Specify returning the highest qualified index.
           * @returns {number} Returns the index at which `value` should be inserted
           *  into `array`.
           */


          function baseSortedIndex(array, value, retHighest) {
            var low = 0,
                high = array == null ? low : array.length;

            if (typeof value == 'number' && value === value && high <= HALF_MAX_ARRAY_LENGTH) {
              while (low < high) {
                var mid = low + high >>> 1,
                    computed = array[mid];

                if (computed !== null && !isSymbol(computed) && (retHighest ? computed <= value : computed < value)) {
                  low = mid + 1;
                } else {
                  high = mid;
                }
              }

              return high;
            }

            return baseSortedIndexBy(array, value, identity, retHighest);
          }
          /**
           * The base implementation of `_.sortedIndexBy` and `_.sortedLastIndexBy`
           * which invokes `iteratee` for `value` and each element of `array` to compute
           * their sort ranking. The iteratee is invoked with one argument; (value).
           *
           * @private
           * @param {Array} array The sorted array to inspect.
           * @param {*} value The value to evaluate.
           * @param {Function} iteratee The iteratee invoked per element.
           * @param {boolean} [retHighest] Specify returning the highest qualified index.
           * @returns {number} Returns the index at which `value` should be inserted
           *  into `array`.
           */


          function baseSortedIndexBy(array, value, iteratee, retHighest) {
            var low = 0,
                high = array == null ? 0 : array.length;

            if (high === 0) {
              return 0;
            }

            value = iteratee(value);
            var valIsNaN = value !== value,
                valIsNull = value === null,
                valIsSymbol = isSymbol(value),
                valIsUndefined = value === undefined;

            while (low < high) {
              var mid = nativeFloor((low + high) / 2),
                  computed = iteratee(array[mid]),
                  othIsDefined = computed !== undefined,
                  othIsNull = computed === null,
                  othIsReflexive = computed === computed,
                  othIsSymbol = isSymbol(computed);

              if (valIsNaN) {
                var setLow = retHighest || othIsReflexive;
              } else if (valIsUndefined) {
                setLow = othIsReflexive && (retHighest || othIsDefined);
              } else if (valIsNull) {
                setLow = othIsReflexive && othIsDefined && (retHighest || !othIsNull);
              } else if (valIsSymbol) {
                setLow = othIsReflexive && othIsDefined && !othIsNull && (retHighest || !othIsSymbol);
              } else if (othIsNull || othIsSymbol) {
                setLow = false;
              } else {
                setLow = retHighest ? computed <= value : computed < value;
              }

              if (setLow) {
                low = mid + 1;
              } else {
                high = mid;
              }
            }

            return nativeMin(high, MAX_ARRAY_INDEX);
          }
          /**
           * The base implementation of `_.sortedUniq` and `_.sortedUniqBy` without
           * support for iteratee shorthands.
           *
           * @private
           * @param {Array} array The array to inspect.
           * @param {Function} [iteratee] The iteratee invoked per element.
           * @returns {Array} Returns the new duplicate free array.
           */


          function baseSortedUniq(array, iteratee) {
            var index = -1,
                length = array.length,
                resIndex = 0,
                result = [];

            while (++index < length) {
              var value = array[index],
                  computed = iteratee ? iteratee(value) : value;

              if (!index || !eq(computed, seen)) {
                var seen = computed;
                result[resIndex++] = value === 0 ? 0 : value;
              }
            }

            return result;
          }
          /**
           * The base implementation of `_.toNumber` which doesn't ensure correct
           * conversions of binary, hexadecimal, or octal string values.
           *
           * @private
           * @param {*} value The value to process.
           * @returns {number} Returns the number.
           */


          function baseToNumber(value) {
            if (typeof value == 'number') {
              return value;
            }

            if (isSymbol(value)) {
              return NAN;
            }

            return +value;
          }
          /**
           * The base implementation of `_.toString` which doesn't convert nullish
           * values to empty strings.
           *
           * @private
           * @param {*} value The value to process.
           * @returns {string} Returns the string.
           */


          function baseToString(value) {
            // Exit early for strings to avoid a performance hit in some environments.
            if (typeof value == 'string') {
              return value;
            }

            if (isArray(value)) {
              // Recursively convert values (susceptible to call stack limits).
              return arrayMap(value, baseToString) + '';
            }

            if (isSymbol(value)) {
              return symbolToString ? symbolToString.call(value) : '';
            }

            var result = value + '';
            return result == '0' && 1 / value == -INFINITY ? '-0' : result;
          }
          /**
           * The base implementation of `_.uniqBy` without support for iteratee shorthands.
           *
           * @private
           * @param {Array} array The array to inspect.
           * @param {Function} [iteratee] The iteratee invoked per element.
           * @param {Function} [comparator] The comparator invoked per element.
           * @returns {Array} Returns the new duplicate free array.
           */


          function baseUniq(array, iteratee, comparator) {
            var index = -1,
                includes = arrayIncludes,
                length = array.length,
                isCommon = true,
                result = [],
                seen = result;

            if (comparator) {
              isCommon = false;
              includes = arrayIncludesWith;
            } else if (length >= LARGE_ARRAY_SIZE) {
              var set = iteratee ? null : createSet(array);

              if (set) {
                return setToArray(set);
              }

              isCommon = false;
              includes = cacheHas;
              seen = new SetCache();
            } else {
              seen = iteratee ? [] : result;
            }

            outer: while (++index < length) {
              var value = array[index],
                  computed = iteratee ? iteratee(value) : value;
              value = comparator || value !== 0 ? value : 0;

              if (isCommon && computed === computed) {
                var seenIndex = seen.length;

                while (seenIndex--) {
                  if (seen[seenIndex] === computed) {
                    continue outer;
                  }
                }

                if (iteratee) {
                  seen.push(computed);
                }

                result.push(value);
              } else if (!includes(seen, computed, comparator)) {
                if (seen !== result) {
                  seen.push(computed);
                }

                result.push(value);
              }
            }

            return result;
          }
          /**
           * The base implementation of `_.unset`.
           *
           * @private
           * @param {Object} object The object to modify.
           * @param {Array|string} path The property path to unset.
           * @returns {boolean} Returns `true` if the property is deleted, else `false`.
           */


          function baseUnset(object, path) {
            path = castPath(path, object);
            object = parent(object, path);
            return object == null || delete object[toKey(last(path))];
          }
          /**
           * The base implementation of `_.update`.
           *
           * @private
           * @param {Object} object The object to modify.
           * @param {Array|string} path The path of the property to update.
           * @param {Function} updater The function to produce the updated value.
           * @param {Function} [customizer] The function to customize path creation.
           * @returns {Object} Returns `object`.
           */


          function baseUpdate(object, path, updater, customizer) {
            return baseSet(object, path, updater(baseGet(object, path)), customizer);
          }
          /**
           * The base implementation of methods like `_.dropWhile` and `_.takeWhile`
           * without support for iteratee shorthands.
           *
           * @private
           * @param {Array} array The array to query.
           * @param {Function} predicate The function invoked per iteration.
           * @param {boolean} [isDrop] Specify dropping elements instead of taking them.
           * @param {boolean} [fromRight] Specify iterating from right to left.
           * @returns {Array} Returns the slice of `array`.
           */


          function baseWhile(array, predicate, isDrop, fromRight) {
            var length = array.length,
                index = fromRight ? length : -1;

            while ((fromRight ? index-- : ++index < length) && predicate(array[index], index, array)) {}

            return isDrop ? baseSlice(array, fromRight ? 0 : index, fromRight ? index + 1 : length) : baseSlice(array, fromRight ? index + 1 : 0, fromRight ? length : index);
          }
          /**
           * The base implementation of `wrapperValue` which returns the result of
           * performing a sequence of actions on the unwrapped `value`, where each
           * successive action is supplied the return value of the previous.
           *
           * @private
           * @param {*} value The unwrapped value.
           * @param {Array} actions Actions to perform to resolve the unwrapped value.
           * @returns {*} Returns the resolved value.
           */


          function baseWrapperValue(value, actions) {
            var result = value;

            if (result instanceof LazyWrapper) {
              result = result.value();
            }

            return arrayReduce(actions, function (result, action) {
              return action.func.apply(action.thisArg, arrayPush([result], action.args));
            }, result);
          }
          /**
           * The base implementation of methods like `_.xor`, without support for
           * iteratee shorthands, that accepts an array of arrays to inspect.
           *
           * @private
           * @param {Array} arrays The arrays to inspect.
           * @param {Function} [iteratee] The iteratee invoked per element.
           * @param {Function} [comparator] The comparator invoked per element.
           * @returns {Array} Returns the new array of values.
           */


          function baseXor(arrays, iteratee, comparator) {
            var length = arrays.length;

            if (length < 2) {
              return length ? baseUniq(arrays[0]) : [];
            }

            var index = -1,
                result = Array(length);

            while (++index < length) {
              var array = arrays[index],
                  othIndex = -1;

              while (++othIndex < length) {
                if (othIndex != index) {
                  result[index] = baseDifference(result[index] || array, arrays[othIndex], iteratee, comparator);
                }
              }
            }

            return baseUniq(baseFlatten(result, 1), iteratee, comparator);
          }
          /**
           * This base implementation of `_.zipObject` which assigns values using `assignFunc`.
           *
           * @private
           * @param {Array} props The property identifiers.
           * @param {Array} values The property values.
           * @param {Function} assignFunc The function to assign values.
           * @returns {Object} Returns the new object.
           */


          function baseZipObject(props, values, assignFunc) {
            var index = -1,
                length = props.length,
                valsLength = values.length,
                result = {};

            while (++index < length) {
              var value = index < valsLength ? values[index] : undefined;
              assignFunc(result, props[index], value);
            }

            return result;
          }
          /**
           * Casts `value` to an empty array if it's not an array like object.
           *
           * @private
           * @param {*} value The value to inspect.
           * @returns {Array|Object} Returns the cast array-like object.
           */


          function castArrayLikeObject(value) {
            return isArrayLikeObject(value) ? value : [];
          }
          /**
           * Casts `value` to `identity` if it's not a function.
           *
           * @private
           * @param {*} value The value to inspect.
           * @returns {Function} Returns cast function.
           */


          function castFunction(value) {
            return typeof value == 'function' ? value : identity;
          }
          /**
           * Casts `value` to a path array if it's not one.
           *
           * @private
           * @param {*} value The value to inspect.
           * @param {Object} [object] The object to query keys on.
           * @returns {Array} Returns the cast property path array.
           */


          function castPath(value, object) {
            if (isArray(value)) {
              return value;
            }

            return isKey(value, object) ? [value] : stringToPath(toString(value));
          }
          /**
           * A `baseRest` alias which can be replaced with `identity` by module
           * replacement plugins.
           *
           * @private
           * @type {Function}
           * @param {Function} func The function to apply a rest parameter to.
           * @returns {Function} Returns the new function.
           */


          var castRest = baseRest;
          /**
           * Casts `array` to a slice if it's needed.
           *
           * @private
           * @param {Array} array The array to inspect.
           * @param {number} start The start position.
           * @param {number} [end=array.length] The end position.
           * @returns {Array} Returns the cast slice.
           */

          function castSlice(array, start, end) {
            var length = array.length;
            end = end === undefined ? length : end;
            return !start && end >= length ? array : baseSlice(array, start, end);
          }
          /**
           * A simple wrapper around the global [`clearTimeout`](https://mdn.io/clearTimeout).
           *
           * @private
           * @param {number|Object} id The timer id or timeout object of the timer to clear.
           */


          var clearTimeout = ctxClearTimeout || function (id) {
            return root.clearTimeout(id);
          };
          /**
           * Creates a clone of  `buffer`.
           *
           * @private
           * @param {Buffer} buffer The buffer to clone.
           * @param {boolean} [isDeep] Specify a deep clone.
           * @returns {Buffer} Returns the cloned buffer.
           */


          function cloneBuffer(buffer, isDeep) {
            if (isDeep) {
              return buffer.slice();
            }

            var length = buffer.length,
                result = allocUnsafe ? allocUnsafe(length) : new buffer.constructor(length);
            buffer.copy(result);
            return result;
          }
          /**
           * Creates a clone of `arrayBuffer`.
           *
           * @private
           * @param {ArrayBuffer} arrayBuffer The array buffer to clone.
           * @returns {ArrayBuffer} Returns the cloned array buffer.
           */


          function cloneArrayBuffer(arrayBuffer) {
            var result = new arrayBuffer.constructor(arrayBuffer.byteLength);
            new Uint8Array(result).set(new Uint8Array(arrayBuffer));
            return result;
          }
          /**
           * Creates a clone of `dataView`.
           *
           * @private
           * @param {Object} dataView The data view to clone.
           * @param {boolean} [isDeep] Specify a deep clone.
           * @returns {Object} Returns the cloned data view.
           */


          function cloneDataView(dataView, isDeep) {
            var buffer = isDeep ? cloneArrayBuffer(dataView.buffer) : dataView.buffer;
            return new dataView.constructor(buffer, dataView.byteOffset, dataView.byteLength);
          }
          /**
           * Creates a clone of `regexp`.
           *
           * @private
           * @param {Object} regexp The regexp to clone.
           * @returns {Object} Returns the cloned regexp.
           */


          function cloneRegExp(regexp) {
            var result = new regexp.constructor(regexp.source, reFlags.exec(regexp));
            result.lastIndex = regexp.lastIndex;
            return result;
          }
          /**
           * Creates a clone of the `symbol` object.
           *
           * @private
           * @param {Object} symbol The symbol object to clone.
           * @returns {Object} Returns the cloned symbol object.
           */


          function cloneSymbol(symbol) {
            return symbolValueOf ? Object(symbolValueOf.call(symbol)) : {};
          }
          /**
           * Creates a clone of `typedArray`.
           *
           * @private
           * @param {Object} typedArray The typed array to clone.
           * @param {boolean} [isDeep] Specify a deep clone.
           * @returns {Object} Returns the cloned typed array.
           */


          function cloneTypedArray(typedArray, isDeep) {
            var buffer = isDeep ? cloneArrayBuffer(typedArray.buffer) : typedArray.buffer;
            return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);
          }
          /**
           * Compares values to sort them in ascending order.
           *
           * @private
           * @param {*} value The value to compare.
           * @param {*} other The other value to compare.
           * @returns {number} Returns the sort order indicator for `value`.
           */


          function compareAscending(value, other) {
            if (value !== other) {
              var valIsDefined = value !== undefined,
                  valIsNull = value === null,
                  valIsReflexive = value === value,
                  valIsSymbol = isSymbol(value);
              var othIsDefined = other !== undefined,
                  othIsNull = other === null,
                  othIsReflexive = other === other,
                  othIsSymbol = isSymbol(other);

              if (!othIsNull && !othIsSymbol && !valIsSymbol && value > other || valIsSymbol && othIsDefined && othIsReflexive && !othIsNull && !othIsSymbol || valIsNull && othIsDefined && othIsReflexive || !valIsDefined && othIsReflexive || !valIsReflexive) {
                return 1;
              }

              if (!valIsNull && !valIsSymbol && !othIsSymbol && value < other || othIsSymbol && valIsDefined && valIsReflexive && !valIsNull && !valIsSymbol || othIsNull && valIsDefined && valIsReflexive || !othIsDefined && valIsReflexive || !othIsReflexive) {
                return -1;
              }
            }

            return 0;
          }
          /**
           * Used by `_.orderBy` to compare multiple properties of a value to another
           * and stable sort them.
           *
           * If `orders` is unspecified, all values are sorted in ascending order. Otherwise,
           * specify an order of "desc" for descending or "asc" for ascending sort order
           * of corresponding values.
           *
           * @private
           * @param {Object} object The object to compare.
           * @param {Object} other The other object to compare.
           * @param {boolean[]|string[]} orders The order to sort by for each property.
           * @returns {number} Returns the sort order indicator for `object`.
           */


          function compareMultiple(object, other, orders) {
            var index = -1,
                objCriteria = object.criteria,
                othCriteria = other.criteria,
                length = objCriteria.length,
                ordersLength = orders.length;

            while (++index < length) {
              var result = compareAscending(objCriteria[index], othCriteria[index]);

              if (result) {
                if (index >= ordersLength) {
                  return result;
                }

                var order = orders[index];
                return result * (order == 'desc' ? -1 : 1);
              }
            } // Fixes an `Array#sort` bug in the JS engine embedded in Adobe applications
            // that causes it, under certain circumstances, to provide the same value for
            // `object` and `other`. See https://github.com/jashkenas/underscore/pull/1247
            // for more details.
            //
            // This also ensures a stable sort in V8 and other engines.
            // See https://bugs.chromium.org/p/v8/issues/detail?id=90 for more details.


            return object.index - other.index;
          }
          /**
           * Creates an array that is the composition of partially applied arguments,
           * placeholders, and provided arguments into a single array of arguments.
           *
           * @private
           * @param {Array} args The provided arguments.
           * @param {Array} partials The arguments to prepend to those provided.
           * @param {Array} holders The `partials` placeholder indexes.
           * @params {boolean} [isCurried] Specify composing for a curried function.
           * @returns {Array} Returns the new array of composed arguments.
           */


          function composeArgs(args, partials, holders, isCurried) {
            var argsIndex = -1,
                argsLength = args.length,
                holdersLength = holders.length,
                leftIndex = -1,
                leftLength = partials.length,
                rangeLength = nativeMax(argsLength - holdersLength, 0),
                result = Array(leftLength + rangeLength),
                isUncurried = !isCurried;

            while (++leftIndex < leftLength) {
              result[leftIndex] = partials[leftIndex];
            }

            while (++argsIndex < holdersLength) {
              if (isUncurried || argsIndex < argsLength) {
                result[holders[argsIndex]] = args[argsIndex];
              }
            }

            while (rangeLength--) {
              result[leftIndex++] = args[argsIndex++];
            }

            return result;
          }
          /**
           * This function is like `composeArgs` except that the arguments composition
           * is tailored for `_.partialRight`.
           *
           * @private
           * @param {Array} args The provided arguments.
           * @param {Array} partials The arguments to append to those provided.
           * @param {Array} holders The `partials` placeholder indexes.
           * @params {boolean} [isCurried] Specify composing for a curried function.
           * @returns {Array} Returns the new array of composed arguments.
           */


          function composeArgsRight(args, partials, holders, isCurried) {
            var argsIndex = -1,
                argsLength = args.length,
                holdersIndex = -1,
                holdersLength = holders.length,
                rightIndex = -1,
                rightLength = partials.length,
                rangeLength = nativeMax(argsLength - holdersLength, 0),
                result = Array(rangeLength + rightLength),
                isUncurried = !isCurried;

            while (++argsIndex < rangeLength) {
              result[argsIndex] = args[argsIndex];
            }

            var offset = argsIndex;

            while (++rightIndex < rightLength) {
              result[offset + rightIndex] = partials[rightIndex];
            }

            while (++holdersIndex < holdersLength) {
              if (isUncurried || argsIndex < argsLength) {
                result[offset + holders[holdersIndex]] = args[argsIndex++];
              }
            }

            return result;
          }
          /**
           * Copies the values of `source` to `array`.
           *
           * @private
           * @param {Array} source The array to copy values from.
           * @param {Array} [array=[]] The array to copy values to.
           * @returns {Array} Returns `array`.
           */


          function copyArray(source, array) {
            var index = -1,
                length = source.length;
            array || (array = Array(length));

            while (++index < length) {
              array[index] = source[index];
            }

            return array;
          }
          /**
           * Copies properties of `source` to `object`.
           *
           * @private
           * @param {Object} source The object to copy properties from.
           * @param {Array} props The property identifiers to copy.
           * @param {Object} [object={}] The object to copy properties to.
           * @param {Function} [customizer] The function to customize copied values.
           * @returns {Object} Returns `object`.
           */


          function copyObject(source, props, object, customizer) {
            var isNew = !object;
            object || (object = {});
            var index = -1,
                length = props.length;

            while (++index < length) {
              var key = props[index];
              var newValue = customizer ? customizer(object[key], source[key], key, object, source) : undefined;

              if (newValue === undefined) {
                newValue = source[key];
              }

              if (isNew) {
                baseAssignValue(object, key, newValue);
              } else {
                assignValue(object, key, newValue);
              }
            }

            return object;
          }
          /**
           * Copies own symbols of `source` to `object`.
           *
           * @private
           * @param {Object} source The object to copy symbols from.
           * @param {Object} [object={}] The object to copy symbols to.
           * @returns {Object} Returns `object`.
           */


          function copySymbols(source, object) {
            return copyObject(source, getSymbols(source), object);
          }
          /**
           * Copies own and inherited symbols of `source` to `object`.
           *
           * @private
           * @param {Object} source The object to copy symbols from.
           * @param {Object} [object={}] The object to copy symbols to.
           * @returns {Object} Returns `object`.
           */


          function copySymbolsIn(source, object) {
            return copyObject(source, getSymbolsIn(source), object);
          }
          /**
           * Creates a function like `_.groupBy`.
           *
           * @private
           * @param {Function} setter The function to set accumulator values.
           * @param {Function} [initializer] The accumulator object initializer.
           * @returns {Function} Returns the new aggregator function.
           */


          function createAggregator(setter, initializer) {
            return function (collection, iteratee) {
              var func = isArray(collection) ? arrayAggregator : baseAggregator,
                  accumulator = initializer ? initializer() : {};
              return func(collection, setter, getIteratee(iteratee, 2), accumulator);
            };
          }
          /**
           * Creates a function like `_.assign`.
           *
           * @private
           * @param {Function} assigner The function to assign values.
           * @returns {Function} Returns the new assigner function.
           */


          function createAssigner(assigner) {
            return baseRest(function (object, sources) {
              var index = -1,
                  length = sources.length,
                  customizer = length > 1 ? sources[length - 1] : undefined,
                  guard = length > 2 ? sources[2] : undefined;
              customizer = assigner.length > 3 && typeof customizer == 'function' ? (length--, customizer) : undefined;

              if (guard && isIterateeCall(sources[0], sources[1], guard)) {
                customizer = length < 3 ? undefined : customizer;
                length = 1;
              }

              object = Object(object);

              while (++index < length) {
                var source = sources[index];

                if (source) {
                  assigner(object, source, index, customizer);
                }
              }

              return object;
            });
          }
          /**
           * Creates a `baseEach` or `baseEachRight` function.
           *
           * @private
           * @param {Function} eachFunc The function to iterate over a collection.
           * @param {boolean} [fromRight] Specify iterating from right to left.
           * @returns {Function} Returns the new base function.
           */


          function createBaseEach(eachFunc, fromRight) {
            return function (collection, iteratee) {
              if (collection == null) {
                return collection;
              }

              if (!isArrayLike(collection)) {
                return eachFunc(collection, iteratee);
              }

              var length = collection.length,
                  index = fromRight ? length : -1,
                  iterable = Object(collection);

              while (fromRight ? index-- : ++index < length) {
                if (iteratee(iterable[index], index, iterable) === false) {
                  break;
                }
              }

              return collection;
            };
          }
          /**
           * Creates a base function for methods like `_.forIn` and `_.forOwn`.
           *
           * @private
           * @param {boolean} [fromRight] Specify iterating from right to left.
           * @returns {Function} Returns the new base function.
           */


          function createBaseFor(fromRight) {
            return function (object, iteratee, keysFunc) {
              var index = -1,
                  iterable = Object(object),
                  props = keysFunc(object),
                  length = props.length;

              while (length--) {
                var key = props[fromRight ? length : ++index];

                if (iteratee(iterable[key], key, iterable) === false) {
                  break;
                }
              }

              return object;
            };
          }
          /**
           * Creates a function that wraps `func` to invoke it with the optional `this`
           * binding of `thisArg`.
           *
           * @private
           * @param {Function} func The function to wrap.
           * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
           * @param {*} [thisArg] The `this` binding of `func`.
           * @returns {Function} Returns the new wrapped function.
           */


          function createBind(func, bitmask, thisArg) {
            var isBind = bitmask & WRAP_BIND_FLAG,
                Ctor = createCtor(func);

            function wrapper() {
              var fn = this && this !== root && this instanceof wrapper ? Ctor : func;
              return fn.apply(isBind ? thisArg : this, arguments);
            }

            return wrapper;
          }
          /**
           * Creates a function like `_.lowerFirst`.
           *
           * @private
           * @param {string} methodName The name of the `String` case method to use.
           * @returns {Function} Returns the new case function.
           */


          function createCaseFirst(methodName) {
            return function (string) {
              string = toString(string);
              var strSymbols = hasUnicode(string) ? stringToArray(string) : undefined;
              var chr = strSymbols ? strSymbols[0] : string.charAt(0);
              var trailing = strSymbols ? castSlice(strSymbols, 1).join('') : string.slice(1);
              return chr[methodName]() + trailing;
            };
          }
          /**
           * Creates a function like `_.camelCase`.
           *
           * @private
           * @param {Function} callback The function to combine each word.
           * @returns {Function} Returns the new compounder function.
           */


          function createCompounder(callback) {
            return function (string) {
              return arrayReduce(words(deburr(string).replace(reApos, '')), callback, '');
            };
          }
          /**
           * Creates a function that produces an instance of `Ctor` regardless of
           * whether it was invoked as part of a `new` expression or by `call` or `apply`.
           *
           * @private
           * @param {Function} Ctor The constructor to wrap.
           * @returns {Function} Returns the new wrapped function.
           */


          function createCtor(Ctor) {
            return function () {
              // Use a `switch` statement to work with class constructors. See
              // http://ecma-international.org/ecma-262/7.0/#sec-ecmascript-function-objects-call-thisargument-argumentslist
              // for more details.
              var args = arguments;

              switch (args.length) {
                case 0:
                  return new Ctor();

                case 1:
                  return new Ctor(args[0]);

                case 2:
                  return new Ctor(args[0], args[1]);

                case 3:
                  return new Ctor(args[0], args[1], args[2]);

                case 4:
                  return new Ctor(args[0], args[1], args[2], args[3]);

                case 5:
                  return new Ctor(args[0], args[1], args[2], args[3], args[4]);

                case 6:
                  return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5]);

                case 7:
                  return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5], args[6]);
              }

              var thisBinding = baseCreate(Ctor.prototype),
                  result = Ctor.apply(thisBinding, args); // Mimic the constructor's `return` behavior.
              // See https://es5.github.io/#x13.2.2 for more details.

              return isObject(result) ? result : thisBinding;
            };
          }
          /**
           * Creates a function that wraps `func` to enable currying.
           *
           * @private
           * @param {Function} func The function to wrap.
           * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
           * @param {number} arity The arity of `func`.
           * @returns {Function} Returns the new wrapped function.
           */


          function createCurry(func, bitmask, arity) {
            var Ctor = createCtor(func);

            function wrapper() {
              var length = arguments.length,
                  args = Array(length),
                  index = length,
                  placeholder = getHolder(wrapper);

              while (index--) {
                args[index] = arguments[index];
              }

              var holders = length < 3 && args[0] !== placeholder && args[length - 1] !== placeholder ? [] : replaceHolders(args, placeholder);
              length -= holders.length;

              if (length < arity) {
                return createRecurry(func, bitmask, createHybrid, wrapper.placeholder, undefined, args, holders, undefined, undefined, arity - length);
              }

              var fn = this && this !== root && this instanceof wrapper ? Ctor : func;
              return apply(fn, this, args);
            }

            return wrapper;
          }
          /**
           * Creates a `_.find` or `_.findLast` function.
           *
           * @private
           * @param {Function} findIndexFunc The function to find the collection index.
           * @returns {Function} Returns the new find function.
           */


          function createFind(findIndexFunc) {
            return function (collection, predicate, fromIndex) {
              var iterable = Object(collection);

              if (!isArrayLike(collection)) {
                var iteratee = getIteratee(predicate, 3);
                collection = keys(collection);

                predicate = function predicate(key) {
                  return iteratee(iterable[key], key, iterable);
                };
              }

              var index = findIndexFunc(collection, predicate, fromIndex);
              return index > -1 ? iterable[iteratee ? collection[index] : index] : undefined;
            };
          }
          /**
           * Creates a `_.flow` or `_.flowRight` function.
           *
           * @private
           * @param {boolean} [fromRight] Specify iterating from right to left.
           * @returns {Function} Returns the new flow function.
           */


          function createFlow(fromRight) {
            return flatRest(function (funcs) {
              var length = funcs.length,
                  index = length,
                  prereq = LodashWrapper.prototype.thru;

              if (fromRight) {
                funcs.reverse();
              }

              while (index--) {
                var func = funcs[index];

                if (typeof func != 'function') {
                  throw new TypeError(FUNC_ERROR_TEXT);
                }

                if (prereq && !wrapper && getFuncName(func) == 'wrapper') {
                  var wrapper = new LodashWrapper([], true);
                }
              }

              index = wrapper ? index : length;

              while (++index < length) {
                func = funcs[index];
                var funcName = getFuncName(func),
                    data = funcName == 'wrapper' ? getData(func) : undefined;

                if (data && isLaziable(data[0]) && data[1] == (WRAP_ARY_FLAG | WRAP_CURRY_FLAG | WRAP_PARTIAL_FLAG | WRAP_REARG_FLAG) && !data[4].length && data[9] == 1) {
                  wrapper = wrapper[getFuncName(data[0])].apply(wrapper, data[3]);
                } else {
                  wrapper = func.length == 1 && isLaziable(func) ? wrapper[funcName]() : wrapper.thru(func);
                }
              }

              return function () {
                var args = arguments,
                    value = args[0];

                if (wrapper && args.length == 1 && isArray(value)) {
                  return wrapper.plant(value).value();
                }

                var index = 0,
                    result = length ? funcs[index].apply(this, args) : value;

                while (++index < length) {
                  result = funcs[index].call(this, result);
                }

                return result;
              };
            });
          }
          /**
           * Creates a function that wraps `func` to invoke it with optional `this`
           * binding of `thisArg`, partial application, and currying.
           *
           * @private
           * @param {Function|string} func The function or method name to wrap.
           * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
           * @param {*} [thisArg] The `this` binding of `func`.
           * @param {Array} [partials] The arguments to prepend to those provided to
           *  the new function.
           * @param {Array} [holders] The `partials` placeholder indexes.
           * @param {Array} [partialsRight] The arguments to append to those provided
           *  to the new function.
           * @param {Array} [holdersRight] The `partialsRight` placeholder indexes.
           * @param {Array} [argPos] The argument positions of the new function.
           * @param {number} [ary] The arity cap of `func`.
           * @param {number} [arity] The arity of `func`.
           * @returns {Function} Returns the new wrapped function.
           */


          function createHybrid(func, bitmask, thisArg, partials, holders, partialsRight, holdersRight, argPos, ary, arity) {
            var isAry = bitmask & WRAP_ARY_FLAG,
                isBind = bitmask & WRAP_BIND_FLAG,
                isBindKey = bitmask & WRAP_BIND_KEY_FLAG,
                isCurried = bitmask & (WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG),
                isFlip = bitmask & WRAP_FLIP_FLAG,
                Ctor = isBindKey ? undefined : createCtor(func);

            function wrapper() {
              var length = arguments.length,
                  args = Array(length),
                  index = length;

              while (index--) {
                args[index] = arguments[index];
              }

              if (isCurried) {
                var placeholder = getHolder(wrapper),
                    holdersCount = countHolders(args, placeholder);
              }

              if (partials) {
                args = composeArgs(args, partials, holders, isCurried);
              }

              if (partialsRight) {
                args = composeArgsRight(args, partialsRight, holdersRight, isCurried);
              }

              length -= holdersCount;

              if (isCurried && length < arity) {
                var newHolders = replaceHolders(args, placeholder);
                return createRecurry(func, bitmask, createHybrid, wrapper.placeholder, thisArg, args, newHolders, argPos, ary, arity - length);
              }

              var thisBinding = isBind ? thisArg : this,
                  fn = isBindKey ? thisBinding[func] : func;
              length = args.length;

              if (argPos) {
                args = reorder(args, argPos);
              } else if (isFlip && length > 1) {
                args.reverse();
              }

              if (isAry && ary < length) {
                args.length = ary;
              }

              if (this && this !== root && this instanceof wrapper) {
                fn = Ctor || createCtor(fn);
              }

              return fn.apply(thisBinding, args);
            }

            return wrapper;
          }
          /**
           * Creates a function like `_.invertBy`.
           *
           * @private
           * @param {Function} setter The function to set accumulator values.
           * @param {Function} toIteratee The function to resolve iteratees.
           * @returns {Function} Returns the new inverter function.
           */


          function createInverter(setter, toIteratee) {
            return function (object, iteratee) {
              return baseInverter(object, setter, toIteratee(iteratee), {});
            };
          }
          /**
           * Creates a function that performs a mathematical operation on two values.
           *
           * @private
           * @param {Function} operator The function to perform the operation.
           * @param {number} [defaultValue] The value used for `undefined` arguments.
           * @returns {Function} Returns the new mathematical operation function.
           */


          function createMathOperation(operator, defaultValue) {
            return function (value, other) {
              var result;

              if (value === undefined && other === undefined) {
                return defaultValue;
              }

              if (value !== undefined) {
                result = value;
              }

              if (other !== undefined) {
                if (result === undefined) {
                  return other;
                }

                if (typeof value == 'string' || typeof other == 'string') {
                  value = baseToString(value);
                  other = baseToString(other);
                } else {
                  value = baseToNumber(value);
                  other = baseToNumber(other);
                }

                result = operator(value, other);
              }

              return result;
            };
          }
          /**
           * Creates a function like `_.over`.
           *
           * @private
           * @param {Function} arrayFunc The function to iterate over iteratees.
           * @returns {Function} Returns the new over function.
           */


          function createOver(arrayFunc) {
            return flatRest(function (iteratees) {
              iteratees = arrayMap(iteratees, baseUnary(getIteratee()));
              return baseRest(function (args) {
                var thisArg = this;
                return arrayFunc(iteratees, function (iteratee) {
                  return apply(iteratee, thisArg, args);
                });
              });
            });
          }
          /**
           * Creates the padding for `string` based on `length`. The `chars` string
           * is truncated if the number of characters exceeds `length`.
           *
           * @private
           * @param {number} length The padding length.
           * @param {string} [chars=' '] The string used as padding.
           * @returns {string} Returns the padding for `string`.
           */


          function createPadding(length, chars) {
            chars = chars === undefined ? ' ' : baseToString(chars);
            var charsLength = chars.length;

            if (charsLength < 2) {
              return charsLength ? baseRepeat(chars, length) : chars;
            }

            var result = baseRepeat(chars, nativeCeil(length / stringSize(chars)));
            return hasUnicode(chars) ? castSlice(stringToArray(result), 0, length).join('') : result.slice(0, length);
          }
          /**
           * Creates a function that wraps `func` to invoke it with the `this` binding
           * of `thisArg` and `partials` prepended to the arguments it receives.
           *
           * @private
           * @param {Function} func The function to wrap.
           * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
           * @param {*} thisArg The `this` binding of `func`.
           * @param {Array} partials The arguments to prepend to those provided to
           *  the new function.
           * @returns {Function} Returns the new wrapped function.
           */


          function createPartial(func, bitmask, thisArg, partials) {
            var isBind = bitmask & WRAP_BIND_FLAG,
                Ctor = createCtor(func);

            function wrapper() {
              var argsIndex = -1,
                  argsLength = arguments.length,
                  leftIndex = -1,
                  leftLength = partials.length,
                  args = Array(leftLength + argsLength),
                  fn = this && this !== root && this instanceof wrapper ? Ctor : func;

              while (++leftIndex < leftLength) {
                args[leftIndex] = partials[leftIndex];
              }

              while (argsLength--) {
                args[leftIndex++] = arguments[++argsIndex];
              }

              return apply(fn, isBind ? thisArg : this, args);
            }

            return wrapper;
          }
          /**
           * Creates a `_.range` or `_.rangeRight` function.
           *
           * @private
           * @param {boolean} [fromRight] Specify iterating from right to left.
           * @returns {Function} Returns the new range function.
           */


          function createRange(fromRight) {
            return function (start, end, step) {
              if (step && typeof step != 'number' && isIterateeCall(start, end, step)) {
                end = step = undefined;
              } // Ensure the sign of `-0` is preserved.


              start = toFinite(start);

              if (end === undefined) {
                end = start;
                start = 0;
              } else {
                end = toFinite(end);
              }

              step = step === undefined ? start < end ? 1 : -1 : toFinite(step);
              return baseRange(start, end, step, fromRight);
            };
          }
          /**
           * Creates a function that performs a relational operation on two values.
           *
           * @private
           * @param {Function} operator The function to perform the operation.
           * @returns {Function} Returns the new relational operation function.
           */


          function createRelationalOperation(operator) {
            return function (value, other) {
              if (!(typeof value == 'string' && typeof other == 'string')) {
                value = toNumber(value);
                other = toNumber(other);
              }

              return operator(value, other);
            };
          }
          /**
           * Creates a function that wraps `func` to continue currying.
           *
           * @private
           * @param {Function} func The function to wrap.
           * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
           * @param {Function} wrapFunc The function to create the `func` wrapper.
           * @param {*} placeholder The placeholder value.
           * @param {*} [thisArg] The `this` binding of `func`.
           * @param {Array} [partials] The arguments to prepend to those provided to
           *  the new function.
           * @param {Array} [holders] The `partials` placeholder indexes.
           * @param {Array} [argPos] The argument positions of the new function.
           * @param {number} [ary] The arity cap of `func`.
           * @param {number} [arity] The arity of `func`.
           * @returns {Function} Returns the new wrapped function.
           */


          function createRecurry(func, bitmask, wrapFunc, placeholder, thisArg, partials, holders, argPos, ary, arity) {
            var isCurry = bitmask & WRAP_CURRY_FLAG,
                newHolders = isCurry ? holders : undefined,
                newHoldersRight = isCurry ? undefined : holders,
                newPartials = isCurry ? partials : undefined,
                newPartialsRight = isCurry ? undefined : partials;
            bitmask |= isCurry ? WRAP_PARTIAL_FLAG : WRAP_PARTIAL_RIGHT_FLAG;
            bitmask &= ~(isCurry ? WRAP_PARTIAL_RIGHT_FLAG : WRAP_PARTIAL_FLAG);

            if (!(bitmask & WRAP_CURRY_BOUND_FLAG)) {
              bitmask &= ~(WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG);
            }

            var newData = [func, bitmask, thisArg, newPartials, newHolders, newPartialsRight, newHoldersRight, argPos, ary, arity];
            var result = wrapFunc.apply(undefined, newData);

            if (isLaziable(func)) {
              setData(result, newData);
            }

            result.placeholder = placeholder;
            return setWrapToString(result, func, bitmask);
          }
          /**
           * Creates a function like `_.round`.
           *
           * @private
           * @param {string} methodName The name of the `Math` method to use when rounding.
           * @returns {Function} Returns the new round function.
           */


          function createRound(methodName) {
            var func = Math[methodName];
            return function (number, precision) {
              number = toNumber(number);
              precision = precision == null ? 0 : nativeMin(toInteger(precision), 292);

              if (precision && nativeIsFinite(number)) {
                // Shift with exponential notation to avoid floating-point issues.
                // See [MDN](https://mdn.io/round#Examples) for more details.
                var pair = (toString(number) + 'e').split('e'),
                    value = func(pair[0] + 'e' + (+pair[1] + precision));
                pair = (toString(value) + 'e').split('e');
                return +(pair[0] + 'e' + (+pair[1] - precision));
              }

              return func(number);
            };
          }
          /**
           * Creates a set object of `values`.
           *
           * @private
           * @param {Array} values The values to add to the set.
           * @returns {Object} Returns the new set.
           */


          var createSet = !(Set && 1 / setToArray(new Set([, -0]))[1] == INFINITY) ? noop : function (values) {
            return new Set(values);
          };
          /**
           * Creates a `_.toPairs` or `_.toPairsIn` function.
           *
           * @private
           * @param {Function} keysFunc The function to get the keys of a given object.
           * @returns {Function} Returns the new pairs function.
           */

          function createToPairs(keysFunc) {
            return function (object) {
              var tag = getTag(object);

              if (tag == mapTag) {
                return mapToArray(object);
              }

              if (tag == setTag) {
                return setToPairs(object);
              }

              return baseToPairs(object, keysFunc(object));
            };
          }
          /**
           * Creates a function that either curries or invokes `func` with optional
           * `this` binding and partially applied arguments.
           *
           * @private
           * @param {Function|string} func The function or method name to wrap.
           * @param {number} bitmask The bitmask flags.
           *    1 - `_.bind`
           *    2 - `_.bindKey`
           *    4 - `_.curry` or `_.curryRight` of a bound function
           *    8 - `_.curry`
           *   16 - `_.curryRight`
           *   32 - `_.partial`
           *   64 - `_.partialRight`
           *  128 - `_.rearg`
           *  256 - `_.ary`
           *  512 - `_.flip`
           * @param {*} [thisArg] The `this` binding of `func`.
           * @param {Array} [partials] The arguments to be partially applied.
           * @param {Array} [holders] The `partials` placeholder indexes.
           * @param {Array} [argPos] The argument positions of the new function.
           * @param {number} [ary] The arity cap of `func`.
           * @param {number} [arity] The arity of `func`.
           * @returns {Function} Returns the new wrapped function.
           */


          function createWrap(func, bitmask, thisArg, partials, holders, argPos, ary, arity) {
            var isBindKey = bitmask & WRAP_BIND_KEY_FLAG;

            if (!isBindKey && typeof func != 'function') {
              throw new TypeError(FUNC_ERROR_TEXT);
            }

            var length = partials ? partials.length : 0;

            if (!length) {
              bitmask &= ~(WRAP_PARTIAL_FLAG | WRAP_PARTIAL_RIGHT_FLAG);
              partials = holders = undefined;
            }

            ary = ary === undefined ? ary : nativeMax(toInteger(ary), 0);
            arity = arity === undefined ? arity : toInteger(arity);
            length -= holders ? holders.length : 0;

            if (bitmask & WRAP_PARTIAL_RIGHT_FLAG) {
              var partialsRight = partials,
                  holdersRight = holders;
              partials = holders = undefined;
            }

            var data = isBindKey ? undefined : getData(func);
            var newData = [func, bitmask, thisArg, partials, holders, partialsRight, holdersRight, argPos, ary, arity];

            if (data) {
              mergeData(newData, data);
            }

            func = newData[0];
            bitmask = newData[1];
            thisArg = newData[2];
            partials = newData[3];
            holders = newData[4];
            arity = newData[9] = newData[9] === undefined ? isBindKey ? 0 : func.length : nativeMax(newData[9] - length, 0);

            if (!arity && bitmask & (WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG)) {
              bitmask &= ~(WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG);
            }

            if (!bitmask || bitmask == WRAP_BIND_FLAG) {
              var result = createBind(func, bitmask, thisArg);
            } else if (bitmask == WRAP_CURRY_FLAG || bitmask == WRAP_CURRY_RIGHT_FLAG) {
              result = createCurry(func, bitmask, arity);
            } else if ((bitmask == WRAP_PARTIAL_FLAG || bitmask == (WRAP_BIND_FLAG | WRAP_PARTIAL_FLAG)) && !holders.length) {
              result = createPartial(func, bitmask, thisArg, partials);
            } else {
              result = createHybrid.apply(undefined, newData);
            }

            var setter = data ? baseSetData : setData;
            return setWrapToString(setter(result, newData), func, bitmask);
          }
          /**
           * Used by `_.defaults` to customize its `_.assignIn` use to assign properties
           * of source objects to the destination object for all destination properties
           * that resolve to `undefined`.
           *
           * @private
           * @param {*} objValue The destination value.
           * @param {*} srcValue The source value.
           * @param {string} key The key of the property to assign.
           * @param {Object} object The parent object of `objValue`.
           * @returns {*} Returns the value to assign.
           */


          function customDefaultsAssignIn(objValue, srcValue, key, object) {
            if (objValue === undefined || eq(objValue, objectProto[key]) && !hasOwnProperty.call(object, key)) {
              return srcValue;
            }

            return objValue;
          }
          /**
           * Used by `_.defaultsDeep` to customize its `_.merge` use to merge source
           * objects into destination objects that are passed thru.
           *
           * @private
           * @param {*} objValue The destination value.
           * @param {*} srcValue The source value.
           * @param {string} key The key of the property to merge.
           * @param {Object} object The parent object of `objValue`.
           * @param {Object} source The parent object of `srcValue`.
           * @param {Object} [stack] Tracks traversed source values and their merged
           *  counterparts.
           * @returns {*} Returns the value to assign.
           */


          function customDefaultsMerge(objValue, srcValue, key, object, source, stack) {
            if (isObject(objValue) && isObject(srcValue)) {
              // Recursively merge objects and arrays (susceptible to call stack limits).
              stack.set(srcValue, objValue);
              baseMerge(objValue, srcValue, undefined, customDefaultsMerge, stack);
              stack['delete'](srcValue);
            }

            return objValue;
          }
          /**
           * Used by `_.omit` to customize its `_.cloneDeep` use to only clone plain
           * objects.
           *
           * @private
           * @param {*} value The value to inspect.
           * @param {string} key The key of the property to inspect.
           * @returns {*} Returns the uncloned value or `undefined` to defer cloning to `_.cloneDeep`.
           */


          function customOmitClone(value) {
            return isPlainObject(value) ? undefined : value;
          }
          /**
           * A specialized version of `baseIsEqualDeep` for arrays with support for
           * partial deep comparisons.
           *
           * @private
           * @param {Array} array The array to compare.
           * @param {Array} other The other array to compare.
           * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
           * @param {Function} customizer The function to customize comparisons.
           * @param {Function} equalFunc The function to determine equivalents of values.
           * @param {Object} stack Tracks traversed `array` and `other` objects.
           * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.
           */


          function equalArrays(array, other, bitmask, customizer, equalFunc, stack) {
            var isPartial = bitmask & COMPARE_PARTIAL_FLAG,
                arrLength = array.length,
                othLength = other.length;

            if (arrLength != othLength && !(isPartial && othLength > arrLength)) {
              return false;
            } // Check that cyclic values are equal.


            var arrStacked = stack.get(array);
            var othStacked = stack.get(other);

            if (arrStacked && othStacked) {
              return arrStacked == other && othStacked == array;
            }

            var index = -1,
                result = true,
                seen = bitmask & COMPARE_UNORDERED_FLAG ? new SetCache() : undefined;
            stack.set(array, other);
            stack.set(other, array); // Ignore non-index properties.

            while (++index < arrLength) {
              var arrValue = array[index],
                  othValue = other[index];

              if (customizer) {
                var compared = isPartial ? customizer(othValue, arrValue, index, other, array, stack) : customizer(arrValue, othValue, index, array, other, stack);
              }

              if (compared !== undefined) {
                if (compared) {
                  continue;
                }

                result = false;
                break;
              } // Recursively compare arrays (susceptible to call stack limits).


              if (seen) {
                if (!arraySome(other, function (othValue, othIndex) {
                  if (!cacheHas(seen, othIndex) && (arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {
                    return seen.push(othIndex);
                  }
                })) {
                  result = false;
                  break;
                }
              } else if (!(arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {
                result = false;
                break;
              }
            }

            stack['delete'](array);
            stack['delete'](other);
            return result;
          }
          /**
           * A specialized version of `baseIsEqualDeep` for comparing objects of
           * the same `toStringTag`.
           *
           * **Note:** This function only supports comparing values with tags of
           * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.
           *
           * @private
           * @param {Object} object The object to compare.
           * @param {Object} other The other object to compare.
           * @param {string} tag The `toStringTag` of the objects to compare.
           * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
           * @param {Function} customizer The function to customize comparisons.
           * @param {Function} equalFunc The function to determine equivalents of values.
           * @param {Object} stack Tracks traversed `object` and `other` objects.
           * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
           */


          function equalByTag(object, other, tag, bitmask, customizer, equalFunc, stack) {
            switch (tag) {
              case dataViewTag:
                if (object.byteLength != other.byteLength || object.byteOffset != other.byteOffset) {
                  return false;
                }

                object = object.buffer;
                other = other.buffer;

              case arrayBufferTag:
                if (object.byteLength != other.byteLength || !equalFunc(new Uint8Array(object), new Uint8Array(other))) {
                  return false;
                }

                return true;

              case boolTag:
              case dateTag:
              case numberTag:
                // Coerce booleans to `1` or `0` and dates to milliseconds.
                // Invalid dates are coerced to `NaN`.
                return eq(+object, +other);

              case errorTag:
                return object.name == other.name && object.message == other.message;

              case regexpTag:
              case stringTag:
                // Coerce regexes to strings and treat strings, primitives and objects,
                // as equal. See http://www.ecma-international.org/ecma-262/7.0/#sec-regexp.prototype.tostring
                // for more details.
                return object == other + '';

              case mapTag:
                var convert = mapToArray;

              case setTag:
                var isPartial = bitmask & COMPARE_PARTIAL_FLAG;
                convert || (convert = setToArray);

                if (object.size != other.size && !isPartial) {
                  return false;
                } // Assume cyclic values are equal.


                var stacked = stack.get(object);

                if (stacked) {
                  return stacked == other;
                }

                bitmask |= COMPARE_UNORDERED_FLAG; // Recursively compare objects (susceptible to call stack limits).

                stack.set(object, other);
                var result = equalArrays(convert(object), convert(other), bitmask, customizer, equalFunc, stack);
                stack['delete'](object);
                return result;

              case symbolTag:
                if (symbolValueOf) {
                  return symbolValueOf.call(object) == symbolValueOf.call(other);
                }

            }

            return false;
          }
          /**
           * A specialized version of `baseIsEqualDeep` for objects with support for
           * partial deep comparisons.
           *
           * @private
           * @param {Object} object The object to compare.
           * @param {Object} other The other object to compare.
           * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
           * @param {Function} customizer The function to customize comparisons.
           * @param {Function} equalFunc The function to determine equivalents of values.
           * @param {Object} stack Tracks traversed `object` and `other` objects.
           * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
           */


          function equalObjects(object, other, bitmask, customizer, equalFunc, stack) {
            var isPartial = bitmask & COMPARE_PARTIAL_FLAG,
                objProps = getAllKeys(object),
                objLength = objProps.length,
                othProps = getAllKeys(other),
                othLength = othProps.length;

            if (objLength != othLength && !isPartial) {
              return false;
            }

            var index = objLength;

            while (index--) {
              var key = objProps[index];

              if (!(isPartial ? key in other : hasOwnProperty.call(other, key))) {
                return false;
              }
            } // Check that cyclic values are equal.


            var objStacked = stack.get(object);
            var othStacked = stack.get(other);

            if (objStacked && othStacked) {
              return objStacked == other && othStacked == object;
            }

            var result = true;
            stack.set(object, other);
            stack.set(other, object);
            var skipCtor = isPartial;

            while (++index < objLength) {
              key = objProps[index];
              var objValue = object[key],
                  othValue = other[key];

              if (customizer) {
                var compared = isPartial ? customizer(othValue, objValue, key, other, object, stack) : customizer(objValue, othValue, key, object, other, stack);
              } // Recursively compare objects (susceptible to call stack limits).


              if (!(compared === undefined ? objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack) : compared)) {
                result = false;
                break;
              }

              skipCtor || (skipCtor = key == 'constructor');
            }

            if (result && !skipCtor) {
              var objCtor = object.constructor,
                  othCtor = other.constructor; // Non `Object` object instances with different constructors are not equal.

              if (objCtor != othCtor && 'constructor' in object && 'constructor' in other && !(typeof objCtor == 'function' && objCtor instanceof objCtor && typeof othCtor == 'function' && othCtor instanceof othCtor)) {
                result = false;
              }
            }

            stack['delete'](object);
            stack['delete'](other);
            return result;
          }
          /**
           * A specialized version of `baseRest` which flattens the rest array.
           *
           * @private
           * @param {Function} func The function to apply a rest parameter to.
           * @returns {Function} Returns the new function.
           */


          function flatRest(func) {
            return setToString(overRest(func, undefined, flatten), func + '');
          }
          /**
           * Creates an array of own enumerable property names and symbols of `object`.
           *
           * @private
           * @param {Object} object The object to query.
           * @returns {Array} Returns the array of property names and symbols.
           */


          function getAllKeys(object) {
            return baseGetAllKeys(object, keys, getSymbols);
          }
          /**
           * Creates an array of own and inherited enumerable property names and
           * symbols of `object`.
           *
           * @private
           * @param {Object} object The object to query.
           * @returns {Array} Returns the array of property names and symbols.
           */


          function getAllKeysIn(object) {
            return baseGetAllKeys(object, keysIn, getSymbolsIn);
          }
          /**
           * Gets metadata for `func`.
           *
           * @private
           * @param {Function} func The function to query.
           * @returns {*} Returns the metadata for `func`.
           */


          var getData = !metaMap ? noop : function (func) {
            return metaMap.get(func);
          };
          /**
           * Gets the name of `func`.
           *
           * @private
           * @param {Function} func The function to query.
           * @returns {string} Returns the function name.
           */

          function getFuncName(func) {
            var result = func.name + '',
                array = realNames[result],
                length = hasOwnProperty.call(realNames, result) ? array.length : 0;

            while (length--) {
              var data = array[length],
                  otherFunc = data.func;

              if (otherFunc == null || otherFunc == func) {
                return data.name;
              }
            }

            return result;
          }
          /**
           * Gets the argument placeholder value for `func`.
           *
           * @private
           * @param {Function} func The function to inspect.
           * @returns {*} Returns the placeholder value.
           */


          function getHolder(func) {
            var object = hasOwnProperty.call(lodash, 'placeholder') ? lodash : func;
            return object.placeholder;
          }
          /**
           * Gets the appropriate "iteratee" function. If `_.iteratee` is customized,
           * this function returns the custom method, otherwise it returns `baseIteratee`.
           * If arguments are provided, the chosen function is invoked with them and
           * its result is returned.
           *
           * @private
           * @param {*} [value] The value to convert to an iteratee.
           * @param {number} [arity] The arity of the created iteratee.
           * @returns {Function} Returns the chosen function or its result.
           */


          function getIteratee() {
            var result = lodash.iteratee || iteratee;
            result = result === iteratee ? baseIteratee : result;
            return arguments.length ? result(arguments[0], arguments[1]) : result;
          }
          /**
           * Gets the data for `map`.
           *
           * @private
           * @param {Object} map The map to query.
           * @param {string} key The reference key.
           * @returns {*} Returns the map data.
           */


          function getMapData(map, key) {
            var data = map.__data__;
            return isKeyable(key) ? data[typeof key == 'string' ? 'string' : 'hash'] : data.map;
          }
          /**
           * Gets the property names, values, and compare flags of `object`.
           *
           * @private
           * @param {Object} object The object to query.
           * @returns {Array} Returns the match data of `object`.
           */


          function getMatchData(object) {
            var result = keys(object),
                length = result.length;

            while (length--) {
              var key = result[length],
                  value = object[key];
              result[length] = [key, value, isStrictComparable(value)];
            }

            return result;
          }
          /**
           * Gets the native function at `key` of `object`.
           *
           * @private
           * @param {Object} object The object to query.
           * @param {string} key The key of the method to get.
           * @returns {*} Returns the function if it's native, else `undefined`.
           */


          function getNative(object, key) {
            var value = getValue(object, key);
            return baseIsNative(value) ? value : undefined;
          }
          /**
           * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.
           *
           * @private
           * @param {*} value The value to query.
           * @returns {string} Returns the raw `toStringTag`.
           */


          function getRawTag(value) {
            var isOwn = hasOwnProperty.call(value, symToStringTag),
                tag = value[symToStringTag];

            try {
              value[symToStringTag] = undefined;
              var unmasked = true;
            } catch (e) {}

            var result = nativeObjectToString.call(value);

            if (unmasked) {
              if (isOwn) {
                value[symToStringTag] = tag;
              } else {
                delete value[symToStringTag];
              }
            }

            return result;
          }
          /**
           * Creates an array of the own enumerable symbols of `object`.
           *
           * @private
           * @param {Object} object The object to query.
           * @returns {Array} Returns the array of symbols.
           */


          var getSymbols = !nativeGetSymbols ? stubArray : function (object) {
            if (object == null) {
              return [];
            }

            object = Object(object);
            return arrayFilter(nativeGetSymbols(object), function (symbol) {
              return propertyIsEnumerable.call(object, symbol);
            });
          };
          /**
           * Creates an array of the own and inherited enumerable symbols of `object`.
           *
           * @private
           * @param {Object} object The object to query.
           * @returns {Array} Returns the array of symbols.
           */

          var getSymbolsIn = !nativeGetSymbols ? stubArray : function (object) {
            var result = [];

            while (object) {
              arrayPush(result, getSymbols(object));
              object = getPrototype(object);
            }

            return result;
          };
          /**
           * Gets the `toStringTag` of `value`.
           *
           * @private
           * @param {*} value The value to query.
           * @returns {string} Returns the `toStringTag`.
           */

          var getTag = baseGetTag; // Fallback for data views, maps, sets, and weak maps in IE 11 and promises in Node.js < 6.

          if (DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag || Map && getTag(new Map()) != mapTag || Promise && getTag(Promise.resolve()) != promiseTag || Set && getTag(new Set()) != setTag || WeakMap && getTag(new WeakMap()) != weakMapTag) {
            getTag = function getTag(value) {
              var result = baseGetTag(value),
                  Ctor = result == objectTag ? value.constructor : undefined,
                  ctorString = Ctor ? toSource(Ctor) : '';

              if (ctorString) {
                switch (ctorString) {
                  case dataViewCtorString:
                    return dataViewTag;

                  case mapCtorString:
                    return mapTag;

                  case promiseCtorString:
                    return promiseTag;

                  case setCtorString:
                    return setTag;

                  case weakMapCtorString:
                    return weakMapTag;
                }
              }

              return result;
            };
          }
          /**
           * Gets the view, applying any `transforms` to the `start` and `end` positions.
           *
           * @private
           * @param {number} start The start of the view.
           * @param {number} end The end of the view.
           * @param {Array} transforms The transformations to apply to the view.
           * @returns {Object} Returns an object containing the `start` and `end`
           *  positions of the view.
           */


          function getView(start, end, transforms) {
            var index = -1,
                length = transforms.length;

            while (++index < length) {
              var data = transforms[index],
                  size = data.size;

              switch (data.type) {
                case 'drop':
                  start += size;
                  break;

                case 'dropRight':
                  end -= size;
                  break;

                case 'take':
                  end = nativeMin(end, start + size);
                  break;

                case 'takeRight':
                  start = nativeMax(start, end - size);
                  break;
              }
            }

            return {
              'start': start,
              'end': end
            };
          }
          /**
           * Extracts wrapper details from the `source` body comment.
           *
           * @private
           * @param {string} source The source to inspect.
           * @returns {Array} Returns the wrapper details.
           */


          function getWrapDetails(source) {
            var match = source.match(reWrapDetails);
            return match ? match[1].split(reSplitDetails) : [];
          }
          /**
           * Checks if `path` exists on `object`.
           *
           * @private
           * @param {Object} object The object to query.
           * @param {Array|string} path The path to check.
           * @param {Function} hasFunc The function to check properties.
           * @returns {boolean} Returns `true` if `path` exists, else `false`.
           */


          function hasPath(object, path, hasFunc) {
            path = castPath(path, object);
            var index = -1,
                length = path.length,
                result = false;

            while (++index < length) {
              var key = toKey(path[index]);

              if (!(result = object != null && hasFunc(object, key))) {
                break;
              }

              object = object[key];
            }

            if (result || ++index != length) {
              return result;
            }

            length = object == null ? 0 : object.length;
            return !!length && isLength(length) && isIndex(key, length) && (isArray(object) || isArguments(object));
          }
          /**
           * Initializes an array clone.
           *
           * @private
           * @param {Array} array The array to clone.
           * @returns {Array} Returns the initialized clone.
           */


          function initCloneArray(array) {
            var length = array.length,
                result = new array.constructor(length); // Add properties assigned by `RegExp#exec`.

            if (length && typeof array[0] == 'string' && hasOwnProperty.call(array, 'index')) {
              result.index = array.index;
              result.input = array.input;
            }

            return result;
          }
          /**
           * Initializes an object clone.
           *
           * @private
           * @param {Object} object The object to clone.
           * @returns {Object} Returns the initialized clone.
           */


          function initCloneObject(object) {
            return typeof object.constructor == 'function' && !isPrototype(object) ? baseCreate(getPrototype(object)) : {};
          }
          /**
           * Initializes an object clone based on its `toStringTag`.
           *
           * **Note:** This function only supports cloning values with tags of
           * `Boolean`, `Date`, `Error`, `Map`, `Number`, `RegExp`, `Set`, or `String`.
           *
           * @private
           * @param {Object} object The object to clone.
           * @param {string} tag The `toStringTag` of the object to clone.
           * @param {boolean} [isDeep] Specify a deep clone.
           * @returns {Object} Returns the initialized clone.
           */


          function initCloneByTag(object, tag, isDeep) {
            var Ctor = object.constructor;

            switch (tag) {
              case arrayBufferTag:
                return cloneArrayBuffer(object);

              case boolTag:
              case dateTag:
                return new Ctor(+object);

              case dataViewTag:
                return cloneDataView(object, isDeep);

              case float32Tag:
              case float64Tag:
              case int8Tag:
              case int16Tag:
              case int32Tag:
              case uint8Tag:
              case uint8ClampedTag:
              case uint16Tag:
              case uint32Tag:
                return cloneTypedArray(object, isDeep);

              case mapTag:
                return new Ctor();

              case numberTag:
              case stringTag:
                return new Ctor(object);

              case regexpTag:
                return cloneRegExp(object);

              case setTag:
                return new Ctor();

              case symbolTag:
                return cloneSymbol(object);
            }
          }
          /**
           * Inserts wrapper `details` in a comment at the top of the `source` body.
           *
           * @private
           * @param {string} source The source to modify.
           * @returns {Array} details The details to insert.
           * @returns {string} Returns the modified source.
           */


          function insertWrapDetails(source, details) {
            var length = details.length;

            if (!length) {
              return source;
            }

            var lastIndex = length - 1;
            details[lastIndex] = (length > 1 ? '& ' : '') + details[lastIndex];
            details = details.join(length > 2 ? ', ' : ' ');
            return source.replace(reWrapComment, '{\n/* [wrapped with ' + details + '] */\n');
          }
          /**
           * Checks if `value` is a flattenable `arguments` object or array.
           *
           * @private
           * @param {*} value The value to check.
           * @returns {boolean} Returns `true` if `value` is flattenable, else `false`.
           */


          function isFlattenable(value) {
            return isArray(value) || isArguments(value) || !!(spreadableSymbol && value && value[spreadableSymbol]);
          }
          /**
           * Checks if `value` is a valid array-like index.
           *
           * @private
           * @param {*} value The value to check.
           * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.
           * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.
           */


          function isIndex(value, length) {
            var type = typeof value;
            length = length == null ? MAX_SAFE_INTEGER : length;
            return !!length && (type == 'number' || type != 'symbol' && reIsUint.test(value)) && value > -1 && value % 1 == 0 && value < length;
          }
          /**
           * Checks if the given arguments are from an iteratee call.
           *
           * @private
           * @param {*} value The potential iteratee value argument.
           * @param {*} index The potential iteratee index or key argument.
           * @param {*} object The potential iteratee object argument.
           * @returns {boolean} Returns `true` if the arguments are from an iteratee call,
           *  else `false`.
           */


          function isIterateeCall(value, index, object) {
            if (!isObject(object)) {
              return false;
            }

            var type = typeof index;

            if (type == 'number' ? isArrayLike(object) && isIndex(index, object.length) : type == 'string' && index in object) {
              return eq(object[index], value);
            }

            return false;
          }
          /**
           * Checks if `value` is a property name and not a property path.
           *
           * @private
           * @param {*} value The value to check.
           * @param {Object} [object] The object to query keys on.
           * @returns {boolean} Returns `true` if `value` is a property name, else `false`.
           */


          function isKey(value, object) {
            if (isArray(value)) {
              return false;
            }

            var type = typeof value;

            if (type == 'number' || type == 'symbol' || type == 'boolean' || value == null || isSymbol(value)) {
              return true;
            }

            return reIsPlainProp.test(value) || !reIsDeepProp.test(value) || object != null && value in Object(object);
          }
          /**
           * Checks if `value` is suitable for use as unique object key.
           *
           * @private
           * @param {*} value The value to check.
           * @returns {boolean} Returns `true` if `value` is suitable, else `false`.
           */


          function isKeyable(value) {
            var type = typeof value;
            return type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean' ? value !== '__proto__' : value === null;
          }
          /**
           * Checks if `func` has a lazy counterpart.
           *
           * @private
           * @param {Function} func The function to check.
           * @returns {boolean} Returns `true` if `func` has a lazy counterpart,
           *  else `false`.
           */


          function isLaziable(func) {
            var funcName = getFuncName(func),
                other = lodash[funcName];

            if (typeof other != 'function' || !(funcName in LazyWrapper.prototype)) {
              return false;
            }

            if (func === other) {
              return true;
            }

            var data = getData(other);
            return !!data && func === data[0];
          }
          /**
           * Checks if `func` has its source masked.
           *
           * @private
           * @param {Function} func The function to check.
           * @returns {boolean} Returns `true` if `func` is masked, else `false`.
           */


          function isMasked(func) {
            return !!maskSrcKey && maskSrcKey in func;
          }
          /**
           * Checks if `func` is capable of being masked.
           *
           * @private
           * @param {*} value The value to check.
           * @returns {boolean} Returns `true` if `func` is maskable, else `false`.
           */


          var isMaskable = coreJsData ? isFunction : stubFalse;
          /**
           * Checks if `value` is likely a prototype object.
           *
           * @private
           * @param {*} value The value to check.
           * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.
           */

          function isPrototype(value) {
            var Ctor = value && value.constructor,
                proto = typeof Ctor == 'function' && Ctor.prototype || objectProto;
            return value === proto;
          }
          /**
           * Checks if `value` is suitable for strict equality comparisons, i.e. `===`.
           *
           * @private
           * @param {*} value The value to check.
           * @returns {boolean} Returns `true` if `value` if suitable for strict
           *  equality comparisons, else `false`.
           */


          function isStrictComparable(value) {
            return value === value && !isObject(value);
          }
          /**
           * A specialized version of `matchesProperty` for source values suitable
           * for strict equality comparisons, i.e. `===`.
           *
           * @private
           * @param {string} key The key of the property to get.
           * @param {*} srcValue The value to match.
           * @returns {Function} Returns the new spec function.
           */


          function matchesStrictComparable(key, srcValue) {
            return function (object) {
              if (object == null) {
                return false;
              }

              return object[key] === srcValue && (srcValue !== undefined || key in Object(object));
            };
          }
          /**
           * A specialized version of `_.memoize` which clears the memoized function's
           * cache when it exceeds `MAX_MEMOIZE_SIZE`.
           *
           * @private
           * @param {Function} func The function to have its output memoized.
           * @returns {Function} Returns the new memoized function.
           */


          function memoizeCapped(func) {
            var result = memoize(func, function (key) {
              if (cache.size === MAX_MEMOIZE_SIZE) {
                cache.clear();
              }

              return key;
            });
            var cache = result.cache;
            return result;
          }
          /**
           * Merges the function metadata of `source` into `data`.
           *
           * Merging metadata reduces the number of wrappers used to invoke a function.
           * This is possible because methods like `_.bind`, `_.curry`, and `_.partial`
           * may be applied regardless of execution order. Methods like `_.ary` and
           * `_.rearg` modify function arguments, making the order in which they are
           * executed important, preventing the merging of metadata. However, we make
           * an exception for a safe combined case where curried functions have `_.ary`
           * and or `_.rearg` applied.
           *
           * @private
           * @param {Array} data The destination metadata.
           * @param {Array} source The source metadata.
           * @returns {Array} Returns `data`.
           */


          function mergeData(data, source) {
            var bitmask = data[1],
                srcBitmask = source[1],
                newBitmask = bitmask | srcBitmask,
                isCommon = newBitmask < (WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG | WRAP_ARY_FLAG);
            var isCombo = srcBitmask == WRAP_ARY_FLAG && bitmask == WRAP_CURRY_FLAG || srcBitmask == WRAP_ARY_FLAG && bitmask == WRAP_REARG_FLAG && data[7].length <= source[8] || srcBitmask == (WRAP_ARY_FLAG | WRAP_REARG_FLAG) && source[7].length <= source[8] && bitmask == WRAP_CURRY_FLAG; // Exit early if metadata can't be merged.

            if (!(isCommon || isCombo)) {
              return data;
            } // Use source `thisArg` if available.


            if (srcBitmask & WRAP_BIND_FLAG) {
              data[2] = source[2]; // Set when currying a bound function.

              newBitmask |= bitmask & WRAP_BIND_FLAG ? 0 : WRAP_CURRY_BOUND_FLAG;
            } // Compose partial arguments.


            var value = source[3];

            if (value) {
              var partials = data[3];
              data[3] = partials ? composeArgs(partials, value, source[4]) : value;
              data[4] = partials ? replaceHolders(data[3], PLACEHOLDER) : source[4];
            } // Compose partial right arguments.


            value = source[5];

            if (value) {
              partials = data[5];
              data[5] = partials ? composeArgsRight(partials, value, source[6]) : value;
              data[6] = partials ? replaceHolders(data[5], PLACEHOLDER) : source[6];
            } // Use source `argPos` if available.


            value = source[7];

            if (value) {
              data[7] = value;
            } // Use source `ary` if it's smaller.


            if (srcBitmask & WRAP_ARY_FLAG) {
              data[8] = data[8] == null ? source[8] : nativeMin(data[8], source[8]);
            } // Use source `arity` if one is not provided.


            if (data[9] == null) {
              data[9] = source[9];
            } // Use source `func` and merge bitmasks.


            data[0] = source[0];
            data[1] = newBitmask;
            return data;
          }
          /**
           * This function is like
           * [`Object.keys`](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
           * except that it includes inherited enumerable properties.
           *
           * @private
           * @param {Object} object The object to query.
           * @returns {Array} Returns the array of property names.
           */


          function nativeKeysIn(object) {
            var result = [];

            if (object != null) {
              for (var key in Object(object)) {
                result.push(key);
              }
            }

            return result;
          }
          /**
           * Converts `value` to a string using `Object.prototype.toString`.
           *
           * @private
           * @param {*} value The value to convert.
           * @returns {string} Returns the converted string.
           */


          function objectToString(value) {
            return nativeObjectToString.call(value);
          }
          /**
           * A specialized version of `baseRest` which transforms the rest array.
           *
           * @private
           * @param {Function} func The function to apply a rest parameter to.
           * @param {number} [start=func.length-1] The start position of the rest parameter.
           * @param {Function} transform The rest array transform.
           * @returns {Function} Returns the new function.
           */


          function overRest(func, start, transform) {
            start = nativeMax(start === undefined ? func.length - 1 : start, 0);
            return function () {
              var args = arguments,
                  index = -1,
                  length = nativeMax(args.length - start, 0),
                  array = Array(length);

              while (++index < length) {
                array[index] = args[start + index];
              }

              index = -1;
              var otherArgs = Array(start + 1);

              while (++index < start) {
                otherArgs[index] = args[index];
              }

              otherArgs[start] = transform(array);
              return apply(func, this, otherArgs);
            };
          }
          /**
           * Gets the parent value at `path` of `object`.
           *
           * @private
           * @param {Object} object The object to query.
           * @param {Array} path The path to get the parent value of.
           * @returns {*} Returns the parent value.
           */


          function parent(object, path) {
            return path.length < 2 ? object : baseGet(object, baseSlice(path, 0, -1));
          }
          /**
           * Reorder `array` according to the specified indexes where the element at
           * the first index is assigned as the first element, the element at
           * the second index is assigned as the second element, and so on.
           *
           * @private
           * @param {Array} array The array to reorder.
           * @param {Array} indexes The arranged array indexes.
           * @returns {Array} Returns `array`.
           */


          function reorder(array, indexes) {
            var arrLength = array.length,
                length = nativeMin(indexes.length, arrLength),
                oldArray = copyArray(array);

            while (length--) {
              var index = indexes[length];
              array[length] = isIndex(index, arrLength) ? oldArray[index] : undefined;
            }

            return array;
          }
          /**
           * Gets the value at `key`, unless `key` is "__proto__" or "constructor".
           *
           * @private
           * @param {Object} object The object to query.
           * @param {string} key The key of the property to get.
           * @returns {*} Returns the property value.
           */


          function safeGet(object, key) {
            if (key === 'constructor' && typeof object[key] === 'function') {
              return;
            }

            if (key == '__proto__') {
              return;
            }

            return object[key];
          }
          /**
           * Sets metadata for `func`.
           *
           * **Note:** If this function becomes hot, i.e. is invoked a lot in a short
           * period of time, it will trip its breaker and transition to an identity
           * function to avoid garbage collection pauses in V8. See
           * [V8 issue 2070](https://bugs.chromium.org/p/v8/issues/detail?id=2070)
           * for more details.
           *
           * @private
           * @param {Function} func The function to associate metadata with.
           * @param {*} data The metadata.
           * @returns {Function} Returns `func`.
           */


          var setData = shortOut(baseSetData);
          /**
           * A simple wrapper around the global [`setTimeout`](https://mdn.io/setTimeout).
           *
           * @private
           * @param {Function} func The function to delay.
           * @param {number} wait The number of milliseconds to delay invocation.
           * @returns {number|Object} Returns the timer id or timeout object.
           */

          var setTimeout = ctxSetTimeout || function (func, wait) {
            return root.setTimeout(func, wait);
          };
          /**
           * Sets the `toString` method of `func` to return `string`.
           *
           * @private
           * @param {Function} func The function to modify.
           * @param {Function} string The `toString` result.
           * @returns {Function} Returns `func`.
           */


          var setToString = shortOut(baseSetToString);
          /**
           * Sets the `toString` method of `wrapper` to mimic the source of `reference`
           * with wrapper details in a comment at the top of the source body.
           *
           * @private
           * @param {Function} wrapper The function to modify.
           * @param {Function} reference The reference function.
           * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
           * @returns {Function} Returns `wrapper`.
           */

          function setWrapToString(wrapper, reference, bitmask) {
            var source = reference + '';
            return setToString(wrapper, insertWrapDetails(source, updateWrapDetails(getWrapDetails(source), bitmask)));
          }
          /**
           * Creates a function that'll short out and invoke `identity` instead
           * of `func` when it's called `HOT_COUNT` or more times in `HOT_SPAN`
           * milliseconds.
           *
           * @private
           * @param {Function} func The function to restrict.
           * @returns {Function} Returns the new shortable function.
           */


          function shortOut(func) {
            var count = 0,
                lastCalled = 0;
            return function () {
              var stamp = nativeNow(),
                  remaining = HOT_SPAN - (stamp - lastCalled);
              lastCalled = stamp;

              if (remaining > 0) {
                if (++count >= HOT_COUNT) {
                  return arguments[0];
                }
              } else {
                count = 0;
              }

              return func.apply(undefined, arguments);
            };
          }
          /**
           * A specialized version of `_.shuffle` which mutates and sets the size of `array`.
           *
           * @private
           * @param {Array} array The array to shuffle.
           * @param {number} [size=array.length] The size of `array`.
           * @returns {Array} Returns `array`.
           */


          function shuffleSelf(array, size) {
            var index = -1,
                length = array.length,
                lastIndex = length - 1;
            size = size === undefined ? length : size;

            while (++index < size) {
              var rand = baseRandom(index, lastIndex),
                  value = array[rand];
              array[rand] = array[index];
              array[index] = value;
            }

            array.length = size;
            return array;
          }
          /**
           * Converts `string` to a property path array.
           *
           * @private
           * @param {string} string The string to convert.
           * @returns {Array} Returns the property path array.
           */


          var stringToPath = memoizeCapped(function (string) {
            var result = [];

            if (string.charCodeAt(0) === 46
            /* . */
            ) {
              result.push('');
            }

            string.replace(rePropName, function (match, number, quote, subString) {
              result.push(quote ? subString.replace(reEscapeChar, '$1') : number || match);
            });
            return result;
          });
          /**
           * Converts `value` to a string key if it's not a string or symbol.
           *
           * @private
           * @param {*} value The value to inspect.
           * @returns {string|symbol} Returns the key.
           */

          function toKey(value) {
            if (typeof value == 'string' || isSymbol(value)) {
              return value;
            }

            var result = value + '';
            return result == '0' && 1 / value == -INFINITY ? '-0' : result;
          }
          /**
           * Converts `func` to its source code.
           *
           * @private
           * @param {Function} func The function to convert.
           * @returns {string} Returns the source code.
           */


          function toSource(func) {
            if (func != null) {
              try {
                return funcToString.call(func);
              } catch (e) {}

              try {
                return func + '';
              } catch (e) {}
            }

            return '';
          }
          /**
           * Updates wrapper `details` based on `bitmask` flags.
           *
           * @private
           * @returns {Array} details The details to modify.
           * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
           * @returns {Array} Returns `details`.
           */


          function updateWrapDetails(details, bitmask) {
            arrayEach(wrapFlags, function (pair) {
              var value = '_.' + pair[0];

              if (bitmask & pair[1] && !arrayIncludes(details, value)) {
                details.push(value);
              }
            });
            return details.sort();
          }
          /**
           * Creates a clone of `wrapper`.
           *
           * @private
           * @param {Object} wrapper The wrapper to clone.
           * @returns {Object} Returns the cloned wrapper.
           */


          function wrapperClone(wrapper) {
            if (wrapper instanceof LazyWrapper) {
              return wrapper.clone();
            }

            var result = new LodashWrapper(wrapper.__wrapped__, wrapper.__chain__);
            result.__actions__ = copyArray(wrapper.__actions__);
            result.__index__ = wrapper.__index__;
            result.__values__ = wrapper.__values__;
            return result;
          }
          /*------------------------------------------------------------------------*/

          /**
           * Creates an array of elements split into groups the length of `size`.
           * If `array` can't be split evenly, the final chunk will be the remaining
           * elements.
           *
           * @static
           * @memberOf _
           * @since 3.0.0
           * @category Array
           * @param {Array} array The array to process.
           * @param {number} [size=1] The length of each chunk
           * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
           * @returns {Array} Returns the new array of chunks.
           * @example
           *
           * _.chunk(['a', 'b', 'c', 'd'], 2);
           * // => [['a', 'b'], ['c', 'd']]
           *
           * _.chunk(['a', 'b', 'c', 'd'], 3);
           * // => [['a', 'b', 'c'], ['d']]
           */


          function chunk(array, size, guard) {
            if (guard ? isIterateeCall(array, size, guard) : size === undefined) {
              size = 1;
            } else {
              size = nativeMax(toInteger(size), 0);
            }

            var length = array == null ? 0 : array.length;

            if (!length || size < 1) {
              return [];
            }

            var index = 0,
                resIndex = 0,
                result = Array(nativeCeil(length / size));

            while (index < length) {
              result[resIndex++] = baseSlice(array, index, index += size);
            }

            return result;
          }
          /**
           * Creates an array with all falsey values removed. The values `false`, `null`,
           * `0`, `""`, `undefined`, and `NaN` are falsey.
           *
           * @static
           * @memberOf _
           * @since 0.1.0
           * @category Array
           * @param {Array} array The array to compact.
           * @returns {Array} Returns the new array of filtered values.
           * @example
           *
           * _.compact([0, 1, false, 2, '', 3]);
           * // => [1, 2, 3]
           */


          function compact(array) {
            var index = -1,
                length = array == null ? 0 : array.length,
                resIndex = 0,
                result = [];

            while (++index < length) {
              var value = array[index];

              if (value) {
                result[resIndex++] = value;
              }
            }

            return result;
          }
          /**
           * Creates a new array concatenating `array` with any additional arrays
           * and/or values.
           *
           * @static
           * @memberOf _
           * @since 4.0.0
           * @category Array
           * @param {Array} array The array to concatenate.
           * @param {...*} [values] The values to concatenate.
           * @returns {Array} Returns the new concatenated array.
           * @example
           *
           * var array = [1];
           * var other = _.concat(array, 2, [3], [[4]]);
           *
           * console.log(other);
           * // => [1, 2, 3, [4]]
           *
           * console.log(array);
           * // => [1]
           */


          function concat() {
            var length = arguments.length;

            if (!length) {
              return [];
            }

            var args = Array(length - 1),
                array = arguments[0],
                index = length;

            while (index--) {
              args[index - 1] = arguments[index];
            }

            return arrayPush(isArray(array) ? copyArray(array) : [array], baseFlatten(args, 1));
          }
          /**
           * Creates an array of `array` values not included in the other given arrays
           * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
           * for equality comparisons. The order and references of result values are
           * determined by the first array.
           *
           * **Note:** Unlike `_.pullAll`, this method returns a new array.
           *
           * @static
           * @memberOf _
           * @since 0.1.0
           * @category Array
           * @param {Array} array The array to inspect.
           * @param {...Array} [values] The values to exclude.
           * @returns {Array} Returns the new array of filtered values.
           * @see _.without, _.xor
           * @example
           *
           * _.difference([2, 1], [2, 3]);
           * // => [1]
           */


          var difference = baseRest(function (array, values) {
            return isArrayLikeObject(array) ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true)) : [];
          });
          /**
           * This method is like `_.difference` except that it accepts `iteratee` which
           * is invoked for each element of `array` and `values` to generate the criterion
           * by which they're compared. The order and references of result values are
           * determined by the first array. The iteratee is invoked with one argument:
           * (value).
           *
           * **Note:** Unlike `_.pullAllBy`, this method returns a new array.
           *
           * @static
           * @memberOf _
           * @since 4.0.0
           * @category Array
           * @param {Array} array The array to inspect.
           * @param {...Array} [values] The values to exclude.
           * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
           * @returns {Array} Returns the new array of filtered values.
           * @example
           *
           * _.differenceBy([2.1, 1.2], [2.3, 3.4], Math.floor);
           * // => [1.2]
           *
           * // The `_.property` iteratee shorthand.
           * _.differenceBy([{ 'x': 2 }, { 'x': 1 }], [{ 'x': 1 }], 'x');
           * // => [{ 'x': 2 }]
           */

          var differenceBy = baseRest(function (array, values) {
            var iteratee = last(values);

            if (isArrayLikeObject(iteratee)) {
              iteratee = undefined;
            }

            return isArrayLikeObject(array) ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true), getIteratee(iteratee, 2)) : [];
          });
          /**
           * This method is like `_.difference` except that it accepts `comparator`
           * which is invoked to compare elements of `array` to `values`. The order and
           * references of result values are determined by the first array. The comparator
           * is invoked with two arguments: (arrVal, othVal).
           *
           * **Note:** Unlike `_.pullAllWith`, this method returns a new array.
           *
           * @static
           * @memberOf _
           * @since 4.0.0
           * @category Array
           * @param {Array} array The array to inspect.
           * @param {...Array} [values] The values to exclude.
           * @param {Function} [comparator] The comparator invoked per element.
           * @returns {Array} Returns the new array of filtered values.
           * @example
           *
           * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
           *
           * _.differenceWith(objects, [{ 'x': 1, 'y': 2 }], _.isEqual);
           * // => [{ 'x': 2, 'y': 1 }]
           */

          var differenceWith = baseRest(function (array, values) {
            var comparator = last(values);

            if (isArrayLikeObject(comparator)) {
              comparator = undefined;
            }

            return isArrayLikeObject(array) ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true), undefined, comparator) : [];
          });
          /**
           * Creates a slice of `array` with `n` elements dropped from the beginning.
           *
           * @static
           * @memberOf _
           * @since 0.5.0
           * @category Array
           * @param {Array} array The array to query.
           * @param {number} [n=1] The number of elements to drop.
           * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
           * @returns {Array} Returns the slice of `array`.
           * @example
           *
           * _.drop([1, 2, 3]);
           * // => [2, 3]
           *
           * _.drop([1, 2, 3], 2);
           * // => [3]
           *
           * _.drop([1, 2, 3], 5);
           * // => []
           *
           * _.drop([1, 2, 3], 0);
           * // => [1, 2, 3]
           */

          function drop(array, n, guard) {
            var length = array == null ? 0 : array.length;

            if (!length) {
              return [];
            }

            n = guard || n === undefined ? 1 : toInteger(n);
            return baseSlice(array, n < 0 ? 0 : n, length);
          }
          /**
           * Creates a slice of `array` with `n` elements dropped from the end.
           *
           * @static
           * @memberOf _
           * @since 3.0.0
           * @category Array
           * @param {Array} array The array to query.
           * @param {number} [n=1] The number of elements to drop.
           * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
           * @returns {Array} Returns the slice of `array`.
           * @example
           *
           * _.dropRight([1, 2, 3]);
           * // => [1, 2]
           *
           * _.dropRight([1, 2, 3], 2);
           * // => [1]
           *
           * _.dropRight([1, 2, 3], 5);
           * // => []
           *
           * _.dropRight([1, 2, 3], 0);
           * // => [1, 2, 3]
           */


          function dropRight(array, n, guard) {
            var length = array == null ? 0 : array.length;

            if (!length) {
              return [];
            }

            n = guard || n === undefined ? 1 : toInteger(n);
            n = length - n;
            return baseSlice(array, 0, n < 0 ? 0 : n);
          }
          /**
           * Creates a slice of `array` excluding elements dropped from the end.
           * Elements are dropped until `predicate` returns falsey. The predicate is
           * invoked with three arguments: (value, index, array).
           *
           * @static
           * @memberOf _
           * @since 3.0.0
           * @category Array
           * @param {Array} array The array to query.
           * @param {Function} [predicate=_.identity] The function invoked per iteration.
           * @returns {Array} Returns the slice of `array`.
           * @example
           *
           * var users = [
           *   { 'user': 'barney',  'active': true },
           *   { 'user': 'fred',    'active': false },
           *   { 'user': 'pebbles', 'active': false }
           * ];
           *
           * _.dropRightWhile(users, function(o) { return !o.active; });
           * // => objects for ['barney']
           *
           * // The `_.matches` iteratee shorthand.
           * _.dropRightWhile(users, { 'user': 'pebbles', 'active': false });
           * // => objects for ['barney', 'fred']
           *
           * // The `_.matchesProperty` iteratee shorthand.
           * _.dropRightWhile(users, ['active', false]);
           * // => objects for ['barney']
           *
           * // The `_.property` iteratee shorthand.
           * _.dropRightWhile(users, 'active');
           * // => objects for ['barney', 'fred', 'pebbles']
           */


          function dropRightWhile(array, predicate) {
            return array && array.length ? baseWhile(array, getIteratee(predicate, 3), true, true) : [];
          }
          /**
           * Creates a slice of `array` excluding elements dropped from the beginning.
           * Elements are dropped until `predicate` returns falsey. The predicate is
           * invoked with three arguments: (value, index, array).
           *
           * @static
           * @memberOf _
           * @since 3.0.0
           * @category Array
           * @param {Array} array The array to query.
           * @param {Function} [predicate=_.identity] The function invoked per iteration.
           * @returns {Array} Returns the slice of `array`.
           * @example
           *
           * var users = [
           *   { 'user': 'barney',  'active': false },
           *   { 'user': 'fred',    'active': false },
           *   { 'user': 'pebbles', 'active': true }
           * ];
           *
           * _.dropWhile(users, function(o) { return !o.active; });
           * // => objects for ['pebbles']
           *
           * // The `_.matches` iteratee shorthand.
           * _.dropWhile(users, { 'user': 'barney', 'active': false });
           * // => objects for ['fred', 'pebbles']
           *
           * // The `_.matchesProperty` iteratee shorthand.
           * _.dropWhile(users, ['active', false]);
           * // => objects for ['pebbles']
           *
           * // The `_.property` iteratee shorthand.
           * _.dropWhile(users, 'active');
           * // => objects for ['barney', 'fred', 'pebbles']
           */


          function dropWhile(array, predicate) {
            return array && array.length ? baseWhile(array, getIteratee(predicate, 3), true) : [];
          }
          /**
           * Fills elements of `array` with `value` from `start` up to, but not
           * including, `end`.
           *
           * **Note:** This method mutates `array`.
           *
           * @static
           * @memberOf _
           * @since 3.2.0
           * @category Array
           * @param {Array} array The array to fill.
           * @param {*} value The value to fill `array` with.
           * @param {number} [start=0] The start position.
           * @param {number} [end=array.length] The end position.
           * @returns {Array} Returns `array`.
           * @example
           *
           * var array = [1, 2, 3];
           *
           * _.fill(array, 'a');
           * console.log(array);
           * // => ['a', 'a', 'a']
           *
           * _.fill(Array(3), 2);
           * // => [2, 2, 2]
           *
           * _.fill([4, 6, 8, 10], '*', 1, 3);
           * // => [4, '*', '*', 10]
           */


          function fill(array, value, start, end) {
            var length = array == null ? 0 : array.length;

            if (!length) {
              return [];
            }

            if (start && typeof start != 'number' && isIterateeCall(array, value, start)) {
              start = 0;
              end = length;
            }

            return baseFill(array, value, start, end);
          }
          /**
           * This method is like `_.find` except that it returns the index of the first
           * element `predicate` returns truthy for instead of the element itself.
           *
           * @static
           * @memberOf _
           * @since 1.1.0
           * @category Array
           * @param {Array} array The array to inspect.
           * @param {Function} [predicate=_.identity] The function invoked per iteration.
           * @param {number} [fromIndex=0] The index to search from.
           * @returns {number} Returns the index of the found element, else `-1`.
           * @example
           *
           * var users = [
           *   { 'user': 'barney',  'active': false },
           *   { 'user': 'fred',    'active': false },
           *   { 'user': 'pebbles', 'active': true }
           * ];
           *
           * _.findIndex(users, function(o) { return o.user == 'barney'; });
           * // => 0
           *
           * // The `_.matches` iteratee shorthand.
           * _.findIndex(users, { 'user': 'fred', 'active': false });
           * // => 1
           *
           * // The `_.matchesProperty` iteratee shorthand.
           * _.findIndex(users, ['active', false]);
           * // => 0
           *
           * // The `_.property` iteratee shorthand.
           * _.findIndex(users, 'active');
           * // => 2
           */


          function findIndex(array, predicate, fromIndex) {
            var length = array == null ? 0 : array.length;

            if (!length) {
              return -1;
            }

            var index = fromIndex == null ? 0 : toInteger(fromIndex);

            if (index < 0) {
              index = nativeMax(length + index, 0);
            }

            return baseFindIndex(array, getIteratee(predicate, 3), index);
          }
          /**
           * This method is like `_.findIndex` except that it iterates over elements
           * of `collection` from right to left.
           *
           * @static
           * @memberOf _
           * @since 2.0.0
           * @category Array
           * @param {Array} array The array to inspect.
           * @param {Function} [predicate=_.identity] The function invoked per iteration.
           * @param {number} [fromIndex=array.length-1] The index to search from.
           * @returns {number} Returns the index of the found element, else `-1`.
           * @example
           *
           * var users = [
           *   { 'user': 'barney',  'active': true },
           *   { 'user': 'fred',    'active': false },
           *   { 'user': 'pebbles', 'active': false }
           * ];
           *
           * _.findLastIndex(users, function(o) { return o.user == 'pebbles'; });
           * // => 2
           *
           * // The `_.matches` iteratee shorthand.
           * _.findLastIndex(users, { 'user': 'barney', 'active': true });
           * // => 0
           *
           * // The `_.matchesProperty` iteratee shorthand.
           * _.findLastIndex(users, ['active', false]);
           * // => 2
           *
           * // The `_.property` iteratee shorthand.
           * _.findLastIndex(users, 'active');
           * // => 0
           */


          function findLastIndex(array, predicate, fromIndex) {
            var length = array == null ? 0 : array.length;

            if (!length) {
              return -1;
            }

            var index = length - 1;

            if (fromIndex !== undefined) {
              index = toInteger(fromIndex);
              index = fromIndex < 0 ? nativeMax(length + index, 0) : nativeMin(index, length - 1);
            }

            return baseFindIndex(array, getIteratee(predicate, 3), index, true);
          }
          /**
           * Flattens `array` a single level deep.
           *
           * @static
           * @memberOf _
           * @since 0.1.0
           * @category Array
           * @param {Array} array The array to flatten.
           * @returns {Array} Returns the new flattened array.
           * @example
           *
           * _.flatten([1, [2, [3, [4]], 5]]);
           * // => [1, 2, [3, [4]], 5]
           */


          function flatten(array) {
            var length = array == null ? 0 : array.length;
            return length ? baseFlatten(array, 1) : [];
          }
          /**
           * Recursively flattens `array`.
           *
           * @static
           * @memberOf _
           * @since 3.0.0
           * @category Array
           * @param {Array} array The array to flatten.
           * @returns {Array} Returns the new flattened array.
           * @example
           *
           * _.flattenDeep([1, [2, [3, [4]], 5]]);
           * // => [1, 2, 3, 4, 5]
           */


          function flattenDeep(array) {
            var length = array == null ? 0 : array.length;
            return length ? baseFlatten(array, INFINITY) : [];
          }
          /**
           * Recursively flatten `array` up to `depth` times.
           *
           * @static
           * @memberOf _
           * @since 4.4.0
           * @category Array
           * @param {Array} array The array to flatten.
           * @param {number} [depth=1] The maximum recursion depth.
           * @returns {Array} Returns the new flattened array.
           * @example
           *
           * var array = [1, [2, [3, [4]], 5]];
           *
           * _.flattenDepth(array, 1);
           * // => [1, 2, [3, [4]], 5]
           *
           * _.flattenDepth(array, 2);
           * // => [1, 2, 3, [4], 5]
           */


          function flattenDepth(array, depth) {
            var length = array == null ? 0 : array.length;

            if (!length) {
              return [];
            }

            depth = depth === undefined ? 1 : toInteger(depth);
            return baseFlatten(array, depth);
          }
          /**
           * The inverse of `_.toPairs`; this method returns an object composed
           * from key-value `pairs`.
           *
           * @static
           * @memberOf _
           * @since 4.0.0
           * @category Array
           * @param {Array} pairs The key-value pairs.
           * @returns {Object} Returns the new object.
           * @example
           *
           * _.fromPairs([['a', 1], ['b', 2]]);
           * // => { 'a': 1, 'b': 2 }
           */


          function fromPairs(pairs) {
            var index = -1,
                length = pairs == null ? 0 : pairs.length,
                result = {};

            while (++index < length) {
              var pair = pairs[index];
              result[pair[0]] = pair[1];
            }

            return result;
          }
          /**
           * Gets the first element of `array`.
           *
           * @static
           * @memberOf _
           * @since 0.1.0
           * @alias first
           * @category Array
           * @param {Array} array The array to query.
           * @returns {*} Returns the first element of `array`.
           * @example
           *
           * _.head([1, 2, 3]);
           * // => 1
           *
           * _.head([]);
           * // => undefined
           */


          function head(array) {
            return array && array.length ? array[0] : undefined;
          }
          /**
           * Gets the index at which the first occurrence of `value` is found in `array`
           * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
           * for equality comparisons. If `fromIndex` is negative, it's used as the
           * offset from the end of `array`.
           *
           * @static
           * @memberOf _
           * @since 0.1.0
           * @category Array
           * @param {Array} array The array to inspect.
           * @param {*} value The value to search for.
           * @param {number} [fromIndex=0] The index to search from.
           * @returns {number} Returns the index of the matched value, else `-1`.
           * @example
           *
           * _.indexOf([1, 2, 1, 2], 2);
           * // => 1
           *
           * // Search from the `fromIndex`.
           * _.indexOf([1, 2, 1, 2], 2, 2);
           * // => 3
           */


          function indexOf(array, value, fromIndex) {
            var length = array == null ? 0 : array.length;

            if (!length) {
              return -1;
            }

            var index = fromIndex == null ? 0 : toInteger(fromIndex);

            if (index < 0) {
              index = nativeMax(length + index, 0);
            }

            return baseIndexOf(array, value, index);
          }
          /**
           * Gets all but the last element of `array`.
           *
           * @static
           * @memberOf _
           * @since 0.1.0
           * @category Array
           * @param {Array} array The array to query.
           * @returns {Array} Returns the slice of `array`.
           * @example
           *
           * _.initial([1, 2, 3]);
           * // => [1, 2]
           */


          function initial(array) {
            var length = array == null ? 0 : array.length;
            return length ? baseSlice(array, 0, -1) : [];
          }
          /**
           * Creates an array of unique values that are included in all given arrays
           * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
           * for equality comparisons. The order and references of result values are
           * determined by the first array.
           *
           * @static
           * @memberOf _
           * @since 0.1.0
           * @category Array
           * @param {...Array} [arrays] The arrays to inspect.
           * @returns {Array} Returns the new array of intersecting values.
           * @example
           *
           * _.intersection([2, 1], [2, 3]);
           * // => [2]
           */


          var intersection = baseRest(function (arrays) {
            var mapped = arrayMap(arrays, castArrayLikeObject);
            return mapped.length && mapped[0] === arrays[0] ? baseIntersection(mapped) : [];
          });
          /**
           * This method is like `_.intersection` except that it accepts `iteratee`
           * which is invoked for each element of each `arrays` to generate the criterion
           * by which they're compared. The order and references of result values are
           * determined by the first array. The iteratee is invoked with one argument:
           * (value).
           *
           * @static
           * @memberOf _
           * @since 4.0.0
           * @category Array
           * @param {...Array} [arrays] The arrays to inspect.
           * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
           * @returns {Array} Returns the new array of intersecting values.
           * @example
           *
           * _.intersectionBy([2.1, 1.2], [2.3, 3.4], Math.floor);
           * // => [2.1]
           *
           * // The `_.property` iteratee shorthand.
           * _.intersectionBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');
           * // => [{ 'x': 1 }]
           */

          var intersectionBy = baseRest(function (arrays) {
            var iteratee = last(arrays),
                mapped = arrayMap(arrays, castArrayLikeObject);

            if (iteratee === last(mapped)) {
              iteratee = undefined;
            } else {
              mapped.pop();
            }

            return mapped.length && mapped[0] === arrays[0] ? baseIntersection(mapped, getIteratee(iteratee, 2)) : [];
          });
          /**
           * This method is like `_.intersection` except that it accepts `comparator`
           * which is invoked to compare elements of `arrays`. The order and references
           * of result values are determined by the first array. The comparator is
           * invoked with two arguments: (arrVal, othVal).
           *
           * @static
           * @memberOf _
           * @since 4.0.0
           * @category Array
           * @param {...Array} [arrays] The arrays to inspect.
           * @param {Function} [comparator] The comparator invoked per element.
           * @returns {Array} Returns the new array of intersecting values.
           * @example
           *
           * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
           * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];
           *
           * _.intersectionWith(objects, others, _.isEqual);
           * // => [{ 'x': 1, 'y': 2 }]
           */

          var intersectionWith = baseRest(function (arrays) {
            var comparator = last(arrays),
                mapped = arrayMap(arrays, castArrayLikeObject);
            comparator = typeof comparator == 'function' ? comparator : undefined;

            if (comparator) {
              mapped.pop();
            }

            return mapped.length && mapped[0] === arrays[0] ? baseIntersection(mapped, undefined, comparator) : [];
          });
          /**
           * Converts all elements in `array` into a string separated by `separator`.
           *
           * @static
           * @memberOf _
           * @since 4.0.0
           * @category Array
           * @param {Array} array The array to convert.
           * @param {string} [separator=','] The element separator.
           * @returns {string} Returns the joined string.
           * @example
           *
           * _.join(['a', 'b', 'c'], '~');
           * // => 'a~b~c'
           */

          function join(array, separator) {
            return array == null ? '' : nativeJoin.call(array, separator);
          }
          /**
           * Gets the last element of `array`.
           *
           * @static
           * @memberOf _
           * @since 0.1.0
           * @category Array
           * @param {Array} array The array to query.
           * @returns {*} Returns the last element of `array`.
           * @example
           *
           * _.last([1, 2, 3]);
           * // => 3
           */


          function last(array) {
            var length = array == null ? 0 : array.length;
            return length ? array[length - 1] : undefined;
          }
          /**
           * This method is like `_.indexOf` except that it iterates over elements of
           * `array` from right to left.
           *
           * @static
           * @memberOf _
           * @since 0.1.0
           * @category Array
           * @param {Array} array The array to inspect.
           * @param {*} value The value to search for.
           * @param {number} [fromIndex=array.length-1] The index to search from.
           * @returns {number} Returns the index of the matched value, else `-1`.
           * @example
           *
           * _.lastIndexOf([1, 2, 1, 2], 2);
           * // => 3
           *
           * // Search from the `fromIndex`.
           * _.lastIndexOf([1, 2, 1, 2], 2, 2);
           * // => 1
           */


          function lastIndexOf(array, value, fromIndex) {
            var length = array == null ? 0 : array.length;

            if (!length) {
              return -1;
            }

            var index = length;

            if (fromIndex !== undefined) {
              index = toInteger(fromIndex);
              index = index < 0 ? nativeMax(length + index, 0) : nativeMin(index, length - 1);
            }

            return value === value ? strictLastIndexOf(array, value, index) : baseFindIndex(array, baseIsNaN, index, true);
          }
          /**
           * Gets the element at index `n` of `array`. If `n` is negative, the nth
           * element from the end is returned.
           *
           * @static
           * @memberOf _
           * @since 4.11.0
           * @category Array
           * @param {Array} array The array to query.
           * @param {number} [n=0] The index of the element to return.
           * @returns {*} Returns the nth element of `array`.
           * @example
           *
           * var array = ['a', 'b', 'c', 'd'];
           *
           * _.nth(array, 1);
           * // => 'b'
           *
           * _.nth(array, -2);
           * // => 'c';
           */


          function nth(array, n) {
            return array && array.length ? baseNth(array, toInteger(n)) : undefined;
          }
          /**
           * Removes all given values from `array` using
           * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
           * for equality comparisons.
           *
           * **Note:** Unlike `_.without`, this method mutates `array`. Use `_.remove`
           * to remove elements from an array by predicate.
           *
           * @static
           * @memberOf _
           * @since 2.0.0
           * @category Array
           * @param {Array} array The array to modify.
           * @param {...*} [values] The values to remove.
           * @returns {Array} Returns `array`.
           * @example
           *
           * var array = ['a', 'b', 'c', 'a', 'b', 'c'];
           *
           * _.pull(array, 'a', 'c');
           * console.log(array);
           * // => ['b', 'b']
           */


          var pull = baseRest(pullAll);
          /**
           * This method is like `_.pull` except that it accepts an array of values to remove.
           *
           * **Note:** Unlike `_.difference`, this method mutates `array`.
           *
           * @static
           * @memberOf _
           * @since 4.0.0
           * @category Array
           * @param {Array} array The array to modify.
           * @param {Array} values The values to remove.
           * @returns {Array} Returns `array`.
           * @example
           *
           * var array = ['a', 'b', 'c', 'a', 'b', 'c'];
           *
           * _.pullAll(array, ['a', 'c']);
           * console.log(array);
           * // => ['b', 'b']
           */

          function pullAll(array, values) {
            return array && array.length && values && values.length ? basePullAll(array, values) : array;
          }
          /**
           * This method is like `_.pullAll` except that it accepts `iteratee` which is
           * invoked for each element of `array` and `values` to generate the criterion
           * by which they're compared. The iteratee is invoked with one argument: (value).
           *
           * **Note:** Unlike `_.differenceBy`, this method mutates `array`.
           *
           * @static
           * @memberOf _
           * @since 4.0.0
           * @category Array
           * @param {Array} array The array to modify.
           * @param {Array} values The values to remove.
           * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
           * @returns {Array} Returns `array`.
           * @example
           *
           * var array = [{ 'x': 1 }, { 'x': 2 }, { 'x': 3 }, { 'x': 1 }];
           *
           * _.pullAllBy(array, [{ 'x': 1 }, { 'x': 3 }], 'x');
           * console.log(array);
           * // => [{ 'x': 2 }]
           */


          function pullAllBy(array, values, iteratee) {
            return array && array.length && values && values.length ? basePullAll(array, values, getIteratee(iteratee, 2)) : array;
          }
          /**
           * This method is like `_.pullAll` except that it accepts `comparator` which
           * is invoked to compare elements of `array` to `values`. The comparator is
           * invoked with two arguments: (arrVal, othVal).
           *
           * **Note:** Unlike `_.differenceWith`, this method mutates `array`.
           *
           * @static
           * @memberOf _
           * @since 4.6.0
           * @category Array
           * @param {Array} array The array to modify.
           * @param {Array} values The values to remove.
           * @param {Function} [comparator] The comparator invoked per element.
           * @returns {Array} Returns `array`.
           * @example
           *
           * var array = [{ 'x': 1, 'y': 2 }, { 'x': 3, 'y': 4 }, { 'x': 5, 'y': 6 }];
           *
           * _.pullAllWith(array, [{ 'x': 3, 'y': 4 }], _.isEqual);
           * console.log(array);
           * // => [{ 'x': 1, 'y': 2 }, { 'x': 5, 'y': 6 }]
           */


          function pullAllWith(array, values, comparator) {
            return array && array.length && values && values.length ? basePullAll(array, values, undefined, comparator) : array;
          }
          /**
           * Removes elements from `array` corresponding to `indexes` and returns an
           * array of removed elements.
           *
           * **Note:** Unlike `_.at`, this method mutates `array`.
           *
           * @static
           * @memberOf _
           * @since 3.0.0
           * @category Array
           * @param {Array} array The array to modify.
           * @param {...(number|number[])} [indexes] The indexes of elements to remove.
           * @returns {Array} Returns the new array of removed elements.
           * @example
           *
           * var array = ['a', 'b', 'c', 'd'];
           * var pulled = _.pullAt(array, [1, 3]);
           *
           * console.log(array);
           * // => ['a', 'c']
           *
           * console.log(pulled);
           * // => ['b', 'd']
           */


          var pullAt = flatRest(function (array, indexes) {
            var length = array == null ? 0 : array.length,
                result = baseAt(array, indexes);
            basePullAt(array, arrayMap(indexes, function (index) {
              return isIndex(index, length) ? +index : index;
            }).sort(compareAscending));
            return result;
          });
          /**
           * Removes all elements from `array` that `predicate` returns truthy for
           * and returns an array of the removed elements. The predicate is invoked
           * with three arguments: (value, index, array).
           *
           * **Note:** Unlike `_.filter`, this method mutates `array`. Use `_.pull`
           * to pull elements from an array by value.
           *
           * @static
           * @memberOf _
           * @since 2.0.0
           * @category Array
           * @param {Array} array The array to modify.
           * @param {Function} [predicate=_.identity] The function invoked per iteration.
           * @returns {Array} Returns the new array of removed elements.
           * @example
           *
           * var array = [1, 2, 3, 4];
           * var evens = _.remove(array, function(n) {
           *   return n % 2 == 0;
           * });
           *
           * console.log(array);
           * // => [1, 3]
           *
           * console.log(evens);
           * // => [2, 4]
           */

          function remove(array, predicate) {
            var result = [];

            if (!(array && array.length)) {
              return result;
            }

            var index = -1,
                indexes = [],
                length = array.length;
            predicate = getIteratee(predicate, 3);

            while (++index < length) {
              var value = array[index];

              if (predicate(value, index, array)) {
                result.push(value);
                indexes.push(index);
              }
            }

            basePullAt(array, indexes);
            return result;
          }
          /**
           * Reverses `array` so that the first element becomes the last, the second
           * element becomes the second to last, and so on.
           *
           * **Note:** This method mutates `array` and is based on
           * [`Array#reverse`](https://mdn.io/Array/reverse).
           *
           * @static
           * @memberOf _
           * @since 4.0.0
           * @category Array
           * @param {Array} array The array to modify.
           * @returns {Array} Returns `array`.
           * @example
           *
           * var array = [1, 2, 3];
           *
           * _.reverse(array);
           * // => [3, 2, 1]
           *
           * console.log(array);
           * // => [3, 2, 1]
           */


          function reverse(array) {
            return array == null ? array : nativeReverse.call(array);
          }
          /**
           * Creates a slice of `array` from `start` up to, but not including, `end`.
           *
           * **Note:** This method is used instead of
           * [`Array#slice`](https://mdn.io/Array/slice) to ensure dense arrays are
           * returned.
           *
           * @static
           * @memberOf _
           * @since 3.0.0
           * @category Array
           * @param {Array} array The array to slice.
           * @param {number} [start=0] The start position.
           * @param {number} [end=array.length] The end position.
           * @returns {Array} Returns the slice of `array`.
           */


          function slice(array, start, end) {
            var length = array == null ? 0 : array.length;

            if (!length) {
              return [];
            }

            if (end && typeof end != 'number' && isIterateeCall(array, start, end)) {
              start = 0;
              end = length;
            } else {
              start = start == null ? 0 : toInteger(start);
              end = end === undefined ? length : toInteger(end);
            }

            return baseSlice(array, start, end);
          }
          /**
           * Uses a binary search to determine the lowest index at which `value`
           * should be inserted into `array` in order to maintain its sort order.
           *
           * @static
           * @memberOf _
           * @since 0.1.0
           * @category Array
           * @param {Array} array The sorted array to inspect.
           * @param {*} value The value to evaluate.
           * @returns {number} Returns the index at which `value` should be inserted
           *  into `array`.
           * @example
           *
           * _.sortedIndex([30, 50], 40);
           * // => 1
           */


          function sortedIndex(array, value) {
            return baseSortedIndex(array, value);
          }
          /**
           * This method is like `_.sortedIndex` except that it accepts `iteratee`
           * which is invoked for `value` and each element of `array` to compute their
           * sort ranking. The iteratee is invoked with one argument: (value).
           *
           * @static
           * @memberOf _
           * @since 4.0.0
           * @category Array
           * @param {Array} array The sorted array to inspect.
           * @param {*} value The value to evaluate.
           * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
           * @returns {number} Returns the index at which `value` should be inserted
           *  into `array`.
           * @example
           *
           * var objects = [{ 'x': 4 }, { 'x': 5 }];
           *
           * _.sortedIndexBy(objects, { 'x': 4 }, function(o) { return o.x; });
           * // => 0
           *
           * // The `_.property` iteratee shorthand.
           * _.sortedIndexBy(objects, { 'x': 4 }, 'x');
           * // => 0
           */


          function sortedIndexBy(array, value, iteratee) {
            return baseSortedIndexBy(array, value, getIteratee(iteratee, 2));
          }
          /**
           * This method is like `_.indexOf` except that it performs a binary
           * search on a sorted `array`.
           *
           * @static
           * @memberOf _
           * @since 4.0.0
           * @category Array
           * @param {Array} array The array to inspect.
           * @param {*} value The value to search for.
           * @returns {number} Returns the index of the matched value, else `-1`.
           * @example
           *
           * _.sortedIndexOf([4, 5, 5, 5, 6], 5);
           * // => 1
           */


          function sortedIndexOf(array, value) {
            var length = array == null ? 0 : array.length;

            if (length) {
              var index = baseSortedIndex(array, value);

              if (index < length && eq(array[index], value)) {
                return index;
              }
            }

            return -1;
          }
          /**
           * This method is like `_.sortedIndex` except that it returns the highest
           * index at which `value` should be inserted into `array` in order to
           * maintain its sort order.
           *
           * @static
           * @memberOf _
           * @since 3.0.0
           * @category Array
           * @param {Array} array The sorted array to inspect.
           * @param {*} value The value to evaluate.
           * @returns {number} Returns the index at which `value` should be inserted
           *  into `array`.
           * @example
           *
           * _.sortedLastIndex([4, 5, 5, 5, 6], 5);
           * // => 4
           */


          function sortedLastIndex(array, value) {
            return baseSortedIndex(array, value, true);
          }
          /**
           * This method is like `_.sortedLastIndex` except that it accepts `iteratee`
           * which is invoked for `value` and each element of `array` to compute their
           * sort ranking. The iteratee is invoked with one argument: (value).
           *
           * @static
           * @memberOf _
           * @since 4.0.0
           * @category Array
           * @param {Array} array The sorted array to inspect.
           * @param {*} value The value to evaluate.
           * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
           * @returns {number} Returns the index at which `value` should be inserted
           *  into `array`.
           * @example
           *
           * var objects = [{ 'x': 4 }, { 'x': 5 }];
           *
           * _.sortedLastIndexBy(objects, { 'x': 4 }, function(o) { return o.x; });
           * // => 1
           *
           * // The `_.property` iteratee shorthand.
           * _.sortedLastIndexBy(objects, { 'x': 4 }, 'x');
           * // => 1
           */


          function sortedLastIndexBy(array, value, iteratee) {
            return baseSortedIndexBy(array, value, getIteratee(iteratee, 2), true);
          }
          /**
           * This method is like `_.lastIndexOf` except that it performs a binary
           * search on a sorted `array`.
           *
           * @static
           * @memberOf _
           * @since 4.0.0
           * @category Array
           * @param {Array} array The array to inspect.
           * @param {*} value The value to search for.
           * @returns {number} Returns the index of the matched value, else `-1`.
           * @example
           *
           * _.sortedLastIndexOf([4, 5, 5, 5, 6], 5);
           * // => 3
           */


          function sortedLastIndexOf(array, value) {
            var length = array == null ? 0 : array.length;

            if (length) {
              var index = baseSortedIndex(array, value, true) - 1;

              if (eq(array[index], value)) {
                return index;
              }
            }

            return -1;
          }
          /**
           * This method is like `_.uniq` except that it's designed and optimized
           * for sorted arrays.
           *
           * @static
           * @memberOf _
           * @since 4.0.0
           * @category Array
           * @param {Array} array The array to inspect.
           * @returns {Array} Returns the new duplicate free array.
           * @example
           *
           * _.sortedUniq([1, 1, 2]);
           * // => [1, 2]
           */


          function sortedUniq(array) {
            return array && array.length ? baseSortedUniq(array) : [];
          }
          /**
           * This method is like `_.uniqBy` except that it's designed and optimized
           * for sorted arrays.
           *
           * @static
           * @memberOf _
           * @since 4.0.0
           * @category Array
           * @param {Array} array The array to inspect.
           * @param {Function} [iteratee] The iteratee invoked per element.
           * @returns {Array} Returns the new duplicate free array.
           * @example
           *
           * _.sortedUniqBy([1.1, 1.2, 2.3, 2.4], Math.floor);
           * // => [1.1, 2.3]
           */


          function sortedUniqBy(array, iteratee) {
            return array && array.length ? baseSortedUniq(array, getIteratee(iteratee, 2)) : [];
          }
          /**
           * Gets all but the first element of `array`.
           *
           * @static
           * @memberOf _
           * @since 4.0.0
           * @category Array
           * @param {Array} array The array to query.
           * @returns {Array} Returns the slice of `array`.
           * @example
           *
           * _.tail([1, 2, 3]);
           * // => [2, 3]
           */


          function tail(array) {
            var length = array == null ? 0 : array.length;
            return length ? baseSlice(array, 1, length) : [];
          }
          /**
           * Creates a slice of `array` with `n` elements taken from the beginning.
           *
           * @static
           * @memberOf _
           * @since 0.1.0
           * @category Array
           * @param {Array} array The array to query.
           * @param {number} [n=1] The number of elements to take.
           * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
           * @returns {Array} Returns the slice of `array`.
           * @example
           *
           * _.take([1, 2, 3]);
           * // => [1]
           *
           * _.take([1, 2, 3], 2);
           * // => [1, 2]
           *
           * _.take([1, 2, 3], 5);
           * // => [1, 2, 3]
           *
           * _.take([1, 2, 3], 0);
           * // => []
           */


          function take(array, n, guard) {
            if (!(array && array.length)) {
              return [];
            }

            n = guard || n === undefined ? 1 : toInteger(n);
            return baseSlice(array, 0, n < 0 ? 0 : n);
          }
          /**
           * Creates a slice of `array` with `n` elements taken from the end.
           *
           * @static
           * @memberOf _
           * @since 3.0.0
           * @category Array
           * @param {Array} array The array to query.
           * @param {number} [n=1] The number of elements to take.
           * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
           * @returns {Array} Returns the slice of `array`.
           * @example
           *
           * _.takeRight([1, 2, 3]);
           * // => [3]
           *
           * _.takeRight([1, 2, 3], 2);
           * // => [2, 3]
           *
           * _.takeRight([1, 2, 3], 5);
           * // => [1, 2, 3]
           *
           * _.takeRight([1, 2, 3], 0);
           * // => []
           */


          function takeRight(array, n, guard) {
            var length = array == null ? 0 : array.length;

            if (!length) {
              return [];
            }

            n = guard || n === undefined ? 1 : toInteger(n);
            n = length - n;
            return baseSlice(array, n < 0 ? 0 : n, length);
          }
          /**
           * Creates a slice of `array` with elements taken from the end. Elements are
           * taken until `predicate` returns falsey. The predicate is invoked with
           * three arguments: (value, index, array).
           *
           * @static
           * @memberOf _
           * @since 3.0.0
           * @category Array
           * @param {Array} array The array to query.
           * @param {Function} [predicate=_.identity] The function invoked per iteration.
           * @returns {Array} Returns the slice of `array`.
           * @example
           *
           * var users = [
           *   { 'user': 'barney',  'active': true },
           *   { 'user': 'fred',    'active': false },
           *   { 'user': 'pebbles', 'active': false }
           * ];
           *
           * _.takeRightWhile(users, function(o) { return !o.active; });
           * // => objects for ['fred', 'pebbles']
           *
           * // The `_.matches` iteratee shorthand.
           * _.takeRightWhile(users, { 'user': 'pebbles', 'active': false });
           * // => objects for ['pebbles']
           *
           * // The `_.matchesProperty` iteratee shorthand.
           * _.takeRightWhile(users, ['active', false]);
           * // => objects for ['fred', 'pebbles']
           *
           * // The `_.property` iteratee shorthand.
           * _.takeRightWhile(users, 'active');
           * // => []
           */


          function takeRightWhile(array, predicate) {
            return array && array.length ? baseWhile(array, getIteratee(predicate, 3), false, true) : [];
          }
          /**
           * Creates a slice of `array` with elements taken from the beginning. Elements
           * are taken until `predicate` returns falsey. The predicate is invoked with
           * three arguments: (value, index, array).
           *
           * @static
           * @memberOf _
           * @since 3.0.0
           * @category Array
           * @param {Array} array The array to query.
           * @param {Function} [predicate=_.identity] The function invoked per iteration.
           * @returns {Array} Returns the slice of `array`.
           * @example
           *
           * var users = [
           *   { 'user': 'barney',  'active': false },
           *   { 'user': 'fred',    'active': false },
           *   { 'user': 'pebbles', 'active': true }
           * ];
           *
           * _.takeWhile(users, function(o) { return !o.active; });
           * // => objects for ['barney', 'fred']
           *
           * // The `_.matches` iteratee shorthand.
           * _.takeWhile(users, { 'user': 'barney', 'active': false });
           * // => objects for ['barney']
           *
           * // The `_.matchesProperty` iteratee shorthand.
           * _.takeWhile(users, ['active', false]);
           * // => objects for ['barney', 'fred']
           *
           * // The `_.property` iteratee shorthand.
           * _.takeWhile(users, 'active');
           * // => []
           */


          function takeWhile(array, predicate) {
            return array && array.length ? baseWhile(array, getIteratee(predicate, 3)) : [];
          }
          /**
           * Creates an array of unique values, in order, from all given arrays using
           * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
           * for equality comparisons.
           *
           * @static
           * @memberOf _
           * @since 0.1.0
           * @category Array
           * @param {...Array} [arrays] The arrays to inspect.
           * @returns {Array} Returns the new array of combined values.
           * @example
           *
           * _.union([2], [1, 2]);
           * // => [2, 1]
           */


          var union = baseRest(function (arrays) {
            return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true));
          });
          /**
           * This method is like `_.union` except that it accepts `iteratee` which is
           * invoked for each element of each `arrays` to generate the criterion by
           * which uniqueness is computed. Result values are chosen from the first
           * array in which the value occurs. The iteratee is invoked with one argument:
           * (value).
           *
           * @static
           * @memberOf _
           * @since 4.0.0
           * @category Array
           * @param {...Array} [arrays] The arrays to inspect.
           * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
           * @returns {Array} Returns the new array of combined values.
           * @example
           *
           * _.unionBy([2.1], [1.2, 2.3], Math.floor);
           * // => [2.1, 1.2]
           *
           * // The `_.property` iteratee shorthand.
           * _.unionBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');
           * // => [{ 'x': 1 }, { 'x': 2 }]
           */

          var unionBy = baseRest(function (arrays) {
            var iteratee = last(arrays);

            if (isArrayLikeObject(iteratee)) {
              iteratee = undefined;
            }

            return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true), getIteratee(iteratee, 2));
          });
          /**
           * This method is like `_.union` except that it accepts `comparator` which
           * is invoked to compare elements of `arrays`. Result values are chosen from
           * the first array in which the value occurs. The comparator is invoked
           * with two arguments: (arrVal, othVal).
           *
           * @static
           * @memberOf _
           * @since 4.0.0
           * @category Array
           * @param {...Array} [arrays] The arrays to inspect.
           * @param {Function} [comparator] The comparator invoked per element.
           * @returns {Array} Returns the new array of combined values.
           * @example
           *
           * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
           * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];
           *
           * _.unionWith(objects, others, _.isEqual);
           * // => [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }, { 'x': 1, 'y': 1 }]
           */

          var unionWith = baseRest(function (arrays) {
            var comparator = last(arrays);
            comparator = typeof comparator == 'function' ? comparator : undefined;
            return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true), undefined, comparator);
          });
          /**
           * Creates a duplicate-free version of an array, using
           * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
           * for equality comparisons, in which only the first occurrence of each element
           * is kept. The order of result values is determined by the order they occur
           * in the array.
           *
           * @static
           * @memberOf _
           * @since 0.1.0
           * @category Array
           * @param {Array} array The array to inspect.
           * @returns {Array} Returns the new duplicate free array.
           * @example
           *
           * _.uniq([2, 1, 2]);
           * // => [2, 1]
           */

          function uniq(array) {
            return array && array.length ? baseUniq(array) : [];
          }
          /**
           * This method is like `_.uniq` except that it accepts `iteratee` which is
           * invoked for each element in `array` to generate the criterion by which
           * uniqueness is computed. The order of result values is determined by the
           * order they occur in the array. The iteratee is invoked with one argument:
           * (value).
           *
           * @static
           * @memberOf _
           * @since 4.0.0
           * @category Array
           * @param {Array} array The array to inspect.
           * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
           * @returns {Array} Returns the new duplicate free array.
           * @example
           *
           * _.uniqBy([2.1, 1.2, 2.3], Math.floor);
           * // => [2.1, 1.2]
           *
           * // The `_.property` iteratee shorthand.
           * _.uniqBy([{ 'x': 1 }, { 'x': 2 }, { 'x': 1 }], 'x');
           * // => [{ 'x': 1 }, { 'x': 2 }]
           */


          function uniqBy(array, iteratee) {
            return array && array.length ? baseUniq(array, getIteratee(iteratee, 2)) : [];
          }
          /**
           * This method is like `_.uniq` except that it accepts `comparator` which
           * is invoked to compare elements of `array`. The order of result values is
           * determined by the order they occur in the array.The comparator is invoked
           * with two arguments: (arrVal, othVal).
           *
           * @static
           * @memberOf _
           * @since 4.0.0
           * @category Array
           * @param {Array} array The array to inspect.
           * @param {Function} [comparator] The comparator invoked per element.
           * @returns {Array} Returns the new duplicate free array.
           * @example
           *
           * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }, { 'x': 1, 'y': 2 }];
           *
           * _.uniqWith(objects, _.isEqual);
           * // => [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }]
           */


          function uniqWith(array, comparator) {
            comparator = typeof comparator == 'function' ? comparator : undefined;
            return array && array.length ? baseUniq(array, undefined, comparator) : [];
          }
          /**
           * This method is like `_.zip` except that it accepts an array of grouped
           * elements and creates an array regrouping the elements to their pre-zip
           * configuration.
           *
           * @static
           * @memberOf _
           * @since 1.2.0
           * @category Array
           * @param {Array} array The array of grouped elements to process.
           * @returns {Array} Returns the new array of regrouped elements.
           * @example
           *
           * var zipped = _.zip(['a', 'b'], [1, 2], [true, false]);
           * // => [['a', 1, true], ['b', 2, false]]
           *
           * _.unzip(zipped);
           * // => [['a', 'b'], [1, 2], [true, false]]
           */


          function unzip(array) {
            if (!(array && array.length)) {
              return [];
            }

            var length = 0;
            array = arrayFilter(array, function (group) {
              if (isArrayLikeObject(group)) {
                length = nativeMax(group.length, length);
                return true;
              }
            });
            return baseTimes(length, function (index) {
              return arrayMap(array, baseProperty(index));
            });
          }
          /**
           * This method is like `_.unzip` except that it accepts `iteratee` to specify
           * how regrouped values should be combined. The iteratee is invoked with the
           * elements of each group: (...group).
           *
           * @static
           * @memberOf _
           * @since 3.8.0
           * @category Array
           * @param {Array} array The array of grouped elements to process.
           * @param {Function} [iteratee=_.identity] The function to combine
           *  regrouped values.
           * @returns {Array} Returns the new array of regrouped elements.
           * @example
           *
           * var zipped = _.zip([1, 2], [10, 20], [100, 200]);
           * // => [[1, 10, 100], [2, 20, 200]]
           *
           * _.unzipWith(zipped, _.add);
           * // => [3, 30, 300]
           */


          function unzipWith(array, iteratee) {
            if (!(array && array.length)) {
              return [];
            }

            var result = unzip(array);

            if (iteratee == null) {
              return result;
            }

            return arrayMap(result, function (group) {
              return apply(iteratee, undefined, group);
            });
          }
          /**
           * Creates an array excluding all given values using
           * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
           * for equality comparisons.
           *
           * **Note:** Unlike `_.pull`, this method returns a new array.
           *
           * @static
           * @memberOf _
           * @since 0.1.0
           * @category Array
           * @param {Array} array The array to inspect.
           * @param {...*} [values] The values to exclude.
           * @returns {Array} Returns the new array of filtered values.
           * @see _.difference, _.xor
           * @example
           *
           * _.without([2, 1, 2, 3], 1, 2);
           * // => [3]
           */


          var without = baseRest(function (array, values) {
            return isArrayLikeObject(array) ? baseDifference(array, values) : [];
          });
          /**
           * Creates an array of unique values that is the
           * [symmetric difference](https://en.wikipedia.org/wiki/Symmetric_difference)
           * of the given arrays. The order of result values is determined by the order
           * they occur in the arrays.
           *
           * @static
           * @memberOf _
           * @since 2.4.0
           * @category Array
           * @param {...Array} [arrays] The arrays to inspect.
           * @returns {Array} Returns the new array of filtered values.
           * @see _.difference, _.without
           * @example
           *
           * _.xor([2, 1], [2, 3]);
           * // => [1, 3]
           */

          var xor = baseRest(function (arrays) {
            return baseXor(arrayFilter(arrays, isArrayLikeObject));
          });
          /**
           * This method is like `_.xor` except that it accepts `iteratee` which is
           * invoked for each element of each `arrays` to generate the criterion by
           * which by which they're compared. The order of result values is determined
           * by the order they occur in the arrays. The iteratee is invoked with one
           * argument: (value).
           *
           * @static
           * @memberOf _
           * @since 4.0.0
           * @category Array
           * @param {...Array} [arrays] The arrays to inspect.
           * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
           * @returns {Array} Returns the new array of filtered values.
           * @example
           *
           * _.xorBy([2.1, 1.2], [2.3, 3.4], Math.floor);
           * // => [1.2, 3.4]
           *
           * // The `_.property` iteratee shorthand.
           * _.xorBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');
           * // => [{ 'x': 2 }]
           */

          var xorBy = baseRest(function (arrays) {
            var iteratee = last(arrays);

            if (isArrayLikeObject(iteratee)) {
              iteratee = undefined;
            }

            return baseXor(arrayFilter(arrays, isArrayLikeObject), getIteratee(iteratee, 2));
          });
          /**
           * This method is like `_.xor` except that it accepts `comparator` which is
           * invoked to compare elements of `arrays`. The order of result values is
           * determined by the order they occur in the arrays. The comparator is invoked
           * with two arguments: (arrVal, othVal).
           *
           * @static
           * @memberOf _
           * @since 4.0.0
           * @category Array
           * @param {...Array} [arrays] The arrays to inspect.
           * @param {Function} [comparator] The comparator invoked per element.
           * @returns {Array} Returns the new array of filtered values.
           * @example
           *
           * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
           * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];
           *
           * _.xorWith(objects, others, _.isEqual);
           * // => [{ 'x': 2, 'y': 1 }, { 'x': 1, 'y': 1 }]
           */

          var xorWith = baseRest(function (arrays) {
            var comparator = last(arrays);
            comparator = typeof comparator == 'function' ? comparator : undefined;
            return baseXor(arrayFilter(arrays, isArrayLikeObject), undefined, comparator);
          });
          /**
           * Creates an array of grouped elements, the first of which contains the
           * first elements of the given arrays, the second of which contains the
           * second elements of the given arrays, and so on.
           *
           * @static
           * @memberOf _
           * @since 0.1.0
           * @category Array
           * @param {...Array} [arrays] The arrays to process.
           * @returns {Array} Returns the new array of grouped elements.
           * @example
           *
           * _.zip(['a', 'b'], [1, 2], [true, false]);
           * // => [['a', 1, true], ['b', 2, false]]
           */

          var zip = baseRest(unzip);
          /**
           * This method is like `_.fromPairs` except that it accepts two arrays,
           * one of property identifiers and one of corresponding values.
           *
           * @static
           * @memberOf _
           * @since 0.4.0
           * @category Array
           * @param {Array} [props=[]] The property identifiers.
           * @param {Array} [values=[]] The property values.
           * @returns {Object} Returns the new object.
           * @example
           *
           * _.zipObject(['a', 'b'], [1, 2]);
           * // => { 'a': 1, 'b': 2 }
           */

          function zipObject(props, values) {
            return baseZipObject(props || [], values || [], assignValue);
          }
          /**
           * This method is like `_.zipObject` except that it supports property paths.
           *
           * @static
           * @memberOf _
           * @since 4.1.0
           * @category Array
           * @param {Array} [props=[]] The property identifiers.
           * @param {Array} [values=[]] The property values.
           * @returns {Object} Returns the new object.
           * @example
           *
           * _.zipObjectDeep(['a.b[0].c', 'a.b[1].d'], [1, 2]);
           * // => { 'a': { 'b': [{ 'c': 1 }, { 'd': 2 }] } }
           */


          function zipObjectDeep(props, values) {
            return baseZipObject(props || [], values || [], baseSet);
          }
          /**
           * This method is like `_.zip` except that it accepts `iteratee` to specify
           * how grouped values should be combined. The iteratee is invoked with the
           * elements of each group: (...group).
           *
           * @static
           * @memberOf _
           * @since 3.8.0
           * @category Array
           * @param {...Array} [arrays] The arrays to process.
           * @param {Function} [iteratee=_.identity] The function to combine
           *  grouped values.
           * @returns {Array} Returns the new array of grouped elements.
           * @example
           *
           * _.zipWith([1, 2], [10, 20], [100, 200], function(a, b, c) {
           *   return a + b + c;
           * });
           * // => [111, 222]
           */


          var zipWith = baseRest(function (arrays) {
            var length = arrays.length,
                iteratee = length > 1 ? arrays[length - 1] : undefined;
            iteratee = typeof iteratee == 'function' ? (arrays.pop(), iteratee) : undefined;
            return unzipWith(arrays, iteratee);
          });
          /*------------------------------------------------------------------------*/

          /**
           * Creates a `lodash` wrapper instance that wraps `value` with explicit method
           * chain sequences enabled. The result of such sequences must be unwrapped
           * with `_#value`.
           *
           * @static
           * @memberOf _
           * @since 1.3.0
           * @category Seq
           * @param {*} value The value to wrap.
           * @returns {Object} Returns the new `lodash` wrapper instance.
           * @example
           *
           * var users = [
           *   { 'user': 'barney',  'age': 36 },
           *   { 'user': 'fred',    'age': 40 },
           *   { 'user': 'pebbles', 'age': 1 }
           * ];
           *
           * var youngest = _
           *   .chain(users)
           *   .sortBy('age')
           *   .map(function(o) {
           *     return o.user + ' is ' + o.age;
           *   })
           *   .head()
           *   .value();
           * // => 'pebbles is 1'
           */

          function chain(value) {
            var result = lodash(value);
            result.__chain__ = true;
            return result;
          }
          /**
           * This method invokes `interceptor` and returns `value`. The interceptor
           * is invoked with one argument; (value). The purpose of this method is to
           * "tap into" a method chain sequence in order to modify intermediate results.
           *
           * @static
           * @memberOf _
           * @since 0.1.0
           * @category Seq
           * @param {*} value The value to provide to `interceptor`.
           * @param {Function} interceptor The function to invoke.
           * @returns {*} Returns `value`.
           * @example
           *
           * _([1, 2, 3])
           *  .tap(function(array) {
           *    // Mutate input array.
           *    array.pop();
           *  })
           *  .reverse()
           *  .value();
           * // => [2, 1]
           */


          function tap(value, interceptor) {
            interceptor(value);
            return value;
          }
          /**
           * This method is like `_.tap` except that it returns the result of `interceptor`.
           * The purpose of this method is to "pass thru" values replacing intermediate
           * results in a method chain sequence.
           *
           * @static
           * @memberOf _
           * @since 3.0.0
           * @category Seq
           * @param {*} value The value to provide to `interceptor`.
           * @param {Function} interceptor The function to invoke.
           * @returns {*} Returns the result of `interceptor`.
           * @example
           *
           * _('  abc  ')
           *  .chain()
           *  .trim()
           *  .thru(function(value) {
           *    return [value];
           *  })
           *  .value();
           * // => ['abc']
           */


          function thru(value, interceptor) {
            return interceptor(value);
          }
          /**
           * This method is the wrapper version of `_.at`.
           *
           * @name at
           * @memberOf _
           * @since 1.0.0
           * @category Seq
           * @param {...(string|string[])} [paths] The property paths to pick.
           * @returns {Object} Returns the new `lodash` wrapper instance.
           * @example
           *
           * var object = { 'a': [{ 'b': { 'c': 3 } }, 4] };
           *
           * _(object).at(['a[0].b.c', 'a[1]']).value();
           * // => [3, 4]
           */


          var wrapperAt = flatRest(function (paths) {
            var length = paths.length,
                start = length ? paths[0] : 0,
                value = this.__wrapped__,
                interceptor = function interceptor(object) {
              return baseAt(object, paths);
            };

            if (length > 1 || this.__actions__.length || !(value instanceof LazyWrapper) || !isIndex(start)) {
              return this.thru(interceptor);
            }

            value = value.slice(start, +start + (length ? 1 : 0));

            value.__actions__.push({
              'func': thru,
              'args': [interceptor],
              'thisArg': undefined
            });

            return new LodashWrapper(value, this.__chain__).thru(function (array) {
              if (length && !array.length) {
                array.push(undefined);
              }

              return array;
            });
          });
          /**
           * Creates a `lodash` wrapper instance with explicit method chain sequences enabled.
           *
           * @name chain
           * @memberOf _
           * @since 0.1.0
           * @category Seq
           * @returns {Object} Returns the new `lodash` wrapper instance.
           * @example
           *
           * var users = [
           *   { 'user': 'barney', 'age': 36 },
           *   { 'user': 'fred',   'age': 40 }
           * ];
           *
           * // A sequence without explicit chaining.
           * _(users).head();
           * // => { 'user': 'barney', 'age': 36 }
           *
           * // A sequence with explicit chaining.
           * _(users)
           *   .chain()
           *   .head()
           *   .pick('user')
           *   .value();
           * // => { 'user': 'barney' }
           */

          function wrapperChain() {
            return chain(this);
          }
          /**
           * Executes the chain sequence and returns the wrapped result.
           *
           * @name commit
           * @memberOf _
           * @since 3.2.0
           * @category Seq
           * @returns {Object} Returns the new `lodash` wrapper instance.
           * @example
           *
           * var array = [1, 2];
           * var wrapped = _(array).push(3);
           *
           * console.log(array);
           * // => [1, 2]
           *
           * wrapped = wrapped.commit();
           * console.log(array);
           * // => [1, 2, 3]
           *
           * wrapped.last();
           * // => 3
           *
           * console.log(array);
           * // => [1, 2, 3]
           */


          function wrapperCommit() {
            return new LodashWrapper(this.value(), this.__chain__);
          }
          /**
           * Gets the next value on a wrapped object following the
           * [iterator protocol](https://mdn.io/iteration_protocols#iterator).
           *
           * @name next
           * @memberOf _
           * @since 4.0.0
           * @category Seq
           * @returns {Object} Returns the next iterator value.
           * @example
           *
           * var wrapped = _([1, 2]);
           *
           * wrapped.next();
           * // => { 'done': false, 'value': 1 }
           *
           * wrapped.next();
           * // => { 'done': false, 'value': 2 }
           *
           * wrapped.next();
           * // => { 'done': true, 'value': undefined }
           */


          function wrapperNext() {
            if (this.__values__ === undefined) {
              this.__values__ = toArray(this.value());
            }

            var done = this.__index__ >= this.__values__.length,
                value = done ? undefined : this.__values__[this.__index__++];
            return {
              'done': done,
              'value': value
            };
          }
          /**
           * Enables the wrapper to be iterable.
           *
           * @name Symbol.iterator
           * @memberOf _
           * @since 4.0.0
           * @category Seq
           * @returns {Object} Returns the wrapper object.
           * @example
           *
           * var wrapped = _([1, 2]);
           *
           * wrapped[Symbol.iterator]() === wrapped;
           * // => true
           *
           * Array.from(wrapped);
           * // => [1, 2]
           */


          function wrapperToIterator() {
            return this;
          }
          /**
           * Creates a clone of the chain sequence planting `value` as the wrapped value.
           *
           * @name plant
           * @memberOf _
           * @since 3.2.0
           * @category Seq
           * @param {*} value The value to plant.
           * @returns {Object} Returns the new `lodash` wrapper instance.
           * @example
           *
           * function square(n) {
           *   return n * n;
           * }
           *
           * var wrapped = _([1, 2]).map(square);
           * var other = wrapped.plant([3, 4]);
           *
           * other.value();
           * // => [9, 16]
           *
           * wrapped.value();
           * // => [1, 4]
           */


          function wrapperPlant(value) {
            var result,
                parent = this;

            while (parent instanceof baseLodash) {
              var clone = wrapperClone(parent);
              clone.__index__ = 0;
              clone.__values__ = undefined;

              if (result) {
                previous.__wrapped__ = clone;
              } else {
                result = clone;
              }

              var previous = clone;
              parent = parent.__wrapped__;
            }

            previous.__wrapped__ = value;
            return result;
          }
          /**
           * This method is the wrapper version of `_.reverse`.
           *
           * **Note:** This method mutates the wrapped array.
           *
           * @name reverse
           * @memberOf _
           * @since 0.1.0
           * @category Seq
           * @returns {Object} Returns the new `lodash` wrapper instance.
           * @example
           *
           * var array = [1, 2, 3];
           *
           * _(array).reverse().value()
           * // => [3, 2, 1]
           *
           * console.log(array);
           * // => [3, 2, 1]
           */


          function wrapperReverse() {
            var value = this.__wrapped__;

            if (value instanceof LazyWrapper) {
              var wrapped = value;

              if (this.__actions__.length) {
                wrapped = new LazyWrapper(this);
              }

              wrapped = wrapped.reverse();

              wrapped.__actions__.push({
                'func': thru,
                'args': [reverse],
                'thisArg': undefined
              });

              return new LodashWrapper(wrapped, this.__chain__);
            }

            return this.thru(reverse);
          }
          /**
           * Executes the chain sequence to resolve the unwrapped value.
           *
           * @name value
           * @memberOf _
           * @since 0.1.0
           * @alias toJSON, valueOf
           * @category Seq
           * @returns {*} Returns the resolved unwrapped value.
           * @example
           *
           * _([1, 2, 3]).value();
           * // => [1, 2, 3]
           */


          function wrapperValue() {
            return baseWrapperValue(this.__wrapped__, this.__actions__);
          }
          /*------------------------------------------------------------------------*/

          /**
           * Creates an object composed of keys generated from the results of running
           * each element of `collection` thru `iteratee`. The corresponding value of
           * each key is the number of times the key was returned by `iteratee`. The
           * iteratee is invoked with one argument: (value).
           *
           * @static
           * @memberOf _
           * @since 0.5.0
           * @category Collection
           * @param {Array|Object} collection The collection to iterate over.
           * @param {Function} [iteratee=_.identity] The iteratee to transform keys.
           * @returns {Object} Returns the composed aggregate object.
           * @example
           *
           * _.countBy([6.1, 4.2, 6.3], Math.floor);
           * // => { '4': 1, '6': 2 }
           *
           * // The `_.property` iteratee shorthand.
           * _.countBy(['one', 'two', 'three'], 'length');
           * // => { '3': 2, '5': 1 }
           */


          var countBy = createAggregator(function (result, value, key) {
            if (hasOwnProperty.call(result, key)) {
              ++result[key];
            } else {
              baseAssignValue(result, key, 1);
            }
          });
          /**
           * Checks if `predicate` returns truthy for **all** elements of `collection`.
           * Iteration is stopped once `predicate` returns falsey. The predicate is
           * invoked with three arguments: (value, index|key, collection).
           *
           * **Note:** This method returns `true` for
           * [empty collections](https://en.wikipedia.org/wiki/Empty_set) because
           * [everything is true](https://en.wikipedia.org/wiki/Vacuous_truth) of
           * elements of empty collections.
           *
           * @static
           * @memberOf _
           * @since 0.1.0
           * @category Collection
           * @param {Array|Object} collection The collection to iterate over.
           * @param {Function} [predicate=_.identity] The function invoked per iteration.
           * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
           * @returns {boolean} Returns `true` if all elements pass the predicate check,
           *  else `false`.
           * @example
           *
           * _.every([true, 1, null, 'yes'], Boolean);
           * // => false
           *
           * var users = [
           *   { 'user': 'barney', 'age': 36, 'active': false },
           *   { 'user': 'fred',   'age': 40, 'active': false }
           * ];
           *
           * // The `_.matches` iteratee shorthand.
           * _.every(users, { 'user': 'barney', 'active': false });
           * // => false
           *
           * // The `_.matchesProperty` iteratee shorthand.
           * _.every(users, ['active', false]);
           * // => true
           *
           * // The `_.property` iteratee shorthand.
           * _.every(users, 'active');
           * // => false
           */

          function every(collection, predicate, guard) {
            var func = isArray(collection) ? arrayEvery : baseEvery;

            if (guard && isIterateeCall(collection, predicate, guard)) {
              predicate = undefined;
            }

            return func(collection, getIteratee(predicate, 3));
          }
          /**
           * Iterates over elements of `collection`, returning an array of all elements
           * `predicate` returns truthy for. The predicate is invoked with three
           * arguments: (value, index|key, collection).
           *
           * **Note:** Unlike `_.remove`, this method returns a new array.
           *
           * @static
           * @memberOf _
           * @since 0.1.0
           * @category Collection
           * @param {Array|Object} collection The collection to iterate over.
           * @param {Function} [predicate=_.identity] The function invoked per iteration.
           * @returns {Array} Returns the new filtered array.
           * @see _.reject
           * @example
           *
           * var users = [
           *   { 'user': 'barney', 'age': 36, 'active': true },
           *   { 'user': 'fred',   'age': 40, 'active': false }
           * ];
           *
           * _.filter(users, function(o) { return !o.active; });
           * // => objects for ['fred']
           *
           * // The `_.matches` iteratee shorthand.
           * _.filter(users, { 'age': 36, 'active': true });
           * // => objects for ['barney']
           *
           * // The `_.matchesProperty` iteratee shorthand.
           * _.filter(users, ['active', false]);
           * // => objects for ['fred']
           *
           * // The `_.property` iteratee shorthand.
           * _.filter(users, 'active');
           * // => objects for ['barney']
           *
           * // Combining several predicates using `_.overEvery` or `_.overSome`.
           * _.filter(users, _.overSome([{ 'age': 36 }, ['age', 40]]));
           * // => objects for ['fred', 'barney']
           */


          function filter(collection, predicate) {
            var func = isArray(collection) ? arrayFilter : baseFilter;
            return func(collection, getIteratee(predicate, 3));
          }
          /**
           * Iterates over elements of `collection`, returning the first element
           * `predicate` returns truthy for. The predicate is invoked with three
           * arguments: (value, index|key, collection).
           *
           * @static
           * @memberOf _
           * @since 0.1.0
           * @category Collection
           * @param {Array|Object} collection The collection to inspect.
           * @param {Function} [predicate=_.identity] The function invoked per iteration.
           * @param {number} [fromIndex=0] The index to search from.
           * @returns {*} Returns the matched element, else `undefined`.
           * @example
           *
           * var users = [
           *   { 'user': 'barney',  'age': 36, 'active': true },
           *   { 'user': 'fred',    'age': 40, 'active': false },
           *   { 'user': 'pebbles', 'age': 1,  'active': true }
           * ];
           *
           * _.find(users, function(o) { return o.age < 40; });
           * // => object for 'barney'
           *
           * // The `_.matches` iteratee shorthand.
           * _.find(users, { 'age': 1, 'active': true });
           * // => object for 'pebbles'
           *
           * // The `_.matchesProperty` iteratee shorthand.
           * _.find(users, ['active', false]);
           * // => object for 'fred'
           *
           * // The `_.property` iteratee shorthand.
           * _.find(users, 'active');
           * // => object for 'barney'
           */


          var find = createFind(findIndex);
          /**
           * This method is like `_.find` except that it iterates over elements of
           * `collection` from right to left.
           *
           * @static
           * @memberOf _
           * @since 2.0.0
           * @category Collection
           * @param {Array|Object} collection The collection to inspect.
           * @param {Function} [predicate=_.identity] The function invoked per iteration.
           * @param {number} [fromIndex=collection.length-1] The index to search from.
           * @returns {*} Returns the matched element, else `undefined`.
           * @example
           *
           * _.findLast([1, 2, 3, 4], function(n) {
           *   return n % 2 == 1;
           * });
           * // => 3
           */

          var findLast = createFind(findLastIndex);
          /**
           * Creates a flattened array of values by running each element in `collection`
           * thru `iteratee` and flattening the mapped results. The iteratee is invoked
           * with three arguments: (value, index|key, collection).
           *
           * @static
           * @memberOf _
           * @since 4.0.0
           * @category Collection
           * @param {Array|Object} collection The collection to iterate over.
           * @param {Function} [iteratee=_.identity] The function invoked per iteration.
           * @returns {Array} Returns the new flattened array.
           * @example
           *
           * function duplicate(n) {
           *   return [n, n];
           * }
           *
           * _.flatMap([1, 2], duplicate);
           * // => [1, 1, 2, 2]
           */

          function flatMap(collection, iteratee) {
            return baseFlatten(map(collection, iteratee), 1);
          }
          /**
           * This method is like `_.flatMap` except that it recursively flattens the
           * mapped results.
           *
           * @static
           * @memberOf _
           * @since 4.7.0
           * @category Collection
           * @param {Array|Object} collection The collection to iterate over.
           * @param {Function} [iteratee=_.identity] The function invoked per iteration.
           * @returns {Array} Returns the new flattened array.
           * @example
           *
           * function duplicate(n) {
           *   return [[[n, n]]];
           * }
           *
           * _.flatMapDeep([1, 2], duplicate);
           * // => [1, 1, 2, 2]
           */


          function flatMapDeep(collection, iteratee) {
            return baseFlatten(map(collection, iteratee), INFINITY);
          }
          /**
           * This method is like `_.flatMap` except that it recursively flattens the
           * mapped results up to `depth` times.
           *
           * @static
           * @memberOf _
           * @since 4.7.0
           * @category Collection
           * @param {Array|Object} collection The collection to iterate over.
           * @param {Function} [iteratee=_.identity] The function invoked per iteration.
           * @param {number} [depth=1] The maximum recursion depth.
           * @returns {Array} Returns the new flattened array.
           * @example
           *
           * function duplicate(n) {
           *   return [[[n, n]]];
           * }
           *
           * _.flatMapDepth([1, 2], duplicate, 2);
           * // => [[1, 1], [2, 2]]
           */


          function flatMapDepth(collection, iteratee, depth) {
            depth = depth === undefined ? 1 : toInteger(depth);
            return baseFlatten(map(collection, iteratee), depth);
          }
          /**
           * Iterates over elements of `collection` and invokes `iteratee` for each element.
           * The iteratee is invoked with three arguments: (value, index|key, collection).
           * Iteratee functions may exit iteration early by explicitly returning `false`.
           *
           * **Note:** As with other "Collections" methods, objects with a "length"
           * property are iterated like arrays. To avoid this behavior use `_.forIn`
           * or `_.forOwn` for object iteration.
           *
           * @static
           * @memberOf _
           * @since 0.1.0
           * @alias each
           * @category Collection
           * @param {Array|Object} collection The collection to iterate over.
           * @param {Function} [iteratee=_.identity] The function invoked per iteration.
           * @returns {Array|Object} Returns `collection`.
           * @see _.forEachRight
           * @example
           *
           * _.forEach([1, 2], function(value) {
           *   console.log(value);
           * });
           * // => Logs `1` then `2`.
           *
           * _.forEach({ 'a': 1, 'b': 2 }, function(value, key) {
           *   console.log(key);
           * });
           * // => Logs 'a' then 'b' (iteration order is not guaranteed).
           */


          function forEach(collection, iteratee) {
            var func = isArray(collection) ? arrayEach : baseEach;
            return func(collection, getIteratee(iteratee, 3));
          }
          /**
           * This method is like `_.forEach` except that it iterates over elements of
           * `collection` from right to left.
           *
           * @static
           * @memberOf _
           * @since 2.0.0
           * @alias eachRight
           * @category Collection
           * @param {Array|Object} collection The collection to iterate over.
           * @param {Function} [iteratee=_.identity] The function invoked per iteration.
           * @returns {Array|Object} Returns `collection`.
           * @see _.forEach
           * @example
           *
           * _.forEachRight([1, 2], function(value) {
           *   console.log(value);
           * });
           * // => Logs `2` then `1`.
           */


          function forEachRight(collection, iteratee) {
            var func = isArray(collection) ? arrayEachRight : baseEachRight;
            return func(collection, getIteratee(iteratee, 3));
          }
          /**
           * Creates an object composed of keys generated from the results of running
           * each element of `collection` thru `iteratee`. The order of grouped values
           * is determined by the order they occur in `collection`. The corresponding
           * value of each key is an array of elements responsible for generating the
           * key. The iteratee is invoked with one argument: (value).
           *
           * @static
           * @memberOf _
           * @since 0.1.0
           * @category Collection
           * @param {Array|Object} collection The collection to iterate over.
           * @param {Function} [iteratee=_.identity] The iteratee to transform keys.
           * @returns {Object} Returns the composed aggregate object.
           * @example
           *
           * _.groupBy([6.1, 4.2, 6.3], Math.floor);
           * // => { '4': [4.2], '6': [6.1, 6.3] }
           *
           * // The `_.property` iteratee shorthand.
           * _.groupBy(['one', 'two', 'three'], 'length');
           * // => { '3': ['one', 'two'], '5': ['three'] }
           */


          var groupBy = createAggregator(function (result, value, key) {
            if (hasOwnProperty.call(result, key)) {
              result[key].push(value);
            } else {
              baseAssignValue(result, key, [value]);
            }
          });
          /**
           * Checks if `value` is in `collection`. If `collection` is a string, it's
           * checked for a substring of `value`, otherwise
           * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
           * is used for equality comparisons. If `fromIndex` is negative, it's used as
           * the offset from the end of `collection`.
           *
           * @static
           * @memberOf _
           * @since 0.1.0
           * @category Collection
           * @param {Array|Object|string} collection The collection to inspect.
           * @param {*} value The value to search for.
           * @param {number} [fromIndex=0] The index to search from.
           * @param- {Object} [guard] Enables use as an iteratee for methods like `_.reduce`.
           * @returns {boolean} Returns `true` if `value` is found, else `false`.
           * @example
           *
           * _.includes([1, 2, 3], 1);
           * // => true
           *
           * _.includes([1, 2, 3], 1, 2);
           * // => false
           *
           * _.includes({ 'a': 1, 'b': 2 }, 1);
           * // => true
           *
           * _.includes('abcd', 'bc');
           * // => true
           */

          function includes(collection, value, fromIndex, guard) {
            collection = isArrayLike(collection) ? collection : values(collection);
            fromIndex = fromIndex && !guard ? toInteger(fromIndex) : 0;
            var length = collection.length;

            if (fromIndex < 0) {
              fromIndex = nativeMax(length + fromIndex, 0);
            }

            return isString(collection) ? fromIndex <= length && collection.indexOf(value, fromIndex) > -1 : !!length && baseIndexOf(collection, value, fromIndex) > -1;
          }
          /**
           * Invokes the method at `path` of each element in `collection`, returning
           * an array of the results of each invoked method. Any additional arguments
           * are provided to each invoked method. If `path` is a function, it's invoked
           * for, and `this` bound to, each element in `collection`.
           *
           * @static
           * @memberOf _
           * @since 4.0.0
           * @category Collection
           * @param {Array|Object} collection The collection to iterate over.
           * @param {Array|Function|string} path The path of the method to invoke or
           *  the function invoked per iteration.
           * @param {...*} [args] The arguments to invoke each method with.
           * @returns {Array} Returns the array of results.
           * @example
           *
           * _.invokeMap([[5, 1, 7], [3, 2, 1]], 'sort');
           * // => [[1, 5, 7], [1, 2, 3]]
           *
           * _.invokeMap([123, 456], String.prototype.split, '');
           * // => [['1', '2', '3'], ['4', '5', '6']]
           */


          var invokeMap = baseRest(function (collection, path, args) {
            var index = -1,
                isFunc = typeof path == 'function',
                result = isArrayLike(collection) ? Array(collection.length) : [];
            baseEach(collection, function (value) {
              result[++index] = isFunc ? apply(path, value, args) : baseInvoke(value, path, args);
            });
            return result;
          });
          /**
           * Creates an object composed of keys generated from the results of running
           * each element of `collection` thru `iteratee`. The corresponding value of
           * each key is the last element responsible for generating the key. The
           * iteratee is invoked with one argument: (value).
           *
           * @static
           * @memberOf _
           * @since 4.0.0
           * @category Collection
           * @param {Array|Object} collection The collection to iterate over.
           * @param {Function} [iteratee=_.identity] The iteratee to transform keys.
           * @returns {Object} Returns the composed aggregate object.
           * @example
           *
           * var array = [
           *   { 'dir': 'left', 'code': 97 },
           *   { 'dir': 'right', 'code': 100 }
           * ];
           *
           * _.keyBy(array, function(o) {
           *   return String.fromCharCode(o.code);
           * });
           * // => { 'a': { 'dir': 'left', 'code': 97 }, 'd': { 'dir': 'right', 'code': 100 } }
           *
           * _.keyBy(array, 'dir');
           * // => { 'left': { 'dir': 'left', 'code': 97 }, 'right': { 'dir': 'right', 'code': 100 } }
           */

          var keyBy = createAggregator(function (result, value, key) {
            baseAssignValue(result, key, value);
          });
          /**
           * Creates an array of values by running each element in `collection` thru
           * `iteratee`. The iteratee is invoked with three arguments:
           * (value, index|key, collection).
           *
           * Many lodash methods are guarded to work as iteratees for methods like
           * `_.every`, `_.filter`, `_.map`, `_.mapValues`, `_.reject`, and `_.some`.
           *
           * The guarded methods are:
           * `ary`, `chunk`, `curry`, `curryRight`, `drop`, `dropRight`, `every`,
           * `fill`, `invert`, `parseInt`, `random`, `range`, `rangeRight`, `repeat`,
           * `sampleSize`, `slice`, `some`, `sortBy`, `split`, `take`, `takeRight`,
           * `template`, `trim`, `trimEnd`, `trimStart`, and `words`
           *
           * @static
           * @memberOf _
           * @since 0.1.0
           * @category Collection
           * @param {Array|Object} collection The collection to iterate over.
           * @param {Function} [iteratee=_.identity] The function invoked per iteration.
           * @returns {Array} Returns the new mapped array.
           * @example
           *
           * function square(n) {
           *   return n * n;
           * }
           *
           * _.map([4, 8], square);
           * // => [16, 64]
           *
           * _.map({ 'a': 4, 'b': 8 }, square);
           * // => [16, 64] (iteration order is not guaranteed)
           *
           * var users = [
           *   { 'user': 'barney' },
           *   { 'user': 'fred' }
           * ];
           *
           * // The `_.property` iteratee shorthand.
           * _.map(users, 'user');
           * // => ['barney', 'fred']
           */

          function map(collection, iteratee) {
            var func = isArray(collection) ? arrayMap : baseMap;
            return func(collection, getIteratee(iteratee, 3));
          }
          /**
           * This method is like `_.sortBy` except that it allows specifying the sort
           * orders of the iteratees to sort by. If `orders` is unspecified, all values
           * are sorted in ascending order. Otherwise, specify an order of "desc" for
           * descending or "asc" for ascending sort order of corresponding values.
           *
           * @static
           * @memberOf _
           * @since 4.0.0
           * @category Collection
           * @param {Array|Object} collection The collection to iterate over.
           * @param {Array[]|Function[]|Object[]|string[]} [iteratees=[_.identity]]
           *  The iteratees to sort by.
           * @param {string[]} [orders] The sort orders of `iteratees`.
           * @param- {Object} [guard] Enables use as an iteratee for methods like `_.reduce`.
           * @returns {Array} Returns the new sorted array.
           * @example
           *
           * var users = [
           *   { 'user': 'fred',   'age': 48 },
           *   { 'user': 'barney', 'age': 34 },
           *   { 'user': 'fred',   'age': 40 },
           *   { 'user': 'barney', 'age': 36 }
           * ];
           *
           * // Sort by `user` in ascending order and by `age` in descending order.
           * _.orderBy(users, ['user', 'age'], ['asc', 'desc']);
           * // => objects for [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 40]]
           */


          function orderBy(collection, iteratees, orders, guard) {
            if (collection == null) {
              return [];
            }

            if (!isArray(iteratees)) {
              iteratees = iteratees == null ? [] : [iteratees];
            }

            orders = guard ? undefined : orders;

            if (!isArray(orders)) {
              orders = orders == null ? [] : [orders];
            }

            return baseOrderBy(collection, iteratees, orders);
          }
          /**
           * Creates an array of elements split into two groups, the first of which
           * contains elements `predicate` returns truthy for, the second of which
           * contains elements `predicate` returns falsey for. The predicate is
           * invoked with one argument: (value).
           *
           * @static
           * @memberOf _
           * @since 3.0.0
           * @category Collection
           * @param {Array|Object} collection The collection to iterate over.
           * @param {Function} [predicate=_.identity] The function invoked per iteration.
           * @returns {Array} Returns the array of grouped elements.
           * @example
           *
           * var users = [
           *   { 'user': 'barney',  'age': 36, 'active': false },
           *   { 'user': 'fred',    'age': 40, 'active': true },
           *   { 'user': 'pebbles', 'age': 1,  'active': false }
           * ];
           *
           * _.partition(users, function(o) { return o.active; });
           * // => objects for [['fred'], ['barney', 'pebbles']]
           *
           * // The `_.matches` iteratee shorthand.
           * _.partition(users, { 'age': 1, 'active': false });
           * // => objects for [['pebbles'], ['barney', 'fred']]
           *
           * // The `_.matchesProperty` iteratee shorthand.
           * _.partition(users, ['active', false]);
           * // => objects for [['barney', 'pebbles'], ['fred']]
           *
           * // The `_.property` iteratee shorthand.
           * _.partition(users, 'active');
           * // => objects for [['fred'], ['barney', 'pebbles']]
           */


          var partition = createAggregator(function (result, value, key) {
            result[key ? 0 : 1].push(value);
          }, function () {
            return [[], []];
          });
          /**
           * Reduces `collection` to a value which is the accumulated result of running
           * each element in `collection` thru `iteratee`, where each successive
           * invocation is supplied the return value of the previous. If `accumulator`
           * is not given, the first element of `collection` is used as the initial
           * value. The iteratee is invoked with four arguments:
           * (accumulator, value, index|key, collection).
           *
           * Many lodash methods are guarded to work as iteratees for methods like
           * `_.reduce`, `_.reduceRight`, and `_.transform`.
           *
           * The guarded methods are:
           * `assign`, `defaults`, `defaultsDeep`, `includes`, `merge`, `orderBy`,
           * and `sortBy`
           *
           * @static
           * @memberOf _
           * @since 0.1.0
           * @category Collection
           * @param {Array|Object} collection The collection to iterate over.
           * @param {Function} [iteratee=_.identity] The function invoked per iteration.
           * @param {*} [accumulator] The initial value.
           * @returns {*} Returns the accumulated value.
           * @see _.reduceRight
           * @example
           *
           * _.reduce([1, 2], function(sum, n) {
           *   return sum + n;
           * }, 0);
           * // => 3
           *
           * _.reduce({ 'a': 1, 'b': 2, 'c': 1 }, function(result, value, key) {
           *   (result[value] || (result[value] = [])).push(key);
           *   return result;
           * }, {});
           * // => { '1': ['a', 'c'], '2': ['b'] } (iteration order is not guaranteed)
           */

          function reduce(collection, iteratee, accumulator) {
            var func = isArray(collection) ? arrayReduce : baseReduce,
                initAccum = arguments.length < 3;
            return func(collection, getIteratee(iteratee, 4), accumulator, initAccum, baseEach);
          }
          /**
           * This method is like `_.reduce` except that it iterates over elements of
           * `collection` from right to left.
           *
           * @static
           * @memberOf _
           * @since 0.1.0
           * @category Collection
           * @param {Array|Object} collection The collection to iterate over.
           * @param {Function} [iteratee=_.identity] The function invoked per iteration.
           * @param {*} [accumulator] The initial value.
           * @returns {*} Returns the accumulated value.
           * @see _.reduce
           * @example
           *
           * var array = [[0, 1], [2, 3], [4, 5]];
           *
           * _.reduceRight(array, function(flattened, other) {
           *   return flattened.concat(other);
           * }, []);
           * // => [4, 5, 2, 3, 0, 1]
           */


          function reduceRight(collection, iteratee, accumulator) {
            var func = isArray(collection) ? arrayReduceRight : baseReduce,
                initAccum = arguments.length < 3;
            return func(collection, getIteratee(iteratee, 4), accumulator, initAccum, baseEachRight);
          }
          /**
           * The opposite of `_.filter`; this method returns the elements of `collection`
           * that `predicate` does **not** return truthy for.
           *
           * @static
           * @memberOf _
           * @since 0.1.0
           * @category Collection
           * @param {Array|Object} collection The collection to iterate over.
           * @param {Function} [predicate=_.identity] The function invoked per iteration.
           * @returns {Array} Returns the new filtered array.
           * @see _.filter
           * @example
           *
           * var users = [
           *   { 'user': 'barney', 'age': 36, 'active': false },
           *   { 'user': 'fred',   'age': 40, 'active': true }
           * ];
           *
           * _.reject(users, function(o) { return !o.active; });
           * // => objects for ['fred']
           *
           * // The `_.matches` iteratee shorthand.
           * _.reject(users, { 'age': 40, 'active': true });
           * // => objects for ['barney']
           *
           * // The `_.matchesProperty` iteratee shorthand.
           * _.reject(users, ['active', false]);
           * // => objects for ['fred']
           *
           * // The `_.property` iteratee shorthand.
           * _.reject(users, 'active');
           * // => objects for ['barney']
           */


          function reject(collection, predicate) {
            var func = isArray(collection) ? arrayFilter : baseFilter;
            return func(collection, negate(getIteratee(predicate, 3)));
          }
          /**
           * Gets a random element from `collection`.
           *
           * @static
           * @memberOf _
           * @since 2.0.0
           * @category Collection
           * @param {Array|Object} collection The collection to sample.
           * @returns {*} Returns the random element.
           * @example
           *
           * _.sample([1, 2, 3, 4]);
           * // => 2
           */


          function sample(collection) {
            var func = isArray(collection) ? arraySample : baseSample;
            return func(collection);
          }
          /**
           * Gets `n` random elements at unique keys from `collection` up to the
           * size of `collection`.
           *
           * @static
           * @memberOf _
           * @since 4.0.0
           * @category Collection
           * @param {Array|Object} collection The collection to sample.
           * @param {number} [n=1] The number of elements to sample.
           * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
           * @returns {Array} Returns the random elements.
           * @example
           *
           * _.sampleSize([1, 2, 3], 2);
           * // => [3, 1]
           *
           * _.sampleSize([1, 2, 3], 4);
           * // => [2, 3, 1]
           */


          function sampleSize(collection, n, guard) {
            if (guard ? isIterateeCall(collection, n, guard) : n === undefined) {
              n = 1;
            } else {
              n = toInteger(n);
            }

            var func = isArray(collection) ? arraySampleSize : baseSampleSize;
            return func(collection, n);
          }
          /**
           * Creates an array of shuffled values, using a version of the
           * [Fisher-Yates shuffle](https://en.wikipedia.org/wiki/Fisher-Yates_shuffle).
           *
           * @static
           * @memberOf _
           * @since 0.1.0
           * @category Collection
           * @param {Array|Object} collection The collection to shuffle.
           * @returns {Array} Returns the new shuffled array.
           * @example
           *
           * _.shuffle([1, 2, 3, 4]);
           * // => [4, 1, 3, 2]
           */


          function shuffle(collection) {
            var func = isArray(collection) ? arrayShuffle : baseShuffle;
            return func(collection);
          }
          /**
           * Gets the size of `collection` by returning its length for array-like
           * values or the number of own enumerable string keyed properties for objects.
           *
           * @static
           * @memberOf _
           * @since 0.1.0
           * @category Collection
           * @param {Array|Object|string} collection The collection to inspect.
           * @returns {number} Returns the collection size.
           * @example
           *
           * _.size([1, 2, 3]);
           * // => 3
           *
           * _.size({ 'a': 1, 'b': 2 });
           * // => 2
           *
           * _.size('pebbles');
           * // => 7
           */


          function size(collection) {
            if (collection == null) {
              return 0;
            }

            if (isArrayLike(collection)) {
              return isString(collection) ? stringSize(collection) : collection.length;
            }

            var tag = getTag(collection);

            if (tag == mapTag || tag == setTag) {
              return collection.size;
            }

            return baseKeys(collection).length;
          }
          /**
           * Checks if `predicate` returns truthy for **any** element of `collection`.
           * Iteration is stopped once `predicate` returns truthy. The predicate is
           * invoked with three arguments: (value, index|key, collection).
           *
           * @static
           * @memberOf _
           * @since 0.1.0
           * @category Collection
           * @param {Array|Object} collection The collection to iterate over.
           * @param {Function} [predicate=_.identity] The function invoked per iteration.
           * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
           * @returns {boolean} Returns `true` if any element passes the predicate check,
           *  else `false`.
           * @example
           *
           * _.some([null, 0, 'yes', false], Boolean);
           * // => true
           *
           * var users = [
           *   { 'user': 'barney', 'active': true },
           *   { 'user': 'fred',   'active': false }
           * ];
           *
           * // The `_.matches` iteratee shorthand.
           * _.some(users, { 'user': 'barney', 'active': false });
           * // => false
           *
           * // The `_.matchesProperty` iteratee shorthand.
           * _.some(users, ['active', false]);
           * // => true
           *
           * // The `_.property` iteratee shorthand.
           * _.some(users, 'active');
           * // => true
           */


          function some(collection, predicate, guard) {
            var func = isArray(collection) ? arraySome : baseSome;

            if (guard && isIterateeCall(collection, predicate, guard)) {
              predicate = undefined;
            }

            return func(collection, getIteratee(predicate, 3));
          }
          /**
           * Creates an array of elements, sorted in ascending order by the results of
           * running each element in a collection thru each iteratee. This method
           * performs a stable sort, that is, it preserves the original sort order of
           * equal elements. The iteratees are invoked with one argument: (value).
           *
           * @static
           * @memberOf _
           * @since 0.1.0
           * @category Collection
           * @param {Array|Object} collection The collection to iterate over.
           * @param {...(Function|Function[])} [iteratees=[_.identity]]
           *  The iteratees to sort by.
           * @returns {Array} Returns the new sorted array.
           * @example
           *
           * var users = [
           *   { 'user': 'fred',   'age': 48 },
           *   { 'user': 'barney', 'age': 36 },
           *   { 'user': 'fred',   'age': 30 },
           *   { 'user': 'barney', 'age': 34 }
           * ];
           *
           * _.sortBy(users, [function(o) { return o.user; }]);
           * // => objects for [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 30]]
           *
           * _.sortBy(users, ['user', 'age']);
           * // => objects for [['barney', 34], ['barney', 36], ['fred', 30], ['fred', 48]]
           */


          var sortBy = baseRest(function (collection, iteratees) {
            if (collection == null) {
              return [];
            }

            var length = iteratees.length;

            if (length > 1 && isIterateeCall(collection, iteratees[0], iteratees[1])) {
              iteratees = [];
            } else if (length > 2 && isIterateeCall(iteratees[0], iteratees[1], iteratees[2])) {
              iteratees = [iteratees[0]];
            }

            return baseOrderBy(collection, baseFlatten(iteratees, 1), []);
          });
          /*------------------------------------------------------------------------*/

          /**
           * Gets the timestamp of the number of milliseconds that have elapsed since
           * the Unix epoch (1 January 1970 00:00:00 UTC).
           *
           * @static
           * @memberOf _
           * @since 2.4.0
           * @category Date
           * @returns {number} Returns the timestamp.
           * @example
           *
           * _.defer(function(stamp) {
           *   console.log(_.now() - stamp);
           * }, _.now());
           * // => Logs the number of milliseconds it took for the deferred invocation.
           */

          var now = ctxNow || function () {
            return root.Date.now();
          };
          /*------------------------------------------------------------------------*/

          /**
           * The opposite of `_.before`; this method creates a function that invokes
           * `func` once it's called `n` or more times.
           *
           * @static
           * @memberOf _
           * @since 0.1.0
           * @category Function
           * @param {number} n The number of calls before `func` is invoked.
           * @param {Function} func The function to restrict.
           * @returns {Function} Returns the new restricted function.
           * @example
           *
           * var saves = ['profile', 'settings'];
           *
           * var done = _.after(saves.length, function() {
           *   console.log('done saving!');
           * });
           *
           * _.forEach(saves, function(type) {
           *   asyncSave({ 'type': type, 'complete': done });
           * });
           * // => Logs 'done saving!' after the two async saves have completed.
           */


          function after(n, func) {
            if (typeof func != 'function') {
              throw new TypeError(FUNC_ERROR_TEXT);
            }

            n = toInteger(n);
            return function () {
              if (--n < 1) {
                return func.apply(this, arguments);
              }
            };
          }
          /**
           * Creates a function that invokes `func`, with up to `n` arguments,
           * ignoring any additional arguments.
           *
           * @static
           * @memberOf _
           * @since 3.0.0
           * @category Function
           * @param {Function} func The function to cap arguments for.
           * @param {number} [n=func.length] The arity cap.
           * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
           * @returns {Function} Returns the new capped function.
           * @example
           *
           * _.map(['6', '8', '10'], _.ary(parseInt, 1));
           * // => [6, 8, 10]
           */


          function ary(func, n, guard) {
            n = guard ? undefined : n;
            n = func && n == null ? func.length : n;
            return createWrap(func, WRAP_ARY_FLAG, undefined, undefined, undefined, undefined, n);
          }
          /**
           * Creates a function that invokes `func`, with the `this` binding and arguments
           * of the created function, while it's called less than `n` times. Subsequent
           * calls to the created function return the result of the last `func` invocation.
           *
           * @static
           * @memberOf _
           * @since 3.0.0
           * @category Function
           * @param {number} n The number of calls at which `func` is no longer invoked.
           * @param {Function} func The function to restrict.
           * @returns {Function} Returns the new restricted function.
           * @example
           *
           * jQuery(element).on('click', _.before(5, addContactToList));
           * // => Allows adding up to 4 contacts to the list.
           */


          function before(n, func) {
            var result;

            if (typeof func != 'function') {
              throw new TypeError(FUNC_ERROR_TEXT);
            }

            n = toInteger(n);
            return function () {
              if (--n > 0) {
                result = func.apply(this, arguments);
              }

              if (n <= 1) {
                func = undefined;
              }

              return result;
            };
          }
          /**
           * Creates a function that invokes `func` with the `this` binding of `thisArg`
           * and `partials` prepended to the arguments it receives.
           *
           * The `_.bind.placeholder` value, which defaults to `_` in monolithic builds,
           * may be used as a placeholder for partially applied arguments.
           *
           * **Note:** Unlike native `Function#bind`, this method doesn't set the "length"
           * property of bound functions.
           *
           * @static
           * @memberOf _
           * @since 0.1.0
           * @category Function
           * @param {Function} func The function to bind.
           * @param {*} thisArg The `this` binding of `func`.
           * @param {...*} [partials] The arguments to be partially applied.
           * @returns {Function} Returns the new bound function.
           * @example
           *
           * function greet(greeting, punctuation) {
           *   return greeting + ' ' + this.user + punctuation;
           * }
           *
           * var object = { 'user': 'fred' };
           *
           * var bound = _.bind(greet, object, 'hi');
           * bound('!');
           * // => 'hi fred!'
           *
           * // Bound with placeholders.
           * var bound = _.bind(greet, object, _, '!');
           * bound('hi');
           * // => 'hi fred!'
           */


          var bind = baseRest(function (func, thisArg, partials) {
            var bitmask = WRAP_BIND_FLAG;

            if (partials.length) {
              var holders = replaceHolders(partials, getHolder(bind));
              bitmask |= WRAP_PARTIAL_FLAG;
            }

            return createWrap(func, bitmask, thisArg, partials, holders);
          });
          /**
           * Creates a function that invokes the method at `object[key]` with `partials`
           * prepended to the arguments it receives.
           *
           * This method differs from `_.bind` by allowing bound functions to reference
           * methods that may be redefined or don't yet exist. See
           * [Peter Michaux's article](http://peter.michaux.ca/articles/lazy-function-definition-pattern)
           * for more details.
           *
           * The `_.bindKey.placeholder` value, which defaults to `_` in monolithic
           * builds, may be used as a placeholder for partially applied arguments.
           *
           * @static
           * @memberOf _
           * @since 0.10.0
           * @category Function
           * @param {Object} object The object to invoke the method on.
           * @param {string} key The key of the method.
           * @param {...*} [partials] The arguments to be partially applied.
           * @returns {Function} Returns the new bound function.
           * @example
           *
           * var object = {
           *   'user': 'fred',
           *   'greet': function(greeting, punctuation) {
           *     return greeting + ' ' + this.user + punctuation;
           *   }
           * };
           *
           * var bound = _.bindKey(object, 'greet', 'hi');
           * bound('!');
           * // => 'hi fred!'
           *
           * object.greet = function(greeting, punctuation) {
           *   return greeting + 'ya ' + this.user + punctuation;
           * };
           *
           * bound('!');
           * // => 'hiya fred!'
           *
           * // Bound with placeholders.
           * var bound = _.bindKey(object, 'greet', _, '!');
           * bound('hi');
           * // => 'hiya fred!'
           */

          var bindKey = baseRest(function (object, key, partials) {
            var bitmask = WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG;

            if (partials.length) {
              var holders = replaceHolders(partials, getHolder(bindKey));
              bitmask |= WRAP_PARTIAL_FLAG;
            }

            return createWrap(key, bitmask, object, partials, holders);
          });
          /**
           * Creates a function that accepts arguments of `func` and either invokes
           * `func` returning its result, if at least `arity` number of arguments have
           * been provided, or returns a function that accepts the remaining `func`
           * arguments, and so on. The arity of `func` may be specified if `func.length`
           * is not sufficient.
           *
           * The `_.curry.placeholder` value, which defaults to `_` in monolithic builds,
           * may be used as a placeholder for provided arguments.
           *
           * **Note:** This method doesn't set the "length" property of curried functions.
           *
           * @static
           * @memberOf _
           * @since 2.0.0
           * @category Function
           * @param {Function} func The function to curry.
           * @param {number} [arity=func.length] The arity of `func`.
           * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
           * @returns {Function} Returns the new curried function.
           * @example
           *
           * var abc = function(a, b, c) {
           *   return [a, b, c];
           * };
           *
           * var curried = _.curry(abc);
           *
           * curried(1)(2)(3);
           * // => [1, 2, 3]
           *
           * curried(1, 2)(3);
           * // => [1, 2, 3]
           *
           * curried(1, 2, 3);
           * // => [1, 2, 3]
           *
           * // Curried with placeholders.
           * curried(1)(_, 3)(2);
           * // => [1, 2, 3]
           */

          function curry(func, arity, guard) {
            arity = guard ? undefined : arity;
            var result = createWrap(func, WRAP_CURRY_FLAG, undefined, undefined, undefined, undefined, undefined, arity);
            result.placeholder = curry.placeholder;
            return result;
          }
          /**
           * This method is like `_.curry` except that arguments are applied to `func`
           * in the manner of `_.partialRight` instead of `_.partial`.
           *
           * The `_.curryRight.placeholder` value, which defaults to `_` in monolithic
           * builds, may be used as a placeholder for provided arguments.
           *
           * **Note:** This method doesn't set the "length" property of curried functions.
           *
           * @static
           * @memberOf _
           * @since 3.0.0
           * @category Function
           * @param {Function} func The function to curry.
           * @param {number} [arity=func.length] The arity of `func`.
           * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
           * @returns {Function} Returns the new curried function.
           * @example
           *
           * var abc = function(a, b, c) {
           *   return [a, b, c];
           * };
           *
           * var curried = _.curryRight(abc);
           *
           * curried(3)(2)(1);
           * // => [1, 2, 3]
           *
           * curried(2, 3)(1);
           * // => [1, 2, 3]
           *
           * curried(1, 2, 3);
           * // => [1, 2, 3]
           *
           * // Curried with placeholders.
           * curried(3)(1, _)(2);
           * // => [1, 2, 3]
           */


          function curryRight(func, arity, guard) {
            arity = guard ? undefined : arity;
            var result = createWrap(func, WRAP_CURRY_RIGHT_FLAG, undefined, undefined, undefined, undefined, undefined, arity);
            result.placeholder = curryRight.placeholder;
            return result;
          }
          /**
           * Creates a debounced function that delays invoking `func` until after `wait`
           * milliseconds have elapsed since the last time the debounced function was
           * invoked. The debounced function comes with a `cancel` method to cancel
           * delayed `func` invocations and a `flush` method to immediately invoke them.
           * Provide `options` to indicate whether `func` should be invoked on the
           * leading and/or trailing edge of the `wait` timeout. The `func` is invoked
           * with the last arguments provided to the debounced function. Subsequent
           * calls to the debounced function return the result of the last `func`
           * invocation.
           *
           * **Note:** If `leading` and `trailing` options are `true`, `func` is
           * invoked on the trailing edge of the timeout only if the debounced function
           * is invoked more than once during the `wait` timeout.
           *
           * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred
           * until to the next tick, similar to `setTimeout` with a timeout of `0`.
           *
           * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)
           * for details over the differences between `_.debounce` and `_.throttle`.
           *
           * @static
           * @memberOf _
           * @since 0.1.0
           * @category Function
           * @param {Function} func The function to debounce.
           * @param {number} [wait=0] The number of milliseconds to delay.
           * @param {Object} [options={}] The options object.
           * @param {boolean} [options.leading=false]
           *  Specify invoking on the leading edge of the timeout.
           * @param {number} [options.maxWait]
           *  The maximum time `func` is allowed to be delayed before it's invoked.
           * @param {boolean} [options.trailing=true]
           *  Specify invoking on the trailing edge of the timeout.
           * @returns {Function} Returns the new debounced function.
           * @example
           *
           * // Avoid costly calculations while the window size is in flux.
           * jQuery(window).on('resize', _.debounce(calculateLayout, 150));
           *
           * // Invoke `sendMail` when clicked, debouncing subsequent calls.
           * jQuery(element).on('click', _.debounce(sendMail, 300, {
           *   'leading': true,
           *   'trailing': false
           * }));
           *
           * // Ensure `batchLog` is invoked once after 1 second of debounced calls.
           * var debounced = _.debounce(batchLog, 250, { 'maxWait': 1000 });
           * var source = new EventSource('/stream');
           * jQuery(source).on('message', debounced);
           *
           * // Cancel the trailing debounced invocation.
           * jQuery(window).on('popstate', debounced.cancel);
           */


          function debounce(func, wait, options) {
            var lastArgs,
                lastThis,
                maxWait,
                result,
                timerId,
                lastCallTime,
                lastInvokeTime = 0,
                leading = false,
                maxing = false,
                trailing = true;

            if (typeof func != 'function') {
              throw new TypeError(FUNC_ERROR_TEXT);
            }

            wait = toNumber(wait) || 0;

            if (isObject(options)) {
              leading = !!options.leading;
              maxing = 'maxWait' in options;
              maxWait = maxing ? nativeMax(toNumber(options.maxWait) || 0, wait) : maxWait;
              trailing = 'trailing' in options ? !!options.trailing : trailing;
            }

            function invokeFunc(time) {
              var args = lastArgs,
                  thisArg = lastThis;
              lastArgs = lastThis = undefined;
              lastInvokeTime = time;
              result = func.apply(thisArg, args);
              return result;
            }

            function leadingEdge(time) {
              // Reset any `maxWait` timer.
              lastInvokeTime = time; // Start the timer for the trailing edge.

              timerId = setTimeout(timerExpired, wait); // Invoke the leading edge.

              return leading ? invokeFunc(time) : result;
            }

            function remainingWait(time) {
              var timeSinceLastCall = time - lastCallTime,
                  timeSinceLastInvoke = time - lastInvokeTime,
                  timeWaiting = wait - timeSinceLastCall;
              return maxing ? nativeMin(timeWaiting, maxWait - timeSinceLastInvoke) : timeWaiting;
            }

            function shouldInvoke(time) {
              var timeSinceLastCall = time - lastCallTime,
                  timeSinceLastInvoke = time - lastInvokeTime; // Either this is the first call, activity has stopped and we're at the
              // trailing edge, the system time has gone backwards and we're treating
              // it as the trailing edge, or we've hit the `maxWait` limit.

              return lastCallTime === undefined || timeSinceLastCall >= wait || timeSinceLastCall < 0 || maxing && timeSinceLastInvoke >= maxWait;
            }

            function timerExpired() {
              var time = now();

              if (shouldInvoke(time)) {
                return trailingEdge(time);
              } // Restart the timer.


              timerId = setTimeout(timerExpired, remainingWait(time));
            }

            function trailingEdge(time) {
              timerId = undefined; // Only invoke if we have `lastArgs` which means `func` has been
              // debounced at least once.

              if (trailing && lastArgs) {
                return invokeFunc(time);
              }

              lastArgs = lastThis = undefined;
              return result;
            }

            function cancel() {
              if (timerId !== undefined) {
                clearTimeout(timerId);
              }

              lastInvokeTime = 0;
              lastArgs = lastCallTime = lastThis = timerId = undefined;
            }

            function flush() {
              return timerId === undefined ? result : trailingEdge(now());
            }

            function debounced() {
              var time = now(),
                  isInvoking = shouldInvoke(time);
              lastArgs = arguments;
              lastThis = this;
              lastCallTime = time;

              if (isInvoking) {
                if (timerId === undefined) {
                  return leadingEdge(lastCallTime);
                }

                if (maxing) {
                  // Handle invocations in a tight loop.
                  clearTimeout(timerId);
                  timerId = setTimeout(timerExpired, wait);
                  return invokeFunc(lastCallTime);
                }
              }

              if (timerId === undefined) {
                timerId = setTimeout(timerExpired, wait);
              }

              return result;
            }

            debounced.cancel = cancel;
            debounced.flush = flush;
            return debounced;
          }
          /**
           * Defers invoking the `func` until the current call stack has cleared. Any
           * additional arguments are provided to `func` when it's invoked.
           *
           * @static
           * @memberOf _
           * @since 0.1.0
           * @category Function
           * @param {Function} func The function to defer.
           * @param {...*} [args] The arguments to invoke `func` with.
           * @returns {number} Returns the timer id.
           * @example
           *
           * _.defer(function(text) {
           *   console.log(text);
           * }, 'deferred');
           * // => Logs 'deferred' after one millisecond.
           */


          var defer = baseRest(function (func, args) {
            return baseDelay(func, 1, args);
          });
          /**
           * Invokes `func` after `wait` milliseconds. Any additional arguments are
           * provided to `func` when it's invoked.
           *
           * @static
           * @memberOf _
           * @since 0.1.0
           * @category Function
           * @param {Function} func The function to delay.
           * @param {number} wait The number of milliseconds to delay invocation.
           * @param {...*} [args] The arguments to invoke `func` with.
           * @returns {number} Returns the timer id.
           * @example
           *
           * _.delay(function(text) {
           *   console.log(text);
           * }, 1000, 'later');
           * // => Logs 'later' after one second.
           */

          var delay = baseRest(function (func, wait, args) {
            return baseDelay(func, toNumber(wait) || 0, args);
          });
          /**
           * Creates a function that invokes `func` with arguments reversed.
           *
           * @static
           * @memberOf _
           * @since 4.0.0
           * @category Function
           * @param {Function} func The function to flip arguments for.
           * @returns {Function} Returns the new flipped function.
           * @example
           *
           * var flipped = _.flip(function() {
           *   return _.toArray(arguments);
           * });
           *
           * flipped('a', 'b', 'c', 'd');
           * // => ['d', 'c', 'b', 'a']
           */

          function flip(func) {
            return createWrap(func, WRAP_FLIP_FLAG);
          }
          /**
           * Creates a function that memoizes the result of `func`. If `resolver` is
           * provided, it determines the cache key for storing the result based on the
           * arguments provided to the memoized function. By default, the first argument
           * provided to the memoized function is used as the map cache key. The `func`
           * is invoked with the `this` binding of the memoized function.
           *
           * **Note:** The cache is exposed as the `cache` property on the memoized
           * function. Its creation may be customized by replacing the `_.memoize.Cache`
           * constructor with one whose instances implement the
           * [`Map`](http://ecma-international.org/ecma-262/7.0/#sec-properties-of-the-map-prototype-object)
           * method interface of `clear`, `delete`, `get`, `has`, and `set`.
           *
           * @static
           * @memberOf _
           * @since 0.1.0
           * @category Function
           * @param {Function} func The function to have its output memoized.
           * @param {Function} [resolver] The function to resolve the cache key.
           * @returns {Function} Returns the new memoized function.
           * @example
           *
           * var object = { 'a': 1, 'b': 2 };
           * var other = { 'c': 3, 'd': 4 };
           *
           * var values = _.memoize(_.values);
           * values(object);
           * // => [1, 2]
           *
           * values(other);
           * // => [3, 4]
           *
           * object.a = 2;
           * values(object);
           * // => [1, 2]
           *
           * // Modify the result cache.
           * values.cache.set(object, ['a', 'b']);
           * values(object);
           * // => ['a', 'b']
           *
           * // Replace `_.memoize.Cache`.
           * _.memoize.Cache = WeakMap;
           */


          function memoize(func, resolver) {
            if (typeof func != 'function' || resolver != null && typeof resolver != 'function') {
              throw new TypeError(FUNC_ERROR_TEXT);
            }

            var memoized = function memoized() {
              var args = arguments,
                  key = resolver ? resolver.apply(this, args) : args[0],
                  cache = memoized.cache;

              if (cache.has(key)) {
                return cache.get(key);
              }

              var result = func.apply(this, args);
              memoized.cache = cache.set(key, result) || cache;
              return result;
            };

            memoized.cache = new (memoize.Cache || MapCache)();
            return memoized;
          } // Expose `MapCache`.


          memoize.Cache = MapCache;
          /**
           * Creates a function that negates the result of the predicate `func`. The
           * `func` predicate is invoked with the `this` binding and arguments of the
           * created function.
           *
           * @static
           * @memberOf _
           * @since 3.0.0
           * @category Function
           * @param {Function} predicate The predicate to negate.
           * @returns {Function} Returns the new negated function.
           * @example
           *
           * function isEven(n) {
           *   return n % 2 == 0;
           * }
           *
           * _.filter([1, 2, 3, 4, 5, 6], _.negate(isEven));
           * // => [1, 3, 5]
           */

          function negate(predicate) {
            if (typeof predicate != 'function') {
              throw new TypeError(FUNC_ERROR_TEXT);
            }

            return function () {
              var args = arguments;

              switch (args.length) {
                case 0:
                  return !predicate.call(this);

                case 1:
                  return !predicate.call(this, args[0]);

                case 2:
                  return !predicate.call(this, args[0], args[1]);

                case 3:
                  return !predicate.call(this, args[0], args[1], args[2]);
              }

              return !predicate.apply(this, args);
            };
          }
          /**
           * Creates a function that is restricted to invoking `func` once. Repeat calls
           * to the function return the value of the first invocation. The `func` is
           * invoked with the `this` binding and arguments of the created function.
           *
           * @static
           * @memberOf _
           * @since 0.1.0
           * @category Function
           * @param {Function} func The function to restrict.
           * @returns {Function} Returns the new restricted function.
           * @example
           *
           * var initialize = _.once(createApplication);
           * initialize();
           * initialize();
           * // => `createApplication` is invoked once
           */


          function once(func) {
            return before(2, func);
          }
          /**
           * Creates a function that invokes `func` with its arguments transformed.
           *
           * @static
           * @since 4.0.0
           * @memberOf _
           * @category Function
           * @param {Function} func The function to wrap.
           * @param {...(Function|Function[])} [transforms=[_.identity]]
           *  The argument transforms.
           * @returns {Function} Returns the new function.
           * @example
           *
           * function doubled(n) {
           *   return n * 2;
           * }
           *
           * function square(n) {
           *   return n * n;
           * }
           *
           * var func = _.overArgs(function(x, y) {
           *   return [x, y];
           * }, [square, doubled]);
           *
           * func(9, 3);
           * // => [81, 6]
           *
           * func(10, 5);
           * // => [100, 10]
           */


          var overArgs = castRest(function (func, transforms) {
            transforms = transforms.length == 1 && isArray(transforms[0]) ? arrayMap(transforms[0], baseUnary(getIteratee())) : arrayMap(baseFlatten(transforms, 1), baseUnary(getIteratee()));
            var funcsLength = transforms.length;
            return baseRest(function (args) {
              var index = -1,
                  length = nativeMin(args.length, funcsLength);

              while (++index < length) {
                args[index] = transforms[index].call(this, args[index]);
              }

              return apply(func, this, args);
            });
          });
          /**
           * Creates a function that invokes `func` with `partials` prepended to the
           * arguments it receives. This method is like `_.bind` except it does **not**
           * alter the `this` binding.
           *
           * The `_.partial.placeholder` value, which defaults to `_` in monolithic
           * builds, may be used as a placeholder for partially applied arguments.
           *
           * **Note:** This method doesn't set the "length" property of partially
           * applied functions.
           *
           * @static
           * @memberOf _
           * @since 0.2.0
           * @category Function
           * @param {Function} func The function to partially apply arguments to.
           * @param {...*} [partials] The arguments to be partially applied.
           * @returns {Function} Returns the new partially applied function.
           * @example
           *
           * function greet(greeting, name) {
           *   return greeting + ' ' + name;
           * }
           *
           * var sayHelloTo = _.partial(greet, 'hello');
           * sayHelloTo('fred');
           * // => 'hello fred'
           *
           * // Partially applied with placeholders.
           * var greetFred = _.partial(greet, _, 'fred');
           * greetFred('hi');
           * // => 'hi fred'
           */

          var partial = baseRest(function (func, partials) {
            var holders = replaceHolders(partials, getHolder(partial));
            return createWrap(func, WRAP_PARTIAL_FLAG, undefined, partials, holders);
          });
          /**
           * This method is like `_.partial` except that partially applied arguments
           * are appended to the arguments it receives.
           *
           * The `_.partialRight.placeholder` value, which defaults to `_` in monolithic
           * builds, may be used as a placeholder for partially applied arguments.
           *
           * **Note:** This method doesn't set the "length" property of partially
           * applied functions.
           *
           * @static
           * @memberOf _
           * @since 1.0.0
           * @category Function
           * @param {Function} func The function to partially apply arguments to.
           * @param {...*} [partials] The arguments to be partially applied.
           * @returns {Function} Returns the new partially applied function.
           * @example
           *
           * function greet(greeting, name) {
           *   return greeting + ' ' + name;
           * }
           *
           * var greetFred = _.partialRight(greet, 'fred');
           * greetFred('hi');
           * // => 'hi fred'
           *
           * // Partially applied with placeholders.
           * var sayHelloTo = _.partialRight(greet, 'hello', _);
           * sayHelloTo('fred');
           * // => 'hello fred'
           */

          var partialRight = baseRest(function (func, partials) {
            var holders = replaceHolders(partials, getHolder(partialRight));
            return createWrap(func, WRAP_PARTIAL_RIGHT_FLAG, undefined, partials, holders);
          });
          /**
           * Creates a function that invokes `func` with arguments arranged according
           * to the specified `indexes` where the argument value at the first index is
           * provided as the first argument, the argument value at the second index is
           * provided as the second argument, and so on.
           *
           * @static
           * @memberOf _
           * @since 3.0.0
           * @category Function
           * @param {Function} func The function to rearrange arguments for.
           * @param {...(number|number[])} indexes The arranged argument indexes.
           * @returns {Function} Returns the new function.
           * @example
           *
           * var rearged = _.rearg(function(a, b, c) {
           *   return [a, b, c];
           * }, [2, 0, 1]);
           *
           * rearged('b', 'c', 'a')
           * // => ['a', 'b', 'c']
           */

          var rearg = flatRest(function (func, indexes) {
            return createWrap(func, WRAP_REARG_FLAG, undefined, undefined, undefined, indexes);
          });
          /**
           * Creates a function that invokes `func` with the `this` binding of the
           * created function and arguments from `start` and beyond provided as
           * an array.
           *
           * **Note:** This method is based on the
           * [rest parameter](https://mdn.io/rest_parameters).
           *
           * @static
           * @memberOf _
           * @since 4.0.0
           * @category Function
           * @param {Function} func The function to apply a rest parameter to.
           * @param {number} [start=func.length-1] The start position of the rest parameter.
           * @returns {Function} Returns the new function.
           * @example
           *
           * var say = _.rest(function(what, names) {
           *   return what + ' ' + _.initial(names).join(', ') +
           *     (_.size(names) > 1 ? ', & ' : '') + _.last(names);
           * });
           *
           * say('hello', 'fred', 'barney', 'pebbles');
           * // => 'hello fred, barney, & pebbles'
           */

          function rest(func, start) {
            if (typeof func != 'function') {
              throw new TypeError(FUNC_ERROR_TEXT);
            }

            start = start === undefined ? start : toInteger(start);
            return baseRest(func, start);
          }
          /**
           * Creates a function that invokes `func` with the `this` binding of the
           * create function and an array of arguments much like
           * [`Function#apply`](http://www.ecma-international.org/ecma-262/7.0/#sec-function.prototype.apply).
           *
           * **Note:** This method is based on the
           * [spread operator](https://mdn.io/spread_operator).
           *
           * @static
           * @memberOf _
           * @since 3.2.0
           * @category Function
           * @param {Function} func The function to spread arguments over.
           * @param {number} [start=0] The start position of the spread.
           * @returns {Function} Returns the new function.
           * @example
           *
           * var say = _.spread(function(who, what) {
           *   return who + ' says ' + what;
           * });
           *
           * say(['fred', 'hello']);
           * // => 'fred says hello'
           *
           * var numbers = Promise.all([
           *   Promise.resolve(40),
           *   Promise.resolve(36)
           * ]);
           *
           * numbers.then(_.spread(function(x, y) {
           *   return x + y;
           * }));
           * // => a Promise of 76
           */


          function spread(func, start) {
            if (typeof func != 'function') {
              throw new TypeError(FUNC_ERROR_TEXT);
            }

            start = start == null ? 0 : nativeMax(toInteger(start), 0);
            return baseRest(function (args) {
              var array = args[start],
                  otherArgs = castSlice(args, 0, start);

              if (array) {
                arrayPush(otherArgs, array);
              }

              return apply(func, this, otherArgs);
            });
          }
          /**
           * Creates a throttled function that only invokes `func` at most once per
           * every `wait` milliseconds. The throttled function comes with a `cancel`
           * method to cancel delayed `func` invocations and a `flush` method to
           * immediately invoke them. Provide `options` to indicate whether `func`
           * should be invoked on the leading and/or trailing edge of the `wait`
           * timeout. The `func` is invoked with the last arguments provided to the
           * throttled function. Subsequent calls to the throttled function return the
           * result of the last `func` invocation.
           *
           * **Note:** If `leading` and `trailing` options are `true`, `func` is
           * invoked on the trailing edge of the timeout only if the throttled function
           * is invoked more than once during the `wait` timeout.
           *
           * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred
           * until to the next tick, similar to `setTimeout` with a timeout of `0`.
           *
           * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)
           * for details over the differences between `_.throttle` and `_.debounce`.
           *
           * @static
           * @memberOf _
           * @since 0.1.0
           * @category Function
           * @param {Function} func The function to throttle.
           * @param {number} [wait=0] The number of milliseconds to throttle invocations to.
           * @param {Object} [options={}] The options object.
           * @param {boolean} [options.leading=true]
           *  Specify invoking on the leading edge of the timeout.
           * @param {boolean} [options.trailing=true]
           *  Specify invoking on the trailing edge of the timeout.
           * @returns {Function} Returns the new throttled function.
           * @example
           *
           * // Avoid excessively updating the position while scrolling.
           * jQuery(window).on('scroll', _.throttle(updatePosition, 100));
           *
           * // Invoke `renewToken` when the click event is fired, but not more than once every 5 minutes.
           * var throttled = _.throttle(renewToken, 300000, { 'trailing': false });
           * jQuery(element).on('click', throttled);
           *
           * // Cancel the trailing throttled invocation.
           * jQuery(window).on('popstate', throttled.cancel);
           */


          function throttle(func, wait, options) {
            var leading = true,
                trailing = true;

            if (typeof func != 'function') {
              throw new TypeError(FUNC_ERROR_TEXT);
            }

            if (isObject(options)) {
              leading = 'leading' in options ? !!options.leading : leading;
              trailing = 'trailing' in options ? !!options.trailing : trailing;
            }

            return debounce(func, wait, {
              'leading': leading,
              'maxWait': wait,
              'trailing': trailing
            });
          }
          /**
           * Creates a function that accepts up to one argument, ignoring any
           * additional arguments.
           *
           * @static
           * @memberOf _
           * @since 4.0.0
           * @category Function
           * @param {Function} func The function to cap arguments for.
           * @returns {Function} Returns the new capped function.
           * @example
           *
           * _.map(['6', '8', '10'], _.unary(parseInt));
           * // => [6, 8, 10]
           */


          function unary(func) {
            return ary(func, 1);
          }
          /**
           * Creates a function that provides `value` to `wrapper` as its first
           * argument. Any additional arguments provided to the function are appended
           * to those provided to the `wrapper`. The wrapper is invoked with the `this`
           * binding of the created function.
           *
           * @static
           * @memberOf _
           * @since 0.1.0
           * @category Function
           * @param {*} value The value to wrap.
           * @param {Function} [wrapper=identity] The wrapper function.
           * @returns {Function} Returns the new function.
           * @example
           *
           * var p = _.wrap(_.escape, function(func, text) {
           *   return '<p>' + func(text) + '</p>';
           * });
           *
           * p('fred, barney, & pebbles');
           * // => '<p>fred, barney, &amp; pebbles</p>'
           */


          function wrap(value, wrapper) {
            return partial(castFunction(wrapper), value);
          }
          /*------------------------------------------------------------------------*/

          /**
           * Casts `value` as an array if it's not one.
           *
           * @static
           * @memberOf _
           * @since 4.4.0
           * @category Lang
           * @param {*} value The value to inspect.
           * @returns {Array} Returns the cast array.
           * @example
           *
           * _.castArray(1);
           * // => [1]
           *
           * _.castArray({ 'a': 1 });
           * // => [{ 'a': 1 }]
           *
           * _.castArray('abc');
           * // => ['abc']
           *
           * _.castArray(null);
           * // => [null]
           *
           * _.castArray(undefined);
           * // => [undefined]
           *
           * _.castArray();
           * // => []
           *
           * var array = [1, 2, 3];
           * console.log(_.castArray(array) === array);
           * // => true
           */


          function castArray() {
            if (!arguments.length) {
              return [];
            }

            var value = arguments[0];
            return isArray(value) ? value : [value];
          }
          /**
           * Creates a shallow clone of `value`.
           *
           * **Note:** This method is loosely based on the
           * [structured clone algorithm](https://mdn.io/Structured_clone_algorithm)
           * and supports cloning arrays, array buffers, booleans, date objects, maps,
           * numbers, `Object` objects, regexes, sets, strings, symbols, and typed
           * arrays. The own enumerable properties of `arguments` objects are cloned
           * as plain objects. An empty object is returned for uncloneable values such
           * as error objects, functions, DOM nodes, and WeakMaps.
           *
           * @static
           * @memberOf _
           * @since 0.1.0
           * @category Lang
           * @param {*} value The value to clone.
           * @returns {*} Returns the cloned value.
           * @see _.cloneDeep
           * @example
           *
           * var objects = [{ 'a': 1 }, { 'b': 2 }];
           *
           * var shallow = _.clone(objects);
           * console.log(shallow[0] === objects[0]);
           * // => true
           */


          function clone(value) {
            return baseClone(value, CLONE_SYMBOLS_FLAG);
          }
          /**
           * This method is like `_.clone` except that it accepts `customizer` which
           * is invoked to produce the cloned value. If `customizer` returns `undefined`,
           * cloning is handled by the method instead. The `customizer` is invoked with
           * up to four arguments; (value [, index|key, object, stack]).
           *
           * @static
           * @memberOf _
           * @since 4.0.0
           * @category Lang
           * @param {*} value The value to clone.
           * @param {Function} [customizer] The function to customize cloning.
           * @returns {*} Returns the cloned value.
           * @see _.cloneDeepWith
           * @example
           *
           * function customizer(value) {
           *   if (_.isElement(value)) {
           *     return value.cloneNode(false);
           *   }
           * }
           *
           * var el = _.cloneWith(document.body, customizer);
           *
           * console.log(el === document.body);
           * // => false
           * console.log(el.nodeName);
           * // => 'BODY'
           * console.log(el.childNodes.length);
           * // => 0
           */


          function cloneWith(value, customizer) {
            customizer = typeof customizer == 'function' ? customizer : undefined;
            return baseClone(value, CLONE_SYMBOLS_FLAG, customizer);
          }
          /**
           * This method is like `_.clone` except that it recursively clones `value`.
           *
           * @static
           * @memberOf _
           * @since 1.0.0
           * @category Lang
           * @param {*} value The value to recursively clone.
           * @returns {*} Returns the deep cloned value.
           * @see _.clone
           * @example
           *
           * var objects = [{ 'a': 1 }, { 'b': 2 }];
           *
           * var deep = _.cloneDeep(objects);
           * console.log(deep[0] === objects[0]);
           * // => false
           */


          function cloneDeep(value) {
            return baseClone(value, CLONE_DEEP_FLAG | CLONE_SYMBOLS_FLAG);
          }
          /**
           * This method is like `_.cloneWith` except that it recursively clones `value`.
           *
           * @static
           * @memberOf _
           * @since 4.0.0
           * @category Lang
           * @param {*} value The value to recursively clone.
           * @param {Function} [customizer] The function to customize cloning.
           * @returns {*} Returns the deep cloned value.
           * @see _.cloneWith
           * @example
           *
           * function customizer(value) {
           *   if (_.isElement(value)) {
           *     return value.cloneNode(true);
           *   }
           * }
           *
           * var el = _.cloneDeepWith(document.body, customizer);
           *
           * console.log(el === document.body);
           * // => false
           * console.log(el.nodeName);
           * // => 'BODY'
           * console.log(el.childNodes.length);
           * // => 20
           */


          function cloneDeepWith(value, customizer) {
            customizer = typeof customizer == 'function' ? customizer : undefined;
            return baseClone(value, CLONE_DEEP_FLAG | CLONE_SYMBOLS_FLAG, customizer);
          }
          /**
           * Checks if `object` conforms to `source` by invoking the predicate
           * properties of `source` with the corresponding property values of `object`.
           *
           * **Note:** This method is equivalent to `_.conforms` when `source` is
           * partially applied.
           *
           * @static
           * @memberOf _
           * @since 4.14.0
           * @category Lang
           * @param {Object} object The object to inspect.
           * @param {Object} source The object of property predicates to conform to.
           * @returns {boolean} Returns `true` if `object` conforms, else `false`.
           * @example
           *
           * var object = { 'a': 1, 'b': 2 };
           *
           * _.conformsTo(object, { 'b': function(n) { return n > 1; } });
           * // => true
           *
           * _.conformsTo(object, { 'b': function(n) { return n > 2; } });
           * // => false
           */


          function conformsTo(object, source) {
            return source == null || baseConformsTo(object, source, keys(source));
          }
          /**
           * Performs a
           * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
           * comparison between two values to determine if they are equivalent.
           *
           * @static
           * @memberOf _
           * @since 4.0.0
           * @category Lang
           * @param {*} value The value to compare.
           * @param {*} other The other value to compare.
           * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
           * @example
           *
           * var object = { 'a': 1 };
           * var other = { 'a': 1 };
           *
           * _.eq(object, object);
           * // => true
           *
           * _.eq(object, other);
           * // => false
           *
           * _.eq('a', 'a');
           * // => true
           *
           * _.eq('a', Object('a'));
           * // => false
           *
           * _.eq(NaN, NaN);
           * // => true
           */


          function eq(value, other) {
            return value === other || value !== value && other !== other;
          }
          /**
           * Checks if `value` is greater than `other`.
           *
           * @static
           * @memberOf _
           * @since 3.9.0
           * @category Lang
           * @param {*} value The value to compare.
           * @param {*} other The other value to compare.
           * @returns {boolean} Returns `true` if `value` is greater than `other`,
           *  else `false`.
           * @see _.lt
           * @example
           *
           * _.gt(3, 1);
           * // => true
           *
           * _.gt(3, 3);
           * // => false
           *
           * _.gt(1, 3);
           * // => false
           */


          var gt = createRelationalOperation(baseGt);
          /**
           * Checks if `value` is greater than or equal to `other`.
           *
           * @static
           * @memberOf _
           * @since 3.9.0
           * @category Lang
           * @param {*} value The value to compare.
           * @param {*} other The other value to compare.
           * @returns {boolean} Returns `true` if `value` is greater than or equal to
           *  `other`, else `false`.
           * @see _.lte
           * @example
           *
           * _.gte(3, 1);
           * // => true
           *
           * _.gte(3, 3);
           * // => true
           *
           * _.gte(1, 3);
           * // => false
           */

          var gte = createRelationalOperation(function (value, other) {
            return value >= other;
          });
          /**
           * Checks if `value` is likely an `arguments` object.
           *
           * @static
           * @memberOf _
           * @since 0.1.0
           * @category Lang
           * @param {*} value The value to check.
           * @returns {boolean} Returns `true` if `value` is an `arguments` object,
           *  else `false`.
           * @example
           *
           * _.isArguments(function() { return arguments; }());
           * // => true
           *
           * _.isArguments([1, 2, 3]);
           * // => false
           */

          var isArguments = baseIsArguments(function () {
            return arguments;
          }()) ? baseIsArguments : function (value) {
            return isObjectLike(value) && hasOwnProperty.call(value, 'callee') && !propertyIsEnumerable.call(value, 'callee');
          };
          /**
           * Checks if `value` is classified as an `Array` object.
           *
           * @static
           * @memberOf _
           * @since 0.1.0
           * @category Lang
           * @param {*} value The value to check.
           * @returns {boolean} Returns `true` if `value` is an array, else `false`.
           * @example
           *
           * _.isArray([1, 2, 3]);
           * // => true
           *
           * _.isArray(document.body.children);
           * // => false
           *
           * _.isArray('abc');
           * // => false
           *
           * _.isArray(_.noop);
           * // => false
           */

          var isArray = Array.isArray;
          /**
           * Checks if `value` is classified as an `ArrayBuffer` object.
           *
           * @static
           * @memberOf _
           * @since 4.3.0
           * @category Lang
           * @param {*} value The value to check.
           * @returns {boolean} Returns `true` if `value` is an array buffer, else `false`.
           * @example
           *
           * _.isArrayBuffer(new ArrayBuffer(2));
           * // => true
           *
           * _.isArrayBuffer(new Array(2));
           * // => false
           */

          var isArrayBuffer = nodeIsArrayBuffer ? baseUnary(nodeIsArrayBuffer) : baseIsArrayBuffer;
          /**
           * Checks if `value` is array-like. A value is considered array-like if it's
           * not a function and has a `value.length` that's an integer greater than or
           * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.
           *
           * @static
           * @memberOf _
           * @since 4.0.0
           * @category Lang
           * @param {*} value The value to check.
           * @returns {boolean} Returns `true` if `value` is array-like, else `false`.
           * @example
           *
           * _.isArrayLike([1, 2, 3]);
           * // => true
           *
           * _.isArrayLike(document.body.children);
           * // => true
           *
           * _.isArrayLike('abc');
           * // => true
           *
           * _.isArrayLike(_.noop);
           * // => false
           */

          function isArrayLike(value) {
            return value != null && isLength(value.length) && !isFunction(value);
          }
          /**
           * This method is like `_.isArrayLike` except that it also checks if `value`
           * is an object.
           *
           * @static
           * @memberOf _
           * @since 4.0.0
           * @category Lang
           * @param {*} value The value to check.
           * @returns {boolean} Returns `true` if `value` is an array-like object,
           *  else `false`.
           * @example
           *
           * _.isArrayLikeObject([1, 2, 3]);
           * // => true
           *
           * _.isArrayLikeObject(document.body.children);
           * // => true
           *
           * _.isArrayLikeObject('abc');
           * // => false
           *
           * _.isArrayLikeObject(_.noop);
           * // => false
           */


          function isArrayLikeObject(value) {
            return isObjectLike(value) && isArrayLike(value);
          }
          /**
           * Checks if `value` is classified as a boolean primitive or object.
           *
           * @static
           * @memberOf _
           * @since 0.1.0
           * @category Lang
           * @param {*} value The value to check.
           * @returns {boolean} Returns `true` if `value` is a boolean, else `false`.
           * @example
           *
           * _.isBoolean(false);
           * // => true
           *
           * _.isBoolean(null);
           * // => false
           */


          function isBoolean(value) {
            return value === true || value === false || isObjectLike(value) && baseGetTag(value) == boolTag;
          }
          /**
           * Checks if `value` is a buffer.
           *
           * @static
           * @memberOf _
           * @since 4.3.0
           * @category Lang
           * @param {*} value The value to check.
           * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.
           * @example
           *
           * _.isBuffer(new Buffer(2));
           * // => true
           *
           * _.isBuffer(new Uint8Array(2));
           * // => false
           */


          var isBuffer = nativeIsBuffer || stubFalse;
          /**
           * Checks if `value` is classified as a `Date` object.
           *
           * @static
           * @memberOf _
           * @since 0.1.0
           * @category Lang
           * @param {*} value The value to check.
           * @returns {boolean} Returns `true` if `value` is a date object, else `false`.
           * @example
           *
           * _.isDate(new Date);
           * // => true
           *
           * _.isDate('Mon April 23 2012');
           * // => false
           */

          var isDate = nodeIsDate ? baseUnary(nodeIsDate) : baseIsDate;
          /**
           * Checks if `value` is likely a DOM element.
           *
           * @static
           * @memberOf _
           * @since 0.1.0
           * @category Lang
           * @param {*} value The value to check.
           * @returns {boolean} Returns `true` if `value` is a DOM element, else `false`.
           * @example
           *
           * _.isElement(document.body);
           * // => true
           *
           * _.isElement('<body>');
           * // => false
           */

          function isElement(value) {
            return isObjectLike(value) && value.nodeType === 1 && !isPlainObject(value);
          }
          /**
           * Checks if `value` is an empty object, collection, map, or set.
           *
           * Objects are considered empty if they have no own enumerable string keyed
           * properties.
           *
           * Array-like values such as `arguments` objects, arrays, buffers, strings, or
           * jQuery-like collections are considered empty if they have a `length` of `0`.
           * Similarly, maps and sets are considered empty if they have a `size` of `0`.
           *
           * @static
           * @memberOf _
           * @since 0.1.0
           * @category Lang
           * @param {*} value The value to check.
           * @returns {boolean} Returns `true` if `value` is empty, else `false`.
           * @example
           *
           * _.isEmpty(null);
           * // => true
           *
           * _.isEmpty(true);
           * // => true
           *
           * _.isEmpty(1);
           * // => true
           *
           * _.isEmpty([1, 2, 3]);
           * // => false
           *
           * _.isEmpty({ 'a': 1 });
           * // => false
           */


          function isEmpty(value) {
            if (value == null) {
              return true;
            }

            if (isArrayLike(value) && (isArray(value) || typeof value == 'string' || typeof value.splice == 'function' || isBuffer(value) || isTypedArray(value) || isArguments(value))) {
              return !value.length;
            }

            var tag = getTag(value);

            if (tag == mapTag || tag == setTag) {
              return !value.size;
            }

            if (isPrototype(value)) {
              return !baseKeys(value).length;
            }

            for (var key in value) {
              if (hasOwnProperty.call(value, key)) {
                return false;
              }
            }

            return true;
          }
          /**
           * Performs a deep comparison between two values to determine if they are
           * equivalent.
           *
           * **Note:** This method supports comparing arrays, array buffers, booleans,
           * date objects, error objects, maps, numbers, `Object` objects, regexes,
           * sets, strings, symbols, and typed arrays. `Object` objects are compared
           * by their own, not inherited, enumerable properties. Functions and DOM
           * nodes are compared by strict equality, i.e. `===`.
           *
           * @static
           * @memberOf _
           * @since 0.1.0
           * @category Lang
           * @param {*} value The value to compare.
           * @param {*} other The other value to compare.
           * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
           * @example
           *
           * var object = { 'a': 1 };
           * var other = { 'a': 1 };
           *
           * _.isEqual(object, other);
           * // => true
           *
           * object === other;
           * // => false
           */


          function isEqual(value, other) {
            return baseIsEqual(value, other);
          }
          /**
           * This method is like `_.isEqual` except that it accepts `customizer` which
           * is invoked to compare values. If `customizer` returns `undefined`, comparisons
           * are handled by the method instead. The `customizer` is invoked with up to
           * six arguments: (objValue, othValue [, index|key, object, other, stack]).
           *
           * @static
           * @memberOf _
           * @since 4.0.0
           * @category Lang
           * @param {*} value The value to compare.
           * @param {*} other The other value to compare.
           * @param {Function} [customizer] The function to customize comparisons.
           * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
           * @example
           *
           * function isGreeting(value) {
           *   return /^h(?:i|ello)$/.test(value);
           * }
           *
           * function customizer(objValue, othValue) {
           *   if (isGreeting(objValue) && isGreeting(othValue)) {
           *     return true;
           *   }
           * }
           *
           * var array = ['hello', 'goodbye'];
           * var other = ['hi', 'goodbye'];
           *
           * _.isEqualWith(array, other, customizer);
           * // => true
           */


          function isEqualWith(value, other, customizer) {
            customizer = typeof customizer == 'function' ? customizer : undefined;
            var result = customizer ? customizer(value, other) : undefined;
            return result === undefined ? baseIsEqual(value, other, undefined, customizer) : !!result;
          }
          /**
           * Checks if `value` is an `Error`, `EvalError`, `RangeError`, `ReferenceError`,
           * `SyntaxError`, `TypeError`, or `URIError` object.
           *
           * @static
           * @memberOf _
           * @since 3.0.0
           * @category Lang
           * @param {*} value The value to check.
           * @returns {boolean} Returns `true` if `value` is an error object, else `false`.
           * @example
           *
           * _.isError(new Error);
           * // => true
           *
           * _.isError(Error);
           * // => false
           */


          function isError(value) {
            if (!isObjectLike(value)) {
              return false;
            }

            var tag = baseGetTag(value);
            return tag == errorTag || tag == domExcTag || typeof value.message == 'string' && typeof value.name == 'string' && !isPlainObject(value);
          }
          /**
           * Checks if `value` is a finite primitive number.
           *
           * **Note:** This method is based on
           * [`Number.isFinite`](https://mdn.io/Number/isFinite).
           *
           * @static
           * @memberOf _
           * @since 0.1.0
           * @category Lang
           * @param {*} value The value to check.
           * @returns {boolean} Returns `true` if `value` is a finite number, else `false`.
           * @example
           *
           * _.isFinite(3);
           * // => true
           *
           * _.isFinite(Number.MIN_VALUE);
           * // => true
           *
           * _.isFinite(Infinity);
           * // => false
           *
           * _.isFinite('3');
           * // => false
           */


          function isFinite(value) {
            return typeof value == 'number' && nativeIsFinite(value);
          }
          /**
           * Checks if `value` is classified as a `Function` object.
           *
           * @static
           * @memberOf _
           * @since 0.1.0
           * @category Lang
           * @param {*} value The value to check.
           * @returns {boolean} Returns `true` if `value` is a function, else `false`.
           * @example
           *
           * _.isFunction(_);
           * // => true
           *
           * _.isFunction(/abc/);
           * // => false
           */


          function isFunction(value) {
            if (!isObject(value)) {
              return false;
            } // The use of `Object#toString` avoids issues with the `typeof` operator
            // in Safari 9 which returns 'object' for typed arrays and other constructors.


            var tag = baseGetTag(value);
            return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;
          }
          /**
           * Checks if `value` is an integer.
           *
           * **Note:** This method is based on
           * [`Number.isInteger`](https://mdn.io/Number/isInteger).
           *
           * @static
           * @memberOf _
           * @since 4.0.0
           * @category Lang
           * @param {*} value The value to check.
           * @returns {boolean} Returns `true` if `value` is an integer, else `false`.
           * @example
           *
           * _.isInteger(3);
           * // => true
           *
           * _.isInteger(Number.MIN_VALUE);
           * // => false
           *
           * _.isInteger(Infinity);
           * // => false
           *
           * _.isInteger('3');
           * // => false
           */


          function isInteger(value) {
            return typeof value == 'number' && value == toInteger(value);
          }
          /**
           * Checks if `value` is a valid array-like length.
           *
           * **Note:** This method is loosely based on
           * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
           *
           * @static
           * @memberOf _
           * @since 4.0.0
           * @category Lang
           * @param {*} value The value to check.
           * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
           * @example
           *
           * _.isLength(3);
           * // => true
           *
           * _.isLength(Number.MIN_VALUE);
           * // => false
           *
           * _.isLength(Infinity);
           * // => false
           *
           * _.isLength('3');
           * // => false
           */


          function isLength(value) {
            return typeof value == 'number' && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
          }
          /**
           * Checks if `value` is the
           * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
           * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
           *
           * @static
           * @memberOf _
           * @since 0.1.0
           * @category Lang
           * @param {*} value The value to check.
           * @returns {boolean} Returns `true` if `value` is an object, else `false`.
           * @example
           *
           * _.isObject({});
           * // => true
           *
           * _.isObject([1, 2, 3]);
           * // => true
           *
           * _.isObject(_.noop);
           * // => true
           *
           * _.isObject(null);
           * // => false
           */


          function isObject(value) {
            var type = typeof value;
            return value != null && (type == 'object' || type == 'function');
          }
          /**
           * Checks if `value` is object-like. A value is object-like if it's not `null`
           * and has a `typeof` result of "object".
           *
           * @static
           * @memberOf _
           * @since 4.0.0
           * @category Lang
           * @param {*} value The value to check.
           * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
           * @example
           *
           * _.isObjectLike({});
           * // => true
           *
           * _.isObjectLike([1, 2, 3]);
           * // => true
           *
           * _.isObjectLike(_.noop);
           * // => false
           *
           * _.isObjectLike(null);
           * // => false
           */


          function isObjectLike(value) {
            return value != null && typeof value == 'object';
          }
          /**
           * Checks if `value` is classified as a `Map` object.
           *
           * @static
           * @memberOf _
           * @since 4.3.0
           * @category Lang
           * @param {*} value The value to check.
           * @returns {boolean} Returns `true` if `value` is a map, else `false`.
           * @example
           *
           * _.isMap(new Map);
           * // => true
           *
           * _.isMap(new WeakMap);
           * // => false
           */


          var isMap = nodeIsMap ? baseUnary(nodeIsMap) : baseIsMap;
          /**
           * Performs a partial deep comparison between `object` and `source` to
           * determine if `object` contains equivalent property values.
           *
           * **Note:** This method is equivalent to `_.matches` when `source` is
           * partially applied.
           *
           * Partial comparisons will match empty array and empty object `source`
           * values against any array or object value, respectively. See `_.isEqual`
           * for a list of supported value comparisons.
           *
           * @static
           * @memberOf _
           * @since 3.0.0
           * @category Lang
           * @param {Object} object The object to inspect.
           * @param {Object} source The object of property values to match.
           * @returns {boolean} Returns `true` if `object` is a match, else `false`.
           * @example
           *
           * var object = { 'a': 1, 'b': 2 };
           *
           * _.isMatch(object, { 'b': 2 });
           * // => true
           *
           * _.isMatch(object, { 'b': 1 });
           * // => false
           */

          function isMatch(object, source) {
            return object === source || baseIsMatch(object, source, getMatchData(source));
          }
          /**
           * This method is like `_.isMatch` except that it accepts `customizer` which
           * is invoked to compare values. If `customizer` returns `undefined`, comparisons
           * are handled by the method instead. The `customizer` is invoked with five
           * arguments: (objValue, srcValue, index|key, object, source).
           *
           * @static
           * @memberOf _
           * @since 4.0.0
           * @category Lang
           * @param {Object} object The object to inspect.
           * @param {Object} source The object of property values to match.
           * @param {Function} [customizer] The function to customize comparisons.
           * @returns {boolean} Returns `true` if `object` is a match, else `false`.
           * @example
           *
           * function isGreeting(value) {
           *   return /^h(?:i|ello)$/.test(value);
           * }
           *
           * function customizer(objValue, srcValue) {
           *   if (isGreeting(objValue) && isGreeting(srcValue)) {
           *     return true;
           *   }
           * }
           *
           * var object = { 'greeting': 'hello' };
           * var source = { 'greeting': 'hi' };
           *
           * _.isMatchWith(object, source, customizer);
           * // => true
           */


          function isMatchWith(object, source, customizer) {
            customizer = typeof customizer == 'function' ? customizer : undefined;
            return baseIsMatch(object, source, getMatchData(source), customizer);
          }
          /**
           * Checks if `value` is `NaN`.
           *
           * **Note:** This method is based on
           * [`Number.isNaN`](https://mdn.io/Number/isNaN) and is not the same as
           * global [`isNaN`](https://mdn.io/isNaN) which returns `true` for
           * `undefined` and other non-number values.
           *
           * @static
           * @memberOf _
           * @since 0.1.0
           * @category Lang
           * @param {*} value The value to check.
           * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.
           * @example
           *
           * _.isNaN(NaN);
           * // => true
           *
           * _.isNaN(new Number(NaN));
           * // => true
           *
           * isNaN(undefined);
           * // => true
           *
           * _.isNaN(undefined);
           * // => false
           */


          function isNaN(value) {
            // An `NaN` primitive is the only value that is not equal to itself.
            // Perform the `toStringTag` check first to avoid errors with some
            // ActiveX objects in IE.
            return isNumber(value) && value != +value;
          }
          /**
           * Checks if `value` is a pristine native function.
           *
           * **Note:** This method can't reliably detect native functions in the presence
           * of the core-js package because core-js circumvents this kind of detection.
           * Despite multiple requests, the core-js maintainer has made it clear: any
           * attempt to fix the detection will be obstructed. As a result, we're left
           * with little choice but to throw an error. Unfortunately, this also affects
           * packages, like [babel-polyfill](https://www.npmjs.com/package/babel-polyfill),
           * which rely on core-js.
           *
           * @static
           * @memberOf _
           * @since 3.0.0
           * @category Lang
           * @param {*} value The value to check.
           * @returns {boolean} Returns `true` if `value` is a native function,
           *  else `false`.
           * @example
           *
           * _.isNative(Array.prototype.push);
           * // => true
           *
           * _.isNative(_);
           * // => false
           */


          function isNative(value) {
            if (isMaskable(value)) {
              throw new Error(CORE_ERROR_TEXT);
            }

            return baseIsNative(value);
          }
          /**
           * Checks if `value` is `null`.
           *
           * @static
           * @memberOf _
           * @since 0.1.0
           * @category Lang
           * @param {*} value The value to check.
           * @returns {boolean} Returns `true` if `value` is `null`, else `false`.
           * @example
           *
           * _.isNull(null);
           * // => true
           *
           * _.isNull(void 0);
           * // => false
           */


          function isNull(value) {
            return value === null;
          }
          /**
           * Checks if `value` is `null` or `undefined`.
           *
           * @static
           * @memberOf _
           * @since 4.0.0
           * @category Lang
           * @param {*} value The value to check.
           * @returns {boolean} Returns `true` if `value` is nullish, else `false`.
           * @example
           *
           * _.isNil(null);
           * // => true
           *
           * _.isNil(void 0);
           * // => true
           *
           * _.isNil(NaN);
           * // => false
           */


          function isNil(value) {
            return value == null;
          }
          /**
           * Checks if `value` is classified as a `Number` primitive or object.
           *
           * **Note:** To exclude `Infinity`, `-Infinity`, and `NaN`, which are
           * classified as numbers, use the `_.isFinite` method.
           *
           * @static
           * @memberOf _
           * @since 0.1.0
           * @category Lang
           * @param {*} value The value to check.
           * @returns {boolean} Returns `true` if `value` is a number, else `false`.
           * @example
           *
           * _.isNumber(3);
           * // => true
           *
           * _.isNumber(Number.MIN_VALUE);
           * // => true
           *
           * _.isNumber(Infinity);
           * // => true
           *
           * _.isNumber('3');
           * // => false
           */


          function isNumber(value) {
            return typeof value == 'number' || isObjectLike(value) && baseGetTag(value) == numberTag;
          }
          /**
           * Checks if `value` is a plain object, that is, an object created by the
           * `Object` constructor or one with a `[[Prototype]]` of `null`.
           *
           * @static
           * @memberOf _
           * @since 0.8.0
           * @category Lang
           * @param {*} value The value to check.
           * @returns {boolean} Returns `true` if `value` is a plain object, else `false`.
           * @example
           *
           * function Foo() {
           *   this.a = 1;
           * }
           *
           * _.isPlainObject(new Foo);
           * // => false
           *
           * _.isPlainObject([1, 2, 3]);
           * // => false
           *
           * _.isPlainObject({ 'x': 0, 'y': 0 });
           * // => true
           *
           * _.isPlainObject(Object.create(null));
           * // => true
           */


          function isPlainObject(value) {
            if (!isObjectLike(value) || baseGetTag(value) != objectTag) {
              return false;
            }

            var proto = getPrototype(value);

            if (proto === null) {
              return true;
            }

            var Ctor = hasOwnProperty.call(proto, 'constructor') && proto.constructor;
            return typeof Ctor == 'function' && Ctor instanceof Ctor && funcToString.call(Ctor) == objectCtorString;
          }
          /**
           * Checks if `value` is classified as a `RegExp` object.
           *
           * @static
           * @memberOf _
           * @since 0.1.0
           * @category Lang
           * @param {*} value The value to check.
           * @returns {boolean} Returns `true` if `value` is a regexp, else `false`.
           * @example
           *
           * _.isRegExp(/abc/);
           * // => true
           *
           * _.isRegExp('/abc/');
           * // => false
           */


          var isRegExp = nodeIsRegExp ? baseUnary(nodeIsRegExp) : baseIsRegExp;
          /**
           * Checks if `value` is a safe integer. An integer is safe if it's an IEEE-754
           * double precision number which isn't the result of a rounded unsafe integer.
           *
           * **Note:** This method is based on
           * [`Number.isSafeInteger`](https://mdn.io/Number/isSafeInteger).
           *
           * @static
           * @memberOf _
           * @since 4.0.0
           * @category Lang
           * @param {*} value The value to check.
           * @returns {boolean} Returns `true` if `value` is a safe integer, else `false`.
           * @example
           *
           * _.isSafeInteger(3);
           * // => true
           *
           * _.isSafeInteger(Number.MIN_VALUE);
           * // => false
           *
           * _.isSafeInteger(Infinity);
           * // => false
           *
           * _.isSafeInteger('3');
           * // => false
           */

          function isSafeInteger(value) {
            return isInteger(value) && value >= -MAX_SAFE_INTEGER && value <= MAX_SAFE_INTEGER;
          }
          /**
           * Checks if `value` is classified as a `Set` object.
           *
           * @static
           * @memberOf _
           * @since 4.3.0
           * @category Lang
           * @param {*} value The value to check.
           * @returns {boolean} Returns `true` if `value` is a set, else `false`.
           * @example
           *
           * _.isSet(new Set);
           * // => true
           *
           * _.isSet(new WeakSet);
           * // => false
           */


          var isSet = nodeIsSet ? baseUnary(nodeIsSet) : baseIsSet;
          /**
           * Checks if `value` is classified as a `String` primitive or object.
           *
           * @static
           * @since 0.1.0
           * @memberOf _
           * @category Lang
           * @param {*} value The value to check.
           * @returns {boolean} Returns `true` if `value` is a string, else `false`.
           * @example
           *
           * _.isString('abc');
           * // => true
           *
           * _.isString(1);
           * // => false
           */

          function isString(value) {
            return typeof value == 'string' || !isArray(value) && isObjectLike(value) && baseGetTag(value) == stringTag;
          }
          /**
           * Checks if `value` is classified as a `Symbol` primitive or object.
           *
           * @static
           * @memberOf _
           * @since 4.0.0
           * @category Lang
           * @param {*} value The value to check.
           * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.
           * @example
           *
           * _.isSymbol(Symbol.iterator);
           * // => true
           *
           * _.isSymbol('abc');
           * // => false
           */


          function isSymbol(value) {
            return typeof value == 'symbol' || isObjectLike(value) && baseGetTag(value) == symbolTag;
          }
          /**
           * Checks if `value` is classified as a typed array.
           *
           * @static
           * @memberOf _
           * @since 3.0.0
           * @category Lang
           * @param {*} value The value to check.
           * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
           * @example
           *
           * _.isTypedArray(new Uint8Array);
           * // => true
           *
           * _.isTypedArray([]);
           * // => false
           */


          var isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;
          /**
           * Checks if `value` is `undefined`.
           *
           * @static
           * @since 0.1.0
           * @memberOf _
           * @category Lang
           * @param {*} value The value to check.
           * @returns {boolean} Returns `true` if `value` is `undefined`, else `false`.
           * @example
           *
           * _.isUndefined(void 0);
           * // => true
           *
           * _.isUndefined(null);
           * // => false
           */

          function isUndefined(value) {
            return value === undefined;
          }
          /**
           * Checks if `value` is classified as a `WeakMap` object.
           *
           * @static
           * @memberOf _
           * @since 4.3.0
           * @category Lang
           * @param {*} value The value to check.
           * @returns {boolean} Returns `true` if `value` is a weak map, else `false`.
           * @example
           *
           * _.isWeakMap(new WeakMap);
           * // => true
           *
           * _.isWeakMap(new Map);
           * // => false
           */


          function isWeakMap(value) {
            return isObjectLike(value) && getTag(value) == weakMapTag;
          }
          /**
           * Checks if `value` is classified as a `WeakSet` object.
           *
           * @static
           * @memberOf _
           * @since 4.3.0
           * @category Lang
           * @param {*} value The value to check.
           * @returns {boolean} Returns `true` if `value` is a weak set, else `false`.
           * @example
           *
           * _.isWeakSet(new WeakSet);
           * // => true
           *
           * _.isWeakSet(new Set);
           * // => false
           */


          function isWeakSet(value) {
            return isObjectLike(value) && baseGetTag(value) == weakSetTag;
          }
          /**
           * Checks if `value` is less than `other`.
           *
           * @static
           * @memberOf _
           * @since 3.9.0
           * @category Lang
           * @param {*} value The value to compare.
           * @param {*} other The other value to compare.
           * @returns {boolean} Returns `true` if `value` is less than `other`,
           *  else `false`.
           * @see _.gt
           * @example
           *
           * _.lt(1, 3);
           * // => true
           *
           * _.lt(3, 3);
           * // => false
           *
           * _.lt(3, 1);
           * // => false
           */


          var lt = createRelationalOperation(baseLt);
          /**
           * Checks if `value` is less than or equal to `other`.
           *
           * @static
           * @memberOf _
           * @since 3.9.0
           * @category Lang
           * @param {*} value The value to compare.
           * @param {*} other The other value to compare.
           * @returns {boolean} Returns `true` if `value` is less than or equal to
           *  `other`, else `false`.
           * @see _.gte
           * @example
           *
           * _.lte(1, 3);
           * // => true
           *
           * _.lte(3, 3);
           * // => true
           *
           * _.lte(3, 1);
           * // => false
           */

          var lte = createRelationalOperation(function (value, other) {
            return value <= other;
          });
          /**
           * Converts `value` to an array.
           *
           * @static
           * @since 0.1.0
           * @memberOf _
           * @category Lang
           * @param {*} value The value to convert.
           * @returns {Array} Returns the converted array.
           * @example
           *
           * _.toArray({ 'a': 1, 'b': 2 });
           * // => [1, 2]
           *
           * _.toArray('abc');
           * // => ['a', 'b', 'c']
           *
           * _.toArray(1);
           * // => []
           *
           * _.toArray(null);
           * // => []
           */

          function toArray(value) {
            if (!value) {
              return [];
            }

            if (isArrayLike(value)) {
              return isString(value) ? stringToArray(value) : copyArray(value);
            }

            if (symIterator && value[symIterator]) {
              return iteratorToArray(value[symIterator]());
            }

            var tag = getTag(value),
                func = tag == mapTag ? mapToArray : tag == setTag ? setToArray : values;
            return func(value);
          }
          /**
           * Converts `value` to a finite number.
           *
           * @static
           * @memberOf _
           * @since 4.12.0
           * @category Lang
           * @param {*} value The value to convert.
           * @returns {number} Returns the converted number.
           * @example
           *
           * _.toFinite(3.2);
           * // => 3.2
           *
           * _.toFinite(Number.MIN_VALUE);
           * // => 5e-324
           *
           * _.toFinite(Infinity);
           * // => 1.7976931348623157e+308
           *
           * _.toFinite('3.2');
           * // => 3.2
           */


          function toFinite(value) {
            if (!value) {
              return value === 0 ? value : 0;
            }

            value = toNumber(value);

            if (value === INFINITY || value === -INFINITY) {
              var sign = value < 0 ? -1 : 1;
              return sign * MAX_INTEGER;
            }

            return value === value ? value : 0;
          }
          /**
           * Converts `value` to an integer.
           *
           * **Note:** This method is loosely based on
           * [`ToInteger`](http://www.ecma-international.org/ecma-262/7.0/#sec-tointeger).
           *
           * @static
           * @memberOf _
           * @since 4.0.0
           * @category Lang
           * @param {*} value The value to convert.
           * @returns {number} Returns the converted integer.
           * @example
           *
           * _.toInteger(3.2);
           * // => 3
           *
           * _.toInteger(Number.MIN_VALUE);
           * // => 0
           *
           * _.toInteger(Infinity);
           * // => 1.7976931348623157e+308
           *
           * _.toInteger('3.2');
           * // => 3
           */


          function toInteger(value) {
            var result = toFinite(value),
                remainder = result % 1;
            return result === result ? remainder ? result - remainder : result : 0;
          }
          /**
           * Converts `value` to an integer suitable for use as the length of an
           * array-like object.
           *
           * **Note:** This method is based on
           * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
           *
           * @static
           * @memberOf _
           * @since 4.0.0
           * @category Lang
           * @param {*} value The value to convert.
           * @returns {number} Returns the converted integer.
           * @example
           *
           * _.toLength(3.2);
           * // => 3
           *
           * _.toLength(Number.MIN_VALUE);
           * // => 0
           *
           * _.toLength(Infinity);
           * // => 4294967295
           *
           * _.toLength('3.2');
           * // => 3
           */


          function toLength(value) {
            return value ? baseClamp(toInteger(value), 0, MAX_ARRAY_LENGTH) : 0;
          }
          /**
           * Converts `value` to a number.
           *
           * @static
           * @memberOf _
           * @since 4.0.0
           * @category Lang
           * @param {*} value The value to process.
           * @returns {number} Returns the number.
           * @example
           *
           * _.toNumber(3.2);
           * // => 3.2
           *
           * _.toNumber(Number.MIN_VALUE);
           * // => 5e-324
           *
           * _.toNumber(Infinity);
           * // => Infinity
           *
           * _.toNumber('3.2');
           * // => 3.2
           */


          function toNumber(value) {
            if (typeof value == 'number') {
              return value;
            }

            if (isSymbol(value)) {
              return NAN;
            }

            if (isObject(value)) {
              var other = typeof value.valueOf == 'function' ? value.valueOf() : value;
              value = isObject(other) ? other + '' : other;
            }

            if (typeof value != 'string') {
              return value === 0 ? value : +value;
            }

            value = baseTrim(value);
            var isBinary = reIsBinary.test(value);
            return isBinary || reIsOctal.test(value) ? freeParseInt(value.slice(2), isBinary ? 2 : 8) : reIsBadHex.test(value) ? NAN : +value;
          }
          /**
           * Converts `value` to a plain object flattening inherited enumerable string
           * keyed properties of `value` to own properties of the plain object.
           *
           * @static
           * @memberOf _
           * @since 3.0.0
           * @category Lang
           * @param {*} value The value to convert.
           * @returns {Object} Returns the converted plain object.
           * @example
           *
           * function Foo() {
           *   this.b = 2;
           * }
           *
           * Foo.prototype.c = 3;
           *
           * _.assign({ 'a': 1 }, new Foo);
           * // => { 'a': 1, 'b': 2 }
           *
           * _.assign({ 'a': 1 }, _.toPlainObject(new Foo));
           * // => { 'a': 1, 'b': 2, 'c': 3 }
           */


          function toPlainObject(value) {
            return copyObject(value, keysIn(value));
          }
          /**
           * Converts `value` to a safe integer. A safe integer can be compared and
           * represented correctly.
           *
           * @static
           * @memberOf _
           * @since 4.0.0
           * @category Lang
           * @param {*} value The value to convert.
           * @returns {number} Returns the converted integer.
           * @example
           *
           * _.toSafeInteger(3.2);
           * // => 3
           *
           * _.toSafeInteger(Number.MIN_VALUE);
           * // => 0
           *
           * _.toSafeInteger(Infinity);
           * // => 9007199254740991
           *
           * _.toSafeInteger('3.2');
           * // => 3
           */


          function toSafeInteger(value) {
            return value ? baseClamp(toInteger(value), -MAX_SAFE_INTEGER, MAX_SAFE_INTEGER) : value === 0 ? value : 0;
          }
          /**
           * Converts `value` to a string. An empty string is returned for `null`
           * and `undefined` values. The sign of `-0` is preserved.
           *
           * @static
           * @memberOf _
           * @since 4.0.0
           * @category Lang
           * @param {*} value The value to convert.
           * @returns {string} Returns the converted string.
           * @example
           *
           * _.toString(null);
           * // => ''
           *
           * _.toString(-0);
           * // => '-0'
           *
           * _.toString([1, 2, 3]);
           * // => '1,2,3'
           */


          function toString(value) {
            return value == null ? '' : baseToString(value);
          }
          /*------------------------------------------------------------------------*/

          /**
           * Assigns own enumerable string keyed properties of source objects to the
           * destination object. Source objects are applied from left to right.
           * Subsequent sources overwrite property assignments of previous sources.
           *
           * **Note:** This method mutates `object` and is loosely based on
           * [`Object.assign`](https://mdn.io/Object/assign).
           *
           * @static
           * @memberOf _
           * @since 0.10.0
           * @category Object
           * @param {Object} object The destination object.
           * @param {...Object} [sources] The source objects.
           * @returns {Object} Returns `object`.
           * @see _.assignIn
           * @example
           *
           * function Foo() {
           *   this.a = 1;
           * }
           *
           * function Bar() {
           *   this.c = 3;
           * }
           *
           * Foo.prototype.b = 2;
           * Bar.prototype.d = 4;
           *
           * _.assign({ 'a': 0 }, new Foo, new Bar);
           * // => { 'a': 1, 'c': 3 }
           */


          var assign = createAssigner(function (object, source) {
            if (isPrototype(source) || isArrayLike(source)) {
              copyObject(source, keys(source), object);
              return;
            }

            for (var key in source) {
              if (hasOwnProperty.call(source, key)) {
                assignValue(object, key, source[key]);
              }
            }
          });
          /**
           * This method is like `_.assign` except that it iterates over own and
           * inherited source properties.
           *
           * **Note:** This method mutates `object`.
           *
           * @static
           * @memberOf _
           * @since 4.0.0
           * @alias extend
           * @category Object
           * @param {Object} object The destination object.
           * @param {...Object} [sources] The source objects.
           * @returns {Object} Returns `object`.
           * @see _.assign
           * @example
           *
           * function Foo() {
           *   this.a = 1;
           * }
           *
           * function Bar() {
           *   this.c = 3;
           * }
           *
           * Foo.prototype.b = 2;
           * Bar.prototype.d = 4;
           *
           * _.assignIn({ 'a': 0 }, new Foo, new Bar);
           * // => { 'a': 1, 'b': 2, 'c': 3, 'd': 4 }
           */

          var assignIn = createAssigner(function (object, source) {
            copyObject(source, keysIn(source), object);
          });
          /**
           * This method is like `_.assignIn` except that it accepts `customizer`
           * which is invoked to produce the assigned values. If `customizer` returns
           * `undefined`, assignment is handled by the method instead. The `customizer`
           * is invoked with five arguments: (objValue, srcValue, key, object, source).
           *
           * **Note:** This method mutates `object`.
           *
           * @static
           * @memberOf _
           * @since 4.0.0
           * @alias extendWith
           * @category Object
           * @param {Object} object The destination object.
           * @param {...Object} sources The source objects.
           * @param {Function} [customizer] The function to customize assigned values.
           * @returns {Object} Returns `object`.
           * @see _.assignWith
           * @example
           *
           * function customizer(objValue, srcValue) {
           *   return _.isUndefined(objValue) ? srcValue : objValue;
           * }
           *
           * var defaults = _.partialRight(_.assignInWith, customizer);
           *
           * defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });
           * // => { 'a': 1, 'b': 2 }
           */

          var assignInWith = createAssigner(function (object, source, srcIndex, customizer) {
            copyObject(source, keysIn(source), object, customizer);
          });
          /**
           * This method is like `_.assign` except that it accepts `customizer`
           * which is invoked to produce the assigned values. If `customizer` returns
           * `undefined`, assignment is handled by the method instead. The `customizer`
           * is invoked with five arguments: (objValue, srcValue, key, object, source).
           *
           * **Note:** This method mutates `object`.
           *
           * @static
           * @memberOf _
           * @since 4.0.0
           * @category Object
           * @param {Object} object The destination object.
           * @param {...Object} sources The source objects.
           * @param {Function} [customizer] The function to customize assigned values.
           * @returns {Object} Returns `object`.
           * @see _.assignInWith
           * @example
           *
           * function customizer(objValue, srcValue) {
           *   return _.isUndefined(objValue) ? srcValue : objValue;
           * }
           *
           * var defaults = _.partialRight(_.assignWith, customizer);
           *
           * defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });
           * // => { 'a': 1, 'b': 2 }
           */

          var assignWith = createAssigner(function (object, source, srcIndex, customizer) {
            copyObject(source, keys(source), object, customizer);
          });
          /**
           * Creates an array of values corresponding to `paths` of `object`.
           *
           * @static
           * @memberOf _
           * @since 1.0.0
           * @category Object
           * @param {Object} object The object to iterate over.
           * @param {...(string|string[])} [paths] The property paths to pick.
           * @returns {Array} Returns the picked values.
           * @example
           *
           * var object = { 'a': [{ 'b': { 'c': 3 } }, 4] };
           *
           * _.at(object, ['a[0].b.c', 'a[1]']);
           * // => [3, 4]
           */

          var at = flatRest(baseAt);
          /**
           * Creates an object that inherits from the `prototype` object. If a
           * `properties` object is given, its own enumerable string keyed properties
           * are assigned to the created object.
           *
           * @static
           * @memberOf _
           * @since 2.3.0
           * @category Object
           * @param {Object} prototype The object to inherit from.
           * @param {Object} [properties] The properties to assign to the object.
           * @returns {Object} Returns the new object.
           * @example
           *
           * function Shape() {
           *   this.x = 0;
           *   this.y = 0;
           * }
           *
           * function Circle() {
           *   Shape.call(this);
           * }
           *
           * Circle.prototype = _.create(Shape.prototype, {
           *   'constructor': Circle
           * });
           *
           * var circle = new Circle;
           * circle instanceof Circle;
           * // => true
           *
           * circle instanceof Shape;
           * // => true
           */

          function create(prototype, properties) {
            var result = baseCreate(prototype);
            return properties == null ? result : baseAssign(result, properties);
          }
          /**
           * Assigns own and inherited enumerable string keyed properties of source
           * objects to the destination object for all destination properties that
           * resolve to `undefined`. Source objects are applied from left to right.
           * Once a property is set, additional values of the same property are ignored.
           *
           * **Note:** This method mutates `object`.
           *
           * @static
           * @since 0.1.0
           * @memberOf _
           * @category Object
           * @param {Object} object The destination object.
           * @param {...Object} [sources] The source objects.
           * @returns {Object} Returns `object`.
           * @see _.defaultsDeep
           * @example
           *
           * _.defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });
           * // => { 'a': 1, 'b': 2 }
           */


          var defaults = baseRest(function (object, sources) {
            object = Object(object);
            var index = -1;
            var length = sources.length;
            var guard = length > 2 ? sources[2] : undefined;

            if (guard && isIterateeCall(sources[0], sources[1], guard)) {
              length = 1;
            }

            while (++index < length) {
              var source = sources[index];
              var props = keysIn(source);
              var propsIndex = -1;
              var propsLength = props.length;

              while (++propsIndex < propsLength) {
                var key = props[propsIndex];
                var value = object[key];

                if (value === undefined || eq(value, objectProto[key]) && !hasOwnProperty.call(object, key)) {
                  object[key] = source[key];
                }
              }
            }

            return object;
          });
          /**
           * This method is like `_.defaults` except that it recursively assigns
           * default properties.
           *
           * **Note:** This method mutates `object`.
           *
           * @static
           * @memberOf _
           * @since 3.10.0
           * @category Object
           * @param {Object} object The destination object.
           * @param {...Object} [sources] The source objects.
           * @returns {Object} Returns `object`.
           * @see _.defaults
           * @example
           *
           * _.defaultsDeep({ 'a': { 'b': 2 } }, { 'a': { 'b': 1, 'c': 3 } });
           * // => { 'a': { 'b': 2, 'c': 3 } }
           */

          var defaultsDeep = baseRest(function (args) {
            args.push(undefined, customDefaultsMerge);
            return apply(mergeWith, undefined, args);
          });
          /**
           * This method is like `_.find` except that it returns the key of the first
           * element `predicate` returns truthy for instead of the element itself.
           *
           * @static
           * @memberOf _
           * @since 1.1.0
           * @category Object
           * @param {Object} object The object to inspect.
           * @param {Function} [predicate=_.identity] The function invoked per iteration.
           * @returns {string|undefined} Returns the key of the matched element,
           *  else `undefined`.
           * @example
           *
           * var users = {
           *   'barney':  { 'age': 36, 'active': true },
           *   'fred':    { 'age': 40, 'active': false },
           *   'pebbles': { 'age': 1,  'active': true }
           * };
           *
           * _.findKey(users, function(o) { return o.age < 40; });
           * // => 'barney' (iteration order is not guaranteed)
           *
           * // The `_.matches` iteratee shorthand.
           * _.findKey(users, { 'age': 1, 'active': true });
           * // => 'pebbles'
           *
           * // The `_.matchesProperty` iteratee shorthand.
           * _.findKey(users, ['active', false]);
           * // => 'fred'
           *
           * // The `_.property` iteratee shorthand.
           * _.findKey(users, 'active');
           * // => 'barney'
           */

          function findKey(object, predicate) {
            return baseFindKey(object, getIteratee(predicate, 3), baseForOwn);
          }
          /**
           * This method is like `_.findKey` except that it iterates over elements of
           * a collection in the opposite order.
           *
           * @static
           * @memberOf _
           * @since 2.0.0
           * @category Object
           * @param {Object} object The object to inspect.
           * @param {Function} [predicate=_.identity] The function invoked per iteration.
           * @returns {string|undefined} Returns the key of the matched element,
           *  else `undefined`.
           * @example
           *
           * var users = {
           *   'barney':  { 'age': 36, 'active': true },
           *   'fred':    { 'age': 40, 'active': false },
           *   'pebbles': { 'age': 1,  'active': true }
           * };
           *
           * _.findLastKey(users, function(o) { return o.age < 40; });
           * // => returns 'pebbles' assuming `_.findKey` returns 'barney'
           *
           * // The `_.matches` iteratee shorthand.
           * _.findLastKey(users, { 'age': 36, 'active': true });
           * // => 'barney'
           *
           * // The `_.matchesProperty` iteratee shorthand.
           * _.findLastKey(users, ['active', false]);
           * // => 'fred'
           *
           * // The `_.property` iteratee shorthand.
           * _.findLastKey(users, 'active');
           * // => 'pebbles'
           */


          function findLastKey(object, predicate) {
            return baseFindKey(object, getIteratee(predicate, 3), baseForOwnRight);
          }
          /**
           * Iterates over own and inherited enumerable string keyed properties of an
           * object and invokes `iteratee` for each property. The iteratee is invoked
           * with three arguments: (value, key, object). Iteratee functions may exit
           * iteration early by explicitly returning `false`.
           *
           * @static
           * @memberOf _
           * @since 0.3.0
           * @category Object
           * @param {Object} object The object to iterate over.
           * @param {Function} [iteratee=_.identity] The function invoked per iteration.
           * @returns {Object} Returns `object`.
           * @see _.forInRight
           * @example
           *
           * function Foo() {
           *   this.a = 1;
           *   this.b = 2;
           * }
           *
           * Foo.prototype.c = 3;
           *
           * _.forIn(new Foo, function(value, key) {
           *   console.log(key);
           * });
           * // => Logs 'a', 'b', then 'c' (iteration order is not guaranteed).
           */


          function forIn(object, iteratee) {
            return object == null ? object : baseFor(object, getIteratee(iteratee, 3), keysIn);
          }
          /**
           * This method is like `_.forIn` except that it iterates over properties of
           * `object` in the opposite order.
           *
           * @static
           * @memberOf _
           * @since 2.0.0
           * @category Object
           * @param {Object} object The object to iterate over.
           * @param {Function} [iteratee=_.identity] The function invoked per iteration.
           * @returns {Object} Returns `object`.
           * @see _.forIn
           * @example
           *
           * function Foo() {
           *   this.a = 1;
           *   this.b = 2;
           * }
           *
           * Foo.prototype.c = 3;
           *
           * _.forInRight(new Foo, function(value, key) {
           *   console.log(key);
           * });
           * // => Logs 'c', 'b', then 'a' assuming `_.forIn` logs 'a', 'b', then 'c'.
           */


          function forInRight(object, iteratee) {
            return object == null ? object : baseForRight(object, getIteratee(iteratee, 3), keysIn);
          }
          /**
           * Iterates over own enumerable string keyed properties of an object and
           * invokes `iteratee` for each property. The iteratee is invoked with three
           * arguments: (value, key, object). Iteratee functions may exit iteration
           * early by explicitly returning `false`.
           *
           * @static
           * @memberOf _
           * @since 0.3.0
           * @category Object
           * @param {Object} object The object to iterate over.
           * @param {Function} [iteratee=_.identity] The function invoked per iteration.
           * @returns {Object} Returns `object`.
           * @see _.forOwnRight
           * @example
           *
           * function Foo() {
           *   this.a = 1;
           *   this.b = 2;
           * }
           *
           * Foo.prototype.c = 3;
           *
           * _.forOwn(new Foo, function(value, key) {
           *   console.log(key);
           * });
           * // => Logs 'a' then 'b' (iteration order is not guaranteed).
           */


          function forOwn(object, iteratee) {
            return object && baseForOwn(object, getIteratee(iteratee, 3));
          }
          /**
           * This method is like `_.forOwn` except that it iterates over properties of
           * `object` in the opposite order.
           *
           * @static
           * @memberOf _
           * @since 2.0.0
           * @category Object
           * @param {Object} object The object to iterate over.
           * @param {Function} [iteratee=_.identity] The function invoked per iteration.
           * @returns {Object} Returns `object`.
           * @see _.forOwn
           * @example
           *
           * function Foo() {
           *   this.a = 1;
           *   this.b = 2;
           * }
           *
           * Foo.prototype.c = 3;
           *
           * _.forOwnRight(new Foo, function(value, key) {
           *   console.log(key);
           * });
           * // => Logs 'b' then 'a' assuming `_.forOwn` logs 'a' then 'b'.
           */


          function forOwnRight(object, iteratee) {
            return object && baseForOwnRight(object, getIteratee(iteratee, 3));
          }
          /**
           * Creates an array of function property names from own enumerable properties
           * of `object`.
           *
           * @static
           * @since 0.1.0
           * @memberOf _
           * @category Object
           * @param {Object} object The object to inspect.
           * @returns {Array} Returns the function names.
           * @see _.functionsIn
           * @example
           *
           * function Foo() {
           *   this.a = _.constant('a');
           *   this.b = _.constant('b');
           * }
           *
           * Foo.prototype.c = _.constant('c');
           *
           * _.functions(new Foo);
           * // => ['a', 'b']
           */


          function functions(object) {
            return object == null ? [] : baseFunctions(object, keys(object));
          }
          /**
           * Creates an array of function property names from own and inherited
           * enumerable properties of `object`.
           *
           * @static
           * @memberOf _
           * @since 4.0.0
           * @category Object
           * @param {Object} object The object to inspect.
           * @returns {Array} Returns the function names.
           * @see _.functions
           * @example
           *
           * function Foo() {
           *   this.a = _.constant('a');
           *   this.b = _.constant('b');
           * }
           *
           * Foo.prototype.c = _.constant('c');
           *
           * _.functionsIn(new Foo);
           * // => ['a', 'b', 'c']
           */


          function functionsIn(object) {
            return object == null ? [] : baseFunctions(object, keysIn(object));
          }
          /**
           * Gets the value at `path` of `object`. If the resolved value is
           * `undefined`, the `defaultValue` is returned in its place.
           *
           * @static
           * @memberOf _
           * @since 3.7.0
           * @category Object
           * @param {Object} object The object to query.
           * @param {Array|string} path The path of the property to get.
           * @param {*} [defaultValue] The value returned for `undefined` resolved values.
           * @returns {*} Returns the resolved value.
           * @example
           *
           * var object = { 'a': [{ 'b': { 'c': 3 } }] };
           *
           * _.get(object, 'a[0].b.c');
           * // => 3
           *
           * _.get(object, ['a', '0', 'b', 'c']);
           * // => 3
           *
           * _.get(object, 'a.b.c', 'default');
           * // => 'default'
           */


          function get(object, path, defaultValue) {
            var result = object == null ? undefined : baseGet(object, path);
            return result === undefined ? defaultValue : result;
          }
          /**
           * Checks if `path` is a direct property of `object`.
           *
           * @static
           * @since 0.1.0
           * @memberOf _
           * @category Object
           * @param {Object} object The object to query.
           * @param {Array|string} path The path to check.
           * @returns {boolean} Returns `true` if `path` exists, else `false`.
           * @example
           *
           * var object = { 'a': { 'b': 2 } };
           * var other = _.create({ 'a': _.create({ 'b': 2 }) });
           *
           * _.has(object, 'a');
           * // => true
           *
           * _.has(object, 'a.b');
           * // => true
           *
           * _.has(object, ['a', 'b']);
           * // => true
           *
           * _.has(other, 'a');
           * // => false
           */


          function has(object, path) {
            return object != null && hasPath(object, path, baseHas);
          }
          /**
           * Checks if `path` is a direct or inherited property of `object`.
           *
           * @static
           * @memberOf _
           * @since 4.0.0
           * @category Object
           * @param {Object} object The object to query.
           * @param {Array|string} path The path to check.
           * @returns {boolean} Returns `true` if `path` exists, else `false`.
           * @example
           *
           * var object = _.create({ 'a': _.create({ 'b': 2 }) });
           *
           * _.hasIn(object, 'a');
           * // => true
           *
           * _.hasIn(object, 'a.b');
           * // => true
           *
           * _.hasIn(object, ['a', 'b']);
           * // => true
           *
           * _.hasIn(object, 'b');
           * // => false
           */


          function hasIn(object, path) {
            return object != null && hasPath(object, path, baseHasIn);
          }
          /**
           * Creates an object composed of the inverted keys and values of `object`.
           * If `object` contains duplicate values, subsequent values overwrite
           * property assignments of previous values.
           *
           * @static
           * @memberOf _
           * @since 0.7.0
           * @category Object
           * @param {Object} object The object to invert.
           * @returns {Object} Returns the new inverted object.
           * @example
           *
           * var object = { 'a': 1, 'b': 2, 'c': 1 };
           *
           * _.invert(object);
           * // => { '1': 'c', '2': 'b' }
           */


          var invert = createInverter(function (result, value, key) {
            if (value != null && typeof value.toString != 'function') {
              value = nativeObjectToString.call(value);
            }

            result[value] = key;
          }, constant(identity));
          /**
           * This method is like `_.invert` except that the inverted object is generated
           * from the results of running each element of `object` thru `iteratee`. The
           * corresponding inverted value of each inverted key is an array of keys
           * responsible for generating the inverted value. The iteratee is invoked
           * with one argument: (value).
           *
           * @static
           * @memberOf _
           * @since 4.1.0
           * @category Object
           * @param {Object} object The object to invert.
           * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
           * @returns {Object} Returns the new inverted object.
           * @example
           *
           * var object = { 'a': 1, 'b': 2, 'c': 1 };
           *
           * _.invertBy(object);
           * // => { '1': ['a', 'c'], '2': ['b'] }
           *
           * _.invertBy(object, function(value) {
           *   return 'group' + value;
           * });
           * // => { 'group1': ['a', 'c'], 'group2': ['b'] }
           */

          var invertBy = createInverter(function (result, value, key) {
            if (value != null && typeof value.toString != 'function') {
              value = nativeObjectToString.call(value);
            }

            if (hasOwnProperty.call(result, value)) {
              result[value].push(key);
            } else {
              result[value] = [key];
            }
          }, getIteratee);
          /**
           * Invokes the method at `path` of `object`.
           *
           * @static
           * @memberOf _
           * @since 4.0.0
           * @category Object
           * @param {Object} object The object to query.
           * @param {Array|string} path The path of the method to invoke.
           * @param {...*} [args] The arguments to invoke the method with.
           * @returns {*} Returns the result of the invoked method.
           * @example
           *
           * var object = { 'a': [{ 'b': { 'c': [1, 2, 3, 4] } }] };
           *
           * _.invoke(object, 'a[0].b.c.slice', 1, 3);
           * // => [2, 3]
           */

          var invoke = baseRest(baseInvoke);
          /**
           * Creates an array of the own enumerable property names of `object`.
           *
           * **Note:** Non-object values are coerced to objects. See the
           * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
           * for more details.
           *
           * @static
           * @since 0.1.0
           * @memberOf _
           * @category Object
           * @param {Object} object The object to query.
           * @returns {Array} Returns the array of property names.
           * @example
           *
           * function Foo() {
           *   this.a = 1;
           *   this.b = 2;
           * }
           *
           * Foo.prototype.c = 3;
           *
           * _.keys(new Foo);
           * // => ['a', 'b'] (iteration order is not guaranteed)
           *
           * _.keys('hi');
           * // => ['0', '1']
           */

          function keys(object) {
            return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);
          }
          /**
           * Creates an array of the own and inherited enumerable property names of `object`.
           *
           * **Note:** Non-object values are coerced to objects.
           *
           * @static
           * @memberOf _
           * @since 3.0.0
           * @category Object
           * @param {Object} object The object to query.
           * @returns {Array} Returns the array of property names.
           * @example
           *
           * function Foo() {
           *   this.a = 1;
           *   this.b = 2;
           * }
           *
           * Foo.prototype.c = 3;
           *
           * _.keysIn(new Foo);
           * // => ['a', 'b', 'c'] (iteration order is not guaranteed)
           */


          function keysIn(object) {
            return isArrayLike(object) ? arrayLikeKeys(object, true) : baseKeysIn(object);
          }
          /**
           * The opposite of `_.mapValues`; this method creates an object with the
           * same values as `object` and keys generated by running each own enumerable
           * string keyed property of `object` thru `iteratee`. The iteratee is invoked
           * with three arguments: (value, key, object).
           *
           * @static
           * @memberOf _
           * @since 3.8.0
           * @category Object
           * @param {Object} object The object to iterate over.
           * @param {Function} [iteratee=_.identity] The function invoked per iteration.
           * @returns {Object} Returns the new mapped object.
           * @see _.mapValues
           * @example
           *
           * _.mapKeys({ 'a': 1, 'b': 2 }, function(value, key) {
           *   return key + value;
           * });
           * // => { 'a1': 1, 'b2': 2 }
           */


          function mapKeys(object, iteratee) {
            var result = {};
            iteratee = getIteratee(iteratee, 3);
            baseForOwn(object, function (value, key, object) {
              baseAssignValue(result, iteratee(value, key, object), value);
            });
            return result;
          }
          /**
           * Creates an object with the same keys as `object` and values generated
           * by running each own enumerable string keyed property of `object` thru
           * `iteratee`. The iteratee is invoked with three arguments:
           * (value, key, object).
           *
           * @static
           * @memberOf _
           * @since 2.4.0
           * @category Object
           * @param {Object} object The object to iterate over.
           * @param {Function} [iteratee=_.identity] The function invoked per iteration.
           * @returns {Object} Returns the new mapped object.
           * @see _.mapKeys
           * @example
           *
           * var users = {
           *   'fred':    { 'user': 'fred',    'age': 40 },
           *   'pebbles': { 'user': 'pebbles', 'age': 1 }
           * };
           *
           * _.mapValues(users, function(o) { return o.age; });
           * // => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)
           *
           * // The `_.property` iteratee shorthand.
           * _.mapValues(users, 'age');
           * // => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)
           */


          function mapValues(object, iteratee) {
            var result = {};
            iteratee = getIteratee(iteratee, 3);
            baseForOwn(object, function (value, key, object) {
              baseAssignValue(result, key, iteratee(value, key, object));
            });
            return result;
          }
          /**
           * This method is like `_.assign` except that it recursively merges own and
           * inherited enumerable string keyed properties of source objects into the
           * destination object. Source properties that resolve to `undefined` are
           * skipped if a destination value exists. Array and plain object properties
           * are merged recursively. Other objects and value types are overridden by
           * assignment. Source objects are applied from left to right. Subsequent
           * sources overwrite property assignments of previous sources.
           *
           * **Note:** This method mutates `object`.
           *
           * @static
           * @memberOf _
           * @since 0.5.0
           * @category Object
           * @param {Object} object The destination object.
           * @param {...Object} [sources] The source objects.
           * @returns {Object} Returns `object`.
           * @example
           *
           * var object = {
           *   'a': [{ 'b': 2 }, { 'd': 4 }]
           * };
           *
           * var other = {
           *   'a': [{ 'c': 3 }, { 'e': 5 }]
           * };
           *
           * _.merge(object, other);
           * // => { 'a': [{ 'b': 2, 'c': 3 }, { 'd': 4, 'e': 5 }] }
           */


          var merge = createAssigner(function (object, source, srcIndex) {
            baseMerge(object, source, srcIndex);
          });
          /**
           * This method is like `_.merge` except that it accepts `customizer` which
           * is invoked to produce the merged values of the destination and source
           * properties. If `customizer` returns `undefined`, merging is handled by the
           * method instead. The `customizer` is invoked with six arguments:
           * (objValue, srcValue, key, object, source, stack).
           *
           * **Note:** This method mutates `object`.
           *
           * @static
           * @memberOf _
           * @since 4.0.0
           * @category Object
           * @param {Object} object The destination object.
           * @param {...Object} sources The source objects.
           * @param {Function} customizer The function to customize assigned values.
           * @returns {Object} Returns `object`.
           * @example
           *
           * function customizer(objValue, srcValue) {
           *   if (_.isArray(objValue)) {
           *     return objValue.concat(srcValue);
           *   }
           * }
           *
           * var object = { 'a': [1], 'b': [2] };
           * var other = { 'a': [3], 'b': [4] };
           *
           * _.mergeWith(object, other, customizer);
           * // => { 'a': [1, 3], 'b': [2, 4] }
           */

          var mergeWith = createAssigner(function (object, source, srcIndex, customizer) {
            baseMerge(object, source, srcIndex, customizer);
          });
          /**
           * The opposite of `_.pick`; this method creates an object composed of the
           * own and inherited enumerable property paths of `object` that are not omitted.
           *
           * **Note:** This method is considerably slower than `_.pick`.
           *
           * @static
           * @since 0.1.0
           * @memberOf _
           * @category Object
           * @param {Object} object The source object.
           * @param {...(string|string[])} [paths] The property paths to omit.
           * @returns {Object} Returns the new object.
           * @example
           *
           * var object = { 'a': 1, 'b': '2', 'c': 3 };
           *
           * _.omit(object, ['a', 'c']);
           * // => { 'b': '2' }
           */

          var omit = flatRest(function (object, paths) {
            var result = {};

            if (object == null) {
              return result;
            }

            var isDeep = false;
            paths = arrayMap(paths, function (path) {
              path = castPath(path, object);
              isDeep || (isDeep = path.length > 1);
              return path;
            });
            copyObject(object, getAllKeysIn(object), result);

            if (isDeep) {
              result = baseClone(result, CLONE_DEEP_FLAG | CLONE_FLAT_FLAG | CLONE_SYMBOLS_FLAG, customOmitClone);
            }

            var length = paths.length;

            while (length--) {
              baseUnset(result, paths[length]);
            }

            return result;
          });
          /**
           * The opposite of `_.pickBy`; this method creates an object composed of
           * the own and inherited enumerable string keyed properties of `object` that
           * `predicate` doesn't return truthy for. The predicate is invoked with two
           * arguments: (value, key).
           *
           * @static
           * @memberOf _
           * @since 4.0.0
           * @category Object
           * @param {Object} object The source object.
           * @param {Function} [predicate=_.identity] The function invoked per property.
           * @returns {Object} Returns the new object.
           * @example
           *
           * var object = { 'a': 1, 'b': '2', 'c': 3 };
           *
           * _.omitBy(object, _.isNumber);
           * // => { 'b': '2' }
           */

          function omitBy(object, predicate) {
            return pickBy(object, negate(getIteratee(predicate)));
          }
          /**
           * Creates an object composed of the picked `object` properties.
           *
           * @static
           * @since 0.1.0
           * @memberOf _
           * @category Object
           * @param {Object} object The source object.
           * @param {...(string|string[])} [paths] The property paths to pick.
           * @returns {Object} Returns the new object.
           * @example
           *
           * var object = { 'a': 1, 'b': '2', 'c': 3 };
           *
           * _.pick(object, ['a', 'c']);
           * // => { 'a': 1, 'c': 3 }
           */


          var pick = flatRest(function (object, paths) {
            return object == null ? {} : basePick(object, paths);
          });
          /**
           * Creates an object composed of the `object` properties `predicate` returns
           * truthy for. The predicate is invoked with two arguments: (value, key).
           *
           * @static
           * @memberOf _
           * @since 4.0.0
           * @category Object
           * @param {Object} object The source object.
           * @param {Function} [predicate=_.identity] The function invoked per property.
           * @returns {Object} Returns the new object.
           * @example
           *
           * var object = { 'a': 1, 'b': '2', 'c': 3 };
           *
           * _.pickBy(object, _.isNumber);
           * // => { 'a': 1, 'c': 3 }
           */

          function pickBy(object, predicate) {
            if (object == null) {
              return {};
            }

            var props = arrayMap(getAllKeysIn(object), function (prop) {
              return [prop];
            });
            predicate = getIteratee(predicate);
            return basePickBy(object, props, function (value, path) {
              return predicate(value, path[0]);
            });
          }
          /**
           * This method is like `_.get` except that if the resolved value is a
           * function it's invoked with the `this` binding of its parent object and
           * its result is returned.
           *
           * @static
           * @since 0.1.0
           * @memberOf _
           * @category Object
           * @param {Object} object The object to query.
           * @param {Array|string} path The path of the property to resolve.
           * @param {*} [defaultValue] The value returned for `undefined` resolved values.
           * @returns {*} Returns the resolved value.
           * @example
           *
           * var object = { 'a': [{ 'b': { 'c1': 3, 'c2': _.constant(4) } }] };
           *
           * _.result(object, 'a[0].b.c1');
           * // => 3
           *
           * _.result(object, 'a[0].b.c2');
           * // => 4
           *
           * _.result(object, 'a[0].b.c3', 'default');
           * // => 'default'
           *
           * _.result(object, 'a[0].b.c3', _.constant('default'));
           * // => 'default'
           */


          function result(object, path, defaultValue) {
            path = castPath(path, object);
            var index = -1,
                length = path.length; // Ensure the loop is entered when path is empty.

            if (!length) {
              length = 1;
              object = undefined;
            }

            while (++index < length) {
              var value = object == null ? undefined : object[toKey(path[index])];

              if (value === undefined) {
                index = length;
                value = defaultValue;
              }

              object = isFunction(value) ? value.call(object) : value;
            }

            return object;
          }
          /**
           * Sets the value at `path` of `object`. If a portion of `path` doesn't exist,
           * it's created. Arrays are created for missing index properties while objects
           * are created for all other missing properties. Use `_.setWith` to customize
           * `path` creation.
           *
           * **Note:** This method mutates `object`.
           *
           * @static
           * @memberOf _
           * @since 3.7.0
           * @category Object
           * @param {Object} object The object to modify.
           * @param {Array|string} path The path of the property to set.
           * @param {*} value The value to set.
           * @returns {Object} Returns `object`.
           * @example
           *
           * var object = { 'a': [{ 'b': { 'c': 3 } }] };
           *
           * _.set(object, 'a[0].b.c', 4);
           * console.log(object.a[0].b.c);
           * // => 4
           *
           * _.set(object, ['x', '0', 'y', 'z'], 5);
           * console.log(object.x[0].y.z);
           * // => 5
           */


          function set(object, path, value) {
            return object == null ? object : baseSet(object, path, value);
          }
          /**
           * This method is like `_.set` except that it accepts `customizer` which is
           * invoked to produce the objects of `path`.  If `customizer` returns `undefined`
           * path creation is handled by the method instead. The `customizer` is invoked
           * with three arguments: (nsValue, key, nsObject).
           *
           * **Note:** This method mutates `object`.
           *
           * @static
           * @memberOf _
           * @since 4.0.0
           * @category Object
           * @param {Object} object The object to modify.
           * @param {Array|string} path The path of the property to set.
           * @param {*} value The value to set.
           * @param {Function} [customizer] The function to customize assigned values.
           * @returns {Object} Returns `object`.
           * @example
           *
           * var object = {};
           *
           * _.setWith(object, '[0][1]', 'a', Object);
           * // => { '0': { '1': 'a' } }
           */


          function setWith(object, path, value, customizer) {
            customizer = typeof customizer == 'function' ? customizer : undefined;
            return object == null ? object : baseSet(object, path, value, customizer);
          }
          /**
           * Creates an array of own enumerable string keyed-value pairs for `object`
           * which can be consumed by `_.fromPairs`. If `object` is a map or set, its
           * entries are returned.
           *
           * @static
           * @memberOf _
           * @since 4.0.0
           * @alias entries
           * @category Object
           * @param {Object} object The object to query.
           * @returns {Array} Returns the key-value pairs.
           * @example
           *
           * function Foo() {
           *   this.a = 1;
           *   this.b = 2;
           * }
           *
           * Foo.prototype.c = 3;
           *
           * _.toPairs(new Foo);
           * // => [['a', 1], ['b', 2]] (iteration order is not guaranteed)
           */


          var toPairs = createToPairs(keys);
          /**
           * Creates an array of own and inherited enumerable string keyed-value pairs
           * for `object` which can be consumed by `_.fromPairs`. If `object` is a map
           * or set, its entries are returned.
           *
           * @static
           * @memberOf _
           * @since 4.0.0
           * @alias entriesIn
           * @category Object
           * @param {Object} object The object to query.
           * @returns {Array} Returns the key-value pairs.
           * @example
           *
           * function Foo() {
           *   this.a = 1;
           *   this.b = 2;
           * }
           *
           * Foo.prototype.c = 3;
           *
           * _.toPairsIn(new Foo);
           * // => [['a', 1], ['b', 2], ['c', 3]] (iteration order is not guaranteed)
           */

          var toPairsIn = createToPairs(keysIn);
          /**
           * An alternative to `_.reduce`; this method transforms `object` to a new
           * `accumulator` object which is the result of running each of its own
           * enumerable string keyed properties thru `iteratee`, with each invocation
           * potentially mutating the `accumulator` object. If `accumulator` is not
           * provided, a new object with the same `[[Prototype]]` will be used. The
           * iteratee is invoked with four arguments: (accumulator, value, key, object).
           * Iteratee functions may exit iteration early by explicitly returning `false`.
           *
           * @static
           * @memberOf _
           * @since 1.3.0
           * @category Object
           * @param {Object} object The object to iterate over.
           * @param {Function} [iteratee=_.identity] The function invoked per iteration.
           * @param {*} [accumulator] The custom accumulator value.
           * @returns {*} Returns the accumulated value.
           * @example
           *
           * _.transform([2, 3, 4], function(result, n) {
           *   result.push(n *= n);
           *   return n % 2 == 0;
           * }, []);
           * // => [4, 9]
           *
           * _.transform({ 'a': 1, 'b': 2, 'c': 1 }, function(result, value, key) {
           *   (result[value] || (result[value] = [])).push(key);
           * }, {});
           * // => { '1': ['a', 'c'], '2': ['b'] }
           */

          function transform(object, iteratee, accumulator) {
            var isArr = isArray(object),
                isArrLike = isArr || isBuffer(object) || isTypedArray(object);
            iteratee = getIteratee(iteratee, 4);

            if (accumulator == null) {
              var Ctor = object && object.constructor;

              if (isArrLike) {
                accumulator = isArr ? new Ctor() : [];
              } else if (isObject(object)) {
                accumulator = isFunction(Ctor) ? baseCreate(getPrototype(object)) : {};
              } else {
                accumulator = {};
              }
            }

            (isArrLike ? arrayEach : baseForOwn)(object, function (value, index, object) {
              return iteratee(accumulator, value, index, object);
            });
            return accumulator;
          }
          /**
           * Removes the property at `path` of `object`.
           *
           * **Note:** This method mutates `object`.
           *
           * @static
           * @memberOf _
           * @since 4.0.0
           * @category Object
           * @param {Object} object The object to modify.
           * @param {Array|string} path The path of the property to unset.
           * @returns {boolean} Returns `true` if the property is deleted, else `false`.
           * @example
           *
           * var object = { 'a': [{ 'b': { 'c': 7 } }] };
           * _.unset(object, 'a[0].b.c');
           * // => true
           *
           * console.log(object);
           * // => { 'a': [{ 'b': {} }] };
           *
           * _.unset(object, ['a', '0', 'b', 'c']);
           * // => true
           *
           * console.log(object);
           * // => { 'a': [{ 'b': {} }] };
           */


          function unset(object, path) {
            return object == null ? true : baseUnset(object, path);
          }
          /**
           * This method is like `_.set` except that accepts `updater` to produce the
           * value to set. Use `_.updateWith` to customize `path` creation. The `updater`
           * is invoked with one argument: (value).
           *
           * **Note:** This method mutates `object`.
           *
           * @static
           * @memberOf _
           * @since 4.6.0
           * @category Object
           * @param {Object} object The object to modify.
           * @param {Array|string} path The path of the property to set.
           * @param {Function} updater The function to produce the updated value.
           * @returns {Object} Returns `object`.
           * @example
           *
           * var object = { 'a': [{ 'b': { 'c': 3 } }] };
           *
           * _.update(object, 'a[0].b.c', function(n) { return n * n; });
           * console.log(object.a[0].b.c);
           * // => 9
           *
           * _.update(object, 'x[0].y.z', function(n) { return n ? n + 1 : 0; });
           * console.log(object.x[0].y.z);
           * // => 0
           */


          function update(object, path, updater) {
            return object == null ? object : baseUpdate(object, path, castFunction(updater));
          }
          /**
           * This method is like `_.update` except that it accepts `customizer` which is
           * invoked to produce the objects of `path`.  If `customizer` returns `undefined`
           * path creation is handled by the method instead. The `customizer` is invoked
           * with three arguments: (nsValue, key, nsObject).
           *
           * **Note:** This method mutates `object`.
           *
           * @static
           * @memberOf _
           * @since 4.6.0
           * @category Object
           * @param {Object} object The object to modify.
           * @param {Array|string} path The path of the property to set.
           * @param {Function} updater The function to produce the updated value.
           * @param {Function} [customizer] The function to customize assigned values.
           * @returns {Object} Returns `object`.
           * @example
           *
           * var object = {};
           *
           * _.updateWith(object, '[0][1]', _.constant('a'), Object);
           * // => { '0': { '1': 'a' } }
           */


          function updateWith(object, path, updater, customizer) {
            customizer = typeof customizer == 'function' ? customizer : undefined;
            return object == null ? object : baseUpdate(object, path, castFunction(updater), customizer);
          }
          /**
           * Creates an array of the own enumerable string keyed property values of `object`.
           *
           * **Note:** Non-object values are coerced to objects.
           *
           * @static
           * @since 0.1.0
           * @memberOf _
           * @category Object
           * @param {Object} object The object to query.
           * @returns {Array} Returns the array of property values.
           * @example
           *
           * function Foo() {
           *   this.a = 1;
           *   this.b = 2;
           * }
           *
           * Foo.prototype.c = 3;
           *
           * _.values(new Foo);
           * // => [1, 2] (iteration order is not guaranteed)
           *
           * _.values('hi');
           * // => ['h', 'i']
           */


          function values(object) {
            return object == null ? [] : baseValues(object, keys(object));
          }
          /**
           * Creates an array of the own and inherited enumerable string keyed property
           * values of `object`.
           *
           * **Note:** Non-object values are coerced to objects.
           *
           * @static
           * @memberOf _
           * @since 3.0.0
           * @category Object
           * @param {Object} object The object to query.
           * @returns {Array} Returns the array of property values.
           * @example
           *
           * function Foo() {
           *   this.a = 1;
           *   this.b = 2;
           * }
           *
           * Foo.prototype.c = 3;
           *
           * _.valuesIn(new Foo);
           * // => [1, 2, 3] (iteration order is not guaranteed)
           */


          function valuesIn(object) {
            return object == null ? [] : baseValues(object, keysIn(object));
          }
          /*------------------------------------------------------------------------*/

          /**
           * Clamps `number` within the inclusive `lower` and `upper` bounds.
           *
           * @static
           * @memberOf _
           * @since 4.0.0
           * @category Number
           * @param {number} number The number to clamp.
           * @param {number} [lower] The lower bound.
           * @param {number} upper The upper bound.
           * @returns {number} Returns the clamped number.
           * @example
           *
           * _.clamp(-10, -5, 5);
           * // => -5
           *
           * _.clamp(10, -5, 5);
           * // => 5
           */


          function clamp(number, lower, upper) {
            if (upper === undefined) {
              upper = lower;
              lower = undefined;
            }

            if (upper !== undefined) {
              upper = toNumber(upper);
              upper = upper === upper ? upper : 0;
            }

            if (lower !== undefined) {
              lower = toNumber(lower);
              lower = lower === lower ? lower : 0;
            }

            return baseClamp(toNumber(number), lower, upper);
          }
          /**
           * Checks if `n` is between `start` and up to, but not including, `end`. If
           * `end` is not specified, it's set to `start` with `start` then set to `0`.
           * If `start` is greater than `end` the params are swapped to support
           * negative ranges.
           *
           * @static
           * @memberOf _
           * @since 3.3.0
           * @category Number
           * @param {number} number The number to check.
           * @param {number} [start=0] The start of the range.
           * @param {number} end The end of the range.
           * @returns {boolean} Returns `true` if `number` is in the range, else `false`.
           * @see _.range, _.rangeRight
           * @example
           *
           * _.inRange(3, 2, 4);
           * // => true
           *
           * _.inRange(4, 8);
           * // => true
           *
           * _.inRange(4, 2);
           * // => false
           *
           * _.inRange(2, 2);
           * // => false
           *
           * _.inRange(1.2, 2);
           * // => true
           *
           * _.inRange(5.2, 4);
           * // => false
           *
           * _.inRange(-3, -2, -6);
           * // => true
           */


          function inRange(number, start, end) {
            start = toFinite(start);

            if (end === undefined) {
              end = start;
              start = 0;
            } else {
              end = toFinite(end);
            }

            number = toNumber(number);
            return baseInRange(number, start, end);
          }
          /**
           * Produces a random number between the inclusive `lower` and `upper` bounds.
           * If only one argument is provided a number between `0` and the given number
           * is returned. If `floating` is `true`, or either `lower` or `upper` are
           * floats, a floating-point number is returned instead of an integer.
           *
           * **Note:** JavaScript follows the IEEE-754 standard for resolving
           * floating-point values which can produce unexpected results.
           *
           * @static
           * @memberOf _
           * @since 0.7.0
           * @category Number
           * @param {number} [lower=0] The lower bound.
           * @param {number} [upper=1] The upper bound.
           * @param {boolean} [floating] Specify returning a floating-point number.
           * @returns {number} Returns the random number.
           * @example
           *
           * _.random(0, 5);
           * // => an integer between 0 and 5
           *
           * _.random(5);
           * // => also an integer between 0 and 5
           *
           * _.random(5, true);
           * // => a floating-point number between 0 and 5
           *
           * _.random(1.2, 5.2);
           * // => a floating-point number between 1.2 and 5.2
           */


          function random(lower, upper, floating) {
            if (floating && typeof floating != 'boolean' && isIterateeCall(lower, upper, floating)) {
              upper = floating = undefined;
            }

            if (floating === undefined) {
              if (typeof upper == 'boolean') {
                floating = upper;
                upper = undefined;
              } else if (typeof lower == 'boolean') {
                floating = lower;
                lower = undefined;
              }
            }

            if (lower === undefined && upper === undefined) {
              lower = 0;
              upper = 1;
            } else {
              lower = toFinite(lower);

              if (upper === undefined) {
                upper = lower;
                lower = 0;
              } else {
                upper = toFinite(upper);
              }
            }

            if (lower > upper) {
              var temp = lower;
              lower = upper;
              upper = temp;
            }

            if (floating || lower % 1 || upper % 1) {
              var rand = nativeRandom();
              return nativeMin(lower + rand * (upper - lower + freeParseFloat('1e-' + ((rand + '').length - 1))), upper);
            }

            return baseRandom(lower, upper);
          }
          /*------------------------------------------------------------------------*/

          /**
           * Converts `string` to [camel case](https://en.wikipedia.org/wiki/CamelCase).
           *
           * @static
           * @memberOf _
           * @since 3.0.0
           * @category String
           * @param {string} [string=''] The string to convert.
           * @returns {string} Returns the camel cased string.
           * @example
           *
           * _.camelCase('Foo Bar');
           * // => 'fooBar'
           *
           * _.camelCase('--foo-bar--');
           * // => 'fooBar'
           *
           * _.camelCase('__FOO_BAR__');
           * // => 'fooBar'
           */


          var camelCase = createCompounder(function (result, word, index) {
            word = word.toLowerCase();
            return result + (index ? capitalize(word) : word);
          });
          /**
           * Converts the first character of `string` to upper case and the remaining
           * to lower case.
           *
           * @static
           * @memberOf _
           * @since 3.0.0
           * @category String
           * @param {string} [string=''] The string to capitalize.
           * @returns {string} Returns the capitalized string.
           * @example
           *
           * _.capitalize('FRED');
           * // => 'Fred'
           */

          function capitalize(string) {
            return upperFirst(toString(string).toLowerCase());
          }
          /**
           * Deburrs `string` by converting
           * [Latin-1 Supplement](https://en.wikipedia.org/wiki/Latin-1_Supplement_(Unicode_block)#Character_table)
           * and [Latin Extended-A](https://en.wikipedia.org/wiki/Latin_Extended-A)
           * letters to basic Latin letters and removing
           * [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks).
           *
           * @static
           * @memberOf _
           * @since 3.0.0
           * @category String
           * @param {string} [string=''] The string to deburr.
           * @returns {string} Returns the deburred string.
           * @example
           *
           * _.deburr('déjà vu');
           * // => 'deja vu'
           */


          function deburr(string) {
            string = toString(string);
            return string && string.replace(reLatin, deburrLetter).replace(reComboMark, '');
          }
          /**
           * Checks if `string` ends with the given target string.
           *
           * @static
           * @memberOf _
           * @since 3.0.0
           * @category String
           * @param {string} [string=''] The string to inspect.
           * @param {string} [target] The string to search for.
           * @param {number} [position=string.length] The position to search up to.
           * @returns {boolean} Returns `true` if `string` ends with `target`,
           *  else `false`.
           * @example
           *
           * _.endsWith('abc', 'c');
           * // => true
           *
           * _.endsWith('abc', 'b');
           * // => false
           *
           * _.endsWith('abc', 'b', 2);
           * // => true
           */


          function endsWith(string, target, position) {
            string = toString(string);
            target = baseToString(target);
            var length = string.length;
            position = position === undefined ? length : baseClamp(toInteger(position), 0, length);
            var end = position;
            position -= target.length;
            return position >= 0 && string.slice(position, end) == target;
          }
          /**
           * Converts the characters "&", "<", ">", '"', and "'" in `string` to their
           * corresponding HTML entities.
           *
           * **Note:** No other characters are escaped. To escape additional
           * characters use a third-party library like [_he_](https://mths.be/he).
           *
           * Though the ">" character is escaped for symmetry, characters like
           * ">" and "/" don't need escaping in HTML and have no special meaning
           * unless they're part of a tag or unquoted attribute value. See
           * [Mathias Bynens's article](https://mathiasbynens.be/notes/ambiguous-ampersands)
           * (under "semi-related fun fact") for more details.
           *
           * When working with HTML you should always
           * [quote attribute values](http://wonko.com/post/html-escaping) to reduce
           * XSS vectors.
           *
           * @static
           * @since 0.1.0
           * @memberOf _
           * @category String
           * @param {string} [string=''] The string to escape.
           * @returns {string} Returns the escaped string.
           * @example
           *
           * _.escape('fred, barney, & pebbles');
           * // => 'fred, barney, &amp; pebbles'
           */


          function escape(string) {
            string = toString(string);
            return string && reHasUnescapedHtml.test(string) ? string.replace(reUnescapedHtml, escapeHtmlChar) : string;
          }
          /**
           * Escapes the `RegExp` special characters "^", "$", "\", ".", "*", "+",
           * "?", "(", ")", "[", "]", "{", "}", and "|" in `string`.
           *
           * @static
           * @memberOf _
           * @since 3.0.0
           * @category String
           * @param {string} [string=''] The string to escape.
           * @returns {string} Returns the escaped string.
           * @example
           *
           * _.escapeRegExp('[lodash](https://lodash.com/)');
           * // => '\[lodash\]\(https://lodash\.com/\)'
           */


          function escapeRegExp(string) {
            string = toString(string);
            return string && reHasRegExpChar.test(string) ? string.replace(reRegExpChar, '\\$&') : string;
          }
          /**
           * Converts `string` to
           * [kebab case](https://en.wikipedia.org/wiki/Letter_case#Special_case_styles).
           *
           * @static
           * @memberOf _
           * @since 3.0.0
           * @category String
           * @param {string} [string=''] The string to convert.
           * @returns {string} Returns the kebab cased string.
           * @example
           *
           * _.kebabCase('Foo Bar');
           * // => 'foo-bar'
           *
           * _.kebabCase('fooBar');
           * // => 'foo-bar'
           *
           * _.kebabCase('__FOO_BAR__');
           * // => 'foo-bar'
           */


          var kebabCase = createCompounder(function (result, word, index) {
            return result + (index ? '-' : '') + word.toLowerCase();
          });
          /**
           * Converts `string`, as space separated words, to lower case.
           *
           * @static
           * @memberOf _
           * @since 4.0.0
           * @category String
           * @param {string} [string=''] The string to convert.
           * @returns {string} Returns the lower cased string.
           * @example
           *
           * _.lowerCase('--Foo-Bar--');
           * // => 'foo bar'
           *
           * _.lowerCase('fooBar');
           * // => 'foo bar'
           *
           * _.lowerCase('__FOO_BAR__');
           * // => 'foo bar'
           */

          var lowerCase = createCompounder(function (result, word, index) {
            return result + (index ? ' ' : '') + word.toLowerCase();
          });
          /**
           * Converts the first character of `string` to lower case.
           *
           * @static
           * @memberOf _
           * @since 4.0.0
           * @category String
           * @param {string} [string=''] The string to convert.
           * @returns {string} Returns the converted string.
           * @example
           *
           * _.lowerFirst('Fred');
           * // => 'fred'
           *
           * _.lowerFirst('FRED');
           * // => 'fRED'
           */

          var lowerFirst = createCaseFirst('toLowerCase');
          /**
           * Pads `string` on the left and right sides if it's shorter than `length`.
           * Padding characters are truncated if they can't be evenly divided by `length`.
           *
           * @static
           * @memberOf _
           * @since 3.0.0
           * @category String
           * @param {string} [string=''] The string to pad.
           * @param {number} [length=0] The padding length.
           * @param {string} [chars=' '] The string used as padding.
           * @returns {string} Returns the padded string.
           * @example
           *
           * _.pad('abc', 8);
           * // => '  abc   '
           *
           * _.pad('abc', 8, '_-');
           * // => '_-abc_-_'
           *
           * _.pad('abc', 3);
           * // => 'abc'
           */

          function pad(string, length, chars) {
            string = toString(string);
            length = toInteger(length);
            var strLength = length ? stringSize(string) : 0;

            if (!length || strLength >= length) {
              return string;
            }

            var mid = (length - strLength) / 2;
            return createPadding(nativeFloor(mid), chars) + string + createPadding(nativeCeil(mid), chars);
          }
          /**
           * Pads `string` on the right side if it's shorter than `length`. Padding
           * characters are truncated if they exceed `length`.
           *
           * @static
           * @memberOf _
           * @since 4.0.0
           * @category String
           * @param {string} [string=''] The string to pad.
           * @param {number} [length=0] The padding length.
           * @param {string} [chars=' '] The string used as padding.
           * @returns {string} Returns the padded string.
           * @example
           *
           * _.padEnd('abc', 6);
           * // => 'abc   '
           *
           * _.padEnd('abc', 6, '_-');
           * // => 'abc_-_'
           *
           * _.padEnd('abc', 3);
           * // => 'abc'
           */


          function padEnd(string, length, chars) {
            string = toString(string);
            length = toInteger(length);
            var strLength = length ? stringSize(string) : 0;
            return length && strLength < length ? string + createPadding(length - strLength, chars) : string;
          }
          /**
           * Pads `string` on the left side if it's shorter than `length`. Padding
           * characters are truncated if they exceed `length`.
           *
           * @static
           * @memberOf _
           * @since 4.0.0
           * @category String
           * @param {string} [string=''] The string to pad.
           * @param {number} [length=0] The padding length.
           * @param {string} [chars=' '] The string used as padding.
           * @returns {string} Returns the padded string.
           * @example
           *
           * _.padStart('abc', 6);
           * // => '   abc'
           *
           * _.padStart('abc', 6, '_-');
           * // => '_-_abc'
           *
           * _.padStart('abc', 3);
           * // => 'abc'
           */


          function padStart(string, length, chars) {
            string = toString(string);
            length = toInteger(length);
            var strLength = length ? stringSize(string) : 0;
            return length && strLength < length ? createPadding(length - strLength, chars) + string : string;
          }
          /**
           * Converts `string` to an integer of the specified radix. If `radix` is
           * `undefined` or `0`, a `radix` of `10` is used unless `value` is a
           * hexadecimal, in which case a `radix` of `16` is used.
           *
           * **Note:** This method aligns with the
           * [ES5 implementation](https://es5.github.io/#x15.1.2.2) of `parseInt`.
           *
           * @static
           * @memberOf _
           * @since 1.1.0
           * @category String
           * @param {string} string The string to convert.
           * @param {number} [radix=10] The radix to interpret `value` by.
           * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
           * @returns {number} Returns the converted integer.
           * @example
           *
           * _.parseInt('08');
           * // => 8
           *
           * _.map(['6', '08', '10'], _.parseInt);
           * // => [6, 8, 10]
           */


          function parseInt(string, radix, guard) {
            if (guard || radix == null) {
              radix = 0;
            } else if (radix) {
              radix = +radix;
            }

            return nativeParseInt(toString(string).replace(reTrimStart, ''), radix || 0);
          }
          /**
           * Repeats the given string `n` times.
           *
           * @static
           * @memberOf _
           * @since 3.0.0
           * @category String
           * @param {string} [string=''] The string to repeat.
           * @param {number} [n=1] The number of times to repeat the string.
           * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
           * @returns {string} Returns the repeated string.
           * @example
           *
           * _.repeat('*', 3);
           * // => '***'
           *
           * _.repeat('abc', 2);
           * // => 'abcabc'
           *
           * _.repeat('abc', 0);
           * // => ''
           */


          function repeat(string, n, guard) {
            if (guard ? isIterateeCall(string, n, guard) : n === undefined) {
              n = 1;
            } else {
              n = toInteger(n);
            }

            return baseRepeat(toString(string), n);
          }
          /**
           * Replaces matches for `pattern` in `string` with `replacement`.
           *
           * **Note:** This method is based on
           * [`String#replace`](https://mdn.io/String/replace).
           *
           * @static
           * @memberOf _
           * @since 4.0.0
           * @category String
           * @param {string} [string=''] The string to modify.
           * @param {RegExp|string} pattern The pattern to replace.
           * @param {Function|string} replacement The match replacement.
           * @returns {string} Returns the modified string.
           * @example
           *
           * _.replace('Hi Fred', 'Fred', 'Barney');
           * // => 'Hi Barney'
           */


          function replace() {
            var args = arguments,
                string = toString(args[0]);
            return args.length < 3 ? string : string.replace(args[1], args[2]);
          }
          /**
           * Converts `string` to
           * [snake case](https://en.wikipedia.org/wiki/Snake_case).
           *
           * @static
           * @memberOf _
           * @since 3.0.0
           * @category String
           * @param {string} [string=''] The string to convert.
           * @returns {string} Returns the snake cased string.
           * @example
           *
           * _.snakeCase('Foo Bar');
           * // => 'foo_bar'
           *
           * _.snakeCase('fooBar');
           * // => 'foo_bar'
           *
           * _.snakeCase('--FOO-BAR--');
           * // => 'foo_bar'
           */


          var snakeCase = createCompounder(function (result, word, index) {
            return result + (index ? '_' : '') + word.toLowerCase();
          });
          /**
           * Splits `string` by `separator`.
           *
           * **Note:** This method is based on
           * [`String#split`](https://mdn.io/String/split).
           *
           * @static
           * @memberOf _
           * @since 4.0.0
           * @category String
           * @param {string} [string=''] The string to split.
           * @param {RegExp|string} separator The separator pattern to split by.
           * @param {number} [limit] The length to truncate results to.
           * @returns {Array} Returns the string segments.
           * @example
           *
           * _.split('a-b-c', '-', 2);
           * // => ['a', 'b']
           */

          function split(string, separator, limit) {
            if (limit && typeof limit != 'number' && isIterateeCall(string, separator, limit)) {
              separator = limit = undefined;
            }

            limit = limit === undefined ? MAX_ARRAY_LENGTH : limit >>> 0;

            if (!limit) {
              return [];
            }

            string = toString(string);

            if (string && (typeof separator == 'string' || separator != null && !isRegExp(separator))) {
              separator = baseToString(separator);

              if (!separator && hasUnicode(string)) {
                return castSlice(stringToArray(string), 0, limit);
              }
            }

            return string.split(separator, limit);
          }
          /**
           * Converts `string` to
           * [start case](https://en.wikipedia.org/wiki/Letter_case#Stylistic_or_specialised_usage).
           *
           * @static
           * @memberOf _
           * @since 3.1.0
           * @category String
           * @param {string} [string=''] The string to convert.
           * @returns {string} Returns the start cased string.
           * @example
           *
           * _.startCase('--foo-bar--');
           * // => 'Foo Bar'
           *
           * _.startCase('fooBar');
           * // => 'Foo Bar'
           *
           * _.startCase('__FOO_BAR__');
           * // => 'FOO BAR'
           */


          var startCase = createCompounder(function (result, word, index) {
            return result + (index ? ' ' : '') + upperFirst(word);
          });
          /**
           * Checks if `string` starts with the given target string.
           *
           * @static
           * @memberOf _
           * @since 3.0.0
           * @category String
           * @param {string} [string=''] The string to inspect.
           * @param {string} [target] The string to search for.
           * @param {number} [position=0] The position to search from.
           * @returns {boolean} Returns `true` if `string` starts with `target`,
           *  else `false`.
           * @example
           *
           * _.startsWith('abc', 'a');
           * // => true
           *
           * _.startsWith('abc', 'b');
           * // => false
           *
           * _.startsWith('abc', 'b', 1);
           * // => true
           */

          function startsWith(string, target, position) {
            string = toString(string);
            position = position == null ? 0 : baseClamp(toInteger(position), 0, string.length);
            target = baseToString(target);
            return string.slice(position, position + target.length) == target;
          }
          /**
           * Creates a compiled template function that can interpolate data properties
           * in "interpolate" delimiters, HTML-escape interpolated data properties in
           * "escape" delimiters, and execute JavaScript in "evaluate" delimiters. Data
           * properties may be accessed as free variables in the template. If a setting
           * object is given, it takes precedence over `_.templateSettings` values.
           *
           * **Note:** In the development build `_.template` utilizes
           * [sourceURLs](http://www.html5rocks.com/en/tutorials/developertools/sourcemaps/#toc-sourceurl)
           * for easier debugging.
           *
           * For more information on precompiling templates see
           * [lodash's custom builds documentation](https://lodash.com/custom-builds).
           *
           * For more information on Chrome extension sandboxes see
           * [Chrome's extensions documentation](https://developer.chrome.com/extensions/sandboxingEval).
           *
           * @static
           * @since 0.1.0
           * @memberOf _
           * @category String
           * @param {string} [string=''] The template string.
           * @param {Object} [options={}] The options object.
           * @param {RegExp} [options.escape=_.templateSettings.escape]
           *  The HTML "escape" delimiter.
           * @param {RegExp} [options.evaluate=_.templateSettings.evaluate]
           *  The "evaluate" delimiter.
           * @param {Object} [options.imports=_.templateSettings.imports]
           *  An object to import into the template as free variables.
           * @param {RegExp} [options.interpolate=_.templateSettings.interpolate]
           *  The "interpolate" delimiter.
           * @param {string} [options.sourceURL='lodash.templateSources[n]']
           *  The sourceURL of the compiled template.
           * @param {string} [options.variable='obj']
           *  The data object variable name.
           * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
           * @returns {Function} Returns the compiled template function.
           * @example
           *
           * // Use the "interpolate" delimiter to create a compiled template.
           * var compiled = _.template('hello <%= user %>!');
           * compiled({ 'user': 'fred' });
           * // => 'hello fred!'
           *
           * // Use the HTML "escape" delimiter to escape data property values.
           * var compiled = _.template('<b><%- value %></b>');
           * compiled({ 'value': '<script>' });
           * // => '<b>&lt;script&gt;</b>'
           *
           * // Use the "evaluate" delimiter to execute JavaScript and generate HTML.
           * var compiled = _.template('<% _.forEach(users, function(user) { %><li><%- user %></li><% }); %>');
           * compiled({ 'users': ['fred', 'barney'] });
           * // => '<li>fred</li><li>barney</li>'
           *
           * // Use the internal `print` function in "evaluate" delimiters.
           * var compiled = _.template('<% print("hello " + user); %>!');
           * compiled({ 'user': 'barney' });
           * // => 'hello barney!'
           *
           * // Use the ES template literal delimiter as an "interpolate" delimiter.
           * // Disable support by replacing the "interpolate" delimiter.
           * var compiled = _.template('hello ${ user }!');
           * compiled({ 'user': 'pebbles' });
           * // => 'hello pebbles!'
           *
           * // Use backslashes to treat delimiters as plain text.
           * var compiled = _.template('<%= "\\<%- value %\\>" %>');
           * compiled({ 'value': 'ignored' });
           * // => '<%- value %>'
           *
           * // Use the `imports` option to import `jQuery` as `jq`.
           * var text = '<% jq.each(users, function(user) { %><li><%- user %></li><% }); %>';
           * var compiled = _.template(text, { 'imports': { 'jq': jQuery } });
           * compiled({ 'users': ['fred', 'barney'] });
           * // => '<li>fred</li><li>barney</li>'
           *
           * // Use the `sourceURL` option to specify a custom sourceURL for the template.
           * var compiled = _.template('hello <%= user %>!', { 'sourceURL': '/basic/greeting.jst' });
           * compiled(data);
           * // => Find the source of "greeting.jst" under the Sources tab or Resources panel of the web inspector.
           *
           * // Use the `variable` option to ensure a with-statement isn't used in the compiled template.
           * var compiled = _.template('hi <%= data.user %>!', { 'variable': 'data' });
           * compiled.source;
           * // => function(data) {
           * //   var __t, __p = '';
           * //   __p += 'hi ' + ((__t = ( data.user )) == null ? '' : __t) + '!';
           * //   return __p;
           * // }
           *
           * // Use custom template delimiters.
           * _.templateSettings.interpolate = /{{([\s\S]+?)}}/g;
           * var compiled = _.template('hello {{ user }}!');
           * compiled({ 'user': 'mustache' });
           * // => 'hello mustache!'
           *
           * // Use the `source` property to inline compiled templates for meaningful
           * // line numbers in error messages and stack traces.
           * fs.writeFileSync(path.join(process.cwd(), 'jst.js'), '\
           *   var JST = {\
           *     "main": ' + _.template(mainText).source + '\
           *   };\
           * ');
           */


          function template(string, options, guard) {
            // Based on John Resig's `tmpl` implementation
            // (http://ejohn.org/blog/javascript-micro-templating/)
            // and Laura Doktorova's doT.js (https://github.com/olado/doT).
            var settings = lodash.templateSettings;

            if (guard && isIterateeCall(string, options, guard)) {
              options = undefined;
            }

            string = toString(string);
            options = assignInWith({}, options, settings, customDefaultsAssignIn);
            var imports = assignInWith({}, options.imports, settings.imports, customDefaultsAssignIn),
                importsKeys = keys(imports),
                importsValues = baseValues(imports, importsKeys);
            var isEscaping,
                isEvaluating,
                index = 0,
                interpolate = options.interpolate || reNoMatch,
                source = "__p += '"; // Compile the regexp to match each delimiter.

            var reDelimiters = RegExp((options.escape || reNoMatch).source + '|' + interpolate.source + '|' + (interpolate === reInterpolate ? reEsTemplate : reNoMatch).source + '|' + (options.evaluate || reNoMatch).source + '|$', 'g'); // Use a sourceURL for easier debugging.
            // The sourceURL gets injected into the source that's eval-ed, so be careful
            // to normalize all kinds of whitespace, so e.g. newlines (and unicode versions of it) can't sneak in
            // and escape the comment, thus injecting code that gets evaled.

            var sourceURL = '//# sourceURL=' + (hasOwnProperty.call(options, 'sourceURL') ? (options.sourceURL + '').replace(/\s/g, ' ') : 'lodash.templateSources[' + ++templateCounter + ']') + '\n';
            string.replace(reDelimiters, function (match, escapeValue, interpolateValue, esTemplateValue, evaluateValue, offset) {
              interpolateValue || (interpolateValue = esTemplateValue); // Escape characters that can't be included in string literals.

              source += string.slice(index, offset).replace(reUnescapedString, escapeStringChar); // Replace delimiters with snippets.

              if (escapeValue) {
                isEscaping = true;
                source += "' +\n__e(" + escapeValue + ") +\n'";
              }

              if (evaluateValue) {
                isEvaluating = true;
                source += "';\n" + evaluateValue + ";\n__p += '";
              }

              if (interpolateValue) {
                source += "' +\n((__t = (" + interpolateValue + ")) == null ? '' : __t) +\n'";
              }

              index = offset + match.length; // The JS engine embedded in Adobe products needs `match` returned in
              // order to produce the correct `offset` value.

              return match;
            });
            source += "';\n"; // If `variable` is not specified wrap a with-statement around the generated
            // code to add the data object to the top of the scope chain.

            var variable = hasOwnProperty.call(options, 'variable') && options.variable;

            if (!variable) {
              source = 'with (obj) {\n' + source + '\n}\n';
            } // Throw an error if a forbidden character was found in `variable`, to prevent
            // potential command injection attacks.
            else if (reForbiddenIdentifierChars.test(variable)) {
              throw new Error(INVALID_TEMPL_VAR_ERROR_TEXT);
            } // Cleanup code by stripping empty strings.


            source = (isEvaluating ? source.replace(reEmptyStringLeading, '') : source).replace(reEmptyStringMiddle, '$1').replace(reEmptyStringTrailing, '$1;'); // Frame code as the function body.

            source = 'function(' + (variable || 'obj') + ') {\n' + (variable ? '' : 'obj || (obj = {});\n') + "var __t, __p = ''" + (isEscaping ? ', __e = _.escape' : '') + (isEvaluating ? ', __j = Array.prototype.join;\n' + "function print() { __p += __j.call(arguments, '') }\n" : ';\n') + source + 'return __p\n}';
            var result = attempt(function () {
              return Function(importsKeys, sourceURL + 'return ' + source).apply(undefined, importsValues);
            }); // Provide the compiled function's source by its `toString` method or
            // the `source` property as a convenience for inlining compiled templates.

            result.source = source;

            if (isError(result)) {
              throw result;
            }

            return result;
          }
          /**
           * Converts `string`, as a whole, to lower case just like
           * [String#toLowerCase](https://mdn.io/toLowerCase).
           *
           * @static
           * @memberOf _
           * @since 4.0.0
           * @category String
           * @param {string} [string=''] The string to convert.
           * @returns {string} Returns the lower cased string.
           * @example
           *
           * _.toLower('--Foo-Bar--');
           * // => '--foo-bar--'
           *
           * _.toLower('fooBar');
           * // => 'foobar'
           *
           * _.toLower('__FOO_BAR__');
           * // => '__foo_bar__'
           */


          function toLower(value) {
            return toString(value).toLowerCase();
          }
          /**
           * Converts `string`, as a whole, to upper case just like
           * [String#toUpperCase](https://mdn.io/toUpperCase).
           *
           * @static
           * @memberOf _
           * @since 4.0.0
           * @category String
           * @param {string} [string=''] The string to convert.
           * @returns {string} Returns the upper cased string.
           * @example
           *
           * _.toUpper('--foo-bar--');
           * // => '--FOO-BAR--'
           *
           * _.toUpper('fooBar');
           * // => 'FOOBAR'
           *
           * _.toUpper('__foo_bar__');
           * // => '__FOO_BAR__'
           */


          function toUpper(value) {
            return toString(value).toUpperCase();
          }
          /**
           * Removes leading and trailing whitespace or specified characters from `string`.
           *
           * @static
           * @memberOf _
           * @since 3.0.0
           * @category String
           * @param {string} [string=''] The string to trim.
           * @param {string} [chars=whitespace] The characters to trim.
           * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
           * @returns {string} Returns the trimmed string.
           * @example
           *
           * _.trim('  abc  ');
           * // => 'abc'
           *
           * _.trim('-_-abc-_-', '_-');
           * // => 'abc'
           *
           * _.map(['  foo  ', '  bar  '], _.trim);
           * // => ['foo', 'bar']
           */


          function trim(string, chars, guard) {
            string = toString(string);

            if (string && (guard || chars === undefined)) {
              return baseTrim(string);
            }

            if (!string || !(chars = baseToString(chars))) {
              return string;
            }

            var strSymbols = stringToArray(string),
                chrSymbols = stringToArray(chars),
                start = charsStartIndex(strSymbols, chrSymbols),
                end = charsEndIndex(strSymbols, chrSymbols) + 1;
            return castSlice(strSymbols, start, end).join('');
          }
          /**
           * Removes trailing whitespace or specified characters from `string`.
           *
           * @static
           * @memberOf _
           * @since 4.0.0
           * @category String
           * @param {string} [string=''] The string to trim.
           * @param {string} [chars=whitespace] The characters to trim.
           * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
           * @returns {string} Returns the trimmed string.
           * @example
           *
           * _.trimEnd('  abc  ');
           * // => '  abc'
           *
           * _.trimEnd('-_-abc-_-', '_-');
           * // => '-_-abc'
           */


          function trimEnd(string, chars, guard) {
            string = toString(string);

            if (string && (guard || chars === undefined)) {
              return string.slice(0, trimmedEndIndex(string) + 1);
            }

            if (!string || !(chars = baseToString(chars))) {
              return string;
            }

            var strSymbols = stringToArray(string),
                end = charsEndIndex(strSymbols, stringToArray(chars)) + 1;
            return castSlice(strSymbols, 0, end).join('');
          }
          /**
           * Removes leading whitespace or specified characters from `string`.
           *
           * @static
           * @memberOf _
           * @since 4.0.0
           * @category String
           * @param {string} [string=''] The string to trim.
           * @param {string} [chars=whitespace] The characters to trim.
           * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
           * @returns {string} Returns the trimmed string.
           * @example
           *
           * _.trimStart('  abc  ');
           * // => 'abc  '
           *
           * _.trimStart('-_-abc-_-', '_-');
           * // => 'abc-_-'
           */


          function trimStart(string, chars, guard) {
            string = toString(string);

            if (string && (guard || chars === undefined)) {
              return string.replace(reTrimStart, '');
            }

            if (!string || !(chars = baseToString(chars))) {
              return string;
            }

            var strSymbols = stringToArray(string),
                start = charsStartIndex(strSymbols, stringToArray(chars));
            return castSlice(strSymbols, start).join('');
          }
          /**
           * Truncates `string` if it's longer than the given maximum string length.
           * The last characters of the truncated string are replaced with the omission
           * string which defaults to "...".
           *
           * @static
           * @memberOf _
           * @since 4.0.0
           * @category String
           * @param {string} [string=''] The string to truncate.
           * @param {Object} [options={}] The options object.
           * @param {number} [options.length=30] The maximum string length.
           * @param {string} [options.omission='...'] The string to indicate text is omitted.
           * @param {RegExp|string} [options.separator] The separator pattern to truncate to.
           * @returns {string} Returns the truncated string.
           * @example
           *
           * _.truncate('hi-diddly-ho there, neighborino');
           * // => 'hi-diddly-ho there, neighbo...'
           *
           * _.truncate('hi-diddly-ho there, neighborino', {
           *   'length': 24,
           *   'separator': ' '
           * });
           * // => 'hi-diddly-ho there,...'
           *
           * _.truncate('hi-diddly-ho there, neighborino', {
           *   'length': 24,
           *   'separator': /,? +/
           * });
           * // => 'hi-diddly-ho there...'
           *
           * _.truncate('hi-diddly-ho there, neighborino', {
           *   'omission': ' [...]'
           * });
           * // => 'hi-diddly-ho there, neig [...]'
           */


          function truncate(string, options) {
            var length = DEFAULT_TRUNC_LENGTH,
                omission = DEFAULT_TRUNC_OMISSION;

            if (isObject(options)) {
              var separator = 'separator' in options ? options.separator : separator;
              length = 'length' in options ? toInteger(options.length) : length;
              omission = 'omission' in options ? baseToString(options.omission) : omission;
            }

            string = toString(string);
            var strLength = string.length;

            if (hasUnicode(string)) {
              var strSymbols = stringToArray(string);
              strLength = strSymbols.length;
            }

            if (length >= strLength) {
              return string;
            }

            var end = length - stringSize(omission);

            if (end < 1) {
              return omission;
            }

            var result = strSymbols ? castSlice(strSymbols, 0, end).join('') : string.slice(0, end);

            if (separator === undefined) {
              return result + omission;
            }

            if (strSymbols) {
              end += result.length - end;
            }

            if (isRegExp(separator)) {
              if (string.slice(end).search(separator)) {
                var match,
                    substring = result;

                if (!separator.global) {
                  separator = RegExp(separator.source, toString(reFlags.exec(separator)) + 'g');
                }

                separator.lastIndex = 0;

                while (match = separator.exec(substring)) {
                  var newEnd = match.index;
                }

                result = result.slice(0, newEnd === undefined ? end : newEnd);
              }
            } else if (string.indexOf(baseToString(separator), end) != end) {
              var index = result.lastIndexOf(separator);

              if (index > -1) {
                result = result.slice(0, index);
              }
            }

            return result + omission;
          }
          /**
           * The inverse of `_.escape`; this method converts the HTML entities
           * `&amp;`, `&lt;`, `&gt;`, `&quot;`, and `&#39;` in `string` to
           * their corresponding characters.
           *
           * **Note:** No other HTML entities are unescaped. To unescape additional
           * HTML entities use a third-party library like [_he_](https://mths.be/he).
           *
           * @static
           * @memberOf _
           * @since 0.6.0
           * @category String
           * @param {string} [string=''] The string to unescape.
           * @returns {string} Returns the unescaped string.
           * @example
           *
           * _.unescape('fred, barney, &amp; pebbles');
           * // => 'fred, barney, & pebbles'
           */


          function unescape(string) {
            string = toString(string);
            return string && reHasEscapedHtml.test(string) ? string.replace(reEscapedHtml, unescapeHtmlChar) : string;
          }
          /**
           * Converts `string`, as space separated words, to upper case.
           *
           * @static
           * @memberOf _
           * @since 4.0.0
           * @category String
           * @param {string} [string=''] The string to convert.
           * @returns {string} Returns the upper cased string.
           * @example
           *
           * _.upperCase('--foo-bar');
           * // => 'FOO BAR'
           *
           * _.upperCase('fooBar');
           * // => 'FOO BAR'
           *
           * _.upperCase('__foo_bar__');
           * // => 'FOO BAR'
           */


          var upperCase = createCompounder(function (result, word, index) {
            return result + (index ? ' ' : '') + word.toUpperCase();
          });
          /**
           * Converts the first character of `string` to upper case.
           *
           * @static
           * @memberOf _
           * @since 4.0.0
           * @category String
           * @param {string} [string=''] The string to convert.
           * @returns {string} Returns the converted string.
           * @example
           *
           * _.upperFirst('fred');
           * // => 'Fred'
           *
           * _.upperFirst('FRED');
           * // => 'FRED'
           */

          var upperFirst = createCaseFirst('toUpperCase');
          /**
           * Splits `string` into an array of its words.
           *
           * @static
           * @memberOf _
           * @since 3.0.0
           * @category String
           * @param {string} [string=''] The string to inspect.
           * @param {RegExp|string} [pattern] The pattern to match words.
           * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
           * @returns {Array} Returns the words of `string`.
           * @example
           *
           * _.words('fred, barney, & pebbles');
           * // => ['fred', 'barney', 'pebbles']
           *
           * _.words('fred, barney, & pebbles', /[^, ]+/g);
           * // => ['fred', 'barney', '&', 'pebbles']
           */

          function words(string, pattern, guard) {
            string = toString(string);
            pattern = guard ? undefined : pattern;

            if (pattern === undefined) {
              return hasUnicodeWord(string) ? unicodeWords(string) : asciiWords(string);
            }

            return string.match(pattern) || [];
          }
          /*------------------------------------------------------------------------*/

          /**
           * Attempts to invoke `func`, returning either the result or the caught error
           * object. Any additional arguments are provided to `func` when it's invoked.
           *
           * @static
           * @memberOf _
           * @since 3.0.0
           * @category Util
           * @param {Function} func The function to attempt.
           * @param {...*} [args] The arguments to invoke `func` with.
           * @returns {*} Returns the `func` result or error object.
           * @example
           *
           * // Avoid throwing errors for invalid selectors.
           * var elements = _.attempt(function(selector) {
           *   return document.querySelectorAll(selector);
           * }, '>_>');
           *
           * if (_.isError(elements)) {
           *   elements = [];
           * }
           */


          var attempt = baseRest(function (func, args) {
            try {
              return apply(func, undefined, args);
            } catch (e) {
              return isError(e) ? e : new Error(e);
            }
          });
          /**
           * Binds methods of an object to the object itself, overwriting the existing
           * method.
           *
           * **Note:** This method doesn't set the "length" property of bound functions.
           *
           * @static
           * @since 0.1.0
           * @memberOf _
           * @category Util
           * @param {Object} object The object to bind and assign the bound methods to.
           * @param {...(string|string[])} methodNames The object method names to bind.
           * @returns {Object} Returns `object`.
           * @example
           *
           * var view = {
           *   'label': 'docs',
           *   'click': function() {
           *     console.log('clicked ' + this.label);
           *   }
           * };
           *
           * _.bindAll(view, ['click']);
           * jQuery(element).on('click', view.click);
           * // => Logs 'clicked docs' when clicked.
           */

          var bindAll = flatRest(function (object, methodNames) {
            arrayEach(methodNames, function (key) {
              key = toKey(key);
              baseAssignValue(object, key, bind(object[key], object));
            });
            return object;
          });
          /**
           * Creates a function that iterates over `pairs` and invokes the corresponding
           * function of the first predicate to return truthy. The predicate-function
           * pairs are invoked with the `this` binding and arguments of the created
           * function.
           *
           * @static
           * @memberOf _
           * @since 4.0.0
           * @category Util
           * @param {Array} pairs The predicate-function pairs.
           * @returns {Function} Returns the new composite function.
           * @example
           *
           * var func = _.cond([
           *   [_.matches({ 'a': 1 }),           _.constant('matches A')],
           *   [_.conforms({ 'b': _.isNumber }), _.constant('matches B')],
           *   [_.stubTrue,                      _.constant('no match')]
           * ]);
           *
           * func({ 'a': 1, 'b': 2 });
           * // => 'matches A'
           *
           * func({ 'a': 0, 'b': 1 });
           * // => 'matches B'
           *
           * func({ 'a': '1', 'b': '2' });
           * // => 'no match'
           */

          function cond(pairs) {
            var length = pairs == null ? 0 : pairs.length,
                toIteratee = getIteratee();
            pairs = !length ? [] : arrayMap(pairs, function (pair) {
              if (typeof pair[1] != 'function') {
                throw new TypeError(FUNC_ERROR_TEXT);
              }

              return [toIteratee(pair[0]), pair[1]];
            });
            return baseRest(function (args) {
              var index = -1;

              while (++index < length) {
                var pair = pairs[index];

                if (apply(pair[0], this, args)) {
                  return apply(pair[1], this, args);
                }
              }
            });
          }
          /**
           * Creates a function that invokes the predicate properties of `source` with
           * the corresponding property values of a given object, returning `true` if
           * all predicates return truthy, else `false`.
           *
           * **Note:** The created function is equivalent to `_.conformsTo` with
           * `source` partially applied.
           *
           * @static
           * @memberOf _
           * @since 4.0.0
           * @category Util
           * @param {Object} source The object of property predicates to conform to.
           * @returns {Function} Returns the new spec function.
           * @example
           *
           * var objects = [
           *   { 'a': 2, 'b': 1 },
           *   { 'a': 1, 'b': 2 }
           * ];
           *
           * _.filter(objects, _.conforms({ 'b': function(n) { return n > 1; } }));
           * // => [{ 'a': 1, 'b': 2 }]
           */


          function conforms(source) {
            return baseConforms(baseClone(source, CLONE_DEEP_FLAG));
          }
          /**
           * Creates a function that returns `value`.
           *
           * @static
           * @memberOf _
           * @since 2.4.0
           * @category Util
           * @param {*} value The value to return from the new function.
           * @returns {Function} Returns the new constant function.
           * @example
           *
           * var objects = _.times(2, _.constant({ 'a': 1 }));
           *
           * console.log(objects);
           * // => [{ 'a': 1 }, { 'a': 1 }]
           *
           * console.log(objects[0] === objects[1]);
           * // => true
           */


          function constant(value) {
            return function () {
              return value;
            };
          }
          /**
           * Checks `value` to determine whether a default value should be returned in
           * its place. The `defaultValue` is returned if `value` is `NaN`, `null`,
           * or `undefined`.
           *
           * @static
           * @memberOf _
           * @since 4.14.0
           * @category Util
           * @param {*} value The value to check.
           * @param {*} defaultValue The default value.
           * @returns {*} Returns the resolved value.
           * @example
           *
           * _.defaultTo(1, 10);
           * // => 1
           *
           * _.defaultTo(undefined, 10);
           * // => 10
           */


          function defaultTo(value, defaultValue) {
            return value == null || value !== value ? defaultValue : value;
          }
          /**
           * Creates a function that returns the result of invoking the given functions
           * with the `this` binding of the created function, where each successive
           * invocation is supplied the return value of the previous.
           *
           * @static
           * @memberOf _
           * @since 3.0.0
           * @category Util
           * @param {...(Function|Function[])} [funcs] The functions to invoke.
           * @returns {Function} Returns the new composite function.
           * @see _.flowRight
           * @example
           *
           * function square(n) {
           *   return n * n;
           * }
           *
           * var addSquare = _.flow([_.add, square]);
           * addSquare(1, 2);
           * // => 9
           */


          var flow = createFlow();
          /**
           * This method is like `_.flow` except that it creates a function that
           * invokes the given functions from right to left.
           *
           * @static
           * @since 3.0.0
           * @memberOf _
           * @category Util
           * @param {...(Function|Function[])} [funcs] The functions to invoke.
           * @returns {Function} Returns the new composite function.
           * @see _.flow
           * @example
           *
           * function square(n) {
           *   return n * n;
           * }
           *
           * var addSquare = _.flowRight([square, _.add]);
           * addSquare(1, 2);
           * // => 9
           */

          var flowRight = createFlow(true);
          /**
           * This method returns the first argument it receives.
           *
           * @static
           * @since 0.1.0
           * @memberOf _
           * @category Util
           * @param {*} value Any value.
           * @returns {*} Returns `value`.
           * @example
           *
           * var object = { 'a': 1 };
           *
           * console.log(_.identity(object) === object);
           * // => true
           */

          function identity(value) {
            return value;
          }
          /**
           * Creates a function that invokes `func` with the arguments of the created
           * function. If `func` is a property name, the created function returns the
           * property value for a given element. If `func` is an array or object, the
           * created function returns `true` for elements that contain the equivalent
           * source properties, otherwise it returns `false`.
           *
           * @static
           * @since 4.0.0
           * @memberOf _
           * @category Util
           * @param {*} [func=_.identity] The value to convert to a callback.
           * @returns {Function} Returns the callback.
           * @example
           *
           * var users = [
           *   { 'user': 'barney', 'age': 36, 'active': true },
           *   { 'user': 'fred',   'age': 40, 'active': false }
           * ];
           *
           * // The `_.matches` iteratee shorthand.
           * _.filter(users, _.iteratee({ 'user': 'barney', 'active': true }));
           * // => [{ 'user': 'barney', 'age': 36, 'active': true }]
           *
           * // The `_.matchesProperty` iteratee shorthand.
           * _.filter(users, _.iteratee(['user', 'fred']));
           * // => [{ 'user': 'fred', 'age': 40 }]
           *
           * // The `_.property` iteratee shorthand.
           * _.map(users, _.iteratee('user'));
           * // => ['barney', 'fred']
           *
           * // Create custom iteratee shorthands.
           * _.iteratee = _.wrap(_.iteratee, function(iteratee, func) {
           *   return !_.isRegExp(func) ? iteratee(func) : function(string) {
           *     return func.test(string);
           *   };
           * });
           *
           * _.filter(['abc', 'def'], /ef/);
           * // => ['def']
           */


          function iteratee(func) {
            return baseIteratee(typeof func == 'function' ? func : baseClone(func, CLONE_DEEP_FLAG));
          }
          /**
           * Creates a function that performs a partial deep comparison between a given
           * object and `source`, returning `true` if the given object has equivalent
           * property values, else `false`.
           *
           * **Note:** The created function is equivalent to `_.isMatch` with `source`
           * partially applied.
           *
           * Partial comparisons will match empty array and empty object `source`
           * values against any array or object value, respectively. See `_.isEqual`
           * for a list of supported value comparisons.
           *
           * **Note:** Multiple values can be checked by combining several matchers
           * using `_.overSome`
           *
           * @static
           * @memberOf _
           * @since 3.0.0
           * @category Util
           * @param {Object} source The object of property values to match.
           * @returns {Function} Returns the new spec function.
           * @example
           *
           * var objects = [
           *   { 'a': 1, 'b': 2, 'c': 3 },
           *   { 'a': 4, 'b': 5, 'c': 6 }
           * ];
           *
           * _.filter(objects, _.matches({ 'a': 4, 'c': 6 }));
           * // => [{ 'a': 4, 'b': 5, 'c': 6 }]
           *
           * // Checking for several possible values
           * _.filter(objects, _.overSome([_.matches({ 'a': 1 }), _.matches({ 'a': 4 })]));
           * // => [{ 'a': 1, 'b': 2, 'c': 3 }, { 'a': 4, 'b': 5, 'c': 6 }]
           */


          function matches(source) {
            return baseMatches(baseClone(source, CLONE_DEEP_FLAG));
          }
          /**
           * Creates a function that performs a partial deep comparison between the
           * value at `path` of a given object to `srcValue`, returning `true` if the
           * object value is equivalent, else `false`.
           *
           * **Note:** Partial comparisons will match empty array and empty object
           * `srcValue` values against any array or object value, respectively. See
           * `_.isEqual` for a list of supported value comparisons.
           *
           * **Note:** Multiple values can be checked by combining several matchers
           * using `_.overSome`
           *
           * @static
           * @memberOf _
           * @since 3.2.0
           * @category Util
           * @param {Array|string} path The path of the property to get.
           * @param {*} srcValue The value to match.
           * @returns {Function} Returns the new spec function.
           * @example
           *
           * var objects = [
           *   { 'a': 1, 'b': 2, 'c': 3 },
           *   { 'a': 4, 'b': 5, 'c': 6 }
           * ];
           *
           * _.find(objects, _.matchesProperty('a', 4));
           * // => { 'a': 4, 'b': 5, 'c': 6 }
           *
           * // Checking for several possible values
           * _.filter(objects, _.overSome([_.matchesProperty('a', 1), _.matchesProperty('a', 4)]));
           * // => [{ 'a': 1, 'b': 2, 'c': 3 }, { 'a': 4, 'b': 5, 'c': 6 }]
           */


          function matchesProperty(path, srcValue) {
            return baseMatchesProperty(path, baseClone(srcValue, CLONE_DEEP_FLAG));
          }
          /**
           * Creates a function that invokes the method at `path` of a given object.
           * Any additional arguments are provided to the invoked method.
           *
           * @static
           * @memberOf _
           * @since 3.7.0
           * @category Util
           * @param {Array|string} path The path of the method to invoke.
           * @param {...*} [args] The arguments to invoke the method with.
           * @returns {Function} Returns the new invoker function.
           * @example
           *
           * var objects = [
           *   { 'a': { 'b': _.constant(2) } },
           *   { 'a': { 'b': _.constant(1) } }
           * ];
           *
           * _.map(objects, _.method('a.b'));
           * // => [2, 1]
           *
           * _.map(objects, _.method(['a', 'b']));
           * // => [2, 1]
           */


          var method = baseRest(function (path, args) {
            return function (object) {
              return baseInvoke(object, path, args);
            };
          });
          /**
           * The opposite of `_.method`; this method creates a function that invokes
           * the method at a given path of `object`. Any additional arguments are
           * provided to the invoked method.
           *
           * @static
           * @memberOf _
           * @since 3.7.0
           * @category Util
           * @param {Object} object The object to query.
           * @param {...*} [args] The arguments to invoke the method with.
           * @returns {Function} Returns the new invoker function.
           * @example
           *
           * var array = _.times(3, _.constant),
           *     object = { 'a': array, 'b': array, 'c': array };
           *
           * _.map(['a[2]', 'c[0]'], _.methodOf(object));
           * // => [2, 0]
           *
           * _.map([['a', '2'], ['c', '0']], _.methodOf(object));
           * // => [2, 0]
           */

          var methodOf = baseRest(function (object, args) {
            return function (path) {
              return baseInvoke(object, path, args);
            };
          });
          /**
           * Adds all own enumerable string keyed function properties of a source
           * object to the destination object. If `object` is a function, then methods
           * are added to its prototype as well.
           *
           * **Note:** Use `_.runInContext` to create a pristine `lodash` function to
           * avoid conflicts caused by modifying the original.
           *
           * @static
           * @since 0.1.0
           * @memberOf _
           * @category Util
           * @param {Function|Object} [object=lodash] The destination object.
           * @param {Object} source The object of functions to add.
           * @param {Object} [options={}] The options object.
           * @param {boolean} [options.chain=true] Specify whether mixins are chainable.
           * @returns {Function|Object} Returns `object`.
           * @example
           *
           * function vowels(string) {
           *   return _.filter(string, function(v) {
           *     return /[aeiou]/i.test(v);
           *   });
           * }
           *
           * _.mixin({ 'vowels': vowels });
           * _.vowels('fred');
           * // => ['e']
           *
           * _('fred').vowels().value();
           * // => ['e']
           *
           * _.mixin({ 'vowels': vowels }, { 'chain': false });
           * _('fred').vowels();
           * // => ['e']
           */

          function mixin(object, source, options) {
            var props = keys(source),
                methodNames = baseFunctions(source, props);

            if (options == null && !(isObject(source) && (methodNames.length || !props.length))) {
              options = source;
              source = object;
              object = this;
              methodNames = baseFunctions(source, keys(source));
            }

            var chain = !(isObject(options) && 'chain' in options) || !!options.chain,
                isFunc = isFunction(object);
            arrayEach(methodNames, function (methodName) {
              var func = source[methodName];
              object[methodName] = func;

              if (isFunc) {
                object.prototype[methodName] = function () {
                  var chainAll = this.__chain__;

                  if (chain || chainAll) {
                    var result = object(this.__wrapped__),
                        actions = result.__actions__ = copyArray(this.__actions__);
                    actions.push({
                      'func': func,
                      'args': arguments,
                      'thisArg': object
                    });
                    result.__chain__ = chainAll;
                    return result;
                  }

                  return func.apply(object, arrayPush([this.value()], arguments));
                };
              }
            });
            return object;
          }
          /**
           * Reverts the `_` variable to its previous value and returns a reference to
           * the `lodash` function.
           *
           * @static
           * @since 0.1.0
           * @memberOf _
           * @category Util
           * @returns {Function} Returns the `lodash` function.
           * @example
           *
           * var lodash = _.noConflict();
           */


          function noConflict() {
            if (root._ === this) {
              root._ = oldDash;
            }

            return this;
          }
          /**
           * This method returns `undefined`.
           *
           * @static
           * @memberOf _
           * @since 2.3.0
           * @category Util
           * @example
           *
           * _.times(2, _.noop);
           * // => [undefined, undefined]
           */


          function noop() {// No operation performed.
          }
          /**
           * Creates a function that gets the argument at index `n`. If `n` is negative,
           * the nth argument from the end is returned.
           *
           * @static
           * @memberOf _
           * @since 4.0.0
           * @category Util
           * @param {number} [n=0] The index of the argument to return.
           * @returns {Function} Returns the new pass-thru function.
           * @example
           *
           * var func = _.nthArg(1);
           * func('a', 'b', 'c', 'd');
           * // => 'b'
           *
           * var func = _.nthArg(-2);
           * func('a', 'b', 'c', 'd');
           * // => 'c'
           */


          function nthArg(n) {
            n = toInteger(n);
            return baseRest(function (args) {
              return baseNth(args, n);
            });
          }
          /**
           * Creates a function that invokes `iteratees` with the arguments it receives
           * and returns their results.
           *
           * @static
           * @memberOf _
           * @since 4.0.0
           * @category Util
           * @param {...(Function|Function[])} [iteratees=[_.identity]]
           *  The iteratees to invoke.
           * @returns {Function} Returns the new function.
           * @example
           *
           * var func = _.over([Math.max, Math.min]);
           *
           * func(1, 2, 3, 4);
           * // => [4, 1]
           */


          var over = createOver(arrayMap);
          /**
           * Creates a function that checks if **all** of the `predicates` return
           * truthy when invoked with the arguments it receives.
           *
           * Following shorthands are possible for providing predicates.
           * Pass an `Object` and it will be used as an parameter for `_.matches` to create the predicate.
           * Pass an `Array` of parameters for `_.matchesProperty` and the predicate will be created using them.
           *
           * @static
           * @memberOf _
           * @since 4.0.0
           * @category Util
           * @param {...(Function|Function[])} [predicates=[_.identity]]
           *  The predicates to check.
           * @returns {Function} Returns the new function.
           * @example
           *
           * var func = _.overEvery([Boolean, isFinite]);
           *
           * func('1');
           * // => true
           *
           * func(null);
           * // => false
           *
           * func(NaN);
           * // => false
           */

          var overEvery = createOver(arrayEvery);
          /**
           * Creates a function that checks if **any** of the `predicates` return
           * truthy when invoked with the arguments it receives.
           *
           * Following shorthands are possible for providing predicates.
           * Pass an `Object` and it will be used as an parameter for `_.matches` to create the predicate.
           * Pass an `Array` of parameters for `_.matchesProperty` and the predicate will be created using them.
           *
           * @static
           * @memberOf _
           * @since 4.0.0
           * @category Util
           * @param {...(Function|Function[])} [predicates=[_.identity]]
           *  The predicates to check.
           * @returns {Function} Returns the new function.
           * @example
           *
           * var func = _.overSome([Boolean, isFinite]);
           *
           * func('1');
           * // => true
           *
           * func(null);
           * // => true
           *
           * func(NaN);
           * // => false
           *
           * var matchesFunc = _.overSome([{ 'a': 1 }, { 'a': 2 }])
           * var matchesPropertyFunc = _.overSome([['a', 1], ['a', 2]])
           */

          var overSome = createOver(arraySome);
          /**
           * Creates a function that returns the value at `path` of a given object.
           *
           * @static
           * @memberOf _
           * @since 2.4.0
           * @category Util
           * @param {Array|string} path The path of the property to get.
           * @returns {Function} Returns the new accessor function.
           * @example
           *
           * var objects = [
           *   { 'a': { 'b': 2 } },
           *   { 'a': { 'b': 1 } }
           * ];
           *
           * _.map(objects, _.property('a.b'));
           * // => [2, 1]
           *
           * _.map(_.sortBy(objects, _.property(['a', 'b'])), 'a.b');
           * // => [1, 2]
           */

          function property(path) {
            return isKey(path) ? baseProperty(toKey(path)) : basePropertyDeep(path);
          }
          /**
           * The opposite of `_.property`; this method creates a function that returns
           * the value at a given path of `object`.
           *
           * @static
           * @memberOf _
           * @since 3.0.0
           * @category Util
           * @param {Object} object The object to query.
           * @returns {Function} Returns the new accessor function.
           * @example
           *
           * var array = [0, 1, 2],
           *     object = { 'a': array, 'b': array, 'c': array };
           *
           * _.map(['a[2]', 'c[0]'], _.propertyOf(object));
           * // => [2, 0]
           *
           * _.map([['a', '2'], ['c', '0']], _.propertyOf(object));
           * // => [2, 0]
           */


          function propertyOf(object) {
            return function (path) {
              return object == null ? undefined : baseGet(object, path);
            };
          }
          /**
           * Creates an array of numbers (positive and/or negative) progressing from
           * `start` up to, but not including, `end`. A step of `-1` is used if a negative
           * `start` is specified without an `end` or `step`. If `end` is not specified,
           * it's set to `start` with `start` then set to `0`.
           *
           * **Note:** JavaScript follows the IEEE-754 standard for resolving
           * floating-point values which can produce unexpected results.
           *
           * @static
           * @since 0.1.0
           * @memberOf _
           * @category Util
           * @param {number} [start=0] The start of the range.
           * @param {number} end The end of the range.
           * @param {number} [step=1] The value to increment or decrement by.
           * @returns {Array} Returns the range of numbers.
           * @see _.inRange, _.rangeRight
           * @example
           *
           * _.range(4);
           * // => [0, 1, 2, 3]
           *
           * _.range(-4);
           * // => [0, -1, -2, -3]
           *
           * _.range(1, 5);
           * // => [1, 2, 3, 4]
           *
           * _.range(0, 20, 5);
           * // => [0, 5, 10, 15]
           *
           * _.range(0, -4, -1);
           * // => [0, -1, -2, -3]
           *
           * _.range(1, 4, 0);
           * // => [1, 1, 1]
           *
           * _.range(0);
           * // => []
           */


          var range = createRange();
          /**
           * This method is like `_.range` except that it populates values in
           * descending order.
           *
           * @static
           * @memberOf _
           * @since 4.0.0
           * @category Util
           * @param {number} [start=0] The start of the range.
           * @param {number} end The end of the range.
           * @param {number} [step=1] The value to increment or decrement by.
           * @returns {Array} Returns the range of numbers.
           * @see _.inRange, _.range
           * @example
           *
           * _.rangeRight(4);
           * // => [3, 2, 1, 0]
           *
           * _.rangeRight(-4);
           * // => [-3, -2, -1, 0]
           *
           * _.rangeRight(1, 5);
           * // => [4, 3, 2, 1]
           *
           * _.rangeRight(0, 20, 5);
           * // => [15, 10, 5, 0]
           *
           * _.rangeRight(0, -4, -1);
           * // => [-3, -2, -1, 0]
           *
           * _.rangeRight(1, 4, 0);
           * // => [1, 1, 1]
           *
           * _.rangeRight(0);
           * // => []
           */

          var rangeRight = createRange(true);
          /**
           * This method returns a new empty array.
           *
           * @static
           * @memberOf _
           * @since 4.13.0
           * @category Util
           * @returns {Array} Returns the new empty array.
           * @example
           *
           * var arrays = _.times(2, _.stubArray);
           *
           * console.log(arrays);
           * // => [[], []]
           *
           * console.log(arrays[0] === arrays[1]);
           * // => false
           */

          function stubArray() {
            return [];
          }
          /**
           * This method returns `false`.
           *
           * @static
           * @memberOf _
           * @since 4.13.0
           * @category Util
           * @returns {boolean} Returns `false`.
           * @example
           *
           * _.times(2, _.stubFalse);
           * // => [false, false]
           */


          function stubFalse() {
            return false;
          }
          /**
           * This method returns a new empty object.
           *
           * @static
           * @memberOf _
           * @since 4.13.0
           * @category Util
           * @returns {Object} Returns the new empty object.
           * @example
           *
           * var objects = _.times(2, _.stubObject);
           *
           * console.log(objects);
           * // => [{}, {}]
           *
           * console.log(objects[0] === objects[1]);
           * // => false
           */


          function stubObject() {
            return {};
          }
          /**
           * This method returns an empty string.
           *
           * @static
           * @memberOf _
           * @since 4.13.0
           * @category Util
           * @returns {string} Returns the empty string.
           * @example
           *
           * _.times(2, _.stubString);
           * // => ['', '']
           */


          function stubString() {
            return '';
          }
          /**
           * This method returns `true`.
           *
           * @static
           * @memberOf _
           * @since 4.13.0
           * @category Util
           * @returns {boolean} Returns `true`.
           * @example
           *
           * _.times(2, _.stubTrue);
           * // => [true, true]
           */


          function stubTrue() {
            return true;
          }
          /**
           * Invokes the iteratee `n` times, returning an array of the results of
           * each invocation. The iteratee is invoked with one argument; (index).
           *
           * @static
           * @since 0.1.0
           * @memberOf _
           * @category Util
           * @param {number} n The number of times to invoke `iteratee`.
           * @param {Function} [iteratee=_.identity] The function invoked per iteration.
           * @returns {Array} Returns the array of results.
           * @example
           *
           * _.times(3, String);
           * // => ['0', '1', '2']
           *
           *  _.times(4, _.constant(0));
           * // => [0, 0, 0, 0]
           */


          function times(n, iteratee) {
            n = toInteger(n);

            if (n < 1 || n > MAX_SAFE_INTEGER) {
              return [];
            }

            var index = MAX_ARRAY_LENGTH,
                length = nativeMin(n, MAX_ARRAY_LENGTH);
            iteratee = getIteratee(iteratee);
            n -= MAX_ARRAY_LENGTH;
            var result = baseTimes(length, iteratee);

            while (++index < n) {
              iteratee(index);
            }

            return result;
          }
          /**
           * Converts `value` to a property path array.
           *
           * @static
           * @memberOf _
           * @since 4.0.0
           * @category Util
           * @param {*} value The value to convert.
           * @returns {Array} Returns the new property path array.
           * @example
           *
           * _.toPath('a.b.c');
           * // => ['a', 'b', 'c']
           *
           * _.toPath('a[0].b.c');
           * // => ['a', '0', 'b', 'c']
           */


          function toPath(value) {
            if (isArray(value)) {
              return arrayMap(value, toKey);
            }

            return isSymbol(value) ? [value] : copyArray(stringToPath(toString(value)));
          }
          /**
           * Generates a unique ID. If `prefix` is given, the ID is appended to it.
           *
           * @static
           * @since 0.1.0
           * @memberOf _
           * @category Util
           * @param {string} [prefix=''] The value to prefix the ID with.
           * @returns {string} Returns the unique ID.
           * @example
           *
           * _.uniqueId('contact_');
           * // => 'contact_104'
           *
           * _.uniqueId();
           * // => '105'
           */


          function uniqueId(prefix) {
            var id = ++idCounter;
            return toString(prefix) + id;
          }
          /*------------------------------------------------------------------------*/

          /**
           * Adds two numbers.
           *
           * @static
           * @memberOf _
           * @since 3.4.0
           * @category Math
           * @param {number} augend The first number in an addition.
           * @param {number} addend The second number in an addition.
           * @returns {number} Returns the total.
           * @example
           *
           * _.add(6, 4);
           * // => 10
           */


          var add = createMathOperation(function (augend, addend) {
            return augend + addend;
          }, 0);
          /**
           * Computes `number` rounded up to `precision`.
           *
           * @static
           * @memberOf _
           * @since 3.10.0
           * @category Math
           * @param {number} number The number to round up.
           * @param {number} [precision=0] The precision to round up to.
           * @returns {number} Returns the rounded up number.
           * @example
           *
           * _.ceil(4.006);
           * // => 5
           *
           * _.ceil(6.004, 2);
           * // => 6.01
           *
           * _.ceil(6040, -2);
           * // => 6100
           */

          var ceil = createRound('ceil');
          /**
           * Divide two numbers.
           *
           * @static
           * @memberOf _
           * @since 4.7.0
           * @category Math
           * @param {number} dividend The first number in a division.
           * @param {number} divisor The second number in a division.
           * @returns {number} Returns the quotient.
           * @example
           *
           * _.divide(6, 4);
           * // => 1.5
           */

          var divide = createMathOperation(function (dividend, divisor) {
            return dividend / divisor;
          }, 1);
          /**
           * Computes `number` rounded down to `precision`.
           *
           * @static
           * @memberOf _
           * @since 3.10.0
           * @category Math
           * @param {number} number The number to round down.
           * @param {number} [precision=0] The precision to round down to.
           * @returns {number} Returns the rounded down number.
           * @example
           *
           * _.floor(4.006);
           * // => 4
           *
           * _.floor(0.046, 2);
           * // => 0.04
           *
           * _.floor(4060, -2);
           * // => 4000
           */

          var floor = createRound('floor');
          /**
           * Computes the maximum value of `array`. If `array` is empty or falsey,
           * `undefined` is returned.
           *
           * @static
           * @since 0.1.0
           * @memberOf _
           * @category Math
           * @param {Array} array The array to iterate over.
           * @returns {*} Returns the maximum value.
           * @example
           *
           * _.max([4, 2, 8, 6]);
           * // => 8
           *
           * _.max([]);
           * // => undefined
           */

          function max(array) {
            return array && array.length ? baseExtremum(array, identity, baseGt) : undefined;
          }
          /**
           * This method is like `_.max` except that it accepts `iteratee` which is
           * invoked for each element in `array` to generate the criterion by which
           * the value is ranked. The iteratee is invoked with one argument: (value).
           *
           * @static
           * @memberOf _
           * @since 4.0.0
           * @category Math
           * @param {Array} array The array to iterate over.
           * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
           * @returns {*} Returns the maximum value.
           * @example
           *
           * var objects = [{ 'n': 1 }, { 'n': 2 }];
           *
           * _.maxBy(objects, function(o) { return o.n; });
           * // => { 'n': 2 }
           *
           * // The `_.property` iteratee shorthand.
           * _.maxBy(objects, 'n');
           * // => { 'n': 2 }
           */


          function maxBy(array, iteratee) {
            return array && array.length ? baseExtremum(array, getIteratee(iteratee, 2), baseGt) : undefined;
          }
          /**
           * Computes the mean of the values in `array`.
           *
           * @static
           * @memberOf _
           * @since 4.0.0
           * @category Math
           * @param {Array} array The array to iterate over.
           * @returns {number} Returns the mean.
           * @example
           *
           * _.mean([4, 2, 8, 6]);
           * // => 5
           */


          function mean(array) {
            return baseMean(array, identity);
          }
          /**
           * This method is like `_.mean` except that it accepts `iteratee` which is
           * invoked for each element in `array` to generate the value to be averaged.
           * The iteratee is invoked with one argument: (value).
           *
           * @static
           * @memberOf _
           * @since 4.7.0
           * @category Math
           * @param {Array} array The array to iterate over.
           * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
           * @returns {number} Returns the mean.
           * @example
           *
           * var objects = [{ 'n': 4 }, { 'n': 2 }, { 'n': 8 }, { 'n': 6 }];
           *
           * _.meanBy(objects, function(o) { return o.n; });
           * // => 5
           *
           * // The `_.property` iteratee shorthand.
           * _.meanBy(objects, 'n');
           * // => 5
           */


          function meanBy(array, iteratee) {
            return baseMean(array, getIteratee(iteratee, 2));
          }
          /**
           * Computes the minimum value of `array`. If `array` is empty or falsey,
           * `undefined` is returned.
           *
           * @static
           * @since 0.1.0
           * @memberOf _
           * @category Math
           * @param {Array} array The array to iterate over.
           * @returns {*} Returns the minimum value.
           * @example
           *
           * _.min([4, 2, 8, 6]);
           * // => 2
           *
           * _.min([]);
           * // => undefined
           */


          function min(array) {
            return array && array.length ? baseExtremum(array, identity, baseLt) : undefined;
          }
          /**
           * This method is like `_.min` except that it accepts `iteratee` which is
           * invoked for each element in `array` to generate the criterion by which
           * the value is ranked. The iteratee is invoked with one argument: (value).
           *
           * @static
           * @memberOf _
           * @since 4.0.0
           * @category Math
           * @param {Array} array The array to iterate over.
           * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
           * @returns {*} Returns the minimum value.
           * @example
           *
           * var objects = [{ 'n': 1 }, { 'n': 2 }];
           *
           * _.minBy(objects, function(o) { return o.n; });
           * // => { 'n': 1 }
           *
           * // The `_.property` iteratee shorthand.
           * _.minBy(objects, 'n');
           * // => { 'n': 1 }
           */


          function minBy(array, iteratee) {
            return array && array.length ? baseExtremum(array, getIteratee(iteratee, 2), baseLt) : undefined;
          }
          /**
           * Multiply two numbers.
           *
           * @static
           * @memberOf _
           * @since 4.7.0
           * @category Math
           * @param {number} multiplier The first number in a multiplication.
           * @param {number} multiplicand The second number in a multiplication.
           * @returns {number} Returns the product.
           * @example
           *
           * _.multiply(6, 4);
           * // => 24
           */


          var multiply = createMathOperation(function (multiplier, multiplicand) {
            return multiplier * multiplicand;
          }, 1);
          /**
           * Computes `number` rounded to `precision`.
           *
           * @static
           * @memberOf _
           * @since 3.10.0
           * @category Math
           * @param {number} number The number to round.
           * @param {number} [precision=0] The precision to round to.
           * @returns {number} Returns the rounded number.
           * @example
           *
           * _.round(4.006);
           * // => 4
           *
           * _.round(4.006, 2);
           * // => 4.01
           *
           * _.round(4060, -2);
           * // => 4100
           */

          var round = createRound('round');
          /**
           * Subtract two numbers.
           *
           * @static
           * @memberOf _
           * @since 4.0.0
           * @category Math
           * @param {number} minuend The first number in a subtraction.
           * @param {number} subtrahend The second number in a subtraction.
           * @returns {number} Returns the difference.
           * @example
           *
           * _.subtract(6, 4);
           * // => 2
           */

          var subtract = createMathOperation(function (minuend, subtrahend) {
            return minuend - subtrahend;
          }, 0);
          /**
           * Computes the sum of the values in `array`.
           *
           * @static
           * @memberOf _
           * @since 3.4.0
           * @category Math
           * @param {Array} array The array to iterate over.
           * @returns {number} Returns the sum.
           * @example
           *
           * _.sum([4, 2, 8, 6]);
           * // => 20
           */

          function sum(array) {
            return array && array.length ? baseSum(array, identity) : 0;
          }
          /**
           * This method is like `_.sum` except that it accepts `iteratee` which is
           * invoked for each element in `array` to generate the value to be summed.
           * The iteratee is invoked with one argument: (value).
           *
           * @static
           * @memberOf _
           * @since 4.0.0
           * @category Math
           * @param {Array} array The array to iterate over.
           * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
           * @returns {number} Returns the sum.
           * @example
           *
           * var objects = [{ 'n': 4 }, { 'n': 2 }, { 'n': 8 }, { 'n': 6 }];
           *
           * _.sumBy(objects, function(o) { return o.n; });
           * // => 20
           *
           * // The `_.property` iteratee shorthand.
           * _.sumBy(objects, 'n');
           * // => 20
           */


          function sumBy(array, iteratee) {
            return array && array.length ? baseSum(array, getIteratee(iteratee, 2)) : 0;
          }
          /*------------------------------------------------------------------------*/
          // Add methods that return wrapped values in chain sequences.


          lodash.after = after;
          lodash.ary = ary;
          lodash.assign = assign;
          lodash.assignIn = assignIn;
          lodash.assignInWith = assignInWith;
          lodash.assignWith = assignWith;
          lodash.at = at;
          lodash.before = before;
          lodash.bind = bind;
          lodash.bindAll = bindAll;
          lodash.bindKey = bindKey;
          lodash.castArray = castArray;
          lodash.chain = chain;
          lodash.chunk = chunk;
          lodash.compact = compact;
          lodash.concat = concat;
          lodash.cond = cond;
          lodash.conforms = conforms;
          lodash.constant = constant;
          lodash.countBy = countBy;
          lodash.create = create;
          lodash.curry = curry;
          lodash.curryRight = curryRight;
          lodash.debounce = debounce;
          lodash.defaults = defaults;
          lodash.defaultsDeep = defaultsDeep;
          lodash.defer = defer;
          lodash.delay = delay;
          lodash.difference = difference;
          lodash.differenceBy = differenceBy;
          lodash.differenceWith = differenceWith;
          lodash.drop = drop;
          lodash.dropRight = dropRight;
          lodash.dropRightWhile = dropRightWhile;
          lodash.dropWhile = dropWhile;
          lodash.fill = fill;
          lodash.filter = filter;
          lodash.flatMap = flatMap;
          lodash.flatMapDeep = flatMapDeep;
          lodash.flatMapDepth = flatMapDepth;
          lodash.flatten = flatten;
          lodash.flattenDeep = flattenDeep;
          lodash.flattenDepth = flattenDepth;
          lodash.flip = flip;
          lodash.flow = flow;
          lodash.flowRight = flowRight;
          lodash.fromPairs = fromPairs;
          lodash.functions = functions;
          lodash.functionsIn = functionsIn;
          lodash.groupBy = groupBy;
          lodash.initial = initial;
          lodash.intersection = intersection;
          lodash.intersectionBy = intersectionBy;
          lodash.intersectionWith = intersectionWith;
          lodash.invert = invert;
          lodash.invertBy = invertBy;
          lodash.invokeMap = invokeMap;
          lodash.iteratee = iteratee;
          lodash.keyBy = keyBy;
          lodash.keys = keys;
          lodash.keysIn = keysIn;
          lodash.map = map;
          lodash.mapKeys = mapKeys;
          lodash.mapValues = mapValues;
          lodash.matches = matches;
          lodash.matchesProperty = matchesProperty;
          lodash.memoize = memoize;
          lodash.merge = merge;
          lodash.mergeWith = mergeWith;
          lodash.method = method;
          lodash.methodOf = methodOf;
          lodash.mixin = mixin;
          lodash.negate = negate;
          lodash.nthArg = nthArg;
          lodash.omit = omit;
          lodash.omitBy = omitBy;
          lodash.once = once;
          lodash.orderBy = orderBy;
          lodash.over = over;
          lodash.overArgs = overArgs;
          lodash.overEvery = overEvery;
          lodash.overSome = overSome;
          lodash.partial = partial;
          lodash.partialRight = partialRight;
          lodash.partition = partition;
          lodash.pick = pick;
          lodash.pickBy = pickBy;
          lodash.property = property;
          lodash.propertyOf = propertyOf;
          lodash.pull = pull;
          lodash.pullAll = pullAll;
          lodash.pullAllBy = pullAllBy;
          lodash.pullAllWith = pullAllWith;
          lodash.pullAt = pullAt;
          lodash.range = range;
          lodash.rangeRight = rangeRight;
          lodash.rearg = rearg;
          lodash.reject = reject;
          lodash.remove = remove;
          lodash.rest = rest;
          lodash.reverse = reverse;
          lodash.sampleSize = sampleSize;
          lodash.set = set;
          lodash.setWith = setWith;
          lodash.shuffle = shuffle;
          lodash.slice = slice;
          lodash.sortBy = sortBy;
          lodash.sortedUniq = sortedUniq;
          lodash.sortedUniqBy = sortedUniqBy;
          lodash.split = split;
          lodash.spread = spread;
          lodash.tail = tail;
          lodash.take = take;
          lodash.takeRight = takeRight;
          lodash.takeRightWhile = takeRightWhile;
          lodash.takeWhile = takeWhile;
          lodash.tap = tap;
          lodash.throttle = throttle;
          lodash.thru = thru;
          lodash.toArray = toArray;
          lodash.toPairs = toPairs;
          lodash.toPairsIn = toPairsIn;
          lodash.toPath = toPath;
          lodash.toPlainObject = toPlainObject;
          lodash.transform = transform;
          lodash.unary = unary;
          lodash.union = union;
          lodash.unionBy = unionBy;
          lodash.unionWith = unionWith;
          lodash.uniq = uniq;
          lodash.uniqBy = uniqBy;
          lodash.uniqWith = uniqWith;
          lodash.unset = unset;
          lodash.unzip = unzip;
          lodash.unzipWith = unzipWith;
          lodash.update = update;
          lodash.updateWith = updateWith;
          lodash.values = values;
          lodash.valuesIn = valuesIn;
          lodash.without = without;
          lodash.words = words;
          lodash.wrap = wrap;
          lodash.xor = xor;
          lodash.xorBy = xorBy;
          lodash.xorWith = xorWith;
          lodash.zip = zip;
          lodash.zipObject = zipObject;
          lodash.zipObjectDeep = zipObjectDeep;
          lodash.zipWith = zipWith; // Add aliases.

          lodash.entries = toPairs;
          lodash.entriesIn = toPairsIn;
          lodash.extend = assignIn;
          lodash.extendWith = assignInWith; // Add methods to `lodash.prototype`.

          mixin(lodash, lodash);
          /*------------------------------------------------------------------------*/
          // Add methods that return unwrapped values in chain sequences.

          lodash.add = add;
          lodash.attempt = attempt;
          lodash.camelCase = camelCase;
          lodash.capitalize = capitalize;
          lodash.ceil = ceil;
          lodash.clamp = clamp;
          lodash.clone = clone;
          lodash.cloneDeep = cloneDeep;
          lodash.cloneDeepWith = cloneDeepWith;
          lodash.cloneWith = cloneWith;
          lodash.conformsTo = conformsTo;
          lodash.deburr = deburr;
          lodash.defaultTo = defaultTo;
          lodash.divide = divide;
          lodash.endsWith = endsWith;
          lodash.eq = eq;
          lodash.escape = escape;
          lodash.escapeRegExp = escapeRegExp;
          lodash.every = every;
          lodash.find = find;
          lodash.findIndex = findIndex;
          lodash.findKey = findKey;
          lodash.findLast = findLast;
          lodash.findLastIndex = findLastIndex;
          lodash.findLastKey = findLastKey;
          lodash.floor = floor;
          lodash.forEach = forEach;
          lodash.forEachRight = forEachRight;
          lodash.forIn = forIn;
          lodash.forInRight = forInRight;
          lodash.forOwn = forOwn;
          lodash.forOwnRight = forOwnRight;
          lodash.get = get;
          lodash.gt = gt;
          lodash.gte = gte;
          lodash.has = has;
          lodash.hasIn = hasIn;
          lodash.head = head;
          lodash.identity = identity;
          lodash.includes = includes;
          lodash.indexOf = indexOf;
          lodash.inRange = inRange;
          lodash.invoke = invoke;
          lodash.isArguments = isArguments;
          lodash.isArray = isArray;
          lodash.isArrayBuffer = isArrayBuffer;
          lodash.isArrayLike = isArrayLike;
          lodash.isArrayLikeObject = isArrayLikeObject;
          lodash.isBoolean = isBoolean;
          lodash.isBuffer = isBuffer;
          lodash.isDate = isDate;
          lodash.isElement = isElement;
          lodash.isEmpty = isEmpty;
          lodash.isEqual = isEqual;
          lodash.isEqualWith = isEqualWith;
          lodash.isError = isError;
          lodash.isFinite = isFinite;
          lodash.isFunction = isFunction;
          lodash.isInteger = isInteger;
          lodash.isLength = isLength;
          lodash.isMap = isMap;
          lodash.isMatch = isMatch;
          lodash.isMatchWith = isMatchWith;
          lodash.isNaN = isNaN;
          lodash.isNative = isNative;
          lodash.isNil = isNil;
          lodash.isNull = isNull;
          lodash.isNumber = isNumber;
          lodash.isObject = isObject;
          lodash.isObjectLike = isObjectLike;
          lodash.isPlainObject = isPlainObject;
          lodash.isRegExp = isRegExp;
          lodash.isSafeInteger = isSafeInteger;
          lodash.isSet = isSet;
          lodash.isString = isString;
          lodash.isSymbol = isSymbol;
          lodash.isTypedArray = isTypedArray;
          lodash.isUndefined = isUndefined;
          lodash.isWeakMap = isWeakMap;
          lodash.isWeakSet = isWeakSet;
          lodash.join = join;
          lodash.kebabCase = kebabCase;
          lodash.last = last;
          lodash.lastIndexOf = lastIndexOf;
          lodash.lowerCase = lowerCase;
          lodash.lowerFirst = lowerFirst;
          lodash.lt = lt;
          lodash.lte = lte;
          lodash.max = max;
          lodash.maxBy = maxBy;
          lodash.mean = mean;
          lodash.meanBy = meanBy;
          lodash.min = min;
          lodash.minBy = minBy;
          lodash.stubArray = stubArray;
          lodash.stubFalse = stubFalse;
          lodash.stubObject = stubObject;
          lodash.stubString = stubString;
          lodash.stubTrue = stubTrue;
          lodash.multiply = multiply;
          lodash.nth = nth;
          lodash.noConflict = noConflict;
          lodash.noop = noop;
          lodash.now = now;
          lodash.pad = pad;
          lodash.padEnd = padEnd;
          lodash.padStart = padStart;
          lodash.parseInt = parseInt;
          lodash.random = random;
          lodash.reduce = reduce;
          lodash.reduceRight = reduceRight;
          lodash.repeat = repeat;
          lodash.replace = replace;
          lodash.result = result;
          lodash.round = round;
          lodash.runInContext = runInContext;
          lodash.sample = sample;
          lodash.size = size;
          lodash.snakeCase = snakeCase;
          lodash.some = some;
          lodash.sortedIndex = sortedIndex;
          lodash.sortedIndexBy = sortedIndexBy;
          lodash.sortedIndexOf = sortedIndexOf;
          lodash.sortedLastIndex = sortedLastIndex;
          lodash.sortedLastIndexBy = sortedLastIndexBy;
          lodash.sortedLastIndexOf = sortedLastIndexOf;
          lodash.startCase = startCase;
          lodash.startsWith = startsWith;
          lodash.subtract = subtract;
          lodash.sum = sum;
          lodash.sumBy = sumBy;
          lodash.template = template;
          lodash.times = times;
          lodash.toFinite = toFinite;
          lodash.toInteger = toInteger;
          lodash.toLength = toLength;
          lodash.toLower = toLower;
          lodash.toNumber = toNumber;
          lodash.toSafeInteger = toSafeInteger;
          lodash.toString = toString;
          lodash.toUpper = toUpper;
          lodash.trim = trim;
          lodash.trimEnd = trimEnd;
          lodash.trimStart = trimStart;
          lodash.truncate = truncate;
          lodash.unescape = unescape;
          lodash.uniqueId = uniqueId;
          lodash.upperCase = upperCase;
          lodash.upperFirst = upperFirst; // Add aliases.

          lodash.each = forEach;
          lodash.eachRight = forEachRight;
          lodash.first = head;
          mixin(lodash, function () {
            var source = {};
            baseForOwn(lodash, function (func, methodName) {
              if (!hasOwnProperty.call(lodash.prototype, methodName)) {
                source[methodName] = func;
              }
            });
            return source;
          }(), {
            'chain': false
          });
          /*------------------------------------------------------------------------*/

          /**
           * The semantic version number.
           *
           * @static
           * @memberOf _
           * @type {string}
           */

          lodash.VERSION = VERSION; // Assign default placeholders.

          arrayEach(['bind', 'bindKey', 'curry', 'curryRight', 'partial', 'partialRight'], function (methodName) {
            lodash[methodName].placeholder = lodash;
          }); // Add `LazyWrapper` methods for `_.drop` and `_.take` variants.

          arrayEach(['drop', 'take'], function (methodName, index) {
            LazyWrapper.prototype[methodName] = function (n) {
              n = n === undefined ? 1 : nativeMax(toInteger(n), 0);
              var result = this.__filtered__ && !index ? new LazyWrapper(this) : this.clone();

              if (result.__filtered__) {
                result.__takeCount__ = nativeMin(n, result.__takeCount__);
              } else {
                result.__views__.push({
                  'size': nativeMin(n, MAX_ARRAY_LENGTH),
                  'type': methodName + (result.__dir__ < 0 ? 'Right' : '')
                });
              }

              return result;
            };

            LazyWrapper.prototype[methodName + 'Right'] = function (n) {
              return this.reverse()[methodName](n).reverse();
            };
          }); // Add `LazyWrapper` methods that accept an `iteratee` value.

          arrayEach(['filter', 'map', 'takeWhile'], function (methodName, index) {
            var type = index + 1,
                isFilter = type == LAZY_FILTER_FLAG || type == LAZY_WHILE_FLAG;

            LazyWrapper.prototype[methodName] = function (iteratee) {
              var result = this.clone();

              result.__iteratees__.push({
                'iteratee': getIteratee(iteratee, 3),
                'type': type
              });

              result.__filtered__ = result.__filtered__ || isFilter;
              return result;
            };
          }); // Add `LazyWrapper` methods for `_.head` and `_.last`.

          arrayEach(['head', 'last'], function (methodName, index) {
            var takeName = 'take' + (index ? 'Right' : '');

            LazyWrapper.prototype[methodName] = function () {
              return this[takeName](1).value()[0];
            };
          }); // Add `LazyWrapper` methods for `_.initial` and `_.tail`.

          arrayEach(['initial', 'tail'], function (methodName, index) {
            var dropName = 'drop' + (index ? '' : 'Right');

            LazyWrapper.prototype[methodName] = function () {
              return this.__filtered__ ? new LazyWrapper(this) : this[dropName](1);
            };
          });

          LazyWrapper.prototype.compact = function () {
            return this.filter(identity);
          };

          LazyWrapper.prototype.find = function (predicate) {
            return this.filter(predicate).head();
          };

          LazyWrapper.prototype.findLast = function (predicate) {
            return this.reverse().find(predicate);
          };

          LazyWrapper.prototype.invokeMap = baseRest(function (path, args) {
            if (typeof path == 'function') {
              return new LazyWrapper(this);
            }

            return this.map(function (value) {
              return baseInvoke(value, path, args);
            });
          });

          LazyWrapper.prototype.reject = function (predicate) {
            return this.filter(negate(getIteratee(predicate)));
          };

          LazyWrapper.prototype.slice = function (start, end) {
            start = toInteger(start);
            var result = this;

            if (result.__filtered__ && (start > 0 || end < 0)) {
              return new LazyWrapper(result);
            }

            if (start < 0) {
              result = result.takeRight(-start);
            } else if (start) {
              result = result.drop(start);
            }

            if (end !== undefined) {
              end = toInteger(end);
              result = end < 0 ? result.dropRight(-end) : result.take(end - start);
            }

            return result;
          };

          LazyWrapper.prototype.takeRightWhile = function (predicate) {
            return this.reverse().takeWhile(predicate).reverse();
          };

          LazyWrapper.prototype.toArray = function () {
            return this.take(MAX_ARRAY_LENGTH);
          }; // Add `LazyWrapper` methods to `lodash.prototype`.


          baseForOwn(LazyWrapper.prototype, function (func, methodName) {
            var checkIteratee = /^(?:filter|find|map|reject)|While$/.test(methodName),
                isTaker = /^(?:head|last)$/.test(methodName),
                lodashFunc = lodash[isTaker ? 'take' + (methodName == 'last' ? 'Right' : '') : methodName],
                retUnwrapped = isTaker || /^find/.test(methodName);

            if (!lodashFunc) {
              return;
            }

            lodash.prototype[methodName] = function () {
              var value = this.__wrapped__,
                  args = isTaker ? [1] : arguments,
                  isLazy = value instanceof LazyWrapper,
                  iteratee = args[0],
                  useLazy = isLazy || isArray(value);

              var interceptor = function interceptor(value) {
                var result = lodashFunc.apply(lodash, arrayPush([value], args));
                return isTaker && chainAll ? result[0] : result;
              };

              if (useLazy && checkIteratee && typeof iteratee == 'function' && iteratee.length != 1) {
                // Avoid lazy use if the iteratee has a "length" value other than `1`.
                isLazy = useLazy = false;
              }

              var chainAll = this.__chain__,
                  isHybrid = !!this.__actions__.length,
                  isUnwrapped = retUnwrapped && !chainAll,
                  onlyLazy = isLazy && !isHybrid;

              if (!retUnwrapped && useLazy) {
                value = onlyLazy ? value : new LazyWrapper(this);
                var result = func.apply(value, args);

                result.__actions__.push({
                  'func': thru,
                  'args': [interceptor],
                  'thisArg': undefined
                });

                return new LodashWrapper(result, chainAll);
              }

              if (isUnwrapped && onlyLazy) {
                return func.apply(this, args);
              }

              result = this.thru(interceptor);
              return isUnwrapped ? isTaker ? result.value()[0] : result.value() : result;
            };
          }); // Add `Array` methods to `lodash.prototype`.

          arrayEach(['pop', 'push', 'shift', 'sort', 'splice', 'unshift'], function (methodName) {
            var func = arrayProto[methodName],
                chainName = /^(?:push|sort|unshift)$/.test(methodName) ? 'tap' : 'thru',
                retUnwrapped = /^(?:pop|shift)$/.test(methodName);

            lodash.prototype[methodName] = function () {
              var args = arguments;

              if (retUnwrapped && !this.__chain__) {
                var value = this.value();
                return func.apply(isArray(value) ? value : [], args);
              }

              return this[chainName](function (value) {
                return func.apply(isArray(value) ? value : [], args);
              });
            };
          }); // Map minified method names to their real names.

          baseForOwn(LazyWrapper.prototype, function (func, methodName) {
            var lodashFunc = lodash[methodName];

            if (lodashFunc) {
              var key = lodashFunc.name + '';

              if (!hasOwnProperty.call(realNames, key)) {
                realNames[key] = [];
              }

              realNames[key].push({
                'name': methodName,
                'func': lodashFunc
              });
            }
          });
          realNames[createHybrid(undefined, WRAP_BIND_KEY_FLAG).name] = [{
            'name': 'wrapper',
            'func': undefined
          }]; // Add methods to `LazyWrapper`.

          LazyWrapper.prototype.clone = lazyClone;
          LazyWrapper.prototype.reverse = lazyReverse;
          LazyWrapper.prototype.value = lazyValue; // Add chain sequence methods to the `lodash` wrapper.

          lodash.prototype.at = wrapperAt;
          lodash.prototype.chain = wrapperChain;
          lodash.prototype.commit = wrapperCommit;
          lodash.prototype.next = wrapperNext;
          lodash.prototype.plant = wrapperPlant;
          lodash.prototype.reverse = wrapperReverse;
          lodash.prototype.toJSON = lodash.prototype.valueOf = lodash.prototype.value = wrapperValue; // Add lazy aliases.

          lodash.prototype.first = lodash.prototype.head;

          if (symIterator) {
            lodash.prototype[symIterator] = wrapperToIterator;
          }

          return lodash;
        };
        /*--------------------------------------------------------------------------*/
        // Export lodash.


        var _ = runInContext(); // Some AMD build optimizers, like r.js, check for condition patterns like:


        if (true) {
          // Expose Lodash on the global object to prevent errors when Lodash is
          // loaded by a script tag in the presence of an AMD loader.
          // See http://requirejs.org/docs/errors.html#mismatch for more details.
          // Use `_.noConflict` to remove Lodash from the global object.
          root._ = _; // Define as an anonymous module so, through path mapping, it can be
          // referenced as the "underscore" module.

          !(__WEBPACK_AMD_DEFINE_RESULT__ = function () {
            return _;
          }.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
        } // Check for `exports` after `define` in case a build optimizer adds it.
        else {}
      }).call(this);
      /* WEBPACK VAR INJECTION */
    }).call(this, __webpack_require__(
    /*! ./../webpack/buildin/module.js */
    "./node_modules/webpack/buildin/module.js")(module));
    /***/
  },

  /***/
  "./node_modules/ng2-charts/__ivy_ngcc__/fesm2015/ng2-charts.js": function node_modulesNg2Charts__ivy_ngcc__Fesm2015Ng2ChartsJs(module, __webpack_exports__, __webpack_require__) {
    "use strict";

    __webpack_require__.r(__webpack_exports__);
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "ChartsModule", function () {
      return ChartsModule;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "BaseChartDirective", function () {
      return BaseChartDirective;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "defaultColors", function () {
      return defaultColors;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "ThemeService", function () {
      return ThemeService;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "monkeyPatchChartJsLegend", function () {
      return monkeyPatchChartJsLegend;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "monkeyPatchChartJsTooltip", function () {
      return monkeyPatchChartJsTooltip;
    });
    /* harmony import */


    var chart_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
    /*! chart.js */
    "./node_modules/chart.js/src/chart.js");
    /* harmony import */


    var chart_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(chart_js__WEBPACK_IMPORTED_MODULE_0__);
    /* harmony import */


    var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
    /*! @angular/core */
    "./node_modules/@angular/core/__ivy_ngcc__/fesm2015/core.js");
    /* harmony import */


    var rxjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
    /*! rxjs */
    "./node_modules/rxjs/_esm2015/index.js");
    /* harmony import */


    var lodash__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(
    /*! lodash */
    "./node_modules/lodash/lodash.js");
    /* harmony import */


    var lodash__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(lodash__WEBPACK_IMPORTED_MODULE_3__);
    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    /** @type {?} */


    var defaultColors = [[255, 99, 132], [54, 162, 235], [255, 206, 86], [231, 233, 237], [75, 192, 192], [151, 187, 205], [220, 220, 220], [247, 70, 74], [70, 191, 189], [253, 180, 92], [148, 159, 177], [77, 83, 96]];
    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    /**
     * Generate colors by chart type
     * @param {?} chartType
     * @param {?} index
     * @param {?} count
     * @return {?}
     */

    function getColors(chartType, index, count) {
      if (chartType === 'pie' || chartType === 'doughnut') {
        return formatPieColors(generateColors(count));
      }

      if (chartType === 'polarArea') {
        return formatPolarAreaColors(generateColors(count));
      }

      if (chartType === 'line' || chartType === 'radar') {
        return formatLineColor(generateColor(index));
      }

      if (chartType === 'bar' || chartType === 'horizontalBar') {
        return formatBarColor(generateColor(index));
      }

      if (chartType === 'bubble') {
        return formatPieColors(generateColors(count));
      }

      if (chartType === 'scatter') {
        return formatPieColors(generateColors(count));
      }

      throw new Error("getColors - Unsupported chart type ".concat(chartType));
    }
    /**
     * @param {?} colour
     * @param {?} alpha
     * @return {?}
     */


    function rgba(colour, alpha) {
      return 'rgba(' + colour.concat(alpha).join(',') + ')';
    }
    /**
     * @param {?} min
     * @param {?} max
     * @return {?}
     */


    function getRandomInt(min, max) {
      return Math.floor(Math.random() * (max - min + 1)) + min;
    }
    /**
     * @param {?} colors
     * @return {?}
     */


    function formatLineColor(colors) {
      return {
        backgroundColor: rgba(colors, 0.4),
        borderColor: rgba(colors, 1),
        pointBackgroundColor: rgba(colors, 1),
        pointBorderColor: '#fff',
        pointHoverBackgroundColor: '#fff',
        pointHoverBorderColor: rgba(colors, 0.8)
      };
    }
    /**
     * @param {?} colors
     * @return {?}
     */


    function formatBarColor(colors) {
      return {
        backgroundColor: rgba(colors, 0.6),
        borderColor: rgba(colors, 1),
        hoverBackgroundColor: rgba(colors, 0.8),
        hoverBorderColor: rgba(colors, 1)
      };
    }
    /**
     * @param {?} colors
     * @return {?}
     */


    function formatPieColors(colors) {
      return {
        backgroundColor: colors.map(
        /**
        * @param {?} color
        * @return {?}
        */
        function (color) {
          return rgba(color, 0.6);
        }),
        borderColor: colors.map(
        /**
        * @return {?}
        */
        function () {
          return '#fff';
        }),
        pointBackgroundColor: colors.map(
        /**
        * @param {?} color
        * @return {?}
        */
        function (color) {
          return rgba(color, 1);
        }),
        pointBorderColor: colors.map(
        /**
        * @return {?}
        */
        function () {
          return '#fff';
        }),
        pointHoverBackgroundColor: colors.map(
        /**
        * @param {?} color
        * @return {?}
        */
        function (color) {
          return rgba(color, 1);
        }),
        pointHoverBorderColor: colors.map(
        /**
        * @param {?} color
        * @return {?}
        */
        function (color) {
          return rgba(color, 1);
        })
      };
    }
    /**
     * @param {?} colors
     * @return {?}
     */


    function formatPolarAreaColors(colors) {
      return {
        backgroundColor: colors.map(
        /**
        * @param {?} color
        * @return {?}
        */
        function (color) {
          return rgba(color, 0.6);
        }),
        borderColor: colors.map(
        /**
        * @param {?} color
        * @return {?}
        */
        function (color) {
          return rgba(color, 1);
        }),
        hoverBackgroundColor: colors.map(
        /**
        * @param {?} color
        * @return {?}
        */
        function (color) {
          return rgba(color, 0.8);
        }),
        hoverBorderColor: colors.map(
        /**
        * @param {?} color
        * @return {?}
        */
        function (color) {
          return rgba(color, 1);
        })
      };
    }
    /**
     * @return {?}
     */


    function getRandomColor() {
      return [getRandomInt(0, 255), getRandomInt(0, 255), getRandomInt(0, 255)];
    }
    /**
     * Generate colors for line|bar charts
     * @param {?} index
     * @return {?}
     */


    function generateColor(index) {
      return defaultColors[index] || getRandomColor();
    }
    /**
     * Generate colors for pie|doughnut charts
     * @param {?} count
     * @return {?}
     */


    function generateColors(count) {
      /** @type {?} */
      var colorsArr = new Array(count);

      for (var i = 0; i < count; i++) {
        colorsArr[i] = defaultColors[i] || getRandomColor();
      }

      return colorsArr;
    }
    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */


    var ThemeService = /*#__PURE__*/function () {
      function ThemeService() {
        _classCallCheck(this, ThemeService);

        this.pColorschemesOptions = {};
        this.colorschemesOptions = new rxjs__WEBPACK_IMPORTED_MODULE_2__["BehaviorSubject"]({});
      }
      /**
       * @param {?} options
       * @return {?}
       */


      _createClass(ThemeService, [{
        key: "setColorschemesOptions",
        value: function setColorschemesOptions(options) {
          this.pColorschemesOptions = options;
          this.colorschemesOptions.next(options);
        }
        /**
         * @return {?}
         */

      }, {
        key: "getColorschemesOptions",
        value: function getColorschemesOptions() {
          return this.pColorschemesOptions;
        }
      }]);

      return ThemeService;
    }();

    ThemeService.ɵfac = function ThemeService_Factory(t) {
      return new (t || ThemeService)();
    };

    ThemeService.ɵprov = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdefineInjectable"]({
      token: ThemeService,
      factory: ThemeService.ɵfac,
      providedIn: 'root'
    });
    /** @nocollapse */

    ThemeService.ctorParameters = function () {
      return [];
    };
    /** @nocollapse */


    ThemeService.ngInjectableDef = Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["defineInjectable"])({
      factory: function ThemeService_Factory() {
        return new ThemeService();
      },
      token: ThemeService,
      providedIn: "root"
    });
    /*@__PURE__*/

    (function () {
      _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵsetClassMetadata"](ThemeService, [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Injectable"],
        args: [{
          providedIn: 'root'
        }]
      }], function () {
        return [];
      }, null);
    })();
    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    /** @enum {number} */


    var UpdateType = {
      Default: 0,
      Update: 1,
      Refresh: 2
    };
    UpdateType[UpdateType.Default] = 'Default';
    UpdateType[UpdateType.Update] = 'Update';
    UpdateType[UpdateType.Refresh] = 'Refresh';

    var BaseChartDirective = /*#__PURE__*/function () {
      /**
       * @param {?} element
       * @param {?} themeService
       */
      function BaseChartDirective(element, themeService) {
        _classCallCheck(this, BaseChartDirective);

        this.element = element;
        this.themeService = themeService;
        this.options = {};
        this.chartClick = new _angular_core__WEBPACK_IMPORTED_MODULE_1__["EventEmitter"]();
        this.chartHover = new _angular_core__WEBPACK_IMPORTED_MODULE_1__["EventEmitter"]();
        this.old = {
          dataExists: false,
          dataLength: 0,
          datasetsExists: false,
          datasetsLength: 0,
          datasetsDataObjects: [],
          datasetsDataLengths: [],
          colorsExists: false,
          colors: [],
          labelsExist: false,
          labels: [],
          legendExists: false,
          legend: {}
        };
        this.subs = [];
      }
      /**
       * Register a plugin.
       * @param {?} plugin
       * @return {?}
       */


      _createClass(BaseChartDirective, [{
        key: "ngOnInit",
        value:
        /**
         * @return {?}
         */
        function ngOnInit() {
          var _this24 = this;

          this.ctx = this.element.nativeElement.getContext('2d');
          this.refresh();
          this.subs.push(this.themeService.colorschemesOptions.subscribe(
          /**
          * @param {?} r
          * @return {?}
          */
          function (r) {
            return _this24.themeChanged(r);
          }));
        }
        /**
         * @private
         * @param {?} options
         * @return {?}
         */

      }, {
        key: "themeChanged",
        value: function themeChanged(options) {
          this.refresh();
        }
        /**
         * @return {?}
         */

      }, {
        key: "ngDoCheck",
        value: function ngDoCheck() {
          var _this25 = this;

          if (!this.chart) {
            return;
          }
          /** @type {?} */


          var updateRequired = UpdateType.Default;
          /** @type {?} */

          var wantUpdate =
          /**
          * @param {?} x
          * @return {?}
          */
          function wantUpdate(x) {
            updateRequired = x > updateRequired ? x : updateRequired;
          };

          if (!!this.data !== this.old.dataExists) {
            this.propagateDataToDatasets(this.data);
            this.old.dataExists = !!this.data;
            wantUpdate(UpdateType.Update);
          }

          if (this.data && this.data.length !== this.old.dataLength) {
            this.old.dataLength = this.data && this.data.length || 0;
            wantUpdate(UpdateType.Update);
          }

          if (!!this.datasets !== this.old.datasetsExists) {
            this.old.datasetsExists = !!this.datasets;
            wantUpdate(UpdateType.Update);
          }

          if (this.datasets && this.datasets.length !== this.old.datasetsLength) {
            this.old.datasetsLength = this.datasets && this.datasets.length || 0;
            wantUpdate(UpdateType.Update);
          }

          if (this.datasets && this.datasets.filter(
          /**
          * @param {?} x
          * @param {?} i
          * @return {?}
          */
          function (x, i) {
            return x.data !== _this25.old.datasetsDataObjects[i];
          }).length) {
            this.old.datasetsDataObjects = this.datasets.map(
            /**
            * @param {?} x
            * @return {?}
            */
            function (x) {
              return x.data;
            });
            wantUpdate(UpdateType.Update);
          }

          if (this.datasets && this.datasets.filter(
          /**
          * @param {?} x
          * @param {?} i
          * @return {?}
          */
          function (x, i) {
            return x.data.length !== _this25.old.datasetsDataLengths[i];
          }).length) {
            this.old.datasetsDataLengths = this.datasets.map(
            /**
            * @param {?} x
            * @return {?}
            */
            function (x) {
              return x.data.length;
            });
            wantUpdate(UpdateType.Update);
          }

          if (!!this.colors !== this.old.colorsExists) {
            this.old.colorsExists = !!this.colors;
            this.updateColors();
            wantUpdate(UpdateType.Update);
          } // This smells of inefficiency, might need to revisit this


          if (this.colors && this.colors.filter(
          /**
          * @param {?} x
          * @param {?} i
          * @return {?}
          */
          function (x, i) {
            return !_this25.colorsEqual(x, _this25.old.colors[i]);
          }).length) {
            this.old.colors = this.colors.map(
            /**
            * @param {?} x
            * @return {?}
            */
            function (x) {
              return _this25.copyColor(x);
            });
            this.updateColors();
            wantUpdate(UpdateType.Update);
          }

          if (!!this.labels !== this.old.labelsExist) {
            this.old.labelsExist = !!this.labels;
            wantUpdate(UpdateType.Update);
          }

          if (this.labels && this.labels.filter(
          /**
          * @param {?} x
          * @param {?} i
          * @return {?}
          */
          function (x, i) {
            return !_this25.labelsEqual(x, _this25.old.labels[i]);
          }).length) {
            this.old.labels = this.labels.map(
            /**
            * @param {?} x
            * @return {?}
            */
            function (x) {
              return _this25.copyLabel(x);
            });
            wantUpdate(UpdateType.Update);
          }

          if (!!this.options.legend !== this.old.legendExists) {
            this.old.legendExists = !!this.options.legend;
            wantUpdate(UpdateType.Refresh);
          }

          if (this.options.legend && this.options.legend.position !== this.old.legend.position) {
            this.old.legend.position = this.options.legend.position;
            wantUpdate(UpdateType.Refresh);
          }

          switch (updateRequired) {
            case UpdateType.Default:
              break;

            case UpdateType.Update:
              this.update();
              break;

            case UpdateType.Refresh:
              this.refresh();
              break;
          }
        }
        /**
         * @param {?} a
         * @return {?}
         */

      }, {
        key: "copyLabel",
        value: function copyLabel(a) {
          if (Array.isArray(a)) {
            return _toConsumableArray(a);
          }

          return a;
        }
        /**
         * @param {?} a
         * @param {?} b
         * @return {?}
         */

      }, {
        key: "labelsEqual",
        value: function labelsEqual(a, b) {
          return Array.isArray(a) === Array.isArray(b) && (Array.isArray(a) || a === b) && (!Array.isArray(a) || a.length === b.length) && (!Array.isArray(a) || a.filter(
          /**
          * @param {?} x
          * @param {?} i
          * @return {?}
          */
          function (x, i) {
            return x !== b[i];
          }).length === 0);
        }
        /**
         * @param {?} a
         * @return {?}
         */

      }, {
        key: "copyColor",
        value: function copyColor(a) {
          /** @type {?} */
          var rc = {
            backgroundColor: a.backgroundColor,
            borderWidth: a.borderWidth,
            borderColor: a.borderColor,
            borderCapStyle: a.borderCapStyle,
            borderDash: a.borderDash,
            borderDashOffset: a.borderDashOffset,
            borderJoinStyle: a.borderJoinStyle,
            pointBorderColor: a.pointBorderColor,
            pointBackgroundColor: a.pointBackgroundColor,
            pointBorderWidth: a.pointBorderWidth,
            pointRadius: a.pointRadius,
            pointHoverRadius: a.pointHoverRadius,
            pointHitRadius: a.pointHitRadius,
            pointHoverBackgroundColor: a.pointHoverBackgroundColor,
            pointHoverBorderColor: a.pointHoverBorderColor,
            pointHoverBorderWidth: a.pointHoverBorderWidth,
            pointStyle: a.pointStyle,
            hoverBackgroundColor: a.hoverBackgroundColor,
            hoverBorderColor: a.hoverBorderColor,
            hoverBorderWidth: a.hoverBorderWidth
          };
          return rc;
        }
        /**
         * @param {?} a
         * @param {?} b
         * @return {?}
         */

      }, {
        key: "colorsEqual",
        value: function colorsEqual(a, b) {
          if (!a !== !b) {
            return false;
          }

          return !a || a.backgroundColor === b.backgroundColor && a.borderWidth === b.borderWidth && a.borderColor === b.borderColor && a.borderCapStyle === b.borderCapStyle && a.borderDash === b.borderDash && a.borderDashOffset === b.borderDashOffset && a.borderJoinStyle === b.borderJoinStyle && a.pointBorderColor === b.pointBorderColor && a.pointBackgroundColor === b.pointBackgroundColor && a.pointBorderWidth === b.pointBorderWidth && a.pointRadius === b.pointRadius && a.pointHoverRadius === b.pointHoverRadius && a.pointHitRadius === b.pointHitRadius && a.pointHoverBackgroundColor === b.pointHoverBackgroundColor && a.pointHoverBorderColor === b.pointHoverBorderColor && a.pointHoverBorderWidth === b.pointHoverBorderWidth && a.pointStyle === b.pointStyle && a.hoverBackgroundColor === b.hoverBackgroundColor && a.hoverBorderColor === b.hoverBorderColor && a.hoverBorderWidth === b.hoverBorderWidth;
        }
        /**
         * @return {?}
         */

      }, {
        key: "updateColors",
        value: function updateColors() {
          var _this26 = this;

          this.datasets.forEach(
          /**
          * @param {?} elm
          * @param {?} index
          * @return {?}
          */
          function (elm, index) {
            if (_this26.colors && _this26.colors[index]) {
              Object.assign(elm, _this26.colors[index]);
            } else {
              Object.assign(elm, getColors(_this26.chartType, index, elm.data.length), Object.assign({}, elm));
            }
          });
        }
        /**
         * @param {?} changes
         * @return {?}
         */

      }, {
        key: "ngOnChanges",
        value: function ngOnChanges(changes) {
          /** @type {?} */
          var updateRequired = UpdateType.Default;
          /** @type {?} */

          var wantUpdate =
          /**
          * @param {?} x
          * @return {?}
          */
          function wantUpdate(x) {
            updateRequired = x > updateRequired ? x : updateRequired;
          }; // Check if the changes are in the data or datasets or labels or legend


          if (changes.hasOwnProperty('data') && changes.data.currentValue) {
            this.propagateDataToDatasets(changes.data.currentValue);
            wantUpdate(UpdateType.Update);
          }

          if (changes.hasOwnProperty('datasets') && changes.datasets.currentValue) {
            this.propagateDatasetsToData(changes.datasets.currentValue);
            wantUpdate(UpdateType.Update);
          }

          if (changes.hasOwnProperty('labels')) {
            if (this.chart) {
              this.chart.data.labels = changes.labels.currentValue;
            }

            wantUpdate(UpdateType.Update);
          }

          if (changes.hasOwnProperty('legend')) {
            if (this.chart) {
              this.chart.config.options.legend.display = changes.legend.currentValue;
              this.chart.generateLegend();
            }

            wantUpdate(UpdateType.Update);
          }

          if (changes.hasOwnProperty('options')) {
            wantUpdate(UpdateType.Refresh);
          }

          switch (updateRequired) {
            case UpdateType.Update:
              this.update();
              break;

            case UpdateType.Refresh:
            case UpdateType.Default:
              this.refresh();
              break;
          }
        }
        /**
         * @return {?}
         */

      }, {
        key: "ngOnDestroy",
        value: function ngOnDestroy() {
          if (this.chart) {
            this.chart.destroy();
            this.chart = void 0;
          }

          this.subs.forEach(
          /**
          * @param {?} x
          * @return {?}
          */
          function (x) {
            return x.unsubscribe();
          });
        }
        /**
         * @param {?=} duration
         * @param {?=} lazy
         * @return {?}
         */

      }, {
        key: "update",
        value: function update(duration, lazy) {
          if (this.chart) {
            return this.chart.update(duration, lazy);
          }
        }
        /**
         * @param {?} index
         * @param {?} hidden
         * @return {?}
         */

      }, {
        key: "hideDataset",
        value: function hideDataset(index, hidden) {
          this.chart.getDatasetMeta(index).hidden = hidden;
          this.chart.update();
        }
        /**
         * @param {?} index
         * @return {?}
         */

      }, {
        key: "isDatasetHidden",
        value: function isDatasetHidden(index) {
          return this.chart.getDatasetMeta(index).hidden;
        }
        /**
         * @return {?}
         */

      }, {
        key: "toBase64Image",
        value: function toBase64Image() {
          return this.chart.toBase64Image();
        }
        /**
         * @return {?}
         */

      }, {
        key: "getChartConfiguration",
        value: function getChartConfiguration() {
          var _this27 = this;

          /** @type {?} */
          var datasets = this.getDatasets();
          /** @type {?} */

          var options = Object.assign({}, this.options);

          if (this.legend === false) {
            options.legend = {
              display: false
            };
          } // hook for onHover and onClick events


          options.hover = options.hover || {};

          if (!options.hover.onHover) {
            options.hover.onHover =
            /**
            * @param {?} event
            * @param {?} active
            * @return {?}
            */
            function (event, active) {
              if (active && !active.length) {
                return;
              }

              _this27.chartHover.emit({
                event: event,
                active: active
              });
            };
          }

          if (!options.onClick) {
            options.onClick =
            /**
            * @param {?=} event
            * @param {?=} active
            * @return {?}
            */
            function (event, active) {
              _this27.chartClick.emit({
                event: event,
                active: active
              });
            };
          }
          /** @type {?} */


          var mergedOptions = this.smartMerge(options, this.themeService.getColorschemesOptions());
          /** @type {?} */

          var chartConfig = {
            type: this.chartType,
            data: {
              labels: this.labels || [],
              datasets: datasets
            },
            plugins: this.plugins,
            options: mergedOptions
          };
          return chartConfig;
        }
        /**
         * @param {?} ctx
         * @return {?}
         */

      }, {
        key: "getChartBuilder",
        value: function getChartBuilder(ctx
        /*, data:any[], options:any*/
        ) {
          /** @type {?} */
          var chartConfig = this.getChartConfiguration();
          return new chart_js__WEBPACK_IMPORTED_MODULE_0__["Chart"](ctx, chartConfig);
        }
        /**
         * @param {?} options
         * @param {?} overrides
         * @param {?=} level
         * @return {?}
         */

      }, {
        key: "smartMerge",
        value: function smartMerge(options, overrides) {
          var _this28 = this;

          var level = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;

          if (level === 0) {
            options = Object(lodash__WEBPACK_IMPORTED_MODULE_3__["cloneDeep"])(options);
          }
          /** @type {?} */


          var keysToUpdate = Object.keys(overrides);
          keysToUpdate.forEach(
          /**
          * @param {?} key
          * @return {?}
          */
          function (key) {
            if (Array.isArray(overrides[key])) {
              /** @type {?} */
              var arrayElements = options[key];

              if (arrayElements) {
                arrayElements.forEach(
                /**
                * @param {?} r
                * @return {?}
                */
                function (r) {
                  _this28.smartMerge(r, overrides[key][0], level + 1);
                });
              }
            } else if (typeof overrides[key] === 'object') {
              if (!(key in options)) {
                options[key] = {};
              }

              _this28.smartMerge(options[key], overrides[key], level + 1);
            } else {
              options[key] = overrides[key];
            }
          });

          if (level === 0) {
            return options;
          }
        }
        /**
         * @private
         * @param {?} label
         * @return {?}
         */

      }, {
        key: "isMultiLineLabel",
        value: function isMultiLineLabel(label) {
          return Array.isArray(label);
        }
        /**
         * @private
         * @param {?} label
         * @return {?}
         */

      }, {
        key: "joinLabel",
        value: function joinLabel(label) {
          if (!label) {
            return null;
          }

          if (this.isMultiLineLabel(label)) {
            return label.join(' ');
          } else {
            return label;
          }
        }
        /**
         * @private
         * @param {?} datasets
         * @return {?}
         */

      }, {
        key: "propagateDatasetsToData",
        value: function propagateDatasetsToData(datasets) {
          this.data = this.datasets.map(
          /**
          * @param {?} r
          * @return {?}
          */
          function (r) {
            return r.data;
          });

          if (this.chart) {
            this.chart.data.datasets = datasets;
          }

          this.updateColors();
        }
        /**
         * @private
         * @param {?} newDataValues
         * @return {?}
         */

      }, {
        key: "propagateDataToDatasets",
        value: function propagateDataToDatasets(newDataValues) {
          var _this29 = this;

          if (this.isMultiDataSet(newDataValues)) {
            if (this.datasets && newDataValues.length === this.datasets.length) {
              this.datasets.forEach(
              /**
              * @param {?} dataset
              * @param {?} i
              * @return {?}
              */
              function (dataset, i) {
                dataset.data = newDataValues[i];
              });
            } else {
              this.datasets = newDataValues.map(
              /**
              * @param {?} data
              * @param {?} index
              * @return {?}
              */
              function (data, index) {
                return {
                  data: data,
                  label: _this29.joinLabel(_this29.labels[index]) || "Label ".concat(index)
                };
              });

              if (this.chart) {
                this.chart.data.datasets = this.datasets;
              }
            }
          } else {
            if (!this.datasets) {
              this.datasets = [{
                data: newDataValues
              }];

              if (this.chart) {
                this.chart.data.datasets = this.datasets;
              }
            } else {
              this.datasets[0].data = newDataValues;
              this.datasets.splice(1); // Remove all elements but the first
            }
          }

          this.updateColors();
        }
        /**
         * @private
         * @param {?} data
         * @return {?}
         */

      }, {
        key: "isMultiDataSet",
        value: function isMultiDataSet(data) {
          return Array.isArray(data[0]);
        }
        /**
         * @private
         * @return {?}
         */

      }, {
        key: "getDatasets",
        value: function getDatasets() {
          if (!this.datasets && !this.data) {
            throw new Error("ng-charts configuration error, data or datasets field are required to render chart ".concat(this.chartType));
          } // If `datasets` is defined, use it over the `data` property.


          if (this.datasets) {
            this.propagateDatasetsToData(this.datasets);
            return this.datasets;
          }

          if (this.data) {
            this.propagateDataToDatasets(this.data);
            return this.datasets;
          }
        }
        /**
         * @private
         * @return {?}
         */

      }, {
        key: "refresh",
        value: function refresh() {
          // if (this.options && this.options.responsive) {
          //   setTimeout(() => this.refresh(), 50);
          // }
          // todo: remove this line, it is producing flickering
          if (this.chart) {
            this.chart.destroy();
            this.chart = void 0;
          }

          if (this.ctx) {
            this.chart = this.getChartBuilder(this.ctx
            /*, data, this.options*/
            );
          }
        }
      }], [{
        key: "registerPlugin",
        value: function registerPlugin(plugin) {
          chart_js__WEBPACK_IMPORTED_MODULE_0__["Chart"].plugins.register(plugin);
        }
        /**
         * @param {?} plugin
         * @return {?}
         */

      }, {
        key: "unregisterPlugin",
        value: function unregisterPlugin(plugin) {
          chart_js__WEBPACK_IMPORTED_MODULE_0__["Chart"].plugins.unregister(plugin);
        }
      }]);

      return BaseChartDirective;
    }();

    BaseChartDirective.ɵfac = function BaseChartDirective_Factory(t) {
      return new (t || BaseChartDirective)(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_1__["ElementRef"]), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdirectiveInject"](ThemeService));
    };

    BaseChartDirective.ɵdir = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdefineDirective"]({
      type: BaseChartDirective,
      selectors: [["canvas", "baseChart", ""]],
      inputs: {
        options: "options",
        data: "data",
        datasets: "datasets",
        labels: "labels",
        chartType: "chartType",
        colors: "colors",
        legend: "legend",
        plugins: "plugins"
      },
      outputs: {
        chartClick: "chartClick",
        chartHover: "chartHover"
      },
      exportAs: ["base-chart"],
      features: [_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵNgOnChangesFeature"]]
    });
    /** @nocollapse */

    BaseChartDirective.ctorParameters = function () {
      return [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ElementRef"]
      }, {
        type: ThemeService
      }];
    };

    BaseChartDirective.propDecorators = {
      data: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"]
      }],
      datasets: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"]
      }],
      labels: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"]
      }],
      options: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"]
      }],
      chartType: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"]
      }],
      colors: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"]
      }],
      legend: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"]
      }],
      plugins: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"]
      }],
      chartClick: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Output"]
      }],
      chartHover: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Output"]
      }]
    };
    /*@__PURE__*/

    (function () {
      _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵsetClassMetadata"](BaseChartDirective, [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Directive"],
        args: [{
          // tslint:disable-next-line:directive-selector
          selector: 'canvas[baseChart]',
          exportAs: 'base-chart'
        }]
      }], function () {
        return [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ElementRef"]
        }, {
          type: ThemeService
        }];
      }, {
        options: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"]
        }],
        chartClick: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Output"]
        }],
        chartHover: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Output"]
        }],
        data: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"]
        }],
        datasets: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"]
        }],
        labels: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"]
        }],
        chartType: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"]
        }],
        colors: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"]
        }],
        legend: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"]
        }],
        plugins: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"]
        }]
      });
    })();
    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */


    var ChartsModule = function ChartsModule() {
      _classCallCheck(this, ChartsModule);
    };

    ChartsModule.ɵmod = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdefineNgModule"]({
      type: ChartsModule
    });
    ChartsModule.ɵinj = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdefineInjector"]({
      factory: function ChartsModule_Factory(t) {
        return new (t || ChartsModule)();
      },
      imports: [[]]
    });

    (function () {
      (typeof ngJitMode === "undefined" || ngJitMode) && _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵsetNgModuleScope"](ChartsModule, {
        declarations: [BaseChartDirective],
        exports: [BaseChartDirective]
      });
    })();
    /*@__PURE__*/


    (function () {
      _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵsetClassMetadata"](ChartsModule, [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["NgModule"],
        args: [{
          declarations: [BaseChartDirective],
          imports: [],
          exports: [BaseChartDirective]
        }]
      }], null, null);
    })();
    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    // tslint:disable:variable-name
    // tslint:disable:no-var-keyword
    // tslint:disable:prefer-const
    // tslint:disable:only-arrow-functions
    // tslint:disable:one-variable-per-declaration
    // tslint:disable:object-literal-shorthand
    // tslint:disable:space-before-function-paren

    /** @type {?} */


    var helpers = Chart.helpers;
    /** @type {?} */

    var defaults = Chart.defaults;
    /** @type {?} */

    var valueOrDefault = helpers.valueOrDefault;
    /**
     * @param {?} labelOpts
     * @param {?} fontSize
     * @return {?}
     */

    function getBoxWidth(labelOpts, fontSize) {
      return labelOpts.usePointStyle && labelOpts.boxWidth > fontSize ? fontSize : labelOpts.boxWidth;
    }
    /**
     * @return {?}
     */


    function fit() {
      /** @type {?} */
      var me = this;
      /** @type {?} */

      var opts = me.options;
      /** @type {?} */

      var labelOpts = opts.labels;
      /** @type {?} */

      var display = opts.display;
      /** @type {?} */

      var ctx = me.ctx;
      /** @type {?} */

      var labelFont = helpers.options._parseFont(labelOpts);
      /** @type {?} */


      var fontSize = labelFont.size; // Reset hit boxes

      /** @type {?} */

      var hitboxes = me.legendHitBoxes = [];
      /** @type {?} */

      var minSize = me.minSize;
      /** @type {?} */

      var isHorizontal = me.isHorizontal();

      if (isHorizontal) {
        minSize.width = me.maxWidth; // fill all the width

        minSize.height = display ? 10 : 0;
      } else {
        minSize.width = display ? 10 : 0;
        minSize.height = me.maxHeight; // fill all the height
      }
      /** @type {?} */


      var getMaxLineWidth =
      /**
      * @param {?} textLines
      * @return {?}
      */
      function getMaxLineWidth(textLines) {
        return textLines.map(
        /**
        * @param {?} textLine
        * @return {?}
        */
        function (textLine) {
          return ctx.measureText(textLine).width;
        }).reduce(
        /**
        * @param {?} acc
        * @param {?} v
        * @return {?}
        */
        function (acc, v) {
          return v > acc ? v : acc;
        }, 0);
      }; // Increase sizes here


      if (display) {
        ctx.font = labelFont.string;

        if (isHorizontal) {
          // Labels
          // Width of each line of legend boxes. Labels wrap onto multiple lines when there are too many to fit on one

          /** @type {?} */
          var lineWidths = me.lineWidths = [0];
          /** @type {?} */

          var lineHeights = me.lineHeights = [];
          /** @type {?} */

          var currentLineHeight = 0;
          /** @type {?} */

          var lineIndex = 0;
          ctx.textAlign = 'left';
          ctx.textBaseline = 'top';
          helpers.each(me.legendItems,
          /**
          * @param {?} legendItem
          * @param {?} i
          * @return {?}
          */
          function (legendItem, i) {
            /** @type {?} */
            var width;
            /** @type {?} */

            var height;

            if (helpers.isArray(legendItem.text)) {
              width = getMaxLineWidth(legendItem.text);
              height = fontSize * legendItem.text.length + labelOpts.padding;
            } else {
              width = ctx.measureText(legendItem.text).width;
              height = fontSize + labelOpts.padding;
            }

            width += getBoxWidth(labelOpts, fontSize) + fontSize / 2;

            if (lineWidths[lineWidths.length - 1] + width + 2 * labelOpts.padding > minSize.width) {
              lineHeights.push(currentLineHeight);
              currentLineHeight = 0;
              lineWidths[lineWidths.length - (i > 0 ? 0 : 1)] = 0;
              lineIndex++;
            }

            legendItem.lineOrColumnIndex = lineIndex;

            if (height > currentLineHeight) {
              currentLineHeight = height;
            } // Store the hitbox width and height here. Final position will be updated in `draw`


            hitboxes[i] = {
              left: 0,
              top: 0,
              width: width,
              height: height
            };
            lineWidths[lineWidths.length - 1] += width + labelOpts.padding;
          });
          lineHeights.push(currentLineHeight);
          minSize.height += lineHeights.reduce(
          /**
          * @param {?} acc
          * @param {?} v
          * @return {?}
          */
          function (acc, v) {
            return acc + v;
          }, 0);
        } else {
          /** @type {?} */
          var vPadding = labelOpts.padding;
          /** @type {?} */

          var columnWidths = me.columnWidths = [];
          /** @type {?} */

          var columnHeights = me.columnHeights = [];
          /** @type {?} */

          var totalWidth = labelOpts.padding;
          /** @type {?} */

          var currentColWidth = 0;
          /** @type {?} */

          var currentColHeight = 0;
          /** @type {?} */

          var columnIndex = 0;
          helpers.each(me.legendItems,
          /**
          * @param {?} legendItem
          * @param {?} i
          * @return {?}
          */
          function (legendItem, i) {
            /** @type {?} */
            var itemWidth;
            /** @type {?} */

            var height;

            if (helpers.isArray(legendItem.text)) {
              itemWidth = getMaxLineWidth(legendItem.text);
              height = fontSize * legendItem.text.length;
            } else {
              itemWidth = ctx.measureText(legendItem.text).width;
              height = fontSize;
            }

            itemWidth += getBoxWidth(labelOpts, fontSize) + fontSize / 2; // If too tall, go to new column

            if (currentColHeight + fontSize + 2 * vPadding > minSize.height) {
              totalWidth += currentColWidth + labelOpts.padding;
              columnWidths.push(currentColWidth); // previous column width

              columnHeights.push(currentColHeight);
              currentColWidth = 0;
              currentColHeight = 0;
              columnIndex++;
            }

            legendItem.lineOrColumnIndex = columnIndex; // Get max width

            currentColWidth = Math.max(currentColWidth, itemWidth);
            currentColHeight += height + vPadding; // Store the hitbox width and height here. Final position will be updated in `draw`

            hitboxes[i] = {
              left: 0,
              top: 0,
              width: itemWidth,
              height: height
            };
          });
          totalWidth += currentColWidth;
          columnWidths.push(currentColWidth);
          columnHeights.push(currentColHeight);
          minSize.width += totalWidth;
        }
      }

      me.width = minSize.width;
      me.height = minSize.height;
    }
    /**
     * @return {?}
     */


    function draw() {
      /** @type {?} */
      var me = this;
      /** @type {?} */

      var opts = me.options;
      /** @type {?} */

      var labelOpts = opts.labels;
      /** @type {?} */

      var globalDefaults = defaults.global;
      /** @type {?} */

      var defaultColor = globalDefaults.defaultColor;
      /** @type {?} */

      var lineDefault = globalDefaults.elements.line;
      /** @type {?} */

      var legendHeight = me.height;
      /** @type {?} */

      var columnHeights = me.columnHeights;
      /** @type {?} */

      var columnWidths = me.columnWidths;
      /** @type {?} */

      var legendWidth = me.width;
      /** @type {?} */

      var lineWidths = me.lineWidths;
      /** @type {?} */

      var lineHeights = me.lineHeights;

      if (opts.display) {
        /** @type {?} */
        var ctx = me.ctx;
        /** @type {?} */

        var fontColor = valueOrDefault(labelOpts.fontColor, globalDefaults.defaultFontColor);
        /** @type {?} */

        var labelFont = helpers.options._parseFont(labelOpts);
        /** @type {?} */


        var fontSize = labelFont.size;
        /** @type {?} */

        var cursor; // Canvas setup

        ctx.textAlign = 'left';
        ctx.textBaseline = 'middle';
        ctx.lineWidth = 0.5;
        ctx.strokeStyle = fontColor; // for strikethrough effect

        ctx.fillStyle = fontColor; // render in correct colour

        ctx.font = labelFont.string;
        /** @type {?} */

        var boxWidth = getBoxWidth(labelOpts, fontSize);
        /** @type {?} */

        var hitboxes = me.legendHitBoxes; // current position

        /** @type {?} */

        var drawLegendBox =
        /**
        * @param {?} x
        * @param {?} y
        * @param {?} legendItem
        * @return {?}
        */
        function drawLegendBox(x, y, legendItem) {
          if (isNaN(boxWidth) || boxWidth <= 0) {
            return;
          } // Set the ctx for the box


          ctx.save();
          /** @type {?} */

          var lineWidth = valueOrDefault(legendItem.lineWidth, lineDefault.borderWidth);
          ctx.fillStyle = valueOrDefault(legendItem.fillStyle, defaultColor);
          ctx.lineCap = valueOrDefault(legendItem.lineCap, lineDefault.borderCapStyle);
          ctx.lineDashOffset = valueOrDefault(legendItem.lineDashOffset, lineDefault.borderDashOffset);
          ctx.lineJoin = valueOrDefault(legendItem.lineJoin, lineDefault.borderJoinStyle);
          ctx.lineWidth = lineWidth;
          ctx.strokeStyle = valueOrDefault(legendItem.strokeStyle, defaultColor);

          if (ctx.setLineDash) {
            // IE 9 and 10 do not support line dash
            ctx.setLineDash(valueOrDefault(legendItem.lineDash, lineDefault.borderDash));
          }

          if (opts.labels && opts.labels.usePointStyle) {
            // Recalculate x and y for drawPoint() because its expecting
            // x and y to be center of figure (instead of top left)

            /** @type {?} */
            var radius = boxWidth * Math.SQRT2 / 2;
            /** @type {?} */

            var centerX = x + boxWidth / 2;
            /** @type {?} */

            var centerY = y + fontSize / 2; // Draw pointStyle as legend symbol

            helpers.canvas.drawPoint(ctx, legendItem.pointStyle, radius, centerX, centerY);
          } else {
            // Draw box as legend symbol
            if (lineWidth !== 0) {
              ctx.strokeRect(x, y, boxWidth, fontSize);
            }

            ctx.fillRect(x, y, boxWidth, fontSize);
          }

          ctx.restore();
        };
        /** @type {?} */


        var drawStrikeThrough =
        /**
        * @param {?} x
        * @param {?} y
        * @param {?} w
        * @return {?}
        */
        function drawStrikeThrough(x, y, w) {
          ctx.beginPath();
          ctx.lineWidth = 2;
          ctx.moveTo(x, y);
          ctx.lineTo(x + w, y);
          ctx.stroke();
        };
        /** @type {?} */


        var drawCrossOver =
        /**
        * @param {?} x
        * @param {?} y
        * @param {?} w
        * @param {?} h
        * @return {?}
        */
        function drawCrossOver(x, y, w, h) {
          ctx.beginPath();
          ctx.lineWidth = 2;
          ctx.moveTo(x, y);
          ctx.lineTo(x + w, y + h);
          ctx.moveTo(x, y + h);
          ctx.lineTo(x + w, y);
          ctx.stroke();
        };
        /** @type {?} */


        var fillText =
        /**
        * @param {?} x
        * @param {?} y
        * @param {?} legendItem
        * @param {?} textWidth
        * @return {?}
        */
        function fillText(x, y, legendItem, textWidth) {
          /** @type {?} */
          var halfFontSize = fontSize / 2;
          /** @type {?} */

          var xLeft = boxWidth + halfFontSize + x;
          /** @type {?} */

          var yMiddle = y + halfFontSize;

          if (helpers.isArray(legendItem.text)) {
            helpers.each(legendItem.text,
            /**
            * @param {?} textLine
            * @param {?} index
            * @return {?}
            */
            function (textLine, index) {
              /** @type {?} */
              var lineOffset = index * fontSize;
              ctx.fillText(textLine, xLeft, yMiddle + lineOffset);
            });
          } else {
            ctx.fillText(legendItem.text, xLeft, yMiddle);
          }

          if (legendItem.hidden) {
            if (helpers.isArray(legendItem.text)) {
              drawCrossOver(xLeft, yMiddle, textWidth, (legendItem.text.length - 1) * (fontSize - 1));
            } else {
              drawStrikeThrough(xLeft, yMiddle, textWidth);
            }
          }
        };
        /** @type {?} */


        var alignmentOffset =
        /**
        * @param {?} dimension
        * @param {?} blockSize
        * @return {?}
        */
        function alignmentOffset(dimension, blockSize) {
          switch (opts.align) {
            case 'start':
              return labelOpts.padding;

            case 'end':
              return dimension - blockSize;

            default:
              // center
              return (dimension - blockSize + labelOpts.padding) / 2;
          }
        }; // Horizontal

        /** @type {?} */


        var isHorizontal = me.isHorizontal();

        if (isHorizontal) {
          cursor = {
            x: me.left + alignmentOffset(legendWidth, lineWidths[0]),
            y: me.top + labelOpts.padding,
            line: 0
          };
        } else {
          cursor = {
            x: me.left + labelOpts.padding,
            y: me.top + alignmentOffset(legendHeight, columnHeights[0]),
            line: 0
          };
        }

        helpers.each(me.legendItems,
        /**
        * @param {?} legendItem
        * @param {?} i
        * @return {?}
        */
        function (legendItem, i) {
          /** @type {?} */
          var textWidth;
          /** @type {?} */

          var height;
          /** @type {?} */

          var boxTopOffset;

          if (legendItem.lineOrColumnIndex > cursor.line) {
            if (isHorizontal) {
              cursor.y += lineHeights[cursor.line];
              cursor.line = legendItem.lineOrColumnIndex;
              cursor.x = me.left + alignmentOffset(legendWidth, lineWidths[cursor.line]);
            } else {
              cursor.x += columnWidths[cursor.line] + labelOpts.padding;
              cursor.line = legendItem.lineOrColumnIndex;
              cursor.y = me.top + alignmentOffset(legendHeight, columnHeights[cursor.line]);
            }
          }

          if (helpers.isArray(legendItem.text)) {
            textWidth = legendItem.text.map(
            /**
            * @param {?} textLine
            * @return {?}
            */
            function (textLine) {
              return ctx.measureText(textLine).width;
            }).reduce(
            /**
            * @param {?} acc
            * @param {?} v
            * @return {?}
            */
            function (acc, v) {
              return v > acc ? v : acc;
            }, 0);
            boxTopOffset = fontSize / 2 * (legendItem.text.length - 1);
            height = fontSize * legendItem.text.length;
          } else {
            textWidth = ctx.measureText(legendItem.text).width;
            boxTopOffset = 0;
            height = fontSize;
          }
          /** @type {?} */


          var width = boxWidth + fontSize / 2 + textWidth;
          /** @type {?} */

          var x = cursor.x;
          /** @type {?} */

          var y = cursor.y;
          /** @type {?} */

          var topOffset = isHorizontal ? Math.trunc((lineHeights[cursor.line] - hitboxes[i].height) / 2) : 0;
          drawLegendBox(x, y + boxTopOffset + topOffset, legendItem);
          hitboxes[i].left = x;
          hitboxes[i].top = y; // Fill the actual label

          fillText(x, y + topOffset, legendItem, textWidth);

          if (isHorizontal) {
            cursor.x += width + labelOpts.padding;
          } else {
            cursor.y += height + labelOpts.padding;
          }
        });
      }
    }
    /**
     * @return {?}
     */


    function monkeyPatchChartJsLegend() {
      /** @type {?} */
      var plugins = Chart.plugins.getAll();
      /** @type {?} */

      var legend = plugins.filter(
      /**
      * @param {?} p
      * @return {?}
      */
      function (p) {
        return p.id === 'legend';
      })[0];
      legend._element.prototype.fit = fit;
      legend._element.prototype.draw = draw;
    }
    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    // tslint:disable:variable-name
    // tslint:disable:no-var-keyword
    // tslint:disable:prefer-const
    // tslint:disable:only-arrow-functions
    // tslint:disable:one-variable-per-declaration
    // tslint:disable:object-literal-shorthand
    // tslint:disable:space-before-function-paren

    /** @type {?} */


    var helpers$1 = Chart.helpers;
    /**
     * @param {?} vm
     * @param {?} align
     * @return {?}
     */

    function getAlignedX(vm, align) {
      return align === 'center' ? vm.x + vm.width / 2 : align === 'right' ? vm.x + vm.width - vm.xPadding : vm.x + vm.xPadding;
    }
    /**
     * @param {?} pt
     * @param {?} vm
     * @param {?} ctx
     * @return {?}
     */


    function drawBody(pt, vm, ctx) {
      /** @type {?} */
      var bodyFontSize = vm.bodyFontSize;
      /** @type {?} */

      var bodySpacing = vm.bodySpacing;
      /** @type {?} */

      var bodyAlign = vm._bodyAlign;
      /** @type {?} */

      var body = vm.body;
      /** @type {?} */

      var drawColorBoxes = vm.displayColors;
      /** @type {?} */

      var labelColors = vm.labelColors;
      /** @type {?} */

      var xLinePadding = 0;
      /** @type {?} */

      var colorX = drawColorBoxes ? getAlignedX(vm, 'left') : 0;
      /** @type {?} */

      var textColor;
      ctx.textAlign = bodyAlign;
      ctx.textBaseline = 'top';
      ctx.font = helpers$1.fontString(bodyFontSize, vm._bodyFontStyle, vm._bodyFontFamily);
      pt.x = getAlignedX(vm, bodyAlign); // Before Body

      /** @type {?} */

      var fillLineOfText =
      /**
      * @param {?} line
      * @return {?}
      */
      function fillLineOfText(line) {
        ctx.fillText(line, pt.x + xLinePadding, pt.y);
        pt.y += bodyFontSize + bodySpacing;
      }; // Before body lines


      ctx.fillStyle = vm.bodyFontColor;
      helpers$1.each(vm.beforeBody, fillLineOfText);
      xLinePadding = drawColorBoxes && bodyAlign !== 'right' ? bodyAlign === 'center' ? bodyFontSize / 2 + 1 : bodyFontSize + 2 : 0; // Draw body lines now

      helpers$1.each(body,
      /**
      * @param {?} bodyItem
      * @param {?} i
      * @return {?}
      */
      function (bodyItem, i) {
        textColor = vm.labelTextColors[i];
        ctx.fillStyle = textColor;
        helpers$1.each(bodyItem.before, fillLineOfText); // Draw Legend-like boxes if needed

        if (drawColorBoxes) {
          // Fill a white rect so that colours merge nicely if the opacity is < 1
          ctx.fillStyle = vm.legendColorBackground;
          ctx.fillRect(colorX, pt.y, bodyFontSize, bodyFontSize); // Border

          ctx.lineWidth = 1;
          ctx.strokeStyle = labelColors[i].borderColor;
          ctx.strokeRect(colorX, pt.y, bodyFontSize, bodyFontSize); // Inner square

          ctx.fillStyle = labelColors[i].backgroundColor;
          ctx.fillRect(colorX + 1, pt.y + 1, bodyFontSize - 2, bodyFontSize - 2);
          ctx.fillStyle = textColor;
        }

        helpers$1.each(bodyItem.lines, fillLineOfText);
        helpers$1.each(bodyItem.after, fillLineOfText);
      }); // Reset back to 0 for after body

      xLinePadding = 0; // After body lines

      helpers$1.each(vm.afterBody, fillLineOfText);
      pt.y -= bodySpacing; // Remove last body spacing
    }
    /**
     * @return {?}
     */


    function monkeyPatchChartJsTooltip() {
      Chart.Tooltip.prototype.drawBody = drawBody;
    }
    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    //# sourceMappingURL=ng2-charts.js.map

    /***/

  },

  /***/
  "./node_modules/ng2-file-upload/__ivy_ngcc__/fesm2015/ng2-file-upload.js": function node_modulesNg2FileUpload__ivy_ngcc__Fesm2015Ng2FileUploadJs(module, __webpack_exports__, __webpack_require__) {
    "use strict";

    __webpack_require__.r(__webpack_exports__);
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "FileDropDirective", function () {
      return FileDropDirective;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "FileItem", function () {
      return FileItem;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "FileLikeObject", function () {
      return FileLikeObject;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "FileSelectDirective", function () {
      return FileSelectDirective;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "FileUploadModule", function () {
      return FileUploadModule;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "FileUploader", function () {
      return FileUploader;
    });
    /* harmony import */


    var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
    /*! @angular/core */
    "./node_modules/@angular/core/__ivy_ngcc__/fesm2015/core.js");
    /* harmony import */


    var _angular_common__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
    /*! @angular/common */
    "./node_modules/@angular/common/__ivy_ngcc__/fesm2015/common.js");
    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    /**
     * @param {?} node
     * @return {?}
     */


    function isElement(node) {
      return !!(node && (node.nodeName || node.prop && node.attr && node.find));
    }

    var FileLikeObject = /*#__PURE__*/function () {
      /**
       * @param {?} fileOrInput
       */
      function FileLikeObject(fileOrInput) {
        _classCallCheck(this, FileLikeObject);

        this.rawFile = fileOrInput;
        /** @type {?} */

        var isInput = isElement(fileOrInput);
        /** @type {?} */

        var fakePathOrObject = isInput ? fileOrInput.value : fileOrInput;
        /** @type {?} */

        var postfix = typeof fakePathOrObject === 'string' ? 'FakePath' : 'Object';
        /** @type {?} */

        var method = '_createFrom' + postfix;
        this[method](fakePathOrObject);
      }
      /**
       * @param {?} path
       * @return {?}
       */


      _createClass(FileLikeObject, [{
        key: "_createFromFakePath",
        value: function _createFromFakePath(path) {
          this.lastModifiedDate = void 0;
          this.size = void 0;
          this.type = 'like/' + path.slice(path.lastIndexOf('.') + 1).toLowerCase();
          this.name = path.slice(path.lastIndexOf('/') + path.lastIndexOf('\\') + 2);
        }
        /**
         * @param {?} object
         * @return {?}
         */

      }, {
        key: "_createFromObject",
        value: function _createFromObject(object) {
          this.size = object.size;
          this.type = object.type;
          this.name = object.name;
        }
      }]);

      return FileLikeObject;
    }();

    if (false) {}
    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */


    var FileItem = /*#__PURE__*/function () {
      /**
       * @param {?} uploader
       * @param {?} some
       * @param {?} options
       */
      function FileItem(uploader, some, options) {
        _classCallCheck(this, FileItem);

        this.url = '/';
        this.headers = [];
        this.withCredentials = true;
        this.formData = [];
        this.isReady = false;
        this.isUploading = false;
        this.isUploaded = false;
        this.isSuccess = false;
        this.isCancel = false;
        this.isError = false;
        this.progress = 0;
        this.index = void 0;
        this.uploader = uploader;
        this.some = some;
        this.options = options;
        this.file = new FileLikeObject(some);
        this._file = some;

        if (uploader.options) {
          this.method = uploader.options.method || 'POST';
          this.alias = uploader.options.itemAlias || 'file';
        }

        this.url = uploader.options.url;
      }
      /**
       * @return {?}
       */


      _createClass(FileItem, [{
        key: "upload",
        value: function upload() {
          try {
            this.uploader.uploadItem(this);
          } catch (e) {
            this.uploader._onCompleteItem(this, '', 0, {});

            this.uploader._onErrorItem(this, '', 0, {});
          }
        }
        /**
         * @return {?}
         */

      }, {
        key: "cancel",
        value: function cancel() {
          this.uploader.cancelItem(this);
        }
        /**
         * @return {?}
         */

      }, {
        key: "remove",
        value: function remove() {
          this.uploader.removeFromQueue(this);
        }
        /**
         * @return {?}
         */

      }, {
        key: "onBeforeUpload",
        value: function onBeforeUpload() {
          return void 0;
        }
        /**
         * @param {?} form
         * @return {?}
         */

      }, {
        key: "onBuildForm",
        value: function onBuildForm(form) {
          return {
            form: form
          };
        }
        /**
         * @param {?} progress
         * @return {?}
         */

      }, {
        key: "onProgress",
        value: function onProgress(progress) {
          return {
            progress: progress
          };
        }
        /**
         * @param {?} response
         * @param {?} status
         * @param {?} headers
         * @return {?}
         */

      }, {
        key: "onSuccess",
        value: function onSuccess(response, status, headers) {
          return {
            response: response,
            status: status,
            headers: headers
          };
        }
        /**
         * @param {?} response
         * @param {?} status
         * @param {?} headers
         * @return {?}
         */

      }, {
        key: "onError",
        value: function onError(response, status, headers) {
          return {
            response: response,
            status: status,
            headers: headers
          };
        }
        /**
         * @param {?} response
         * @param {?} status
         * @param {?} headers
         * @return {?}
         */

      }, {
        key: "onCancel",
        value: function onCancel(response, status, headers) {
          return {
            response: response,
            status: status,
            headers: headers
          };
        }
        /**
         * @param {?} response
         * @param {?} status
         * @param {?} headers
         * @return {?}
         */

      }, {
        key: "onComplete",
        value: function onComplete(response, status, headers) {
          return {
            response: response,
            status: status,
            headers: headers
          };
        }
        /**
         * @return {?}
         */

      }, {
        key: "_onBeforeUpload",
        value: function _onBeforeUpload() {
          this.isReady = true;
          this.isUploading = true;
          this.isUploaded = false;
          this.isSuccess = false;
          this.isCancel = false;
          this.isError = false;
          this.progress = 0;
          this.onBeforeUpload();
        }
        /**
         * @param {?} form
         * @return {?}
         */

      }, {
        key: "_onBuildForm",
        value: function _onBuildForm(form) {
          this.onBuildForm(form);
        }
        /**
         * @param {?} progress
         * @return {?}
         */

      }, {
        key: "_onProgress",
        value: function _onProgress(progress) {
          this.progress = progress;
          this.onProgress(progress);
        }
        /**
         * @param {?} response
         * @param {?} status
         * @param {?} headers
         * @return {?}
         */

      }, {
        key: "_onSuccess",
        value: function _onSuccess(response, status, headers) {
          this.isReady = false;
          this.isUploading = false;
          this.isUploaded = true;
          this.isSuccess = true;
          this.isCancel = false;
          this.isError = false;
          this.progress = 100;
          this.index = void 0;
          this.onSuccess(response, status, headers);
        }
        /**
         * @param {?} response
         * @param {?} status
         * @param {?} headers
         * @return {?}
         */

      }, {
        key: "_onError",
        value: function _onError(response, status, headers) {
          this.isReady = false;
          this.isUploading = false;
          this.isUploaded = true;
          this.isSuccess = false;
          this.isCancel = false;
          this.isError = true;
          this.progress = 0;
          this.index = void 0;
          this.onError(response, status, headers);
        }
        /**
         * @param {?} response
         * @param {?} status
         * @param {?} headers
         * @return {?}
         */

      }, {
        key: "_onCancel",
        value: function _onCancel(response, status, headers) {
          this.isReady = false;
          this.isUploading = false;
          this.isUploaded = false;
          this.isSuccess = false;
          this.isCancel = true;
          this.isError = false;
          this.progress = 0;
          this.index = void 0;
          this.onCancel(response, status, headers);
        }
        /**
         * @param {?} response
         * @param {?} status
         * @param {?} headers
         * @return {?}
         */

      }, {
        key: "_onComplete",
        value: function _onComplete(response, status, headers) {
          this.onComplete(response, status, headers);

          if (this.uploader.options.removeAfterUpload) {
            this.remove();
          }
        }
        /**
         * @return {?}
         */

      }, {
        key: "_prepareToUploading",
        value: function _prepareToUploading() {
          this.index = this.index || ++this.uploader._nextIndex;
          this.isReady = true;
        }
      }]);

      return FileItem;
    }();

    if (false) {}
    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */


    var FileType = /*#__PURE__*/function () {
      function FileType() {
        _classCallCheck(this, FileType);
      }

      _createClass(FileType, null, [{
        key: "getMimeClass",
        value:
        /**
         * @param {?} file
         * @return {?}
         */
        function getMimeClass(file) {
          /** @type {?} */
          var mimeClass = 'application';

          if (this.mime_psd.indexOf(file.type) !== -1) {
            mimeClass = 'image';
          } else if (file.type.match('image.*')) {
            mimeClass = 'image';
          } else if (file.type.match('video.*')) {
            mimeClass = 'video';
          } else if (file.type.match('audio.*')) {
            mimeClass = 'audio';
          } else if (file.type === 'application/pdf') {
            mimeClass = 'pdf';
          } else if (this.mime_compress.indexOf(file.type) !== -1) {
            mimeClass = 'compress';
          } else if (this.mime_doc.indexOf(file.type) !== -1) {
            mimeClass = 'doc';
          } else if (this.mime_xsl.indexOf(file.type) !== -1) {
            mimeClass = 'xls';
          } else if (this.mime_ppt.indexOf(file.type) !== -1) {
            mimeClass = 'ppt';
          }

          if (mimeClass === 'application') {
            mimeClass = this.fileTypeDetection(file.name);
          }

          return mimeClass;
        }
        /**
         * @param {?} inputFilename
         * @return {?}
         */

      }, {
        key: "fileTypeDetection",
        value: function fileTypeDetection(inputFilename) {
          /** @type {?} */
          var types = {
            'jpg': 'image',
            'jpeg': 'image',
            'tif': 'image',
            'psd': 'image',
            'bmp': 'image',
            'png': 'image',
            'nef': 'image',
            'tiff': 'image',
            'cr2': 'image',
            'dwg': 'image',
            'cdr': 'image',
            'ai': 'image',
            'indd': 'image',
            'pin': 'image',
            'cdp': 'image',
            'skp': 'image',
            'stp': 'image',
            '3dm': 'image',
            'mp3': 'audio',
            'wav': 'audio',
            'wma': 'audio',
            'mod': 'audio',
            'm4a': 'audio',
            'compress': 'compress',
            'zip': 'compress',
            'rar': 'compress',
            '7z': 'compress',
            'lz': 'compress',
            'z01': 'compress',
            'bz2': 'compress',
            'gz': 'compress',
            'pdf': 'pdf',
            'xls': 'xls',
            'xlsx': 'xls',
            'ods': 'xls',
            'mp4': 'video',
            'avi': 'video',
            'wmv': 'video',
            'mpg': 'video',
            'mts': 'video',
            'flv': 'video',
            '3gp': 'video',
            'vob': 'video',
            'm4v': 'video',
            'mpeg': 'video',
            'm2ts': 'video',
            'mov': 'video',
            'doc': 'doc',
            'docx': 'doc',
            'eps': 'doc',
            'txt': 'doc',
            'odt': 'doc',
            'rtf': 'doc',
            'ppt': 'ppt',
            'pptx': 'ppt',
            'pps': 'ppt',
            'ppsx': 'ppt',
            'odp': 'ppt'
          };
          /** @type {?} */

          var chunks = inputFilename.split('.');

          if (chunks.length < 2) {
            return 'application';
          }
          /** @type {?} */


          var extension = chunks[chunks.length - 1].toLowerCase();

          if (types[extension] === undefined) {
            return 'application';
          } else {
            return types[extension];
          }
        }
      }]);

      return FileType;
    }();
    /*  MS office  */


    FileType.mime_doc = ['application/msword', 'application/msword', 'application/vnd.openxmlformats-officedocument.wordprocessingml.document', 'application/vnd.openxmlformats-officedocument.wordprocessingml.template', 'application/vnd.ms-word.document.macroEnabled.12', 'application/vnd.ms-word.template.macroEnabled.12'];
    FileType.mime_xsl = ['application/vnd.ms-excel', 'application/vnd.ms-excel', 'application/vnd.ms-excel', 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet', 'application/vnd.openxmlformats-officedocument.spreadsheetml.template', 'application/vnd.ms-excel.sheet.macroEnabled.12', 'application/vnd.ms-excel.template.macroEnabled.12', 'application/vnd.ms-excel.addin.macroEnabled.12', 'application/vnd.ms-excel.sheet.binary.macroEnabled.12'];
    FileType.mime_ppt = ['application/vnd.ms-powerpoint', 'application/vnd.ms-powerpoint', 'application/vnd.ms-powerpoint', 'application/vnd.ms-powerpoint', 'application/vnd.openxmlformats-officedocument.presentationml.presentation', 'application/vnd.openxmlformats-officedocument.presentationml.template', 'application/vnd.openxmlformats-officedocument.presentationml.slideshow', 'application/vnd.ms-powerpoint.addin.macroEnabled.12', 'application/vnd.ms-powerpoint.presentation.macroEnabled.12', 'application/vnd.ms-powerpoint.presentation.macroEnabled.12', 'application/vnd.ms-powerpoint.slideshow.macroEnabled.12'];
    /* PSD */

    FileType.mime_psd = ['image/photoshop', 'image/x-photoshop', 'image/psd', 'application/photoshop', 'application/psd', 'zz-application/zz-winassoc-psd'];
    /* Compressed files */

    FileType.mime_compress = ['application/x-gtar', 'application/x-gcompress', 'application/compress', 'application/x-tar', 'application/x-rar-compressed', 'application/octet-stream', 'application/x-zip-compressed', 'application/zip-compressed', 'application/x-7z-compressed', 'application/gzip', 'application/x-bzip2'];

    if (false) {}
    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    /**
     * @param {?} value
     * @return {?}
     */


    function _isFile(value) {
      return File && value instanceof File;
    }
    /**
     * @record
     */


    function Headers() {}

    if (false) {}
    /**
     * @record
     */


    function FileUploaderOptions() {}

    if (false) {}

    var FileUploader = /*#__PURE__*/function () {
      /**
       * @param {?} options
       */
      function FileUploader(options) {
        _classCallCheck(this, FileUploader);

        this.isUploading = false;
        this.queue = [];
        this.progress = 0;
        this._nextIndex = 0;
        this.options = {
          autoUpload: false,
          isHTML5: true,
          filters: [],
          removeAfterUpload: false,
          disableMultipart: false,
          formatDataFunction:
          /**
          * @param {?} item
          * @return {?}
          */
          function formatDataFunction(item) {
            return item._file;
          },
          formatDataFunctionIsAsync: false
        };
        this.setOptions(options);
        this.response = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
      }
      /**
       * @param {?} options
       * @return {?}
       */


      _createClass(FileUploader, [{
        key: "setOptions",
        value: function setOptions(options) {
          this.options = Object.assign(this.options, options);
          this.authToken = this.options.authToken;
          this.authTokenHeader = this.options.authTokenHeader || 'Authorization';
          this.autoUpload = this.options.autoUpload;
          this.options.filters.unshift({
            name: 'queueLimit',
            fn: this._queueLimitFilter
          });

          if (this.options.maxFileSize) {
            this.options.filters.unshift({
              name: 'fileSize',
              fn: this._fileSizeFilter
            });
          }

          if (this.options.allowedFileType) {
            this.options.filters.unshift({
              name: 'fileType',
              fn: this._fileTypeFilter
            });
          }

          if (this.options.allowedMimeType) {
            this.options.filters.unshift({
              name: 'mimeType',
              fn: this._mimeTypeFilter
            });
          }

          for (var i = 0; i < this.queue.length; i++) {
            this.queue[i].url = this.options.url;
          }
        }
        /**
         * @param {?} files
         * @param {?=} options
         * @param {?=} filters
         * @return {?}
         */

      }, {
        key: "addToQueue",
        value: function addToQueue(files, options, filters) {
          var _this30 = this;

          /** @type {?} */
          var list = [];

          var _iterator18 = _createForOfIteratorHelper(files),
              _step18;

          try {
            for (_iterator18.s(); !(_step18 = _iterator18.n()).done;) {
              var file = _step18.value;
              list.push(file);
            }
            /** @type {?} */

          } catch (err) {
            _iterator18.e(err);
          } finally {
            _iterator18.f();
          }

          var arrayOfFilters = this._getFilters(filters);
          /** @type {?} */


          var count = this.queue.length;
          /** @type {?} */

          var addedFileItems = [];
          list.map(
          /**
          * @param {?} some
          * @return {?}
          */
          function (some) {
            if (!options) {
              options = _this30.options;
            }
            /** @type {?} */


            var temp = new FileLikeObject(some);

            if (_this30._isValidFile(temp, arrayOfFilters, options)) {
              /** @type {?} */
              var fileItem = new FileItem(_this30, some, options);
              addedFileItems.push(fileItem);

              _this30.queue.push(fileItem);

              _this30._onAfterAddingFile(fileItem);
            } else {
              /** @type {?} */
              var filter = arrayOfFilters[_this30._failFilterIndex];

              _this30._onWhenAddingFileFailed(temp, filter, options);
            }
          });

          if (this.queue.length !== count) {
            this._onAfterAddingAll(addedFileItems);

            this.progress = this._getTotalProgress();
          }

          this._render();

          if (this.options.autoUpload) {
            this.uploadAll();
          }
        }
        /**
         * @param {?} value
         * @return {?}
         */

      }, {
        key: "removeFromQueue",
        value: function removeFromQueue(value) {
          /** @type {?} */
          var index = this.getIndexOfItem(value);
          /** @type {?} */

          var item = this.queue[index];

          if (item.isUploading) {
            item.cancel();
          }

          this.queue.splice(index, 1);
          this.progress = this._getTotalProgress();
        }
        /**
         * @return {?}
         */

      }, {
        key: "clearQueue",
        value: function clearQueue() {
          while (this.queue.length) {
            this.queue[0].remove();
          }

          this.progress = 0;
        }
        /**
         * @param {?} value
         * @return {?}
         */

      }, {
        key: "uploadItem",
        value: function uploadItem(value) {
          /** @type {?} */
          var index = this.getIndexOfItem(value);
          /** @type {?} */

          var item = this.queue[index];
          /** @type {?} */

          var transport = this.options.isHTML5 ? '_xhrTransport' : '_iframeTransport';

          item._prepareToUploading();

          if (this.isUploading) {
            return;
          }

          this.isUploading = true;
          this[transport](item);
        }
        /**
         * @param {?} value
         * @return {?}
         */

      }, {
        key: "cancelItem",
        value: function cancelItem(value) {
          /** @type {?} */
          var index = this.getIndexOfItem(value);
          /** @type {?} */

          var item = this.queue[index];
          /** @type {?} */

          var prop = this.options.isHTML5 ? item._xhr : item._form;

          if (item && item.isUploading) {
            prop.abort();
          }
        }
        /**
         * @return {?}
         */

      }, {
        key: "uploadAll",
        value: function uploadAll() {
          /** @type {?} */
          var items = this.getNotUploadedItems().filter(
          /**
          * @param {?} item
          * @return {?}
          */
          function (item) {
            return !item.isUploading;
          });

          if (!items.length) {
            return;
          }

          items.map(
          /**
          * @param {?} item
          * @return {?}
          */
          function (item) {
            return item._prepareToUploading();
          });
          items[0].upload();
        }
        /**
         * @return {?}
         */

      }, {
        key: "cancelAll",
        value: function cancelAll() {
          /** @type {?} */
          var items = this.getNotUploadedItems();
          items.map(
          /**
          * @param {?} item
          * @return {?}
          */
          function (item) {
            return item.cancel();
          });
        }
        /**
         * @param {?} value
         * @return {?}
         */

      }, {
        key: "isFile",
        value: function isFile(value) {
          return _isFile(value);
        }
        /**
         * @param {?} value
         * @return {?}
         */

      }, {
        key: "isFileLikeObject",
        value: function isFileLikeObject(value) {
          return value instanceof FileLikeObject;
        }
        /**
         * @param {?} value
         * @return {?}
         */

      }, {
        key: "getIndexOfItem",
        value: function getIndexOfItem(value) {
          return typeof value === 'number' ? value : this.queue.indexOf(value);
        }
        /**
         * @return {?}
         */

      }, {
        key: "getNotUploadedItems",
        value: function getNotUploadedItems() {
          return this.queue.filter(
          /**
          * @param {?} item
          * @return {?}
          */
          function (item) {
            return !item.isUploaded;
          });
        }
        /**
         * @return {?}
         */

      }, {
        key: "getReadyItems",
        value: function getReadyItems() {
          return this.queue.filter(
          /**
          * @param {?} item
          * @return {?}
          */
          function (item) {
            return item.isReady && !item.isUploading;
          }).sort(
          /**
          * @param {?} item1
          * @param {?} item2
          * @return {?}
          */
          function (item1, item2) {
            return item1.index - item2.index;
          });
        }
        /**
         * @return {?}
         */

      }, {
        key: "destroy",
        value: function destroy() {
          return void 0;
        }
        /**
         * @param {?} fileItems
         * @return {?}
         */

      }, {
        key: "onAfterAddingAll",
        value: function onAfterAddingAll(fileItems) {
          return {
            fileItems: fileItems
          };
        }
        /**
         * @param {?} fileItem
         * @param {?} form
         * @return {?}
         */

      }, {
        key: "onBuildItemForm",
        value: function onBuildItemForm(fileItem, form) {
          return {
            fileItem: fileItem,
            form: form
          };
        }
        /**
         * @param {?} fileItem
         * @return {?}
         */

      }, {
        key: "onAfterAddingFile",
        value: function onAfterAddingFile(fileItem) {
          return {
            fileItem: fileItem
          };
        }
        /**
         * @param {?} item
         * @param {?} filter
         * @param {?} options
         * @return {?}
         */

      }, {
        key: "onWhenAddingFileFailed",
        value: function onWhenAddingFileFailed(item, filter, options) {
          return {
            item: item,
            filter: filter,
            options: options
          };
        }
        /**
         * @param {?} fileItem
         * @return {?}
         */

      }, {
        key: "onBeforeUploadItem",
        value: function onBeforeUploadItem(fileItem) {
          return {
            fileItem: fileItem
          };
        }
        /**
         * @param {?} fileItem
         * @param {?} progress
         * @return {?}
         */

      }, {
        key: "onProgressItem",
        value: function onProgressItem(fileItem, progress) {
          return {
            fileItem: fileItem,
            progress: progress
          };
        }
        /**
         * @param {?} progress
         * @return {?}
         */

      }, {
        key: "onProgressAll",
        value: function onProgressAll(progress) {
          return {
            progress: progress
          };
        }
        /**
         * @param {?} item
         * @param {?} response
         * @param {?} status
         * @param {?} headers
         * @return {?}
         */

      }, {
        key: "onSuccessItem",
        value: function onSuccessItem(item, response, status, headers) {
          return {
            item: item,
            response: response,
            status: status,
            headers: headers
          };
        }
        /**
         * @param {?} item
         * @param {?} response
         * @param {?} status
         * @param {?} headers
         * @return {?}
         */

      }, {
        key: "onErrorItem",
        value: function onErrorItem(item, response, status, headers) {
          return {
            item: item,
            response: response,
            status: status,
            headers: headers
          };
        }
        /**
         * @param {?} item
         * @param {?} response
         * @param {?} status
         * @param {?} headers
         * @return {?}
         */

      }, {
        key: "onCancelItem",
        value: function onCancelItem(item, response, status, headers) {
          return {
            item: item,
            response: response,
            status: status,
            headers: headers
          };
        }
        /**
         * @param {?} item
         * @param {?} response
         * @param {?} status
         * @param {?} headers
         * @return {?}
         */

      }, {
        key: "onCompleteItem",
        value: function onCompleteItem(item, response, status, headers) {
          return {
            item: item,
            response: response,
            status: status,
            headers: headers
          };
        }
        /**
         * @return {?}
         */

      }, {
        key: "onCompleteAll",
        value: function onCompleteAll() {
          return void 0;
        }
        /**
         * @param {?} item
         * @return {?}
         */

      }, {
        key: "_mimeTypeFilter",
        value: function _mimeTypeFilter(item) {
          return !(this.options.allowedMimeType && this.options.allowedMimeType.indexOf(item.type) === -1);
        }
        /**
         * @param {?} item
         * @return {?}
         */

      }, {
        key: "_fileSizeFilter",
        value: function _fileSizeFilter(item) {
          return !(this.options.maxFileSize && item.size > this.options.maxFileSize);
        }
        /**
         * @param {?} item
         * @return {?}
         */

      }, {
        key: "_fileTypeFilter",
        value: function _fileTypeFilter(item) {
          return !(this.options.allowedFileType && this.options.allowedFileType.indexOf(FileType.getMimeClass(item)) === -1);
        }
        /**
         * @param {?} item
         * @param {?} response
         * @param {?} status
         * @param {?} headers
         * @return {?}
         */

      }, {
        key: "_onErrorItem",
        value: function _onErrorItem(item, response, status, headers) {
          item._onError(response, status, headers);

          this.onErrorItem(item, response, status, headers);
        }
        /**
         * @param {?} item
         * @param {?} response
         * @param {?} status
         * @param {?} headers
         * @return {?}
         */

      }, {
        key: "_onCompleteItem",
        value: function _onCompleteItem(item, response, status, headers) {
          item._onComplete(response, status, headers);

          this.onCompleteItem(item, response, status, headers);
          /** @type {?} */

          var nextItem = this.getReadyItems()[0];
          this.isUploading = false;

          if (nextItem) {
            nextItem.upload();
            return;
          }

          this.onCompleteAll();
          this.progress = this._getTotalProgress();

          this._render();
        }
        /**
         * @protected
         * @param {?} parsedHeaders
         * @return {?}
         */

      }, {
        key: "_headersGetter",
        value: function _headersGetter(parsedHeaders) {
          return (
            /**
            * @param {?} name
            * @return {?}
            */
            function (name) {
              if (name) {
                return parsedHeaders[name.toLowerCase()] || void 0;
              }

              return parsedHeaders;
            }
          );
        }
        /**
         * @protected
         * @param {?} item
         * @return {?}
         */

      }, {
        key: "_xhrTransport",
        value: function _xhrTransport(item) {
          var _this31 = this;

          /** @type {?} */
          var that = this;
          /** @type {?} */

          var xhr = item._xhr = new XMLHttpRequest();
          /** @type {?} */

          var sendable;

          this._onBeforeUploadItem(item);

          if (typeof item._file.size !== 'number') {
            throw new TypeError('The file specified is no longer valid');
          }

          if (!this.options.disableMultipart) {
            sendable = new FormData();

            this._onBuildItemForm(item, sendable);
            /** @type {?} */


            var appendFile =
            /**
            * @return {?}
            */
            function appendFile() {
              return sendable.append(item.alias, item._file, item.file.name);
            };

            if (!this.options.parametersBeforeFiles) {
              appendFile();
            } // For AWS, Additional Parameters must come BEFORE Files


            if (this.options.additionalParameter !== undefined) {
              Object.keys(this.options.additionalParameter).forEach(
              /**
              * @param {?} key
              * @return {?}
              */
              function (key) {
                /** @type {?} */
                var paramVal = _this31.options.additionalParameter[key]; // Allow an additional parameter to include the filename

                if (typeof paramVal === 'string' && paramVal.indexOf('{{file_name}}') >= 0) {
                  paramVal = paramVal.replace('{{file_name}}', item.file.name);
                }

                sendable.append(key, paramVal);
              });
            }

            if (this.options.parametersBeforeFiles) {
              appendFile();
            }
          } else {
            sendable = this.options.formatDataFunction(item);
          }

          xhr.upload.onprogress =
          /**
          * @param {?} event
          * @return {?}
          */
          function (event) {
            /** @type {?} */
            var progress = Math.round(event.lengthComputable ? event.loaded * 100 / event.total : 0);

            _this31._onProgressItem(item, progress);
          };

          xhr.onload =
          /**
          * @return {?}
          */
          function () {
            /** @type {?} */
            var headers = _this31._parseHeaders(xhr.getAllResponseHeaders());
            /** @type {?} */


            var response = _this31._transformResponse(xhr.response, headers);
            /** @type {?} */


            var gist = _this31._isSuccessCode(xhr.status) ? 'Success' : 'Error';
            /** @type {?} */

            var method = '_on' + gist + 'Item';

            _this31[method](item, response, xhr.status, headers);

            _this31._onCompleteItem(item, response, xhr.status, headers);
          };

          xhr.onerror =
          /**
          * @return {?}
          */
          function () {
            /** @type {?} */
            var headers = _this31._parseHeaders(xhr.getAllResponseHeaders());
            /** @type {?} */


            var response = _this31._transformResponse(xhr.response, headers);

            _this31._onErrorItem(item, response, xhr.status, headers);

            _this31._onCompleteItem(item, response, xhr.status, headers);
          };

          xhr.onabort =
          /**
          * @return {?}
          */
          function () {
            /** @type {?} */
            var headers = _this31._parseHeaders(xhr.getAllResponseHeaders());
            /** @type {?} */


            var response = _this31._transformResponse(xhr.response, headers);

            _this31._onCancelItem(item, response, xhr.status, headers);

            _this31._onCompleteItem(item, response, xhr.status, headers);
          };

          xhr.open(item.method, item.url, true);
          xhr.withCredentials = item.withCredentials;

          if (this.options.headers) {
            var _iterator19 = _createForOfIteratorHelper(this.options.headers),
                _step19;

            try {
              for (_iterator19.s(); !(_step19 = _iterator19.n()).done;) {
                var header = _step19.value;
                xhr.setRequestHeader(header.name, header.value);
              }
            } catch (err) {
              _iterator19.e(err);
            } finally {
              _iterator19.f();
            }
          }

          if (item.headers.length) {
            var _iterator20 = _createForOfIteratorHelper(item.headers),
                _step20;

            try {
              for (_iterator20.s(); !(_step20 = _iterator20.n()).done;) {
                var _header = _step20.value;
                xhr.setRequestHeader(_header.name, _header.value);
              }
            } catch (err) {
              _iterator20.e(err);
            } finally {
              _iterator20.f();
            }
          }

          if (this.authToken) {
            xhr.setRequestHeader(this.authTokenHeader, this.authToken);
          }

          xhr.onreadystatechange =
          /**
          * @return {?}
          */
          function () {
            if (xhr.readyState == XMLHttpRequest.DONE) {
              that.response.emit(xhr.responseText);
            }
          };

          if (this.options.formatDataFunctionIsAsync) {
            sendable.then(
            /**
            * @param {?} result
            * @return {?}
            */
            function (result) {
              return xhr.send(JSON.stringify(result));
            });
          } else {
            xhr.send(sendable);
          }

          this._render();
        }
        /**
         * @protected
         * @param {?=} value
         * @return {?}
         */

      }, {
        key: "_getTotalProgress",
        value: function _getTotalProgress() {
          var value = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;

          if (this.options.removeAfterUpload) {
            return value;
          }
          /** @type {?} */


          var notUploaded = this.getNotUploadedItems().length;
          /** @type {?} */

          var uploaded = notUploaded ? this.queue.length - notUploaded : this.queue.length;
          /** @type {?} */

          var ratio = 100 / this.queue.length;
          /** @type {?} */

          var current = value * ratio / 100;
          return Math.round(uploaded * ratio + current);
        }
        /**
         * @protected
         * @param {?} filters
         * @return {?}
         */

      }, {
        key: "_getFilters",
        value: function _getFilters(filters) {
          if (!filters) {
            return this.options.filters;
          }

          if (Array.isArray(filters)) {
            return filters;
          }

          if (typeof filters === 'string') {
            /** @type {?} */
            var names = filters.match(/[^\s,]+/g);
            return this.options.filters.filter(
            /**
            * @param {?} filter
            * @return {?}
            */
            function (filter) {
              return names.indexOf(filter.name) !== -1;
            });
          }

          return this.options.filters;
        }
        /**
         * @protected
         * @return {?}
         */

      }, {
        key: "_render",
        value: function _render() {
          return void 0;
        }
        /**
         * @protected
         * @return {?}
         */

      }, {
        key: "_queueLimitFilter",
        value: function _queueLimitFilter() {
          return this.options.queueLimit === undefined || this.queue.length < this.options.queueLimit;
        }
        /**
         * @protected
         * @param {?} file
         * @param {?} filters
         * @param {?} options
         * @return {?}
         */

      }, {
        key: "_isValidFile",
        value: function _isValidFile(file, filters, options) {
          var _this32 = this;

          this._failFilterIndex = -1;
          return !filters.length ? true : filters.every(
          /**
          * @param {?} filter
          * @return {?}
          */
          function (filter) {
            _this32._failFilterIndex++;
            return filter.fn.call(_this32, file, options);
          });
        }
        /**
         * @protected
         * @param {?} status
         * @return {?}
         */

      }, {
        key: "_isSuccessCode",
        value: function _isSuccessCode(status) {
          return status >= 200 && status < 300 || status === 304;
        }
        /**
         * @protected
         * @param {?} response
         * @param {?} headers
         * @return {?}
         */

      }, {
        key: "_transformResponse",
        value: function _transformResponse(response, headers) {
          return response;
        }
        /**
         * @protected
         * @param {?} headers
         * @return {?}
         */

      }, {
        key: "_parseHeaders",
        value: function _parseHeaders(headers) {
          /** @type {?} */
          var parsed = {};
          /** @type {?} */

          var key;
          /** @type {?} */

          var val;
          /** @type {?} */

          var i;

          if (!headers) {
            return parsed;
          }

          headers.split('\n').map(
          /**
          * @param {?} line
          * @return {?}
          */
          function (line) {
            i = line.indexOf(':');
            key = line.slice(0, i).trim().toLowerCase();
            val = line.slice(i + 1).trim();

            if (key) {
              parsed[key] = parsed[key] ? parsed[key] + ', ' + val : val;
            }
          });
          return parsed;
        }
        /**
         * @protected
         * @param {?} item
         * @param {?} filter
         * @param {?} options
         * @return {?}
         */

      }, {
        key: "_onWhenAddingFileFailed",
        value: function _onWhenAddingFileFailed(item, filter, options) {
          this.onWhenAddingFileFailed(item, filter, options);
        }
        /**
         * @protected
         * @param {?} item
         * @return {?}
         */

      }, {
        key: "_onAfterAddingFile",
        value: function _onAfterAddingFile(item) {
          this.onAfterAddingFile(item);
        }
        /**
         * @protected
         * @param {?} items
         * @return {?}
         */

      }, {
        key: "_onAfterAddingAll",
        value: function _onAfterAddingAll(items) {
          this.onAfterAddingAll(items);
        }
        /**
         * @protected
         * @param {?} item
         * @return {?}
         */

      }, {
        key: "_onBeforeUploadItem",
        value: function _onBeforeUploadItem(item) {
          item._onBeforeUpload();

          this.onBeforeUploadItem(item);
        }
        /**
         * @protected
         * @param {?} item
         * @param {?} form
         * @return {?}
         */

      }, {
        key: "_onBuildItemForm",
        value: function _onBuildItemForm(item, form) {
          item._onBuildForm(form);

          this.onBuildItemForm(item, form);
        }
        /**
         * @protected
         * @param {?} item
         * @param {?} progress
         * @return {?}
         */

      }, {
        key: "_onProgressItem",
        value: function _onProgressItem(item, progress) {
          /** @type {?} */
          var total = this._getTotalProgress(progress);

          this.progress = total;

          item._onProgress(progress);

          this.onProgressItem(item, progress);
          this.onProgressAll(total);

          this._render();
        }
        /**
         * @protected
         * @param {?} item
         * @param {?} response
         * @param {?} status
         * @param {?} headers
         * @return {?}
         */

      }, {
        key: "_onSuccessItem",
        value: function _onSuccessItem(item, response, status, headers) {
          item._onSuccess(response, status, headers);

          this.onSuccessItem(item, response, status, headers);
        }
        /**
         * @protected
         * @param {?} item
         * @param {?} response
         * @param {?} status
         * @param {?} headers
         * @return {?}
         */

      }, {
        key: "_onCancelItem",
        value: function _onCancelItem(item, response, status, headers) {
          item._onCancel(response, status, headers);

          this.onCancelItem(item, response, status, headers);
        }
      }]);

      return FileUploader;
    }();

    if (false) {}
    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */


    var FileSelectDirective = /*#__PURE__*/function () {
      /**
       * @param {?} element
       */
      function FileSelectDirective(element) {
        _classCallCheck(this, FileSelectDirective);

        this.onFileSelected = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
        this.element = element;
      }
      /**
       * @return {?}
       */


      _createClass(FileSelectDirective, [{
        key: "getOptions",
        value: function getOptions() {
          return this.uploader.options;
        }
        /**
         * @return {?}
         */

      }, {
        key: "getFilters",
        value: function getFilters() {
          return {};
        }
        /**
         * @return {?}
         */

      }, {
        key: "isEmptyAfterSelection",
        value: function isEmptyAfterSelection() {
          return !!this.element.nativeElement.attributes.multiple;
        }
        /**
         * @return {?}
         */

      }, {
        key: "onChange",
        value: function onChange() {
          /** @type {?} */
          var files = this.element.nativeElement.files;
          /** @type {?} */

          var options = this.getOptions();
          /** @type {?} */

          var filters = this.getFilters();
          this.uploader.addToQueue(files, options, filters);
          this.onFileSelected.emit(files);

          if (this.isEmptyAfterSelection()) {
            this.element.nativeElement.value = '';
          }
        }
      }]);

      return FileSelectDirective;
    }();

    FileSelectDirective.ɵfac = function FileSelectDirective_Factory(t) {
      return new (t || FileSelectDirective)(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__["ElementRef"]));
    };

    FileSelectDirective.ɵdir = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineDirective"]({
      type: FileSelectDirective,
      selectors: [["", "ng2FileSelect", ""]],
      hostBindings: function FileSelectDirective_HostBindings(rf, ctx) {
        if (rf & 1) {
          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵlistener"]("change", function FileSelectDirective_change_HostBindingHandler() {
            return ctx.onChange();
          });
        }
      },
      inputs: {
        uploader: "uploader"
      },
      outputs: {
        onFileSelected: "onFileSelected"
      }
    });
    /** @nocollapse */

    FileSelectDirective.ctorParameters = function () {
      return [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ElementRef"]
      }];
    };

    FileSelectDirective.propDecorators = {
      uploader: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
      }],
      onFileSelected: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"]
      }],
      onChange: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["HostListener"],
        args: ['change']
      }]
    };
    /*@__PURE__*/

    (function () {
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](FileSelectDirective, [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Directive"],
        args: [{
          selector: '[ng2FileSelect]'
        }]
      }], function () {
        return [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ElementRef"]
        }];
      }, {
        onFileSelected: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"]
        }],
        onChange: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["HostListener"],
          args: ['change']
        }],
        uploader: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
        }]
      });
    })();

    if (false) {}
    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */


    var FileDropDirective = /*#__PURE__*/function () {
      /**
       * @param {?} element
       */
      function FileDropDirective(element) {
        _classCallCheck(this, FileDropDirective);

        this.fileOver = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
        this.onFileDrop = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
        this.element = element;
      }
      /**
       * @return {?}
       */


      _createClass(FileDropDirective, [{
        key: "getOptions",
        value: function getOptions() {
          return this.uploader.options;
        }
        /**
         * @return {?}
         */

      }, {
        key: "getFilters",
        value: function getFilters() {
          return {};
        }
        /**
         * @param {?} event
         * @return {?}
         */

      }, {
        key: "onDrop",
        value: function onDrop(event) {
          /** @type {?} */
          var transfer = this._getTransfer(event);

          if (!transfer) {
            return;
          }
          /** @type {?} */


          var options = this.getOptions();
          /** @type {?} */

          var filters = this.getFilters();

          this._preventAndStop(event);

          this.uploader.addToQueue(transfer.files, options, filters);
          this.fileOver.emit(false);
          this.onFileDrop.emit(transfer.files);
        }
        /**
         * @param {?} event
         * @return {?}
         */

      }, {
        key: "onDragOver",
        value: function onDragOver(event) {
          /** @type {?} */
          var transfer = this._getTransfer(event);

          if (!this._haveFiles(transfer.types)) {
            return;
          }

          transfer.dropEffect = 'copy';

          this._preventAndStop(event);

          this.fileOver.emit(true);
        }
        /**
         * @param {?} event
         * @return {?}
         */

      }, {
        key: "onDragLeave",
        value: function onDragLeave(event) {
          if (this.element) {
            if (event.currentTarget === this.element[0]) {
              return;
            }
          }

          this._preventAndStop(event);

          this.fileOver.emit(false);
        }
        /**
         * @protected
         * @param {?} event
         * @return {?}
         */

      }, {
        key: "_getTransfer",
        value: function _getTransfer(event) {
          return event.dataTransfer ? event.dataTransfer : event.originalEvent.dataTransfer; // jQuery fix;
        }
        /**
         * @protected
         * @param {?} event
         * @return {?}
         */

      }, {
        key: "_preventAndStop",
        value: function _preventAndStop(event) {
          event.preventDefault();
          event.stopPropagation();
        }
        /**
         * @protected
         * @param {?} types
         * @return {?}
         */

      }, {
        key: "_haveFiles",
        value: function _haveFiles(types) {
          if (!types) {
            return false;
          }

          if (types.indexOf) {
            return types.indexOf('Files') !== -1;
          } else if (types.contains) {
            return types.contains('Files');
          } else {
            return false;
          }
        }
      }]);

      return FileDropDirective;
    }();

    FileDropDirective.ɵfac = function FileDropDirective_Factory(t) {
      return new (t || FileDropDirective)(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__["ElementRef"]));
    };

    FileDropDirective.ɵdir = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineDirective"]({
      type: FileDropDirective,
      selectors: [["", "ng2FileDrop", ""]],
      hostBindings: function FileDropDirective_HostBindings(rf, ctx) {
        if (rf & 1) {
          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵlistener"]("drop", function FileDropDirective_drop_HostBindingHandler($event) {
            return ctx.onDrop($event);
          })("dragover", function FileDropDirective_dragover_HostBindingHandler($event) {
            return ctx.onDragOver($event);
          })("dragleave", function FileDropDirective_dragleave_HostBindingHandler($event) {
            return ctx.onDragLeave($event);
          });
        }
      },
      inputs: {
        uploader: "uploader"
      },
      outputs: {
        fileOver: "fileOver",
        onFileDrop: "onFileDrop"
      }
    });
    /** @nocollapse */

    FileDropDirective.ctorParameters = function () {
      return [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ElementRef"]
      }];
    };

    FileDropDirective.propDecorators = {
      uploader: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
      }],
      fileOver: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"]
      }],
      onFileDrop: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"]
      }],
      onDrop: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["HostListener"],
        args: ['drop', ['$event']]
      }],
      onDragOver: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["HostListener"],
        args: ['dragover', ['$event']]
      }],
      onDragLeave: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["HostListener"],
        args: ['dragleave', ['$event']]
      }]
    };
    /*@__PURE__*/

    (function () {
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](FileDropDirective, [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Directive"],
        args: [{
          selector: '[ng2FileDrop]'
        }]
      }], function () {
        return [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ElementRef"]
        }];
      }, {
        fileOver: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"]
        }],
        onFileDrop: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"]
        }],
        onDrop: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["HostListener"],
          args: ['drop', ['$event']]
        }],
        onDragOver: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["HostListener"],
          args: ['dragover', ['$event']]
        }],
        onDragLeave: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["HostListener"],
          args: ['dragleave', ['$event']]
        }],
        uploader: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
        }]
      });
    })();

    if (false) {}
    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */


    var FileUploadModule = function FileUploadModule() {
      _classCallCheck(this, FileUploadModule);
    };

    FileUploadModule.ɵmod = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineNgModule"]({
      type: FileUploadModule
    });
    FileUploadModule.ɵinj = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineInjector"]({
      factory: function FileUploadModule_Factory(t) {
        return new (t || FileUploadModule)();
      },
      imports: [[_angular_common__WEBPACK_IMPORTED_MODULE_1__["CommonModule"]]]
    });

    (function () {
      (typeof ngJitMode === "undefined" || ngJitMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵsetNgModuleScope"](FileUploadModule, {
        declarations: function declarations() {
          return [FileDropDirective, FileSelectDirective];
        },
        imports: function imports() {
          return [_angular_common__WEBPACK_IMPORTED_MODULE_1__["CommonModule"]];
        },
        exports: function exports() {
          return [FileDropDirective, FileSelectDirective];
        }
      });
    })();
    /*@__PURE__*/


    (function () {
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](FileUploadModule, [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["NgModule"],
        args: [{
          imports: [_angular_common__WEBPACK_IMPORTED_MODULE_1__["CommonModule"]],
          declarations: [FileDropDirective, FileSelectDirective],
          exports: [FileDropDirective, FileSelectDirective]
        }]
      }], null, null);
    })();
    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    //# sourceMappingURL=ng2-file-upload.js.map

    /***/

  },

  /***/
  "./node_modules/tslib/tslib.es6.js": function node_modulesTslibTslibEs6Js(module, __webpack_exports__, __webpack_require__) {
    "use strict";

    __webpack_require__.r(__webpack_exports__);
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "__extends", function () {
      return __extends;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "__assign", function () {
      return _assign;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "__rest", function () {
      return __rest;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "__decorate", function () {
      return __decorate;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "__param", function () {
      return __param;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "__metadata", function () {
      return __metadata;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "__awaiter", function () {
      return __awaiter;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "__generator", function () {
      return __generator;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "__createBinding", function () {
      return __createBinding;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "__exportStar", function () {
      return __exportStar;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "__values", function () {
      return __values;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "__read", function () {
      return __read;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "__spread", function () {
      return __spread;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "__spreadArrays", function () {
      return __spreadArrays;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "__await", function () {
      return __await;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "__asyncGenerator", function () {
      return __asyncGenerator;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "__asyncDelegator", function () {
      return __asyncDelegator;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "__asyncValues", function () {
      return __asyncValues;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "__makeTemplateObject", function () {
      return __makeTemplateObject;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "__importStar", function () {
      return __importStar;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "__importDefault", function () {
      return __importDefault;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "__classPrivateFieldGet", function () {
      return __classPrivateFieldGet;
    });
    /* harmony export (binding) */


    __webpack_require__.d(__webpack_exports__, "__classPrivateFieldSet", function () {
      return __classPrivateFieldSet;
    });
    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation.
    
    Permission to use, copy, modify, and/or distribute this software for any
    purpose with or without fee is hereby granted.
    
    THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
    REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
    AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
    INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
    LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
    OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
    PERFORMANCE OF THIS SOFTWARE.
    ***************************************************************************** */

    /* global Reflect, Promise */


    var _extendStatics = function extendStatics(d, b) {
      _extendStatics = Object.setPrototypeOf || {
        __proto__: []
      } instanceof Array && function (d, b) {
        d.__proto__ = b;
      } || function (d, b) {
        for (var p in b) {
          if (b.hasOwnProperty(p)) d[p] = b[p];
        }
      };

      return _extendStatics(d, b);
    };

    function __extends(d, b) {
      _extendStatics(d, b);

      function __() {
        this.constructor = d;
      }

      d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }

    var _assign = function __assign() {
      _assign = Object.assign || function __assign(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
          s = arguments[i];

          for (var p in s) {
            if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
          }
        }

        return t;
      };

      return _assign.apply(this, arguments);
    };

    function __rest(s, e) {
      var t = {};

      for (var p in s) {
        if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
      }

      if (s != null && typeof Object.getOwnPropertySymbols === "function") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
        if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
      }
      return t;
    }

    function __decorate(decorators, target, key, desc) {
      var c = arguments.length,
          r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
          d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {
        if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      }
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    }

    function __param(paramIndex, decorator) {
      return function (target, key) {
        decorator(target, key, paramIndex);
      };
    }

    function __metadata(metadataKey, metadataValue) {
      if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(metadataKey, metadataValue);
    }

    function __awaiter(thisArg, _arguments, P, generator) {
      function adopt(value) {
        return value instanceof P ? value : new P(function (resolve) {
          resolve(value);
        });
      }

      return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e) {
            reject(e);
          }
        }

        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e) {
            reject(e);
          }
        }

        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }

        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    }

    function __generator(thisArg, body) {
      var _ = {
        label: 0,
        sent: function sent() {
          if (t[0] & 1) throw t[1];
          return t[1];
        },
        trys: [],
        ops: []
      },
          f,
          y,
          t,
          g;
      return g = {
        next: verb(0),
        "throw": verb(1),
        "return": verb(2)
      }, typeof Symbol === "function" && (g[Symbol.iterator] = function () {
        return this;
      }), g;

      function verb(n) {
        return function (v) {
          return step([n, v]);
        };
      }

      function step(op) {
        if (f) throw new TypeError("Generator is already executing.");

        while (_) {
          try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];

            switch (op[0]) {
              case 0:
              case 1:
                t = op;
                break;

              case 4:
                _.label++;
                return {
                  value: op[1],
                  done: false
                };

              case 5:
                _.label++;
                y = op[1];
                op = [0];
                continue;

              case 7:
                op = _.ops.pop();

                _.trys.pop();

                continue;

              default:
                if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                  _ = 0;
                  continue;
                }

                if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                  _.label = op[1];
                  break;
                }

                if (op[0] === 6 && _.label < t[1]) {
                  _.label = t[1];
                  t = op;
                  break;
                }

                if (t && _.label < t[2]) {
                  _.label = t[2];

                  _.ops.push(op);

                  break;
                }

                if (t[2]) _.ops.pop();

                _.trys.pop();

                continue;
            }

            op = body.call(thisArg, _);
          } catch (e) {
            op = [6, e];
            y = 0;
          } finally {
            f = t = 0;
          }
        }

        if (op[0] & 5) throw op[1];
        return {
          value: op[0] ? op[1] : void 0,
          done: true
        };
      }
    }

    function __createBinding(o, m, k, k2) {
      if (k2 === undefined) k2 = k;
      o[k2] = m[k];
    }

    function __exportStar(m, exports) {
      for (var p in m) {
        if (p !== "default" && !exports.hasOwnProperty(p)) exports[p] = m[p];
      }
    }

    function __values(o) {
      var s = typeof Symbol === "function" && Symbol.iterator,
          m = s && o[s],
          i = 0;
      if (m) return m.call(o);
      if (o && typeof o.length === "number") return {
        next: function next() {
          if (o && i >= o.length) o = void 0;
          return {
            value: o && o[i++],
            done: !o
          };
        }
      };
      throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
    }

    function __read(o, n) {
      var m = typeof Symbol === "function" && o[Symbol.iterator];
      if (!m) return o;
      var i = m.call(o),
          r,
          ar = [],
          e;

      try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) {
          ar.push(r.value);
        }
      } catch (error) {
        e = {
          error: error
        };
      } finally {
        try {
          if (r && !r.done && (m = i["return"])) m.call(i);
        } finally {
          if (e) throw e.error;
        }
      }

      return ar;
    }

    function __spread() {
      for (var ar = [], i = 0; i < arguments.length; i++) {
        ar = ar.concat(__read(arguments[i]));
      }

      return ar;
    }

    function __spreadArrays() {
      for (var s = 0, i = 0, il = arguments.length; i < il; i++) {
        s += arguments[i].length;
      }

      for (var r = Array(s), k = 0, i = 0; i < il; i++) {
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++) {
          r[k] = a[j];
        }
      }

      return r;
    }

    ;

    function __await(v) {
      return this instanceof __await ? (this.v = v, this) : new __await(v);
    }

    function __asyncGenerator(thisArg, _arguments, generator) {
      if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
      var g = generator.apply(thisArg, _arguments || []),
          i,
          q = [];
      return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () {
        return this;
      }, i;

      function verb(n) {
        if (g[n]) i[n] = function (v) {
          return new Promise(function (a, b) {
            q.push([n, v, a, b]) > 1 || resume(n, v);
          });
        };
      }

      function resume(n, v) {
        try {
          step(g[n](v));
        } catch (e) {
          settle(q[0][3], e);
        }
      }

      function step(r) {
        r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);
      }

      function fulfill(value) {
        resume("next", value);
      }

      function reject(value) {
        resume("throw", value);
      }

      function settle(f, v) {
        if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]);
      }
    }

    function __asyncDelegator(o) {
      var i, p;
      return i = {}, verb("next"), verb("throw", function (e) {
        throw e;
      }), verb("return"), i[Symbol.iterator] = function () {
        return this;
      }, i;

      function verb(n, f) {
        i[n] = o[n] ? function (v) {
          return (p = !p) ? {
            value: __await(o[n](v)),
            done: n === "return"
          } : f ? f(v) : v;
        } : f;
      }
    }

    function __asyncValues(o) {
      if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
      var m = o[Symbol.asyncIterator],
          i;
      return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () {
        return this;
      }, i);

      function verb(n) {
        i[n] = o[n] && function (v) {
          return new Promise(function (resolve, reject) {
            v = o[n](v), settle(resolve, reject, v.done, v.value);
          });
        };
      }

      function settle(resolve, reject, d, v) {
        Promise.resolve(v).then(function (v) {
          resolve({
            value: v,
            done: d
          });
        }, reject);
      }
    }

    function __makeTemplateObject(cooked, raw) {
      if (Object.defineProperty) {
        Object.defineProperty(cooked, "raw", {
          value: raw
        });
      } else {
        cooked.raw = raw;
      }

      return cooked;
    }

    ;

    function __importStar(mod) {
      if (mod && mod.__esModule) return mod;
      var result = {};
      if (mod != null) for (var k in mod) {
        if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
      }
      result["default"] = mod;
      return result;
    }

    function __importDefault(mod) {
      return mod && mod.__esModule ? mod : {
        "default": mod
      };
    }

    function __classPrivateFieldGet(receiver, privateMap) {
      if (!privateMap.has(receiver)) {
        throw new TypeError("attempted to get private field on non-instance");
      }

      return privateMap.get(receiver);
    }

    function __classPrivateFieldSet(receiver, privateMap, value) {
      if (!privateMap.has(receiver)) {
        throw new TypeError("attempted to set private field on non-instance");
      }

      privateMap.set(receiver, value);
      return value;
    }
    /***/

  }
}]);
//# sourceMappingURL=default~views-broker-broker-module~views-loan-processor-loan-processor-module-es5.js.map